id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classTGraph2D.html:20974,Availability,error,error,20974,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:21129,Availability,error,error,21129,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t Inheri",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:21306,Availability,error,error,21306,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:24939,Availability,error,error,24939,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:36154,Availability,error,errors,36154,"2D ; (; Int_t ; n). Graph2D constructor. ; The arrays fX, fY and fZ should be filled via calls to SetPoint ; Definition at line 382 of file TGraph2D.cxx. ◆ TGraph2D() [3/9]. TGraph2D::TGraph2D ; (; Int_t ; n, . Int_t * ; x, . Int_t * ; y, . Int_t * ; z . ). Graph2D constructor with three vectors of ints as input. ; Definition at line 264 of file TGraph2D.cxx. ◆ TGraph2D() [4/9]. TGraph2D::TGraph2D ; (; Int_t ; n, . Float_t * ; x, . Float_t * ; y, . Float_t * ; z . ). Graph2D constructor with three vectors of floats as input. ; Definition at line 281 of file TGraph2D.cxx. ◆ TGraph2D() [5/9]. TGraph2D::TGraph2D ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z . ). Graph2D constructor with three vectors of doubles as input. ; Definition at line 298 of file TGraph2D.cxx. ◆ TGraph2D() [6/9]. TGraph2D::TGraph2D ; (; TH2 * ; h2). Graph2D constructor with a TH2 (h2) as input. ; Only the h2's bins within the X and Y axis ranges are used. Empty bins, recognized when both content and errors are zero, are excluded. ; Definition at line 317 of file TGraph2D.cxx. ◆ TGraph2D() [7/9]. TGraph2D::TGraph2D ; (; const char * ; name, . const char * ; title, . Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z . ). Graph2D constructor with name, title and three vectors of doubles as input. ; name : name of 2D graph (avoid blanks) title : 2D graph title if title is of the form ""stringt;stringx;stringy;stringz"" the 2D graph title is set to stringt, the x axis title to stringx, the y axis title to stringy,etc ; Definition at line 363 of file TGraph2D.cxx. ◆ TGraph2D() [8/9]. TGraph2D::TGraph2D ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg"", . Option_t * ; option = """" . ). Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files) you can avoid using %*s to bypass this delimiter by expl",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:43088,Availability,avail,available,43088,"91 of file TGraph2D.cxx. ◆ FindObject() [2/2]. TObject * TGraph2D::FindObject ; (; const TObject * ; obj); const. overridevirtual . search object obj in the list of functions ; Reimplemented from TObject.; Definition at line 801 of file TGraph2D.cxx. ◆ Fit() [1/2]. TFitResultPtr TGraph2D::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """" . ). virtual . Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are automatically created by ROOT. ; fname can also be a formula, accepted by the linear fitter (linear parts divided by ""++"" sign), for example ""x++sin(y)"" for fitting ""[0]*x+[1]*sin(y)"" ; Definition at line 815 of file TGraph2D.cxx. ◆ Fit() [2/2]. TFitResultPtr TGraph2D::Fit ; (; TF2 * ; f2, . Option_t * ; option = """", . Option_t * ; goption = """" . ). virtual . Fits this 2D graph with function f2. ; f2 is an already predefined function created by TF2.; See TGraph::Fit for the available fitting options and fitting notes ; Definition at line 842 of file TGraph2D.cxx. ◆ FitPanel(). void TGraph2D::FitPanel ; (; ). virtual . Display a GUI panel with all graph fit options. ; See class TFitEditor for example ; Definition at line 861 of file TGraph2D.cxx. ◆ GetContourList(). TList * TGraph2D::GetContourList ; (; Double_t ; contour). Returns the X and Y graphs building a contour. ; A contour level may consist in several parts not connected to each other. This function returns them in a graphs' list. ; Definition at line 920 of file TGraph2D.cxx. ◆ GetDirectory(). TDirectory * TGraph2D::GetDirectory ; (; ); const. inline . Definition at line 108 of file TGraph2D.h. ◆ GetErrorX(). Double_t TGraph2D::GetErrorX ; (; Int_t ; bin); const. virtual . This function is called by Graph2DFitChisquare. ; It always returns a negative value. Real implementation in TGraph2DErrors ; Reimplemented in TGraph2DAsymmErrors, and TGraph2DErrors.; Definition at line 939 of file TGraph2D.cxx. ◆ GetErrorY(). Double_t TGr",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:12700,Energy Efficiency,allocate,allocated,12700,"h2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2 (h2) as input. ;  ;  ~TGraph2D () override;  TGraph2D destructor. ;  ; virtual void Add (TF2 *f, Double_t c1=1);  Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z);  Append a new point to the graph. ;  ; virtual void Apply (TF2 *f);  Apply function f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ;  ; void Browse (TBrowser *) override;  Browse. ;  ; void Clear (Option_t *option="""") override;  Free all memory allocated by this object. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the graph to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point px,py to a graph. ;  ; void Draw (Option_t *option=""P0"") override;  Specific drawing options can be used to paint a TGraph2D: ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Executes action corresponding to one event. ;  ; TObject * FindObject (const char *name) const override;  search object named name in the list of functions ;  ; TObject * FindObject (const TObject *obj) const override;  search object obj in the list of functions ;  ; virtual TFitResultPtr Fit (const char *formula, Option_t *option="""", Option_t *goption="""");  Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are automatically created by ROOT. ;  ; virtual TFitResultPtr Fit (TF2 *f2, Option_t *option",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:39362,Energy Efficiency,allocate,allocated,39362,"tion f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ; Definition at line 658 of file TGraph2D.cxx. ◆ Browse(). void TGraph2D::Browse ; (; TBrowser * ; ). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 671 of file TGraph2D.cxx. ◆ Build(). void TGraph2D::Build ; (; Int_t ; n). protected . Creates the 2D graph basic data structure. ; Definition at line 602 of file TGraph2D.cxx. ◆ Class(). static TClass * TGraph2D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TGraph2D.h. ◆ Clear(). void TGraph2D::Clear ; (; Option_t * ; option = """"). overridevirtual . Free all memory allocated by this object. ; Reimplemented from TObject.; Definition at line 681 of file TGraph2D.cxx. ◆ CreateInterpolator(). void TGraph2D::CreateInterpolator ; (; Bool_t ; oldInterp). private . Add a TGraphDelaunay in the list of the fHistogram's functions. ; Definition at line 968 of file TGraph2D.cxx. ◆ DeclFileName(). static const char * TGraph2D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TGraph2D.h. ◆ DirectoryAutoAdd(). void TGraph2D::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Perform the automatic addition of the graph to the given directory. ; Note this function is called in place when the semantic requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 715 of file TGraph2D.cxx. ◆ DistancetoPrimitive(). Int_t TGraph2D::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Computes distance from point px,py ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:16408,Integrability,depend,depending,16408,";  ; TAxis * GetYaxis () const;  Get y axis of the graph. ;  ; Double_t GetYmax () const;  Returns the Y maximum. ;  ; virtual Double_t GetYmaxE () const;  ; Double_t GetYmin () const;  Returns the Y minimum. ;  ; virtual Double_t GetYminE () const;  ; Double_t * GetZ () const;  ; TAxis * GetZaxis () const;  Get z axis of the graph. ;  ; Double_t GetZmax () const;  Returns the Z maximum. ;  ; virtual Double_t GetZmaxE () const;  ; Double_t GetZmin () const;  Returns the Z minimum. ;  ; virtual Double_t GetZminE () const;  ; Double_t Interpolate (Double_t x, Double_t y);  Finds the z value at the position (x,y) thanks to the Delaunay interpolation. ;  ; TClass * IsA () const override;  ; TGraph2D & operator= (const TGraph2D &);  Graph2D operator ""="". ;  ; void Paint (Option_t *option="""") override;  Paints this 2D graph with its current attributes. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph values. ;  ; TH1 * Project (Option_t *option=""x"") const;  Projects a 2-d graph into 1 or 2-d histograms depending on the option parameter. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Saves primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1., Option_t *option=""z"");  Multiply the values of a TGraph2D by a constant c1. ;  ; virtual void Set (Int_t n);  Set number of points in the 2D graph. ;  ; virtual void SetDirectory (TDirectory *dir);  By default when an 2D graph is created, it is added to the list of 2D graph objects in the current directory in memory. ;  ; virtual void SetHistogram (TH2 *h, Option_t *option="""");  Sets the histogram to be filled. ;  ; void SetMargin (Double_t m=0.1);  Sets the extra space (in %) around interpolated area for the 2D histogram. ;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the marg",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:20891,Integrability,message,message,20891,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:21312,Integrability,message,message,21312,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:22102,Integrability,message,message,22102,"method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:24945,Integrability,message,message,24945,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:25318,Integrability,message,message,25318,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:46777,Integrability,rout,routine,46777,"of file TGraph2D.h. ◆ GetEZhigh(). virtual Double_t * TGraph2D::GetEZhigh ; (; ); const. inlinevirtual . Reimplemented in TGraph2DAsymmErrors.; Definition at line 134 of file TGraph2D.h. ◆ GetEZlow(). virtual Double_t * TGraph2D::GetEZlow ; (; ); const. inlinevirtual . Reimplemented in TGraph2DAsymmErrors.; Definition at line 133 of file TGraph2D.h. ◆ GetHistogram(). TH2D * TGraph2D::GetHistogram ; (; Option_t * ; option = """"). By default returns a pointer to the Delaunay histogram. ; If fHistogram doesn't exist, books the 2D histogram fHistogram with a margin around the hull. Calls TGraphDelaunay::Interpolate at each bin centre to build up an interpolated 2D histogram.; If the ""empty"" option is selected, returns an empty histogram booked with the limits of fX, fY and fZ. This option is used when the data set is drawn with markers only. In that particular case there is no need to find the Delaunay triangles.; By default use the new interpolation routine based on Triangles If the option ""old"" the old interpolation is used ; Definition at line 1003 of file TGraph2D.cxx. ◆ GetListOfFunctions(). TList * TGraph2D::GetListOfFunctions ; (; ); const. inline . Definition at line 112 of file TGraph2D.h. ◆ GetMargin(). Double_t TGraph2D::GetMargin ; (; ); const. inline . Definition at line 116 of file TGraph2D.h. ◆ GetMaximum(). Double_t TGraph2D::GetMaximum ; (; ); const. inline . Definition at line 117 of file TGraph2D.h. ◆ GetMinimum(). Double_t TGraph2D::GetMinimum ; (; ); const. inline . Definition at line 118 of file TGraph2D.h. ◆ GetN(). Int_t TGraph2D::GetN ; (; ); const. inline . Definition at line 122 of file TGraph2D.h. ◆ GetNpx(). Int_t TGraph2D::GetNpx ; (; ); const. inline . Definition at line 109 of file TGraph2D.h. ◆ GetNpy(). Int_t TGraph2D::GetNpy ; (; ); const. inline . Definition at line 110 of file TGraph2D.h. ◆ GetPoint(). Int_t TGraph2D::GetPoint ; (; Int_t ; i, . Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ); const. virtual . Get x, y and z valu",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:51701,Integrability,depend,depending,51701,"ition at line 1233 of file TGraph2D.cxx. ◆ IsA(). TClass * TGraph2D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGraph2DAsymmErrors, and TGraph2DErrors.; Definition at line 171 of file TGraph2D.h. ◆ operator=(). TGraph2D & TGraph2D::operator= ; (; const TGraph2D & ; g). Graph2D operator ""="". ; Definition at line 557 of file TGraph2D.cxx. ◆ Paint(). void TGraph2D::Paint ; (; Option_t * ; option = """"). overridevirtual . Paints this 2D graph with its current attributes. ; Reimplemented from TObject.; Definition at line 1270 of file TGraph2D.cxx. ◆ Print(). void TGraph2D::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph values. ; Reimplemented from TObject.; Reimplemented in TGraph2DAsymmErrors, and TGraph2DErrors.; Definition at line 1312 of file TGraph2D.cxx. ◆ Project(). TH1 * TGraph2D::Project ; (; Option_t * ; option = ""x""); const. Projects a 2-d graph into 1 or 2-d histograms depending on the option parameter. ; option may contain a combination of the characters x,y,z:. option = ""x"" return the x projection into a TH1D histogram; option = ""y"" return the y projection into a TH1D histogram; option = ""xy"" return the x versus y projection into a TH2D histogram; option = ""yx"" return the y versus x projection into a TH2D histogram . Definition at line 1329 of file TGraph2D.cxx. ◆ RemovePoint(). Int_t TGraph2D::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 1416 of file TGraph2D.cxx. ◆ SavePrimitive(). void TGraph2D::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Saves primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 1452 of file TGraph2D.cxx. ◆ Scale(). void TGraph2D::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). virtual . Multiply the values of a TGraph2D by a constant c1. ; If option contains ""x"" the x va",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:54190,Integrability,rout,routine,54190,"ine 1528 of file TGraph2D.cxx. ◆ SetDirectory(). void TGraph2D::SetDirectory ; (; TDirectory * ; dir). virtual . By default when an 2D graph is created, it is added to the list of 2D graph objects in the current directory in memory. ; This method removes reference to this 2D graph from current directory and add reference to new directory dir. dir can be 0 in which case the 2D graph does not belong to any directory. ; Definition at line 1544 of file TGraph2D.cxx. ◆ SetHistogram(). void TGraph2D::SetHistogram ; (; TH2 * ; h, . Option_t * ; option = """" . ). virtual . Sets the histogram to be filled. ; If the 2D graph needs to be save in a TFile the following set should be followed to read it back:; Create TGraph2D; Call g->SetHistogram(h), and do whatever you need to do; Save g and h to the TFile, exit; Open the TFile, retrieve g and h; Call h->SetDirectory(0); Call g->SetHistogram(h) again; Carry on as normal. By default use the new interpolation routine based on Triangles If the option ""old"" the old interpolation is used ; Definition at line 1568 of file TGraph2D.cxx. ◆ SetMargin(). void TGraph2D::SetMargin ; (; Double_t ; m = 0.1). Sets the extra space (in %) around interpolated area for the 2D histogram. ; Definition at line 1585 of file TGraph2D.cxx. ◆ SetMarginBinsContent(). void TGraph2D::SetMarginBinsContent ; (; Double_t ; z = 0.). Sets the histogram bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the margin. ; Definition at line 1605 of file TGraph2D.cxx. ◆ SetMaximum(). void TGraph2D::SetMaximum ; (; Double_t ; maximum = -1111). Set maximum. ; Definition at line 1619 of file TGraph2D.cxx. ◆ SetMaxIter(). void TGraph2D::SetMaxIter ; (; Int_t ; n = 100000). inline . Definition at line 162 of file TGraph2D.h. ◆ SetMinimum(). void TGraph2D::SetMinimum ; (; Double_t ; minimum = -1111). Set minimum. ; Definition at line 1630 of file TGraph2D.cxx. ◆ SetName(). void TGraph2D::SetName ; (; const char * ; name). overridevirtual . Cha",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:1800,Modifiability,extend,extended,1800,"x, y, and z: auto g = new TGraph2D(n, x, y, z);; g#define g(i)Definition RSha256.hxx:105; TGraph2D::TGraph2DTGraph2D()Graph2D default constructor.Definition TGraph2D.cxx:238; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; x, y, z arrays can be doubles, floats, or ints.; With an array's dimension only: auto g = new TGraph2D(n);; The internal arrays are then filled with SetPoint(). The following line fills the internal arrays at the position i with the values x, y, z. g->SetPoint(i, x, y, z);. Without parameters: auto g = new TGraph2D();; again SetPoint() must be used to fill the internal arrays.; From a file: auto g = new TGraph2D(""graph.dat"");; Arrays are read from the ASCII file ""graph.dat"" according to a specifies format. The default format is %lg %lg %lg. Note that in any of these three cases, SetPoint() can be used to change a data point or add a new one. If the data point index (i) is greater than the current size of the internal arrays, they are automatically extended.; Like TGraph some TGraph2D constructors do not have the TGraph2D title and name as parameters. For these constructors TGraph2D has the default title and name ""Graph2D"". To change the default title and name SetTitle and SetName should be called on the TGraph2D after its creation. Drawing options; Specific drawing options can be used to paint a TGraph2D:. Option Description . ""TRI"" The Delaunay triangles are drawn using filled area. An hidden surface drawing technique is used. The surface is painted with the current fill area color. The edges of each triangles are painted with the current line color. . ""TRIW"" The Delaunay triangles are drawn as wire frame. . ""TRI1"" The Delaunay triangles are painted with color levels. The edges of each triangles are painted with the current line color. . ""TRI2"" The Delaunay triangles are painted with color levels. . ""P"" Draw a marker at each vertex. . ""P0"" Draw a circle at each vertex. Each circ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:18263,Modifiability,inherit,inherited,18263,"am bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the margin. ;  ; void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; void SetMaxIter (Int_t n=100000);  ; void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void SetName (const char *name) override;  Changes the name of this 2D graph. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this 2D graph. ;  ; void SetNpx (Int_t npx=40);  Sets the number of bins along X used to draw the function. ;  ; void SetNpy (Int_t npx=40);  Sets the number of bins along Y used to draw the function. ;  ; virtual void SetPoint (Int_t point, Double_t x, Double_t y, Double_t z);  Sets point number n. ;  ; void SetTitle (const char *title="""") override;  Sets the 2D graph title. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:19728,Modifiability,inherit,inherited,19728,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:20521,Modifiability,inherit,inheritance,20521,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:22200,Modifiability,inherit,inherits,22200,"ject with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:22317,Modifiability,inherit,inherits,22317,"const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:25625,Modifiability,inherit,inherited,25625,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:27130,Modifiability,inherit,inherited,27130,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:28385,Modifiability,inherit,inherited,28385,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:29999,Modifiability,inherit,inherited,29999,"ual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:30209,Modifiability,inherit,inherited,30209,"ual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:30727,Modifiability,inherit,inherited,30727,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:30939,Modifiability,inherit,inherited,30939,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:31151,Modifiability,inherit,inherited,31151,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:31781,Modifiability,inherit,inherited,31781,"on_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of f",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:33091,Modifiability,inherit,inherited,33091,"; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EStatusBits { kOldInterpolation = (1ULL << ( 15 )); };  . Private Member Functions; void CreateInterpolator (Bool_t oldInterp);  Add a TGraphDelaunay in the list of the fHistogram's functions. ;  . Private Attributes; Bool_t fUserHisto;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:33173,Modifiability,inherit,inherited,33173,"; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EStatusBits { kOldInterpolation = (1ULL << ( 15 )); };  . Private Member Functions; void CreateInterpolator (Bool_t oldInterp);  Add a TGraphDelaunay in the list of the fHistogram's functions. ;  . Private Attributes; Bool_t fUserHisto;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , ",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:33334,Modifiability,inherit,inherited,33334,"ea for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EStatusBits { kOldInterpolation = (1ULL << ( 15 )); };  . Private Member Functions; void CreateInterpolator (Bool_t oldInterp);  Add a TGraphDelaunay in the list of the fHistogram's functions. ;  . Private Attributes; Bool_t fUserHisto;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1U",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:33467,Modifiability,inherit,inherited,33467," find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EStatusBits { kOldInterpolation = (1ULL << ( 15 )); };  . Private Member Functions; void CreateInterpolator (Bool_t oldInterp);  Add a TGraphDelaunay in the list of the fHistogram's functions. ;  . Private Attributes; Bool_t fUserHisto;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu =",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:33922,Modifiability,inherit,inherited,33922,"_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EStatusBits { kOldInterpolation = (1ULL << ( 15 )); };  . Private Member Functions; void CreateInterpolator (Bool_t oldInterp);  Add a TGraphDelaunay in the list of the fHistogram's functions. ;  . Private Attributes; Bool_t fUserHisto;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGraph2D.h>. Inheritance diagram for TGraph2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TGraph2D::EStatusBits. private . EnumeratorkOldInterpolation . Definition at line 69 of file TGraph2D.h. Constructor & Destructor Documentation",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:34563,Modifiability,inherit,inherited,34563,"rkerStyle;  Marker style. ;  . Private Types; enum  EStatusBits { kOldInterpolation = (1ULL << ( 15 )); };  . Private Member Functions; void CreateInterpolator (Bool_t oldInterp);  Add a TGraphDelaunay in the list of the fHistogram's functions. ;  . Private Attributes; Bool_t fUserHisto;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGraph2D.h>. Inheritance diagram for TGraph2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TGraph2D::EStatusBits. private . EnumeratorkOldInterpolation . Definition at line 69 of file TGraph2D.h. Constructor & Destructor Documentation. ◆ TGraph2D() [1/9]. TGraph2D::TGraph2D ; (; ). Graph2D default constructor. ; Definition at line 238 of file TGraph2D.cxx. ◆ TGraph2D() [2/9]. TGraph2D::TGraph2D ; (; Int_t ; n). Graph2D constructor. ; The arrays fX, fY and fZ should be filled via calls to SetPoint ; Definition at line 382 of file TGraph2D.cxx. ◆ TGraph2D() [3/9]. TGraph2D::TGraph2D ; (; Int_t ; n, . Int_t * ; x, . Int_t * ; y, . Int_t * ; z . ). Graph2D constructor with three vectors of ints as input. ; Definition at line 264 of file TGraph2D.cxx. ◆ TGraph2D() [4/9]. TGraph2D::TGraph2D ; (; Int_t ; n, . Float_t * ; x, . Floa",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:56114,Modifiability,extend,extended,56114,"). Set minimum. ; Definition at line 1630 of file TGraph2D.cxx. ◆ SetName(). void TGraph2D::SetName ; (; const char * ; name). overridevirtual . Changes the name of this 2D graph. ; Reimplemented from TNamed.; Definition at line 1641 of file TGraph2D.cxx. ◆ SetNameTitle(). void TGraph2D::SetNameTitle ; (; const char * ; name, . const char * ; title . ). overridevirtual . Change the name and title of this 2D graph. ; Reimplemented from TNamed.; Definition at line 1655 of file TGraph2D.cxx. ◆ SetNpx(). void TGraph2D::SetNpx ; (; Int_t ; npx = 40). Sets the number of bins along X used to draw the function. ; Definition at line 1669 of file TGraph2D.cxx. ◆ SetNpy(). void TGraph2D::SetNpy ; (; Int_t ; npx = 40). Sets the number of bins along Y used to draw the function. ; Definition at line 1691 of file TGraph2D.cxx. ◆ SetPoint(). void TGraph2D::SetPoint ; (; Int_t ; n, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). virtual . Sets point number n. ; If n is greater than the current size, the arrays are automatically extended. ; Reimplemented in TGraph2DAsymmErrors, and TGraph2DErrors.; Definition at line 1715 of file TGraph2D.cxx. ◆ SetTitle(). void TGraph2D::SetTitle ; (; const char * ; title = """"). overridevirtual . Sets the 2D graph title. ; This method allows to change the global title and the axis' titles of a 2D graph. If g is the 2D graph one can do:; g->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");. Reimplemented from TNamed.; Definition at line 1762 of file TGraph2D.cxx. ◆ Streamer(). void TGraph2D::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TGraph2DAsymmErrors, and TGraph2DErrors.; Definition at line 1772 of file TGraph2D.cxx. ◆ StreamerNVirtual(). void TGraph2D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 171 of file TGraph2D.h. Member Data Documentation. ◆ fDelaunay. TObject* TGraph2D::fDelaunay. protected . ! Po",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:36495,Safety,avoid,avoid,36495,"Float_t * ; z . ). Graph2D constructor with three vectors of floats as input. ; Definition at line 281 of file TGraph2D.cxx. ◆ TGraph2D() [5/9]. TGraph2D::TGraph2D ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z . ). Graph2D constructor with three vectors of doubles as input. ; Definition at line 298 of file TGraph2D.cxx. ◆ TGraph2D() [6/9]. TGraph2D::TGraph2D ; (; TH2 * ; h2). Graph2D constructor with a TH2 (h2) as input. ; Only the h2's bins within the X and Y axis ranges are used. Empty bins, recognized when both content and errors are zero, are excluded. ; Definition at line 317 of file TGraph2D.cxx. ◆ TGraph2D() [7/9]. TGraph2D::TGraph2D ; (; const char * ; name, . const char * ; title, . Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z . ). Graph2D constructor with name, title and three vectors of doubles as input. ; name : name of 2D graph (avoid blanks) title : 2D graph title if title is of the form ""stringt;stringx;stringy;stringz"" the 2D graph title is set to stringt, the x axis title to stringx, the y axis title to stringy,etc ; Definition at line 363 of file TGraph2D.cxx. ◆ TGraph2D() [8/9]. TGraph2D::TGraph2D ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg"", . Option_t * ; option = """" . ). Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files) you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';') used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1""). Note in that case, the instantiation is about 2 times slower. ; Definition at line 403 of file TGraph2D.cxx. ◆ TGraph2D() [9/9]. TGraph2D::TGraph2D ; (; const TGraph2D & ; g). Graph2D copy constructor. ; copy everything apart from the list of contained f",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:37098,Safety,avoid,avoid,37098,"zed when both content and errors are zero, are excluded. ; Definition at line 317 of file TGraph2D.cxx. ◆ TGraph2D() [7/9]. TGraph2D::TGraph2D ; (; const char * ; name, . const char * ; title, . Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z . ). Graph2D constructor with name, title and three vectors of doubles as input. ; name : name of 2D graph (avoid blanks) title : 2D graph title if title is of the form ""stringt;stringx;stringy;stringz"" the 2D graph title is set to stringt, the x axis title to stringx, the y axis title to stringy,etc ; Definition at line 363 of file TGraph2D.cxx. ◆ TGraph2D() [8/9]. TGraph2D::TGraph2D ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg"", . Option_t * ; option = """" . ). Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files) you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';') used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1""). Note in that case, the instantiation is about 2 times slower. ; Definition at line 403 of file TGraph2D.cxx. ◆ TGraph2D() [9/9]. TGraph2D::TGraph2D ; (; const TGraph2D & ; g). Graph2D copy constructor. ; copy everything apart from the list of contained functions ; Definition at line 522 of file TGraph2D.cxx. ◆ ~TGraph2D(). TGraph2D::~TGraph2D ; (; ). override . TGraph2D destructor. ; Definition at line 548 of file TGraph2D.cxx. Member Function Documentation. ◆ Add(). void TGraph2D::Add ; (; TF2 * ; f, . Double_t ; c1 = 1 . ). virtual . Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ; Parameters. fmay be a 2-D function TF2 or 3-d function TF3 ; c1a scaling factor, 1 by default . Definition at line 642 of file TGraph2D.cxx. ◆ AddPoint(). virtual void",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:4041,Security,access,accessed,4041,"histogram (like COL, SURF, LEGO, CONT etc..).; When a TGraph2D is drawn with one of the 2D histogram drawing option, an intermediate 2D histogram is filled using the Delaunay triangles to interpolate the data set. The 2D histogram has equidistant bins along the X and Y directions. The number of bins along each direction can be change using SetNpx() and SetNpy(). Each bin is filled with the Z value found via a linear interpolation on the plane defined by the triangle above the (X,Y) coordinates of the bin center.; The existing (X,Y,Z) points can be randomly scattered. The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then used to define flat planes in (X,Y,Z) over which the interpolation is done to fill the 2D histogram. The 3D triangles int takes build a 3D surface in the form of tessellating triangles at various angles. The triangles found can be drawn in 3D with one of the TGraph2D specific drawing options.; The histogram generated by the Delaunay interpolation can be accessed using the GetHistogram() method.; The axis settings (title, ranges etc ...) can be changed accessing the axis via the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created at drawing time only. Therefore they should called after the TGraph2D is drawn:; auto g = new TGraph2D();; ; [...]; ; g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; gPad#define gPadDefinition TVirtualPad.h:308. Examples. SURF1 Example; {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; c#define c(i)Definition RSha256.hxx:101; N#define N; npOption_t Option_t TPoint TPoint const char GetT",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:4141,Security,access,accessing,4141," histogram is filled using the Delaunay triangles to interpolate the data set. The 2D histogram has equidistant bins along the X and Y directions. The number of bins along each direction can be change using SetNpx() and SetNpy(). Each bin is filled with the Z value found via a linear interpolation on the plane defined by the triangle above the (X,Y) coordinates of the bin center.; The existing (X,Y,Z) points can be randomly scattered. The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then used to define flat planes in (X,Y,Z) over which the interpolation is done to fill the 2D histogram. The 3D triangles int takes build a 3D surface in the form of tessellating triangles at various angles. The triangles found can be drawn in 3D with one of the TGraph2D specific drawing options.; The histogram generated by the Delaunay interpolation can be accessed using the GetHistogram() method.; The axis settings (title, ranges etc ...) can be changed accessing the axis via the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created at drawing time only. Therefore they should called after the TGraph2D is drawn:; auto g = new TGraph2D();; ; [...]; ; g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; gPad#define gPadDefinition TVirtualPad.h:308. Examples. SURF1 Example; {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; c#define c(i)Definition RSha256.hxx:101; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t W",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:4213,Security,access,access,4213,"a set. The 2D histogram has equidistant bins along the X and Y directions. The number of bins along each direction can be change using SetNpx() and SetNpy(). Each bin is filled with the Z value found via a linear interpolation on the plane defined by the triangle above the (X,Y) coordinates of the bin center.; The existing (X,Y,Z) points can be randomly scattered. The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then used to define flat planes in (X,Y,Z) over which the interpolation is done to fill the 2D histogram. The 3D triangles int takes build a 3D surface in the form of tessellating triangles at various angles. The triangles found can be drawn in 3D with one of the TGraph2D specific drawing options.; The histogram generated by the Delaunay interpolation can be accessed using the GetHistogram() method.; The axis settings (title, ranges etc ...) can be changed accessing the axis via the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created at drawing time only. Therefore they should called after the TGraph2D is drawn:; auto g = new TGraph2D();; ; [...]; ; g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; gPad#define gPadDefinition TVirtualPad.h:308. Examples. SURF1 Example; {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; c#define c(i)Definition RSha256.hxx:101; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rect",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2D.html:19131,Security,hash,hash,19131," (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2D.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:348,Availability,error,errors,348,". ROOT: TGraph2DAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DAsymmErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextCo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:410,Availability,error,errors,410,". ROOT: TGraph2DAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DAsymmErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextCo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:531,Availability,error,error,531,". ROOT: TGraph2DAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DAsymmErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextCo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:1482,Availability,error,error,1482," a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGW",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:3908,Availability,error,errorbars,3908,"is is the base class for the ROOT Random number generators.Definition TRandom.h:27; double; int. Definition at line 26 of file TGraph2DAsymmErrors.h. Public Member Functions;  TGraph2DAsymmErrors ();  TGraph2DAsymmErrors default constructor. ;  ;  TGraph2DAsymmErrors (const TGraph2DAsymmErrors &);  Copy constructor. ;  ;  TGraph2DAsymmErrors (Int_t n);  TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DAsymmErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns t",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4014,Availability,error,error,4014,"line 26 of file TGraph2DAsymmErrors.h. Public Member Functions;  TGraph2DAsymmErrors ();  TGraph2DAsymmErrors default constructor. ;  ;  TGraph2DAsymmErrors (const TGraph2DAsymmErrors &);  Copy constructor. ;  ;  TGraph2DAsymmErrors (Int_t n);  TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DAsymmErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const ov",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4160,Availability,error,error,4160,"ructor. ;  ;  TGraph2DAsymmErrors (const TGraph2DAsymmErrors &);  Copy constructor. ;  ;  TGraph2DAsymmErrors (Int_t n);  TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DAsymmErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () con",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4247,Availability,error,error,4247,"  TGraph2DAsymmErrors (Int_t n);  TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DAsymmErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const ove",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4347,Availability,error,error,4347,"mErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4493,Availability,error,error,4493,"r, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Ret",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4580,Availability,error,error,4580,"="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4680,Availability,error,error,4680,"mmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () c",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4826,Availability,error,error,4826," Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything excep",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4913,Availability,error,error,4913,"th asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D grap",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5264,Availability,error,errors,5264,"uble_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmError",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5342,Availability,error,errors,5342,"onst override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point numb",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5420,Availability,error,errors,5420," average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Do",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5498,Availability,error,errors,5498,") const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t ezl, Double_t ezh);  Set ex, ey and ez valu",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5576,Availability,error,errors,5576,"w (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t ezl, Double_t ezh);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an obj",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5654,Availability,error,errors,5654,"tErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t ezl, Double_t ezh);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DAsymmErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDe",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:5901,Availability,error,errors,5901,"rorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t ezl, Double_t ezh);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DAsymmErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:6075,Availability,error,errors,6075,"; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t ezl, Double_t ezh);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DAsymmErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ;  ;  TGraph2D (const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D construc",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:15208,Availability,error,error,15208,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:15297,Availability,error,error,15297,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:15452,Availability,error,error,15452,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t Inheri",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:15629,Availability,error,error,15629,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:19262,Availability,error,error,19262,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26269,Availability,error,errors,26269,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26337,Availability,error,errors,26337,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26407,Availability,error,errors,26407,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26475,Availability,error,errors,26475,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26545,Availability,error,errors,26545,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26613,Availability,error,errors,26613,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:31210,Availability,error,errorbars,31210,"ouble_t * ; eyl = nullptr, . Double_t * ; eyh = nullptr, . Double_t * ; ezl = nullptr, . Double_t * ; ezh = nullptr, . Option_t * ; option = """" . ). TGraph2DAsymmErrors constructor with doubles vectors as input. ; Definition at line 123 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [4/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; const TGraph2DAsymmErrors & ; g). Copy constructor. ; Copy everything except list of functions ; Definition at line 172 of file TGraph2DAsymmErrors.cxx. ◆ ~TGraph2DAsymmErrors(). TGraph2DAsymmErrors::~TGraph2DAsymmErrors ; (; ). override . TGraph2DAsymmErrors destructor. ; Definition at line 158 of file TGraph2DAsymmErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraph2DAsymmErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; z, . Double_t ; exl = 0., . Double_t ; exh = 0., . Double_t ; eyl = 0., . Double_t ; eyh = 0., . Double_t ; ezl = 0., . Double_t ; ezh = 0. . ). virtual . Add a 3D point with asymmetric errorbars to an existing graph. ; Definition at line 235 of file TGraph2DAsymmErrors.cxx. ◆ Class(). static TClass * TGraph2DAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmError",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32046,Availability,error,error,32046,"ouble_t ; eyl = 0., . Double_t ; eyh = 0., . Double_t ; ezl = 0., . Double_t ; ezh = 0. . ). virtual . Add a 3D point with asymmetric errorbars to an existing graph. ; Definition at line 235 of file TGraph2DAsymmErrors.cxx. ◆ Class(). static TClass * TGraph2DAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetEr",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32321,Availability,error,error,32321, * TGraph2DAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32506,Availability,error,error,32506,his class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 31,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32710,Availability,error,error,32710,tic const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 315 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZhigh(). Double_t TGraph2DAsymmErrors::GetErrorZhigh ; (; Int_t ; i); const. Returns the high error along Z at point i. ; Definition at line 338 of file TGraph2DAsymmErrors.cxx. ◆ GetEr,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32985,Availability,error,error,32985,t_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 315 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZhigh(). Double_t TGraph2DAsymmErrors::GetErrorZhigh ; (; Int_t ; i); const. Returns the high error along Z at point i. ; Definition at line 338 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZlow(). Double_t TGraph2DAsymmErrors::GetErrorZlow ; (; Int_t ; i); const. Returns the low error along Z at point i. ; Definition at line 328 of file TGraph2DAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraph2DAsymmErrors::GetEXhigh ; (; ); const.,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:33170,Availability,error,error,33170, line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 315 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZhigh(). Double_t TGraph2DAsymmErrors::GetErrorZhigh ; (; Int_t ; i); const. Returns the high error along Z at point i. ; Definition at line 338 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZlow(). Double_t TGraph2DAsymmErrors::GetErrorZlow ; (; Int_t ; i); const. Returns the low error along Z at point i. ; Definition at line 328 of file TGraph2DAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraph2DAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 62 of file TGraph2DAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraph2DAsymmErrors::GetEXlow ; (; ); const. inlineo,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:33374,Availability,error,error,33374, ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 315 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZhigh(). Double_t TGraph2DAsymmErrors::GetErrorZhigh ; (; Int_t ; i); const. Returns the high error along Z at point i. ; Definition at line 338 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZlow(). Double_t TGraph2DAsymmErrors::GetErrorZlow ; (; Int_t ; i); const. Returns the low error along Z at point i. ; Definition at line 328 of file TGraph2DAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraph2DAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 62 of file TGraph2DAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraph2DAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraph2DAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Defi,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:33649,Availability,error,error,33649,t_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 315 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZhigh(). Double_t TGraph2DAsymmErrors::GetErrorZhigh ; (; Int_t ; i); const. Returns the high error along Z at point i. ; Definition at line 338 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZlow(). Double_t TGraph2DAsymmErrors::GetErrorZlow ; (; Int_t ; i); const. Returns the low error along Z at point i. ; Definition at line 328 of file TGraph2DAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraph2DAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 62 of file TGraph2DAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraph2DAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraph2DAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 64 of file TGraph2DAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraph2DAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 63 of file TGraph2DAsymmErrors.h. ◆ GetEZhigh(). Double_t,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:33834,Availability,error,error,33834, line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraph2DAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. Returns the low error along Y at point i. ; Definition at line 294 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DAsymmErrors::GetErrorZ ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Z at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 315 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZhigh(). Double_t TGraph2DAsymmErrors::GetErrorZhigh ; (; Int_t ; i); const. Returns the high error along Z at point i. ; Definition at line 338 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorZlow(). Double_t TGraph2DAsymmErrors::GetErrorZlow ; (; Int_t ; i); const. Returns the low error along Z at point i. ; Definition at line 328 of file TGraph2DAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraph2DAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 62 of file TGraph2DAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraph2DAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraph2DAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 64 of file TGraph2DAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraph2DAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 63 of file TGraph2DAsymmErrors.h. ◆ GetEZhigh(). Double_t * TGraph2DAsymmErrors::GetEZhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 66 of file TGraph2DAsymmErrors.h. ◆ GetEZlow(). Double_t * TGra,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:35099,Availability,error,errors,35099,rrors.h. ◆ GetEXlow(). Double_t * TGraph2DAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraph2DAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 64 of file TGraph2DAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraph2DAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 63 of file TGraph2DAsymmErrors.h. ◆ GetEZhigh(). Double_t * TGraph2DAsymmErrors::GetEZhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 66 of file TGraph2DAsymmErrors.h. ◆ GetEZlow(). Double_t * TGraph2DAsymmErrors::GetEZlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 65 of file TGraph2DAsymmErrors.h. ◆ GetXmaxE(). Double_t TGraph2DAsymmErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:35308,Availability,error,errors,35308, * TGraph2DAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 64 of file TGraph2DAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraph2DAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 63 of file TGraph2DAsymmErrors.h. ◆ GetEZhigh(). Double_t * TGraph2DAsymmErrors::GetEZhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 66 of file TGraph2DAsymmErrors.h. ◆ GetEZlow(). Double_t * TGraph2DAsymmErrors::GetEZlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 65 of file TGraph2DAsymmErrors.h. ◆ GetXmaxE(). Double_t TGraph2DAsymmErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. ,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:35517,Availability,error,errors,35517,w ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 63 of file TGraph2DAsymmErrors.h. ◆ GetEZhigh(). Double_t * TGraph2DAsymmErrors::GetEZhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 66 of file TGraph2DAsymmErrors.h. ◆ GetEZlow(). Double_t * TGraph2DAsymmErrors::GetEZlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 65 of file TGraph2DAsymmErrors.h. ◆ GetXmaxE(). Double_t TGraph2DAsymmErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::op,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:35726,Availability,error,errors,35726,evirtual . Reimplemented from TGraph2D.; Definition at line 66 of file TGraph2DAsymmErrors.h. ◆ GetEZlow(). Double_t * TGraph2DAsymmErrors::GetEZlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 65 of file TGraph2DAsymmErrors.h. ◆ GetXmaxE(). Double_t TGraph2DAsymmErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:35935,Availability,error,errors,35935,"raph2D.; Definition at line 65 of file TGraph2DAsymmErrors.h. ◆ GetXmaxE(). Double_t TGraph2DAsymmErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:36144,Availability,error,errors,36144,"h2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Opti",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:36792,Availability,error,errors,36792,"of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 431 of file TGraph2DAsymmErrors.cxx. ◆ Set(). void TGraph2DAsymmErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0.",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:37203,Availability,error,errors,37203,"TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 431 of file TGraph2DAsymmErrors.cxx. ◆ Set(). void TGraph2DAsymmErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 466 of file TGraph2DAsymmErrors.cxx. ◆ SetPoint(). void TGraph2DAsymmErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:37295,Availability,error,errors,37295," Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 431 of file TGraph2DAsymmErrors.cxx. ◆ Set(). void TGraph2DAsymmErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 466 of file TGraph2DAsymmErrors.cxx. ◆ SetPoint(). void TGraph2DAsymmErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Defini",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:37353,Availability,error,errors,37353," Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 431 of file TGraph2DAsymmErrors.cxx. ◆ Set(). void TGraph2DAsymmErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 466 of file TGraph2DAsymmErrors.cxx. ◆ SetPoint(). void TGraph2DAsymmErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Defini",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:37411,Availability,error,errors,37411," Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 431 of file TGraph2DAsymmErrors.cxx. ◆ Set(). void TGraph2DAsymmErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 466 of file TGraph2DAsymmErrors.cxx. ◆ SetPoint(). void TGraph2DAsymmErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Defini",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:37486,Availability,error,errors,37486," Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DAsymmErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 477 of file TGraph2DAsymmErrors.cxx. ◆ Scale(). void TGraph2DAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 431 of file TGraph2DAsymmErrors.cxx. ◆ Set(). void TGraph2DAsymmErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 466 of file TGraph2DAsymmErrors.cxx. ◆ SetPoint(). void TGraph2DAsymmErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Defini",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:38967,Availability,error,errors,38967,"e_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:39126,Availability,error,errors,39126," ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors.h; hist/hist/src/TGraph2DAsymmErrors.cxx. TGraph2DAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:39288,Availability,error,errors,39288,"ntError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors.h; hist/hist/src/TGraph2DAsymmErrors.cxx. TGraph2DAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:39447,Availability,error,errors,39447,"ntError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors.h; hist/hist/src/TGraph2DAsymmErrors.cxx. TGraph2DAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:39609,Availability,error,errors,39609,"ntError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors.h; hist/hist/src/TGraph2DAsymmErrors.cxx. TGraph2DAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:39768,Availability,error,errors,39768,"ntError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors.h; hist/hist/src/TGraph2DAsymmErrors.cxx. TGraph2DAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:8272,Energy Efficiency,allocate,allocated,8272,"h2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2 (h2) as input. ;  ;  ~TGraph2D () override;  TGraph2D destructor. ;  ; virtual void Add (TF2 *f, Double_t c1=1);  Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z);  Append a new point to the graph. ;  ; virtual void Apply (TF2 *f);  Apply function f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ;  ; void Browse (TBrowser *) override;  Browse. ;  ; void Clear (Option_t *option="""") override;  Free all memory allocated by this object. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the graph to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point px,py to a graph. ;  ; void Draw (Option_t *option=""P0"") override;  Specific drawing options can be used to paint a TGraph2D: ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Executes action corresponding to one event. ;  ; TObject * FindObject (const char *name) const override;  search object named name in the list of functions ;  ; TObject * FindObject (const TObject *obj) const override;  search object obj in the list of functions ;  ; virtual TFitResultPtr Fit (const char *formula, Option_t *option="""", Option_t *goption="""");  Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are automatically created by ROOT. ;  ; virtual TFitResultPtr Fit (TF2 *f2, Option_t *option",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:11085,Integrability,depend,depending,11085,"t x, y and z values for point number i. ;  ; Double_t * GetX () const;  ; TAxis * GetXaxis () const;  Get x axis of the graph. ;  ; Double_t GetXmax () const;  Returns the X maximum. ;  ; Double_t GetXmin () const;  Returns the X minimum. ;  ; Double_t * GetY () const;  ; TAxis * GetYaxis () const;  Get y axis of the graph. ;  ; Double_t GetYmax () const;  Returns the Y maximum. ;  ; Double_t GetYmin () const;  Returns the Y minimum. ;  ; Double_t * GetZ () const;  ; TAxis * GetZaxis () const;  Get z axis of the graph. ;  ; Double_t GetZmax () const;  Returns the Z maximum. ;  ; Double_t GetZmin () const;  Returns the Z minimum. ;  ; Double_t Interpolate (Double_t x, Double_t y);  Finds the z value at the position (x,y) thanks to the Delaunay interpolation. ;  ; TGraph2D & operator= (const TGraph2D &);  Graph2D operator ""="". ;  ; void Paint (Option_t *option="""") override;  Paints this 2D graph with its current attributes. ;  ; TH1 * Project (Option_t *option=""x"") const;  Projects a 2-d graph into 1 or 2-d histograms depending on the option parameter. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Saves primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetDirectory (TDirectory *dir);  By default when an 2D graph is created, it is added to the list of 2D graph objects in the current directory in memory. ;  ; virtual void SetHistogram (TH2 *h, Option_t *option="""");  Sets the histogram to be filled. ;  ; void SetMargin (Double_t m=0.1);  Sets the extra space (in %) around interpolated area for the 2D histogram. ;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the margin. ;  ; void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; void SetMaxIter (Int_t n=100000);  ; void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void SetName (const c",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:15214,Integrability,message,message,15214,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:15635,Integrability,message,message,15635,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:16425,Integrability,message,message,16425,"method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:19268,Integrability,message,message,19268,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:19641,Integrability,message,message,19641,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:6673,Modifiability,inherit,inherited,6673,"s. ;  ; TClass * IsA () const override;  ; TGraph2DAsymmErrors & operator= (const TGraph2DAsymmErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DAsymmErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t ezl, Double_t ezh);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DAsymmErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ;  ;  TGraph2D (const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with name, title and three vectors of doubles as input. ;  ;  TGraph2D (const TGraph2D &);  Graph2D copy constructor. ;  ;  TGraph2D (Int_t n);  Graph2D constructor. ;  ;  TGraph2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:12586,Modifiability,inherit,inherited,12586,"argin (Double_t m=0.1);  Sets the extra space (in %) around interpolated area for the 2D histogram. ;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the margin. ;  ; void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; void SetMaxIter (Int_t n=100000);  ; void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void SetName (const char *name) override;  Changes the name of this 2D graph. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this 2D graph. ;  ; void SetNpx (Int_t npx=40);  Sets the number of bins along X used to draw the function. ;  ; void SetNpy (Int_t npx=40);  Sets the number of bins along Y used to draw the function. ;  ; void SetTitle (const char *title="""") override;  Sets the 2D graph title. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:14051,Modifiability,inherit,inherited,14051,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:14844,Modifiability,inherit,inheritance,14844,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:16523,Modifiability,inherit,inherits,16523,"ject with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:16640,Modifiability,inherit,inherits,16640,"const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:19948,Modifiability,inherit,inherited,19948,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:21453,Modifiability,inherit,inherited,21453,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:22708,Modifiability,inherit,inherited,22708,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:24322,Modifiability,inherit,inherited,24322,"sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const cha",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:24534,Modifiability,inherit,inherited,24534,"sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const cha",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:24744,Modifiability,inherit,inherited,24744,"sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const cha",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:25262,Modifiability,inherit,inherited,25262,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer ,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:25474,Modifiability,inherit,inherited,25474,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer ,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:25686,Modifiability,inherit,inherited,25686,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer ,MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26647,Modifiability,inherit,inherited,26647,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:27777,Modifiability,inherit,inherited,27777,"; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjIn",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:27859,Modifiability,inherit,inherited,27859,"; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjIn",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:28020,Modifiability,inherit,inherited,28020,"ea for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:28153,Modifiability,inherit,inherited,28153," find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data stru",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:28347,Modifiability,inherit,inherited,28347," in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:28988,Modifiability,inherit,inherited,28988," area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph2DAsymmErrors.h>. Inheritance diagram for TGraph2DAsymmErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DAsymmErrors() [1/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; ). TGraph2DAsymmErrors default constructor. ; Definition at line 87 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [2/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; Int_t ; n). TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ; Definition at line 94 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [3/4]. TGraph2DAsymmErrors::TGraph2DAsymmEr",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:29087,Modifiability,inherit,inherited,29087," area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph2DAsymmErrors.h>. Inheritance diagram for TGraph2DAsymmErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DAsymmErrors() [1/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; ). TGraph2DAsymmErrors default constructor. ; Definition at line 87 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [2/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; Int_t ; n). TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ; Definition at line 94 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [3/4]. TGraph2DAsymmErrors::TGraph2DAsymmEr",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:29211,Modifiability,inherit,inherited,29211,"arkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph2DAsymmErrors.h>. Inheritance diagram for TGraph2DAsymmErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DAsymmErrors() [1/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; ). TGraph2DAsymmErrors default constructor. ; Definition at line 87 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [2/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; Int_t ; n). TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ; Definition at line 94 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [3/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z, . Double_t * ; exl = nullptr, . Double_t * ; exh = nullptr, . Double_t * ; eyl = nullptr, . Double_t * ; eyh = nullptr, . Dou",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DAsymmErrors.html:13454,Security,hash,hash,13454,"*title="""") override;  Sets the 2D graph title. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraph2DAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html
https://root.cern/doc/master/classTGraph2DErrors-members.html:2070,Availability,error,error,2070,"e) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateInterpolator(Bool_t oldInterp)TGraph2Dprivate; DeclFileName()TGraph2DErrorsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TGraph2Dvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTGraph2Dvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option=""P0"") overrideTGraph2Dvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph2Dprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraph2Dvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDelaunayTGraph2Dprotected; fDirectoryTGraph2Dprotected; fEXTGraph2DErrorsprotected; fEYTGraph2DErrorsprotected; fEZTGraph2DErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraph2Dprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraph2Dprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) const overrideTGraph2Dvirtual; FindObject(const TObject *obj) const overrideTGraph2Dvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; Fit(TF2 *f2, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; FitPanel()TGraph2Dvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTGraph2Dprotected; f",MatchSource.WIKI,doc/master/classTGraph2DErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors-members.html
https://root.cern/doc/master/classTGraph2DErrors-members.html:2151,Availability,error,error,2151,"e) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateInterpolator(Bool_t oldInterp)TGraph2Dprivate; DeclFileName()TGraph2DErrorsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TGraph2Dvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTGraph2Dvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option=""P0"") overrideTGraph2Dvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph2Dprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraph2Dvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDelaunayTGraph2Dprotected; fDirectoryTGraph2Dprotected; fEXTGraph2DErrorsprotected; fEYTGraph2DErrorsprotected; fEZTGraph2DErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraph2Dprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraph2Dprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) const overrideTGraph2Dvirtual; FindObject(const TObject *obj) const overrideTGraph2Dvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; Fit(TF2 *f2, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; FitPanel()TGraph2Dvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTGraph2Dprotected; f",MatchSource.WIKI,doc/master/classTGraph2DErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors-members.html
https://root.cern/doc/master/classTGraph2DErrors-members.html:201,Modifiability,inherit,inherited,201,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraph2DErrors Member List. This is the complete list of members for TGraph2DErrors, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF2 *f, Double_t c1=1)TGraph2Dvirtual; AddPoint(Double_t x, Double_t y, Double_t z)TGraph2Dinlinevirtual; AddPointError(Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.)TGraph2DErrorsvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF2 *f)TGraph2Dvirtual; Browse(TBrowser *) overrideTGraph2Dvirtual; Build(Int_t n)TGraph2Dprotected; CheckedHash()TObjectinline; Class()TGraph2DErrorsstatic; Class_Name()TGraph2DErrorsstatic; Class_Version()TGraph2DErrorsinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTGraph2Dvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateInterpolator(Bool_t oldInterp)TGraph2Dprivate; DeclFileName()TGraph2DErrorsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TGraph2Dvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTGraph2Dvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option=""P0"") overrideTGraph2Dvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGr",MatchSource.WIKI,doc/master/classTGraph2DErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors-members.html
https://root.cern/doc/master/classTGraph2DErrors.html:338,Availability,error,errors,338,". ROOT: TGraph2DErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEv",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:384,Availability,error,errors,384,". ROOT: TGraph2DErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEv",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:505,Availability,error,error,505,". ROOT: TGraph2DErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEv",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:1240,Availability,error,error,1240,"unctions |; Protected Attributes |; List of all members ; TGraph2DErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; rOption_t Option_t TPoint ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:3528,Availability,error,errorbars,3528,"::TGraph2DErrorsTGraph2DErrors()TGraph2DErrors default constructor.Definition TGraph2DErrors.cxx:80; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; double; int; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. Definition at line 26 of file TGraph2DErrors.h. Public Member Functions;  TGraph2DErrors ();  TGraph2DErrors default constructor. ;  ;  TGraph2DErrors (const TGraph2DErrors &);  Copy constructor. ;  ;  TGraph2DErrors (Int_t n);  TGraph2DErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *ex=nullptr, Double_t *ey=nullptr, Double_t *ez=nullptr, Option_t *option="""");  TGraph2DErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4042,Availability,error,errors,4042,";  TGraph2DErrors (const TGraph2DErrors &);  Copy constructor. ;  ;  TGraph2DErrors (Int_t n);  TGraph2DErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *ex=nullptr, Double_t *ey=nullptr, Double_t *ez=nullptr, Option_t *option="""");  TGraph2DErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4120,Availability,error,errors,4120,"ays are preset to zero. ;  ;  TGraph2DErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *ex=nullptr, Double_t *ey=nullptr, Double_t *ez=nullptr, Option_t *option="""");  TGraph2DErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virt",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4198,Availability,error,errors,4198,"y, Double_t *z, Double_t *ex=nullptr, Double_t *ey=nullptr, Double_t *ez=nullptr, Option_t *option="""");  TGraph2DErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4276,Availability,error,errors,4276,"tr, Option_t *option="""");  TGraph2DErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) overri",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4354,Availability,error,errors,4354,"input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DErrors. ;  ; void StreamerNVirtual (TBu",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4432,Availability,error,errors,4432,"tual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4669,Availability,error,errors,4669,"FitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least t",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:4843,Availability,error,errors,4843,"raph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ;  ;  TGraph2D (const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with name, title and three vectors of doubles as ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:14056,Availability,error,error,14056,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:14145,Availability,error,error,14145,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:14300,Availability,error,error,14300,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t Inheri",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:14477,Availability,error,error,14477,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:18110,Availability,error,error,18110,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:25108,Availability,error,errors,25108,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the inter",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:25169,Availability,error,errors,25169,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the inter",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:25230,Availability,error,errors,25230,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the inter",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:29508,Availability,error,errorbars,29508," Definition at line 87 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [3/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z, . Double_t * ; ex = nullptr, . Double_t * ; ey = nullptr, . Double_t * ; ez = nullptr, . Option_t * ; option = """" . ). TGraph2DErrors constructor with doubles vectors as input. ; Definition at line 110 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [4/4]. TGraph2DErrors::TGraph2DErrors ; (; const TGraph2DErrors & ; g). Copy constructor. ; Copy everything except list of functions ; Definition at line 148 of file TGraph2DErrors.cxx. ◆ ~TGraph2DErrors(). TGraph2DErrors::~TGraph2DErrors ; (; ). override . TGraph2DErrors destructor. ; Definition at line 137 of file TGraph2DErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraph2DErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; z, . Double_t ; ex = 0., . Double_t ; ey = 0., . Double_t ; ez = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 196 of file TGraph2DErrors.cxx. ◆ Class(). static TClass * TGraph2DErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file TGraph2DErrors.h. ◆ DeclFileName(). static const char * TGraph2DErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TGraph2DErrors.h. ◆ GetErrorX(). Double_t TGraph2DErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along X at point i. ; Reimplemented from TGraph2D.; Definition at line 206 of file TGraph2DErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DErrors::GetErrorY ; (; Int_t ; i",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:30338,Availability,error,error,30338,"ors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; z, . Double_t ; ex = 0., . Double_t ; ey = 0., . Double_t ; ez = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 196 of file TGraph2DErrors.cxx. ◆ Class(). static TClass * TGraph2DErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file TGraph2DErrors.h. ◆ DeclFileName(). static const char * TGraph2DErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TGraph2DErrors.h. ◆ GetErrorX(). Double_t TGraph2DErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along X at point i. ; Reimplemented from TGraph2D.; Definition at line 206 of file TGraph2DErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Y at point i. ; Reimplemented from TGraph2D.; Definition at line 218 of file TGraph2DErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DErrors::GetErrorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::Get",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:30604,Availability,error,error,30604,ss * TGraph2DErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file TGraph2DErrors.h. ◆ DeclFileName(). static const char * TGraph2DErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TGraph2DErrors.h. ◆ GetErrorX(). Double_t TGraph2DErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along X at point i. ; Reimplemented from TGraph2D.; Definition at line 206 of file TGraph2DErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Y at point i. ; Reimplemented from TGraph2D.; Definition at line 218 of file TGraph2DErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DErrors::GetErrorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:30870,Availability,error,error,30870,; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file TGraph2DErrors.h. ◆ DeclFileName(). static const char * TGraph2DErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TGraph2DErrors.h. ◆ GetErrorX(). Double_t TGraph2DErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along X at point i. ; Reimplemented from TGraph2D.; Definition at line 206 of file TGraph2DErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Y at point i. ; Reimplemented from TGraph2D.; Definition at line 218 of file TGraph2DErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DErrors::GetErrorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). ,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:31570,Availability,error,errors,31570,led by Graph2DFitChisquare. ; It returns the error along Y at point i. ; Reimplemented from TGraph2D.; Definition at line 218 of file TGraph2DErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DErrors::GetErrorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum ,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:31769,Availability,error,errors,31769,rorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing c,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:31968,Availability,error,errors,31968,e TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment op,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:32167,Availability,error,errors,32167,"e_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Pri",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:32366,Availability,error,errors,32366,"nst. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes poin",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:32565,Availability,error,errors,32565," X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the va",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:33173,Availability,error,errors,33173,"ors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; De",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:33564,Availability,error,errors,33564,"; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:33651,Availability,error,errors,33651,"scribing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streame",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:33709,Availability,error,errors,33709,"scribing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streame",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:33767,Availability,error,errors,33767,"scribing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streame",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:33842,Availability,error,errors,33842,"scribing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streame",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:35188,Availability,error,errors,35188," and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DErrors. ; Reimplemented from TGraph2D.; Definition at line 462 of file TGraph2DErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TGraph2DErrors.h. Member Data Documentation. ◆ fEX. Double_t* TGraph2DErrors::fEX {nullptr}. protected . [fNpoints] array of X errors ; Definition at line 29 of file TGraph2DErrors.h. ◆ fEY. Double_t* TGraph2DErrors::fEY {nullptr}. protected . [fNpoints] array of Y errors ; Definition at line 30 of file TGraph2DErrors.h. ◆ fEZ. Double_t* TGraph2DErrors::fEZ {nullptr}. protected . [fNpoints] array of Z errors ; Definition at line 31 of file TGraph2DErrors.h. Libraries for TGraph2DErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DErrors.h; hist/hist/src/TGraph2DErrors.cxx. TGraph2DErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:35327,Availability,error,errors,35327," and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DErrors. ; Reimplemented from TGraph2D.; Definition at line 462 of file TGraph2DErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TGraph2DErrors.h. Member Data Documentation. ◆ fEX. Double_t* TGraph2DErrors::fEX {nullptr}. protected . [fNpoints] array of X errors ; Definition at line 29 of file TGraph2DErrors.h. ◆ fEY. Double_t* TGraph2DErrors::fEY {nullptr}. protected . [fNpoints] array of Y errors ; Definition at line 30 of file TGraph2DErrors.h. ◆ fEZ. Double_t* TGraph2DErrors::fEZ {nullptr}. protected . [fNpoints] array of Z errors ; Definition at line 31 of file TGraph2DErrors.h. Libraries for TGraph2DErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DErrors.h; hist/hist/src/TGraph2DErrors.cxx. TGraph2DErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:35466,Availability,error,errors,35466," and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; Definition at line 345 of file TGraph2DErrors.cxx. ◆ SetPoint(). void TGraph2DErrors::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DErrors.cxx. ◆ SetPointError(). void TGraph2DErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey, . Double_t ; ez . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 446 of file TGraph2DErrors.cxx. ◆ Streamer(). void TGraph2DErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DErrors. ; Reimplemented from TGraph2D.; Definition at line 462 of file TGraph2DErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TGraph2DErrors.h. Member Data Documentation. ◆ fEX. Double_t* TGraph2DErrors::fEX {nullptr}. protected . [fNpoints] array of X errors ; Definition at line 29 of file TGraph2DErrors.h. ◆ fEY. Double_t* TGraph2DErrors::fEY {nullptr}. protected . [fNpoints] array of Y errors ; Definition at line 30 of file TGraph2DErrors.h. ◆ fEZ. Double_t* TGraph2DErrors::fEZ {nullptr}. protected . [fNpoints] array of Z errors ; Definition at line 31 of file TGraph2DErrors.h. Libraries for TGraph2DErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DErrors.h; hist/hist/src/TGraph2DErrors.cxx. TGraph2DErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:6985,Energy Efficiency,allocate,allocated,6985,"h2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2 (h2) as input. ;  ;  ~TGraph2D () override;  TGraph2D destructor. ;  ; virtual void Add (TF2 *f, Double_t c1=1);  Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z);  Append a new point to the graph. ;  ; virtual void Apply (TF2 *f);  Apply function f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ;  ; void Browse (TBrowser *) override;  Browse. ;  ; void Clear (Option_t *option="""") override;  Free all memory allocated by this object. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the graph to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point px,py to a graph. ;  ; void Draw (Option_t *option=""P0"") override;  Specific drawing options can be used to paint a TGraph2D: ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Executes action corresponding to one event. ;  ; TObject * FindObject (const char *name) const override;  search object named name in the list of functions ;  ; TObject * FindObject (const TObject *obj) const override;  search object obj in the list of functions ;  ; virtual TFitResultPtr Fit (const char *formula, Option_t *option="""", Option_t *goption="""");  Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are automatically created by ROOT. ;  ; virtual TFitResultPtr Fit (TF2 *f2, Option_t *option",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:9933,Integrability,depend,depending,9933,"t x, y and z values for point number i. ;  ; Double_t * GetX () const;  ; TAxis * GetXaxis () const;  Get x axis of the graph. ;  ; Double_t GetXmax () const;  Returns the X maximum. ;  ; Double_t GetXmin () const;  Returns the X minimum. ;  ; Double_t * GetY () const;  ; TAxis * GetYaxis () const;  Get y axis of the graph. ;  ; Double_t GetYmax () const;  Returns the Y maximum. ;  ; Double_t GetYmin () const;  Returns the Y minimum. ;  ; Double_t * GetZ () const;  ; TAxis * GetZaxis () const;  Get z axis of the graph. ;  ; Double_t GetZmax () const;  Returns the Z maximum. ;  ; Double_t GetZmin () const;  Returns the Z minimum. ;  ; Double_t Interpolate (Double_t x, Double_t y);  Finds the z value at the position (x,y) thanks to the Delaunay interpolation. ;  ; TGraph2D & operator= (const TGraph2D &);  Graph2D operator ""="". ;  ; void Paint (Option_t *option="""") override;  Paints this 2D graph with its current attributes. ;  ; TH1 * Project (Option_t *option=""x"") const;  Projects a 2-d graph into 1 or 2-d histograms depending on the option parameter. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Saves primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetDirectory (TDirectory *dir);  By default when an 2D graph is created, it is added to the list of 2D graph objects in the current directory in memory. ;  ; virtual void SetHistogram (TH2 *h, Option_t *option="""");  Sets the histogram to be filled. ;  ; void SetMargin (Double_t m=0.1);  Sets the extra space (in %) around interpolated area for the 2D histogram. ;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the margin. ;  ; void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; void SetMaxIter (Int_t n=100000);  ; void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void SetName (const c",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:14062,Integrability,message,message,14062,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:14483,Integrability,message,message,14483,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:15273,Integrability,message,message,15273,"method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:18116,Integrability,message,message,18116,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:18489,Integrability,message,message,18489,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:5386,Modifiability,inherit,inherited,5386,"e_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ;  ;  TGraph2D (const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with name, title and three vectors of doubles as input. ;  ;  TGraph2D (const TGraph2D &);  Graph2D copy constructor. ;  ;  TGraph2D (Int_t n);  Graph2D constructor. ;  ;  TGraph2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:11434,Modifiability,inherit,inherited,11434,"argin (Double_t m=0.1);  Sets the extra space (in %) around interpolated area for the 2D histogram. ;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the TGraphDelaunay convex hull ie: the bins in the margin. ;  ; void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; void SetMaxIter (Int_t n=100000);  ; void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void SetName (const char *name) override;  Changes the name of this 2D graph. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this 2D graph. ;  ; void SetNpx (Int_t npx=40);  Sets the number of bins along X used to draw the function. ;  ; void SetNpy (Int_t npx=40);  Sets the number of bins along Y used to draw the function. ;  ; void SetTitle (const char *title="""") override;  Sets the 2D graph title. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:12899,Modifiability,inherit,inherited,12899,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:13692,Modifiability,inherit,inheritance,13692,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:15371,Modifiability,inherit,inherits,15371,"ject with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:15488,Modifiability,inherit,inherits,15488,"const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:18796,Modifiability,inherit,inherited,18796,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:20301,Modifiability,inherit,inherited,20301,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:21556,Modifiability,inherit,inherited,21556,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:23170,Modifiability,inherit,inherited,23170,"sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const cha",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:23382,Modifiability,inherit,inherited,23382,"sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const cha",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:23592,Modifiability,inherit,inherited,23592,"sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const cha",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:24110,Modifiability,inherit,inherited,24110,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values li,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:24322,Modifiability,inherit,inherited,24322,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values li,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:24534,Modifiability,inherit,inherited,24534,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values li,MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:25264,Modifiability,inherit,inherited,25264,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ; Double_t * fEZ {nullptr};  [fNpoints] array of Z errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the inter",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:26394,Modifiability,inherit,inherited,26394,"; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjIn",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:26476,Modifiability,inherit,inherited,26476,"; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjIn",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:26637,Modifiability,inherit,inherited,26637,"ea for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:26770,Modifiability,inherit,inherited,26770," find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data stru",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:26964,Modifiability,inherit,inherited,26964," in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plotted ;  ; Double_t * fZ;  [fNpoints] ;  ; Double_t fZout;  fHistogram bin height for points lying outside the interpolated area ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:27605,Modifiability,inherit,inherited,27605," area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph2DErrors.h>. Inheritance diagram for TGraph2DErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DErrors() [1/4]. TGraph2DErrors::TGraph2DErrors ; (; ). TGraph2DErrors default constructor. ; Definition at line 80 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [2/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n). TGraph2DErrors normal constructor the arrays are preset to zero. ; Definition at line 87 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [3/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z, ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:27704,Modifiability,inherit,inherited,27704," area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph2DErrors.h>. Inheritance diagram for TGraph2DErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DErrors() [1/4]. TGraph2DErrors::TGraph2DErrors ; (; ). TGraph2DErrors default constructor. ; Definition at line 80 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [2/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n). TGraph2DErrors normal constructor the arrays are preset to zero. ; Definition at line 87 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [3/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z, ",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:27828,Modifiability,inherit,inherited,27828,"arkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph2D; void Build (Int_t n);  Creates the 2D graph basic data structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraph2DErrors.h>. Inheritance diagram for TGraph2DErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DErrors() [1/4]. TGraph2DErrors::TGraph2DErrors ; (; ). TGraph2DErrors default constructor. ; Definition at line 80 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [2/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n). TGraph2DErrors normal constructor the arrays are preset to zero. ; Definition at line 87 of file TGraph2DErrors.cxx. ◆ TGraph2DErrors() [3/4]. TGraph2DErrors::TGraph2DErrors ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Double_t * ; z, . Double_t * ; ex = nullptr, . Double_t * ; ey = nullptr, . Double_t * ; ez = nullptr, . Option_t * ; option = """" . ). TGraph2DErrors constructor with doubles vectors as input. ; Definition at line 11",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DErrors.html:12302,Security,hash,hash,12302,"*title="""") override;  Sets the 2D graph title. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html
https://root.cern/doc/master/classTGraph2DPainter.html:1434,Availability,error,error,1434,"launay painting class. ; TGraph2DPainter paints a TGraphDelaunay using triangles or clouds of points.; See documentation of TGraph2D, TGraph2DErrors and TGraph2DAsymmErrors to get the list of drawing options for these classes. ; Definition at line 31 of file TGraph2DPainter.h. Public Member Functions;  TGraph2DPainter ();  TGraph2DPainter default constructor. ;  ;  TGraph2DPainter (TGraphDelaunay *gd);  TGraph2DPainter constructor using the old Delaunay algorithm. ;  ;  TGraph2DPainter (TGraphDelaunay2D *gd);  TGraph2DPainter constructor using the new Delaunay algorithm. ;  ;  ~TGraph2DPainter () override;  TGraph2DPainter destructor. ;  ; TList * GetContourList (Double_t contour);  Returns the X and Y graphs building a contour. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint a TGraphDelaunay according to the value of ""option"": ;  ; void PaintContour (Option_t *option);  Paints the 2D graph as a contour plot. ;  ; void PaintErrors (Option_t *option);  Paints the 2D graph as error bars. ;  ; void PaintPolyLine (Option_t *option);  Paints the 2D graph as PaintPolyLine. ;  ; void PaintPolyMarker (Option_t *option);  Paints the 2D graph as PaintPolyMarker. ;  ; void PaintTriangles (Option_t *option);  Paints the 2D graph as triangles. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  ",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:3629,Availability,error,error,3629,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:3718,Availability,error,error,3718,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:3873,Availability,error,error,3873,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:4170,Availability,error,error,4170,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:8621,Availability,error,error,8621," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:17118,Availability,error,error,17118,"rea color. The edges of each triangles are painted with the current line color. . ""TRIW"" The Delaunay triangles are drawn as wire frame. . ""TRI1"" The Delaunay triangles are painted with color levels. The edges of each triangles are painted with the current line color. . ""TRI2"" the Delaunay triangles are painted with color levels. . ""P"" Draw a marker at each vertex. . ""P0"" Draw a circle at each vertex. Each circle background is white. . ""PCOL"" Draw a marker at each vertex. The color of each marker is defined according to its Z position. . ""CONT"" Draw contours. . ""LINE"" Draw a 3D polyline. . Reimplemented from TObject.; Definition at line 509 of file TGraph2DPainter.cxx. ◆ PaintContour(). void TGraph2DPainter::PaintContour ; (; Option_t * ; option). Paints the 2D graph as a contour plot. ; Delaunay triangles are used to compute the contours. ; Definition at line 556 of file TGraph2DPainter.cxx. ◆ PaintErrors(). void TGraph2DPainter::PaintErrors ; (; Option_t * ; option). Paints the 2D graph as error bars. ; Definition at line 592 of file TGraph2DPainter.cxx. ◆ PaintLevels(). void TGraph2DPainter::PaintLevels ; (; Int_t * ; t, . Double_t * ; x, . Double_t * ; y, . Int_t ; nblev = 0, . Double_t * ; glev = nullptr . ). protected . Paints one triangle. . nblev = 0 : paint the color levels; nblev != 0 : paint the grid . Definition at line 701 of file TGraph2DPainter.cxx. ◆ PaintPolyLine(). void TGraph2DPainter::PaintPolyLine ; (; Option_t * ; option). Paints the 2D graph as PaintPolyLine. ; Definition at line 992 of file TGraph2DPainter.cxx. ◆ PaintPolyMarker(). void TGraph2DPainter::PaintPolyMarker ; (; Option_t * ; option). Paints the 2D graph as PaintPolyMarker. ; Definition at line 895 of file TGraph2DPainter.cxx. ◆ PaintPolyMarker0(). void TGraph2DPainter::PaintPolyMarker0 ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y . ). protected . Paints a circle at each vertex. Each circle background is white. ; Definition at line 1041 of file TGraph2DPainter.cxx. ◆ PaintTria",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:3635,Integrability,message,message,3635,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:4176,Integrability,message,message,4176,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:5378,Integrability,message,message,5378,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:8627,Integrability,message,message,8627," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:9000,Integrability,message,message,9000," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:1868,Modifiability,inherit,inherited,1868,"e old Delaunay algorithm. ;  ;  TGraph2DPainter (TGraphDelaunay2D *gd);  TGraph2DPainter constructor using the new Delaunay algorithm. ;  ;  ~TGraph2DPainter () override;  TGraph2DPainter destructor. ;  ; TList * GetContourList (Double_t contour);  Returns the X and Y graphs building a contour. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint a TGraphDelaunay according to the value of ""option"": ;  ; void PaintContour (Option_t *option);  Paints the 2D graph as a contour plot. ;  ; void PaintErrors (Option_t *option);  Paints the 2D graph as error bars. ;  ; void PaintPolyLine (Option_t *option);  Paints the 2D graph as PaintPolyLine. ;  ; void PaintPolyMarker (Option_t *option);  Paints the 2D graph as PaintPolyMarker. ;  ; void PaintTriangles (Option_t *option);  Paints the 2D graph as triangles. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:3265,Modifiability,inherit,inheritance,3265,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:5476,Modifiability,inherit,inherits,5476,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:5593,Modifiability,inherit,inherits,5593,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:9501,Modifiability,inherit,inherited,9501,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void FindTriangles ();  Find triangles in fDelaunay and initialise the TGraph2DPainter values needed to paint triangles or find contours. ;  ; void GetGraph2dProperties ();  Protected method to get all TGraph2D properties. ;  ; void PaintLevels (Int_t *v, Double_t *x, Double_t *y, Int_t nblev=0, Double_t *glev=nullptr);  Paints one triangle. ;  ; void PaintPolyMarker0 (Int_t n, Double_t *x, Double_t *y);  Paints a circle at each vertex. Each circle background is white. ;  ; void PaintTriangle",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:10730,Modifiability,inherit,inherited,10730," Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void FindTriangles ();  Find triangles in fDelaunay and initialise the TGraph2DPainter values needed to paint triangles or find contours. ;  ; void GetGraph2dProperties ();  Protected method to get all TGraph2D properties. ;  ; void PaintLevels (Int_t *v, Double_t *x, Double_t *y, Int_t nblev=0, Double_t *glev=nullptr);  Paints one triangle. ;  ; void PaintPolyMarker0 (Int_t n, Double_t *x, Double_t *y);  Paints a circle at each vertex. Each circle background is white. ;  ; void PaintTriangles_new (Option_t *option);  Paints the 2D graph as triangles (new implementation) ;  ; void PaintTriangles_old (Option_t *option);  Paints the 2D graph as triangles (old implementation) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TGraphDelaunay * fDelaunay;  ! Pointer to the TGraphDelaunay2D to be painted ;  ; TGraphDelaunay2D * fDelaunay2D;  ! Pointer to the TGraphDelaunay2D to be painted ;  ; Double_t * fEXhigh;  ! Pointer to fGraph2D->fXEhigh ;  ; Double_t * fEXlow;  ! Pointer to fGraph2D->fXElow ;  ; Double_t * fEYhigh;  ! Pointer to fGraph2D->fYEhigh ;  ; Double_t * fEYlow;  ! Pointer to fGraph2D->fYElow ;  ; Double_t * fEZhigh;  ! Pointer to fGraph2D->fZEhigh ;  ; Double_t * fEZlow;  ! Pointer to fGraph2D->fZElow ;  ; TGraph2D * fGraph2D;  ! Pointer to the TGraph2D in fDelaunay ;  ; Int_t * fMTried;  ! Pointer to fDelaunay->fMTried ;  ; Int_t fNdt;  ! Equal to fDelaunay->fNdt ;  ; Int_t fNpoints;  ! Equal to fGraph2D->fNpoints ;  ; Int_t * fNTried;  ! Pointer t",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:12560,Modifiability,inherit,inherited,12560,"! Equal to fGraph2D->fNpoints ;  ; Int_t * fNTried;  ! Pointer to fDelaunay->fNTried ;  ; Int_t * fPTried;  ! Pointer to fDelaunay->fPTried ;  ; Double_t * fX;  ! Pointer to fGraph2D->fX ;  ; Double_t fXmax;  ! fGraph2D->fHistogram Xmax ;  ; Double_t fXmin;  ! fGraph2D->fHistogram Xmin ;  ; Double_t * fXN;  ! Pointer to fDelaunay->fXN ;  ; Double_t fXNmax;  ! Equal to fDelaunay->fXNmax ;  ; Double_t fXNmin;  ! Equal to fDelaunay->fXNmin ;  ; Double_t * fY;  ! Pointer to fGraph2D->fY ;  ; Double_t fYmax;  ! fGraph2D->fHistogram Ymax ;  ; Double_t fYmin;  ! fGraph2D->fHistogram Ymin ;  ; Double_t * fYN;  ! Pointer to fDelaunay->fYN ;  ; Double_t fYNmax;  ! Equal to fDelaunay->fYNmax ;  ; Double_t fYNmin;  ! Equal to fDelaunay->fYNmin ;  ; Double_t * fZ;  ! Pointer to fGraph2D->fZ ;  ; Double_t fZmax;  ! fGraph2D->fHistogram Zmax ;  ; Double_t fZmin;  ! fGraph2D->fHistogram Zmin ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGraph2DPainter.h>. Inheritance diagram for TGraph2DPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DPainter() [1/3]. TGraph2DPainter::TGraph2DPainter ; (; ). TGraph2DPainter default constructor. ; Definition at line 51 of file TGraph",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:13201,Modifiability,inherit,inherited,13201,"* fYN;  ! Pointer to fDelaunay->fYN ;  ; Double_t fYNmax;  ! Equal to fDelaunay->fYNmax ;  ; Double_t fYNmin;  ! Equal to fDelaunay->fYNmin ;  ; Double_t * fZ;  ! Pointer to fGraph2D->fZ ;  ; Double_t fZmax;  ! fGraph2D->fHistogram Zmax ;  ; Double_t fZmin;  ! fGraph2D->fHistogram Zmin ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGraph2DPainter.h>. Inheritance diagram for TGraph2DPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraph2DPainter() [1/3]. TGraph2DPainter::TGraph2DPainter ; (; ). TGraph2DPainter default constructor. ; Definition at line 51 of file TGraph2DPainter.cxx. ◆ TGraph2DPainter() [2/3]. TGraph2DPainter::TGraph2DPainter ; (; TGraphDelaunay * ; gd). TGraph2DPainter constructor using the old Delaunay algorithm. ; Definition at line 88 of file TGraph2DPainter.cxx. ◆ TGraph2DPainter() [3/3]. TGraph2DPainter::TGraph2DPainter ; (; TGraphDelaunay2D * ; gd). TGraph2DPainter constructor using the new Delaunay algorithm. ; Definition at line 115 of file TGraph2DPainter.cxx. ◆ ~TGraph2DPainter(). TGraph2DPainter::~TGraph2DPainter ; (; ). override . TGraph2DPainter destructor. ; Definition at line 143 of file TGraph2DPainter.cxx. Member Function Do",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraph2DPainter.html:5107,Security,hash,hash,5107," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html
https://root.cern/doc/master/classTGraphAsymmErrors-members.html:3433,Availability,error,error,3433,"ror(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphAsymmErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXhighTGraphAsymmErrorsprotected; fEXlowTGraphAsymmErrorsprotected; fEYhighTGraphAsymmErrorsprotected; fEYlowTGraphAsymmErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphAsymmErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraph",MatchSource.WIKI,doc/master/classTGraphAsymmErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html
https://root.cern/doc/master/classTGraphAsymmErrors-members.html:3514,Availability,error,error,3514,"ror(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphAsymmErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXhighTGraphAsymmErrorsprotected; fEXlowTGraphAsymmErrorsprotected; fEYhighTGraphAsymmErrorsprotected; fEYlowTGraphAsymmErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphAsymmErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraph",MatchSource.WIKI,doc/master/classTGraphAsymmErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html
https://root.cern/doc/master/classTGraphAsymmErrors-members.html:207,Modifiability,inherit,inherited,207,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphAsymmErrors Member List. This is the complete list of members for TGraphAsymmErrors, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *f, Double_t c1=1)TGraphvirtual; AddPoint(Double_t x, Double_t y)TGraphinlinevirtual; AddPointError(Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.)TGraphAsymmErrorsvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; Allocate(Int_t size) overrideTGraphAsymmErrorsprotectedvirtual; AllocateArrays(Int_t Narrays, Int_t arraySize)TGraphprotected; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF1 *f) overrideTGraphAsymmErrorsvirtual; BayesDivide(const TH1 *pass, const TH1 *total, Option_t *opt="""")TGraphAsymmErrorsvirtual; Browse(TBrowser *b) overrideTGraphvirtual; CheckedHash()TObjectinline; Chisquare(TF1 *f1, Option_t *option="""") constTGraphvirtual; Class()TGraphAsymmErrorsstatic; Class_Name()TGraphAsymmErrorsstatic; Class_Version()TGraphAsymmErrorsinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareArg(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareRadius(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareX(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareY(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideTGraphAsymmErrorsvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideTGraphAsymmEr",MatchSource.WIKI,doc/master/classTGraphAsymmErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html
https://root.cern/doc/master/classTGraphAsymmErrors-members.html:9799,Testability,log,logx,9799,"Object; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphAsymmErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *cho",MatchSource.WIKI,doc/master/classTGraphAsymmErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html
https://root.cern/doc/master/classTGraphAsymmErrors-members.html:9819,Testability,log,logy,9819,"d enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphAsymmErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrid",MatchSource.WIKI,doc/master/classTGraphAsymmErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:377,Availability,error,error,377,". ROOT: TGraphAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphAsymmErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars. ; The TGraphAsymmErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definitio",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:642,Availability,error,error,642,". ROOT: TGraphAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphAsymmErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars. ; The TGraphAsymmErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definitio",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:2849,Availability,error,errors,2849,"; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25. Definition at line 26 of file TGraphAsymmErrors.h. Public Member Functions;  TGraphAsymmErrors ();  TGraphAsymmErrors default constructor. ;  ;  TGraphAsymmErrors (const char *filename, const char *format=""%lg %lg %lg %lg %lg %lg"", Option_t *option="""");  TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ;  ;  TGraphAsymmErrors (const TGraphAsymmErrors &gr);  TGraphAsymmErrors copy constructor. ;  ;  TGraphAsymmErrors (const TH1 *h);  TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ;  ;  TGraphAsymmErrors (const TH1 *pass, const TH1 *total, Option_t *option="""");  Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphAsymmErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh);  Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:2875,Availability,error,error,2875,"; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25. Definition at line 26 of file TGraphAsymmErrors.h. Public Member Functions;  TGraphAsymmErrors ();  TGraphAsymmErrors default constructor. ;  ;  TGraphAsymmErrors (const char *filename, const char *format=""%lg %lg %lg %lg %lg %lg"", Option_t *option="""");  TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ;  ;  TGraphAsymmErrors (const TGraphAsymmErrors &gr);  TGraphAsymmErrors copy constructor. ;  ;  TGraphAsymmErrors (const TH1 *h);  TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ;  ;  TGraphAsymmErrors (const TH1 *pass, const TH1 *total, Option_t *option="""");  Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphAsymmErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh);  Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:3352,Availability,error,errors,3352,"C:25. Definition at line 26 of file TGraphAsymmErrors.h. Public Member Functions;  TGraphAsymmErrors ();  TGraphAsymmErrors default constructor. ;  ;  TGraphAsymmErrors (const char *filename, const char *format=""%lg %lg %lg %lg %lg %lg"", Option_t *option="""");  TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ;  ;  TGraphAsymmErrors (const TGraphAsymmErrors &gr);  TGraphAsymmErrors copy constructor. ;  ;  TGraphAsymmErrors (const TH1 *h);  TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ;  ;  TGraphAsymmErrors (const TH1 *pass, const TH1 *total, Option_t *option="""");  Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphAsymmErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh);  Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ;  ;  TGraphAsymmErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *exl=nullptr, const Double_t *exh=nullptr, const Double_t *eyl=nullptr, const Double_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  TGraphAsymmErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr);  TGraphAsymmErrors ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:3682,Availability,error,errors,3682,"assumed to contain at least 2 columns of numbers. ;  ;  TGraphAsymmErrors (const TGraphAsymmErrors &gr);  TGraphAsymmErrors copy constructor. ;  ;  TGraphAsymmErrors (const TH1 *h);  TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ;  ;  TGraphAsymmErrors (const TH1 *pass, const TH1 *total, Option_t *option="""");  Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphAsymmErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh);  Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ;  ;  TGraphAsymmErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *exl=nullptr, const Double_t *exh=nullptr, const Double_t *eyl=nullptr, const Double_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  TGraphAsymmErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  ~TGraphAsymmErrors () override;  TGraphAsymmErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function t",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:4477,Availability,error,errorbars,4477,"vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ;  ;  TGraphAsymmErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *exl=nullptr, const Double_t *exh=nullptr, const Double_t *eyl=nullptr, const Double_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  TGraphAsymmErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  ~TGraphAsymmErrors () override;  TGraphAsymmErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper var",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5090,Availability,error,error,5090,"const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  ~TGraphAsymmErrors () override;  TGraphAsymmErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chop",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5237,Availability,error,error,5237,"aphAsymmErrors normal constructor. ;  ;  ~TGraphAsymmErrors () override;  TGraphAsymmErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option=""",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5311,Availability,error,error,5311,"GraphAsymmErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5397,Availability,error,error,5397,"le_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmError",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5544,Availability,error,error,5544,"(TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set e",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5618,Availability,error,error,5618,"  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointE",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:5915,Availability,error,errors,5915,"le_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point number i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exh);  Set EXhigh for point i. ;  ;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:6133,Availability,error,errors,6133,"at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point number i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exh);  Set EXhigh for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exl);  Set EXlow for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Double_t eyh);  Set EYhigh for point i. ;  ; virtual void SetPointEYlow (Int_t i, Double_t eyl);  Set EYlow for point i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGr",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:6373,Availability,error,errors,6373,"erride;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point number i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exh);  Set EXhigh for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exl);  Set EXlow for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Double_t eyh);  Set EYhigh for point i. ;  ; virtual void SetPointEYlow (Int_t i, Double_t eyl);  Set EYlow for point i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphAsymmErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option=""""); ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:19804,Availability,error,error,19804,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:19893,Availability,error,error,19893,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:20048,Availability,error,error,20048,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (co",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:20225,Availability,error,error,20225,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:23499,Availability,error,error,23499,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:31237,Availability,error,errors,31237,"Class * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSiz",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:31507,Availability,error,errors,31507," ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void Sa",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33086,Availability,error,errors,33086,"ze points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill ar",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33154,Availability,error,errors,33154,"ze points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill ar",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33224,Availability,error,errors,33224,"ze points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill ar",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33292,Availability,error,errors,33292,"ze points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill ar",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:37444,Availability,error,errors,37444," Float_t * ; eyl = nullptr, . const Float_t * ; eyh = nullptr . ). TGraphAsymmErrors normal constructor. ; if exl,h or eyl,h are null, the corresponding arrays are preset to zero ; Definition at line 132 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [4/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exl = nullptr, . const Double_t * ; exh = nullptr, . const Double_t * ; eyl = nullptr, . const Double_t * ; eyh = nullptr . ). TGraphAsymmErrors normal constructor. ; if exl,h or eyl,h are null, the corresponding arrays are preset to zero ; Definition at line 155 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [5/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorF & ; vx, . const TVectorF & ; vy, . const TVectorF & ; vexl, . const TVectorF & ; vexh, . const TVectorF & ; veyl, . const TVectorF & ; veyh . ). Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 187 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [6/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vexl, . const TVectorD & ; vexh, . const TVectorD & ; veyl, . const TVectorD & ; veyh . ). Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 216 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [7/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors copy constructor. ; Definition at line 78 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [8/1",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:37993,Availability,error,errors,37993,"r. ; if exl,h or eyl,h are null, the corresponding arrays are preset to zero ; Definition at line 155 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [5/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorF & ; vx, . const TVectorF & ; vy, . const TVectorF & ; vexl, . const TVectorF & ; vexh, . const TVectorF & ; veyl, . const TVectorF & ; veyh . ). Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 187 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [6/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vexl, . const TVectorD & ; vexh, . const TVectorD & ; veyl, . const TVectorD & ; veyh . ). Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 216 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [7/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors copy constructor. ; Definition at line 78 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [8/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; h). TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ; Definition at line 242 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [9/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; option = """" . ). Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphAsymmErrors::Divide) ; Defini",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:38570,Availability,error,errors,38570,"umber of points in vx and vy. ; Definition at line 187 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [6/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vexl, . const TVectorD & ; vexh, . const TVectorD & ; veyl, . const TVectorD & ; veyh . ). Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 216 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [7/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors copy constructor. ; Definition at line 78 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [8/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; h). TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ; Definition at line 242 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [9/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; option = """" . ). Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphAsymmErrors::Divide) ; Definition at line 260 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [10/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg %lg %lg"", . Option_t * ; option = """" . ). TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ; convention for format (default=""%lg %lg %lg %lg %lg %lg""); format = ""%lg %lg"" read only 2 first columns into X, Y; format = ""%lg %lg %lg %lg"" read only 4 first columns into X, Y, ELY, EHY; format = ""%lg %lg %lg %lg %lg %lg"" read only 6 first c",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:38596,Availability,error,error,38596,"umber of points in vx and vy. ; Definition at line 187 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [6/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vexl, . const TVectorD & ; vexh, . const TVectorD & ; veyl, . const TVectorD & ; veyh . ). Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 216 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [7/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors copy constructor. ; Definition at line 78 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [8/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; h). TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ; Definition at line 242 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [9/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; option = """" . ). Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphAsymmErrors::Divide) ; Definition at line 260 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [10/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg %lg %lg"", . Option_t * ; option = """" . ). TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ; convention for format (default=""%lg %lg %lg %lg %lg %lg""); format = ""%lg %lg"" read only 2 first columns into X, Y; format = ""%lg %lg %lg %lg"" read only 4 first columns into X, Y, ELY, EHY; format = ""%lg %lg %lg %lg %lg %lg"" read only 6 first c",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:40546,Availability,error,errorbars,40546,"ns into X, Y, EXL, EYH, EYL, EHY. For files separated by a specific delimiter different from ‘’ 'and'\t'(e.g.';'in csv files) you can avoid using%*sto bypass this delimiter by explicitly specify the""option"" argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters ‘(’ ', '\t', ',', ';') used once(e.g. ""1;1"")or in a combined way("" 1;,;; 1""). Note in that case, the instantiation is about 2 times slower. In case a delimiter is specified, the format""%lg %lg %lg""` will read X,Y,EX. ; Definition at line 299 of file TGraphAsymmErrors.cxx. ◆ ~TGraphAsymmErrors(). TGraphAsymmErrors::~TGraphAsymmErrors ; (; ). override . TGraphAsymmErrors default destructor. ; Definition at line 433 of file TGraphAsymmErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphAsymmErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl = 0., . Double_t ; exh = 0., . Double_t ; eyl = 0., . Double_t ; eyh = 0. . ). virtual . Add a point with asymmetric errorbars to the graph. ; Definition at line 451 of file TGraphAsymmErrors.cxx. ◆ Allocate(). Double_t ** TGraphAsymmErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 444 of file TGraphAsymmErrors.cxx. ◆ Apply(). void TGraphAsymmErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 468 of file TGraphAsymmErrors.cxx. ◆ BayesDivide(). void TGraphAsymmErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual . This function is only kept fo",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:41166,Availability,down,down,41166,"ile TGraphAsymmErrors.cxx. ◆ ~TGraphAsymmErrors(). TGraphAsymmErrors::~TGraphAsymmErrors ; (; ). override . TGraphAsymmErrors default destructor. ; Definition at line 433 of file TGraphAsymmErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphAsymmErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl = 0., . Double_t ; exh = 0., . Double_t ; eyl = 0., . Double_t ; eyh = 0. . ). virtual . Add a point with asymmetric errorbars to the graph. ; Definition at line 451 of file TGraphAsymmErrors.cxx. ◆ Allocate(). Double_t ** TGraphAsymmErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 444 of file TGraphAsymmErrors.cxx. ◆ Apply(). void TGraphAsymmErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 468 of file TGraphAsymmErrors.cxx. ◆ BayesDivide(). void TGraphAsymmErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual . This function is only kept for backward compatibility. ; You should rather use the Divide method. It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the former BayesDivide method. ; Definition at line 508 of file TGraphAsymmErrors.cxx. ◆ Class(). static TClass * TGraphAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphAsymmErrors::Class_Version ; (; ). inlinestat",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:42897,Availability,error,errors,42897,"AsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 89 of file TGraphAsymmErrors.h. ◆ ComputeRange(). void TGraphAsymmErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute Range. ; Reimplemented from TGraph.; Definition at line 977 of file TGraphAsymmErrors.cxx. ◆ CopyAndRelease(). void TGraphAsymmErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 1007 of file TGraphAsymmErrors.cxx. ◆ CopyPoints(). Bool_t TGraphAsymmErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 1033 of file TGraphAsymmErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphAsymmErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays ; Definition at line 1061 of file TGraphAsymmErrors.cxx. ◆ DeclFileName(). static const char * TGraphAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Divide(). void TGraphAsymmErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). virtual . Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ; This method serves two purposes:. 1) calculating efficiencies:; The assumption is that the entries in ""pass"" are a subset of those in ""total"". That is, we cr",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:45145,Availability,error,errors,45145,"\text{effective entries} = \frac{(\sum w_{i})^{2}}{\sum w_{i}^{2}}; \]. The points are assigned a x value at the center of each histogram bin. The y values are \(\text{eff} = \frac{\text{pass}}{\text{total}}\) for all options except for the bayesian methods where the result depends on the chosen option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a look at the corresponding functions!; Options:; v : verbose mode: prints information about the number of used bins and calculated efficiencies with their errors; cl=x : determine the used confidence level (0<x<1) (default is 0.683); cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); w : Wilson interval (see TEfficiency::Wilson); n : normal approximation propagation (see TEfficiency::Normal); ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0 (see TEfficiency::Bayesian); mode : use mode of posterior for Bayesian interval (default is mean);",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:45210,Availability,error,errors,45210,"e assigned a x value at the center of each histogram bin. The y values are \(\text{eff} = \frac{\text{pass}}{\text{total}}\) for all options except for the bayesian methods where the result depends on the chosen option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a look at the corresponding functions!; Options:; v : verbose mode: prints information about the number of used bins and calculated efficiencies with their errors; cl=x : determine the used confidence level (0<x<1) (default is 0.683); cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); w : Wilson interval (see TEfficiency::Wilson); n : normal approximation propagation (see TEfficiency::Normal); ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0 (see TEfficiency::Bayesian); mode : use mode of posterior for Bayesian interval (default is mean); shortest: use shortest interval (done by default if mode is set); central: use centra",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:45538,Availability,error,errors,45538,"option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a look at the corresponding functions!; Options:; v : verbose mode: prints information about the number of used bins and calculated efficiencies with their errors; cl=x : determine the used confidence level (0<x<1) (default is 0.683); cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); w : Wilson interval (see TEfficiency::Wilson); n : normal approximation propagation (see TEfficiency::Normal); ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0 (see TEfficiency::Bayesian); mode : use mode of posterior for Bayesian interval (default is mean); shortest: use shortest interval (done by default if mode is set); central: use central interval (done by default if mode is NOT set); pois: interpret histograms as poisson ratio instead of efficiency; e0 : plot efficiency and interval for bins where total=0 (default is to skip them). Note: Unfor",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:47242,Availability,error,errors,47242,"fault if mode is set); central: use central interval (done by default if mode is NOT set); pois: interpret histograms as poisson ratio instead of efficiency; e0 : plot efficiency and interval for bins where total=0 (default is to skip them). Note: Unfortunately there is no straightforward approach for determining a confidence interval for a given confidence level. The actual coverage probability of the confidence interval oscillates significantly according to the total number of events and the true efficiency. In order to decrease the impact of this oscillation on the actual coverage probability a couple of approximations and methodes has been developed. For a detailed discussion, please have a look at this statistical paper: http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf ; Definition at line 588 of file TGraphAsymmErrors.cxx. ◆ DoMerge(). Bool_t TGraphAsymmErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 1077 of file TGraphAsymmErrors.cxx. ◆ FillZero(). void TGraphAsymmErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 1104 of file TGraphAsymmErrors.cxx. ◆ GetErrorX(). Double_t TGraphAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overrid",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:47740,Availability,error,error,47740,"ion on the actual coverage probability a couple of approximations and methodes has been developed. For a detailed discussion, please have a look at this statistical paper: http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf ; Definition at line 588 of file TGraphAsymmErrors.cxx. ◆ DoMerge(). Bool_t TGraphAsymmErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 1077 of file TGraphAsymmErrors.cxx. ◆ FillZero(). void TGraphAsymmErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 1104 of file TGraphAsymmErrors.cxx. ◆ GetErrorX(). Double_t TGraphAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definit",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:48020,Availability,error,error,48020,"n at line 588 of file TGraphAsymmErrors.cxx. ◆ DoMerge(). Bool_t TGraphAsymmErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 1077 of file TGraphAsymmErrors.cxx. ◆ FillZero(). void TGraphAsymmErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 1104 of file TGraphAsymmErrors.cxx. ◆ GetErrorX(). Double_t TGraphAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definition at line 1173 of file TGraphAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on Y. ; Reimplemented from TGraph.; Definition at line 1184 of file TGraphAsymmErrors.cx",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:48226,Availability,error,error,48226,"ith asymmetric errors. ; Reimplemented from TGraph.; Definition at line 1077 of file TGraphAsymmErrors.cxx. ◆ FillZero(). void TGraphAsymmErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 1104 of file TGraphAsymmErrors.cxx. ◆ GetErrorX(). Double_t TGraphAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definition at line 1173 of file TGraphAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on Y. ; Reimplemented from TGraph.; Definition at line 1184 of file TGraphAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGrap",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:48441,Availability,error,error,48441,"tual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 1104 of file TGraphAsymmErrors.cxx. ◆ GetErrorX(). Double_t TGraphAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definition at line 1173 of file TGraphAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on Y. ; Reimplemented from TGraph.; Definition at line 1184 of file TGraphAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraphAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 74 of file TGraphAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraphAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimpleme",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:48721,Availability,error,error,48721,turns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definition at line 1173 of file TGraphAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on Y. ; Reimplemented from TGraph.; Definition at line 1184 of file TGraphAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraphAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 74 of file TGraphAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraphAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 77 of file TGraphAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraphAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 76 of file TGraphAsymmErrors.h. ◆ IsA(). T,MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:48927,Availability,error,error,48927,ouble_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definition at line 1173 of file TGraphAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on Y. ; Reimplemented from TGraph.; Definition at line 1184 of file TGraphAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraphAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 74 of file TGraphAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraphAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 77 of file TGraphAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraphAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 76 of file TGraphAsymmErrors.h. ◆ IsA(). TClass * TGraphAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Merge(). Int_,MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:50031,Availability,error,errors,50031,"(). Double_t * TGraphAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraphAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 74 of file TGraphAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraphAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 77 of file TGraphAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraphAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 76 of file TGraphAsymmErrors.h. ◆ IsA(). TClass * TGraphAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Merge(). Int_t TGraphAsymmErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with asymmetric errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 1196 of file TGraphAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtu",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:50144,Availability,error,error,50144,"tual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraphAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 74 of file TGraphAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraphAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 77 of file TGraphAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraphAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 76 of file TGraphAsymmErrors.h. ◆ IsA(). TClass * TGraphAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Merge(). Int_t TGraphAsymmErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with asymmetric errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 1196 of file TGraphAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1.",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:50545,Availability,error,errors,50545,"GetEYlow(). Double_t * TGraphAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 76 of file TGraphAsymmErrors.h. ◆ IsA(). TClass * TGraphAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Merge(). Int_t TGraphAsymmErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with asymmetric errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 1196 of file TGraphAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 1274 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [1/2]. void TGraphAsymmErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:51064,Availability,error,errors,51064,"Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 1196 of file TGraphAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 1274 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [1/2]. void TGraphAsymmErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 1299 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [2/2]. void TGraphAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point number i. ; Definition at line 1331 of file TGraphAsymmErrors.cxx. ◆ SetPointEXhigh(). void TGraphAsymmErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exh . ). virtual . Set EXhigh for point i. ; Definition at line 1362 of file TGra",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:51154,Availability,error,errors,51154,"phAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 1274 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [1/2]. void TGraphAsymmErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 1299 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [2/2]. void TGraphAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point number i. ; Definition at line 1331 of file TGraphAsymmErrors.cxx. ◆ SetPointEXhigh(). void TGraphAsymmErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exh . ). virtual . Set EXhigh for point i. ; Definition at line 1362 of file TGraphAsymmErrors.cxx. ◆ SetPointEXlow(). void TGraphAsymmErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exl . ). virtual . Set EXlow for point",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:51212,Availability,error,errors,51212,"phAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 1274 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [1/2]. void TGraphAsymmErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 1299 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [2/2]. void TGraphAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point number i. ; Definition at line 1331 of file TGraphAsymmErrors.cxx. ◆ SetPointEXhigh(). void TGraphAsymmErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exh . ). virtual . Set EXhigh for point i. ; Definition at line 1362 of file TGraphAsymmErrors.cxx. ◆ SetPointEXlow(). void TGraphAsymmErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exl . ). virtual . Set EXlow for point",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:51278,Availability,error,errors,51278,"phAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 1274 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [1/2]. void TGraphAsymmErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 1299 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [2/2]. void TGraphAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point number i. ; Definition at line 1331 of file TGraphAsymmErrors.cxx. ◆ SetPointEXhigh(). void TGraphAsymmErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exh . ). virtual . Set EXhigh for point i. ; Definition at line 1362 of file TGraphAsymmErrors.cxx. ◆ SetPointEXlow(). void TGraphAsymmErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exl . ). virtual . Set EXlow for point",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:53730,Availability,error,errors,53730," Set EYlow for point i. ; Definition at line 1376 of file TGraphAsymmErrors.cxx. ◆ Streamer(). void TGraphAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphAsymmErrors. ; Reimplemented from TGraph.; Definition at line 1404 of file TGraphAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraphAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TGraphAsymmErrors.h. ◆ SwapPoints(). void TGraphAsymmErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 1456 of file TGraphAsymmErrors.cxx. ◆ UpdateArrays(). void TGraphAsymmErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 1468 of file TGraphAsymmErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 30 of file TGraphAsymmErrors.h. ◆ fEXlow. Double_t* TGraphAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 29 of file TGraphAsymmErrors.h. ◆ fEYhigh. Double_t* TGraphAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 32 of file TGraphAsymmErrors.h. ◆ fEYlow. Double_t* TGraphAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 31 of file TGraphAsymmErrors.h. Libraries for TGraphAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphAsymmErrors.h; hist/hist/src/TGraphAsymmErrors.cxx. TGraphAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:53885,Availability,error,errors,53885," Set EYlow for point i. ; Definition at line 1376 of file TGraphAsymmErrors.cxx. ◆ Streamer(). void TGraphAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphAsymmErrors. ; Reimplemented from TGraph.; Definition at line 1404 of file TGraphAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraphAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TGraphAsymmErrors.h. ◆ SwapPoints(). void TGraphAsymmErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 1456 of file TGraphAsymmErrors.cxx. ◆ UpdateArrays(). void TGraphAsymmErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 1468 of file TGraphAsymmErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 30 of file TGraphAsymmErrors.h. ◆ fEXlow. Double_t* TGraphAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 29 of file TGraphAsymmErrors.h. ◆ fEYhigh. Double_t* TGraphAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 32 of file TGraphAsymmErrors.h. ◆ fEYlow. Double_t* TGraphAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 31 of file TGraphAsymmErrors.h. Libraries for TGraphAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphAsymmErrors.h; hist/hist/src/TGraphAsymmErrors.cxx. TGraphAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:54043,Availability,error,errors,54043," Set EYlow for point i. ; Definition at line 1376 of file TGraphAsymmErrors.cxx. ◆ Streamer(). void TGraphAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphAsymmErrors. ; Reimplemented from TGraph.; Definition at line 1404 of file TGraphAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraphAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TGraphAsymmErrors.h. ◆ SwapPoints(). void TGraphAsymmErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 1456 of file TGraphAsymmErrors.cxx. ◆ UpdateArrays(). void TGraphAsymmErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 1468 of file TGraphAsymmErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 30 of file TGraphAsymmErrors.h. ◆ fEXlow. Double_t* TGraphAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 29 of file TGraphAsymmErrors.h. ◆ fEYhigh. Double_t* TGraphAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 32 of file TGraphAsymmErrors.h. ◆ fEYlow. Double_t* TGraphAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 31 of file TGraphAsymmErrors.h. Libraries for TGraphAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphAsymmErrors.h; hist/hist/src/TGraphAsymmErrors.cxx. TGraphAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:54198,Availability,error,errors,54198," Set EYlow for point i. ; Definition at line 1376 of file TGraphAsymmErrors.cxx. ◆ Streamer(). void TGraphAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphAsymmErrors. ; Reimplemented from TGraph.; Definition at line 1404 of file TGraphAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraphAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TGraphAsymmErrors.h. ◆ SwapPoints(). void TGraphAsymmErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 1456 of file TGraphAsymmErrors.cxx. ◆ UpdateArrays(). void TGraphAsymmErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 1468 of file TGraphAsymmErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 30 of file TGraphAsymmErrors.h. ◆ fEXlow. Double_t* TGraphAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 29 of file TGraphAsymmErrors.h. ◆ fEYhigh. Double_t* TGraphAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 32 of file TGraphAsymmErrors.h. ◆ fEYlow. Double_t* TGraphAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 31 of file TGraphAsymmErrors.h. Libraries for TGraphAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphAsymmErrors.h; hist/hist/src/TGraphAsymmErrors.cxx. TGraphAsymmErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:17131,Deployability,continuous,continuous,17131,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:31129,Deployability,release,release,31129," Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAlloc",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:42635,Deployability,release,release,42635,"otal,""cl=0.683 b(1,1) mode"") which is equivalent to the former BayesDivide method. ; Definition at line 508 of file TGraphAsymmErrors.cxx. ◆ Class(). static TClass * TGraphAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 89 of file TGraphAsymmErrors.h. ◆ ComputeRange(). void TGraphAsymmErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute Range. ; Reimplemented from TGraph.; Definition at line 977 of file TGraphAsymmErrors.cxx. ◆ CopyAndRelease(). void TGraphAsymmErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 1007 of file TGraphAsymmErrors.cxx. ◆ CopyPoints(). Bool_t TGraphAsymmErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 1033 of file TGraphAsymmErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphAsymmErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays ; Definition at line 1061 of file TGraphAsymmErrors.cxx. ◆ DeclFileName(). static const char * TGraphAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Divide(). void TGraphAsymmErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:32217,Energy Efficiency,allocate,allocate,32217,"_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] ar",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:32732,Energy Efficiency,allocate,allocate,32732,"s. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:19810,Integrability,message,message,19810,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:20231,Integrability,message,message,20231,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:20889,Integrability,message,message,20889,"ms, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:23505,Integrability,message,message,23505,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:23696,Integrability,message,message,23696,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:44437,Integrability,depend,depends,44437,"TGraphAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Divide(). void TGraphAsymmErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). virtual . Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ; This method serves two purposes:. 1) calculating efficiencies:; The assumption is that the entries in ""pass"" are a subset of those in ""total"". That is, we create an ""efficiency"" graph, where each entry is between 0 and 1, inclusive.; If the histograms are not filled with unit weights, the number of effective entries is used to normalise the bin contents which might lead to wrong results. ; \[; \text{effective entries} = \frac{(\sum w_{i})^{2}}{\sum w_{i}^{2}}; \]. The points are assigned a x value at the center of each histogram bin. The y values are \(\text{eff} = \frac{\text{pass}}{\text{total}}\) for all options except for the bayesian methods where the result depends on the chosen option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a l",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:45217,Integrability,depend,depend,45217,"e assigned a x value at the center of each histogram bin. The y values are \(\text{eff} = \frac{\text{pass}}{\text{total}}\) for all options except for the bayesian methods where the result depends on the chosen option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a look at the corresponding functions!; Options:; v : verbose mode: prints information about the number of used bins and calculated efficiencies with their errors; cl=x : determine the used confidence level (0<x<1) (default is 0.683); cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); w : Wilson interval (see TEfficiency::Wilson); n : normal approximation propagation (see TEfficiency::Normal); ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0 (see TEfficiency::Bayesian); mode : use mode of posterior for Bayesian interval (default is mean); shortest: use shortest interval (done by default if mode is set); central: use centra",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:7216,Modifiability,inherit,inherited,7216,"t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point number i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exh);  Set EXhigh for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exl);  Set EXlow for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Double_t eyh);  Set EYhigh for point i. ;  ; virtual void SetPointEYlow (Int_t i, Double_t eyl);  Set EYlow for point i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphAsymmErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and vy. ;  ;  TGraph (const TVectorF &vx, const TVectorF &vy);  Graph constructor with two vectors of floats in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of poin",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:17182,Modifiability,inherit,inherited,17182,"er i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:18647,Modifiability,inherit,inherited,18647,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:19440,Modifiability,inherit,inheritance,19440,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:20987,Modifiability,inherit,inherits,20987,"ameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:21104,Modifiability,inherit,inherits,21104,"method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:24003,Modifiability,inherit,inherited,24003,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:25508,Modifiability,inherit,inherited,25508,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:26763,Modifiability,inherit,inherited,26763,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:28377,Modifiability,inherit,inherited,28377,"this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Me",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:29242,Modifiability,inherit,inherited,29242," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:29452,Modifiability,inherit,inherited,29452," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:29970,Modifiability,inherit,inherited,29970,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGra",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:30182,Modifiability,inherit,inherited,30182,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGra",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:30394,Modifiability,inherit,inherited,30394,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGra",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:31956,Modifiability,inherit,inherited,31956,"ata structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void Ma",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:32823,Modifiability,inherit,inherited,32823," fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ; ",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33326,Modifiability,inherit,inherited,33326,"ze points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill ar",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33905,Modifiability,inherit,inherited,33905,"ar *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:33987,Modifiability,inherit,inherited,33987,"ar *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:34148,Modifiability,inherit,inherited,34148," Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClean",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:34281,Modifiability,inherit,inherited,34281," ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoConte",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:34475,Modifiability,inherit,inherited,34475,"dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:34744,Modifiability,inherit,inherited,34744," X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphAsymmErrors.h>. Inheritance diagram for TGraphAsymmErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphAs",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:35385,Modifiability,inherit,inherited,35385,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphAsymmErrors.h>. Inheritance diagram for TGraphAsymmErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphAsymmErrors() [1/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; ). TGraphAsymmErrors default constructor. ; Definition at line 72 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [2/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; Int_t ; n). TGraphAsymmErrors normal constructor. ; the arrays are preset to zero ; Definition at line 119 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [3/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exl = nullptr, . const Float_t * ; exh = nullptr, . const Float_t * ; eyl = nullptr, . const Float_t * ; eyh = nullptr . ). TGraphAsymmErro",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:35491,Modifiability,inherit,inherited,35491,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphAsymmErrors.h>. Inheritance diagram for TGraphAsymmErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphAsymmErrors() [1/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; ). TGraphAsymmErrors default constructor. ; Definition at line 72 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [2/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; Int_t ; n). TGraphAsymmErrors normal constructor. ; the arrays are preset to zero ; Definition at line 119 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [3/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exl = nullptr, . const Float_t * ; exh = nullptr, . const Float_t * ; eyl = nullptr, . const Float_t * ; eyh = nullptr . ). TGraphAsymmErro",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:425,Performance,perform,performed,425,". ROOT: TGraphAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphAsymmErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars. ; The TGraphAsymmErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definitio",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:31452,Performance,perform,perform,31452," ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void Sa",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:47187,Performance,perform,perform,47187,"fault if mode is set); central: use central interval (done by default if mode is NOT set); pois: interpret histograms as poisson ratio instead of efficiency; e0 : plot efficiency and interval for bins where total=0 (default is to skip them). Note: Unfortunately there is no straightforward approach for determining a confidence interval for a given confidence level. The actual coverage probability of the confidence interval oscillates significantly according to the total number of events and the true efficiency. In order to decrease the impact of this oscillation on the actual coverage probability a couple of approximations and methodes has been developed. For a detailed discussion, please have a look at this statistical paper: http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf ; Definition at line 588 of file TGraphAsymmErrors.cxx. ◆ DoMerge(). Bool_t TGraphAsymmErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 1077 of file TGraphAsymmErrors.cxx. ◆ FillZero(). void TGraphAsymmErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 1104 of file TGraphAsymmErrors.cxx. ◆ GetErrorX(). Double_t TGraphAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1122 of file TGraphAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overrid",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:39677,Safety,avoid,avoid,39677,"GraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; option = """" . ). Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphAsymmErrors::Divide) ; Definition at line 260 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [10/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg %lg %lg"", . Option_t * ; option = """" . ). TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ; convention for format (default=""%lg %lg %lg %lg %lg %lg""); format = ""%lg %lg"" read only 2 first columns into X, Y; format = ""%lg %lg %lg %lg"" read only 4 first columns into X, Y, ELY, EHY; format = ""%lg %lg %lg %lg %lg %lg"" read only 6 first columns into X, Y, EXL, EYH, EYL, EHY. For files separated by a specific delimiter different from ‘’ 'and'\t'(e.g.';'in csv files) you can avoid using%*sto bypass this delimiter by explicitly specify the""option"" argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters ‘(’ ', '\t', ',', ';') used once(e.g. ""1;1"")or in a combined way("" 1;,;; 1""). Note in that case, the instantiation is about 2 times slower. In case a delimiter is specified, the format""%lg %lg %lg""` will read X,Y,EX. ; Definition at line 299 of file TGraphAsymmErrors.cxx. ◆ ~TGraphAsymmErrors(). TGraphAsymmErrors::~TGraphAsymmErrors ; (; ). override . TGraphAsymmErrors default destructor. ; Definition at line 433 of file TGraphAsymmErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphAsymmErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl = 0., . Double_t ; exh = 0., . Double_t ; eyl = 0., . Double_t ; eyh = 0. . ). virtual . Add a point with asymmetric errorbars to the graph. ; Definition at line 451 of file TGraphAsymmErrors.cxx. ◆ Allocate(). Double_t ** TGraphAsymmErrors::Allocate ; (; Int_t ; size). overrid",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:18050,Security,hash,hash,18050," Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:14085,Testability,log,logx,14085,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:14105,Testability,log,logy,14105,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:14171,Testability,log,log,14171,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:14215,Testability,log,logarithmic,14215,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphAsymmErrors.html:14256,Testability,log,log,14256,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html
https://root.cern/doc/master/classTGraphBentErrors-members.html:3304,Availability,error,error,3304,"rror(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphBentErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXhighTGraphBentErrorsprotected; fEXhighdTGraphBentErrorsprotected; fEXlowTGraphBentErrorsprotected; fEXlowdTGraphBentErrorsprotected; fEYhighTGraphBentErrorsprotected; fEYhighdTGraphBentErrorsprotected; fEYlowTGraphBentErrorsprotected; fEYlowdTGraphBentErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphBentErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj)",MatchSource.WIKI,doc/master/classTGraphBentErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html
https://root.cern/doc/master/classTGraphBentErrors-members.html:3385,Availability,error,error,3385,"rror(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphBentErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXhighTGraphBentErrorsprotected; fEXhighdTGraphBentErrorsprotected; fEXlowTGraphBentErrorsprotected; fEXlowdTGraphBentErrorsprotected; fEYhighTGraphBentErrorsprotected; fEYhighdTGraphBentErrorsprotected; fEYlowTGraphBentErrorsprotected; fEYlowdTGraphBentErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphBentErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj)",MatchSource.WIKI,doc/master/classTGraphBentErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html
https://root.cern/doc/master/classTGraphBentErrors-members.html:205,Modifiability,inherit,inherited,205,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphBentErrors Member List. This is the complete list of members for TGraphBentErrors, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *f, Double_t c1=1)TGraphvirtual; AddPoint(Double_t x, Double_t y)TGraphinlinevirtual; AddPointError(Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)TGraphBentErrorsvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; Allocate(Int_t size) overrideTGraphBentErrorsinlineprotectedvirtual; AllocateArrays(Int_t Narrays, Int_t arraySize)TGraphprotected; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF1 *f) overrideTGraphBentErrorsvirtual; Browse(TBrowser *b) overrideTGraphvirtual; CheckedHash()TObjectinline; Chisquare(TF1 *f1, Option_t *option="""") constTGraphvirtual; Class()TGraphBentErrorsstatic; Class_Name()TGraphBentErrorsstatic; Class_Version()TGraphBentErrorsinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareArg(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareRadius(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareX(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareY(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideTGraphBentErrorsvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideTGraphBentErrorsprotectedvirtual; CopyPoints(Doubl",MatchSource.WIKI,doc/master/classTGraphBentErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html
https://root.cern/doc/master/classTGraphBentErrors-members.html:9856,Testability,log,logx,9856,"IsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphBentErrorsvirtual; Read(const char *na",MatchSource.WIKI,doc/master/classTGraphBentErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html
https://root.cern/doc/master/classTGraphBentErrors-members.html:9876,Testability,log,logy,9876,"Object; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphBentErrorsvirtual; Read(const char *name)TObjectvirtual; R",MatchSource.WIKI,doc/master/classTGraphBentErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors-members.html
https://root.cern/doc/master/classTGraphBentErrors.html:405,Availability,error,error,405,". ROOT: TGraphBentErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphBentErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. ; The TGraphBentErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphBentErrors::TGraphBentErrorsTGraphBentErrors()TGraphBentErrors default constructor.Definition TGraphBentErrors.cxx:62; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this grap",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:663,Availability,error,error,663,". ROOT: TGraphBentErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphBentErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. ; The TGraphBentErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphBentErrors::TGraphBentErrorsTGraphBentErrors()TGraphBentErrors default constructor.Definition TGraphBentErrors.cxx:62; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this grap",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:3627,Availability,error,errors,3627,"TGraphBentErrors &gr);  TGraphBentErrors copy constructor. ;  ;  TGraphBentErrors (Int_t n);  TGraphBentErrors normal constructor. ;  ;  TGraphBentErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *exl=nullptr, const Double_t *exh=nullptr, const Double_t *eyl=nullptr, const Double_t *eyh=nullptr, const Double_t *exld=nullptr, const Double_t *exhd=nullptr, const Double_t *eyld=nullptr, const Double_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  TGraphBentErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr, const Float_t *exld=nullptr, const Float_t *exhd=nullptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const over",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:3926,Availability,error,error,3926,"ullptr, const Double_t *eyld=nullptr, const Double_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  TGraphBentErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr, const Float_t *exld=nullptr, const Float_t *exhd=nullptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:4018,Availability,error,error,4018,"normal constructor. ;  ;  TGraphBentErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr, const Float_t *exld=nullptr, const Float_t *exhd=nullptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:4097,Availability,error,error,4097,"at_t *y, const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr, const Float_t *exld=nullptr, const Float_t *exhd=nullptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGrap",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:4180,Availability,error,error,4180,"lptr, const Float_t *eyh=nullptr, const Float_t *exld=nullptr, const Float_t *exhd=nullptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:4272,Availability,error,error,4272,"ptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Doub",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:4351,Availability,error,error,4351,"s normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point pointed by the mouse. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:4815,Availability,error,errors,4815,"hd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:5055,Availability,error,errors,5055,"etErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TG",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:18210,Availability,error,error,18210,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:18299,Availability,error,error,18299,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:18454,Availability,error,error,18454,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (co",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:18631,Availability,error,error,18631,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:21905,Availability,error,error,21905,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:29646,Availability,error,errors,29646,"ass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:29915,Availability,error,errors,29915," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Re",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:31525,Availability,error,errors,31525,"mber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Pro",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:31651,Availability,error,errors,31651,"mber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Pro",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:31777,Availability,error,errors,31777,"mber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Pro",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:31903,Availability,error,errors,31903,"mber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Pro",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:36699,Availability,error,errors,36699,"r, . const Double_t * ; exld = nullptr, . const Double_t * ; exhd = nullptr, . const Double_t * ; eyld = nullptr, . const Double_t * ; eyhd = nullptr . ). TGraphBentErrors normal constructor. ; if exl,h or eyl,h are null, the corresponding arrays are preset to zero ; Definition at line 142 of file TGraphBentErrors.cxx. ◆ TGraphBentErrors() [5/5]. TGraphBentErrors::TGraphBentErrors ; (; const TGraphBentErrors & ; gr). TGraphBentErrors copy constructor. ; Definition at line 71 of file TGraphBentErrors.cxx. ◆ ~TGraphBentErrors(). TGraphBentErrors::~TGraphBentErrors ; (; ). override . TGraphBentErrors default destructor. ; Definition at line 176 of file TGraphBentErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphBentErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Add a point with bent errors to the graph. ; Definition at line 192 of file TGraphBentErrors.cxx. ◆ Allocate(). Double_t ** TGraphBentErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 104 of file TGraphBentErrors.h. ◆ Apply(). void TGraphBentErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \).; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 210 of file TGraphBentErrors.cxx. ◆ Class(). static TClass * TGraphBentErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphBentErrors::Class_Na",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:37323,Availability,down,down,37323,"hBentErrors default destructor. ; Definition at line 176 of file TGraphBentErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphBentErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Add a point with bent errors to the graph. ; Definition at line 192 of file TGraphBentErrors.cxx. ◆ Allocate(). Double_t ** TGraphBentErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 104 of file TGraphBentErrors.h. ◆ Apply(). void TGraphBentErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \).; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 210 of file TGraphBentErrors.cxx. ◆ Class(). static TClass * TGraphBentErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphBentErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphBentErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 101 of file TGraphBentErrors.h. ◆ ComputeRange(). void TGraphBentErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 248 of file TGraphBentErrors.cxx. ◆ CopyAndRelease(). void TGraphBentErrors::CopyAndRelease ; (; Double_t ** ; newarra",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:38645,Availability,error,errors,38645," * TGraphBentErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphBentErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 101 of file TGraphBentErrors.h. ◆ ComputeRange(). void TGraphBentErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 248 of file TGraphBentErrors.cxx. ◆ CopyAndRelease(). void TGraphBentErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 278 of file TGraphBentErrors.cxx. ◆ CopyPoints(). Bool_t TGraphBentErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE***to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 312 of file TGraphBentErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphBentErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set. ; Definition at line 346 of file TGraphBentErrors.cxx. ◆ DeclFileName(). static const char * TGraphBentErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:39350,Availability,error,errors,39350,"Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 278 of file TGraphBentErrors.cxx. ◆ CopyPoints(). Bool_t TGraphBentErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE***to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 312 of file TGraphBentErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphBentErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set. ; Definition at line 346 of file TGraphBentErrors.cxx. ◆ DeclFileName(). static const char * TGraphBentErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Defi",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:39836,Availability,error,error,39836,"; (; ). protected . Should be called from ctors after fNpoints has been set. ; Definition at line 346 of file TGraphBentErrors.cxx. ◆ DeclFileName(). static const char * TGraphBentErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::G",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:40058,Availability,error,error,40058,"c . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:40266,Availability,error,error,40266,"al . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:40475,Availability,error,error,40475,"illZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 85 of file TGraphBentErrors.h. ◆ GetEXlow(). Double_t * TGraphBentErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:40697,Availability,error,error,40697,ile TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 85 of file TGraphBentErrors.h. ◆ GetEXlow(). Double_t * TGraphBentErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 80 of file TGraphBentErrors.h. ◆ GetEXlowd(). Double_t * TGraphBentErrors::GetEXlowd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 84 of file TGraphBentErrors.h. ◆ GetEYhigh(,MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:40905,Availability,error,error,40905,ine 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 81 of file TGraphBentErrors.h. ◆ GetEXhighd(). Double_t * TGraphBentErrors::GetEXhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 85 of file TGraphBentErrors.h. ◆ GetEXlow(). Double_t * TGraphBentErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 80 of file TGraphBentErrors.h. ◆ GetEXlowd(). Double_t * TGraphBentErrors::GetEXlowd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 84 of file TGraphBentErrors.h. ◆ GetEYhigh(). Double_t * TGraphBentErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 83 of file TGraphBentErrors.h. ◆ GetEYhighd(). Double_t * TGraphBentErrors::GetEY,MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:42683,Availability,error,errors,42683,"rs.h. ◆ GetEYhigh(). Double_t * TGraphBentErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 83 of file TGraphBentErrors.h. ◆ GetEYhighd(). Double_t * TGraphBentErrors::GetEYhighd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 87 of file TGraphBentErrors.h. ◆ GetEYlow(). Double_t * TGraphBentErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 82 of file TGraphBentErrors.h. ◆ GetEYlowd(). Double_t * TGraphBentErrors::GetEYlowd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 86 of file TGraphBentErrors.h. ◆ IsA(). TClass * TGraphBentErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 101 of file TGraphBentErrors.h. ◆ Print(). void TGraphBentErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 495 of file TGraphBentErrors.cxx. ◆ SavePrimitive(). void TGraphBentErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 551 of file TGraphBentErrors.cxx. ◆ Scale(). void TGraphBentErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphBentErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 510 of file TGraphBentErrors.cxx. ◆ SetPointError() [1/2]. void TGraphBentErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:43196,Availability,error,errors,43196,"Ylowd(). Double_t * TGraphBentErrors::GetEYlowd ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 86 of file TGraphBentErrors.h. ◆ IsA(). TClass * TGraphBentErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 101 of file TGraphBentErrors.h. ◆ Print(). void TGraphBentErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 495 of file TGraphBentErrors.cxx. ◆ SavePrimitive(). void TGraphBentErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 551 of file TGraphBentErrors.cxx. ◆ Scale(). void TGraphBentErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphBentErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 510 of file TGraphBentErrors.cxx. ◆ SetPointError() [1/2]. void TGraphBentErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 587 of file TGraphBentErrors.cxx. ◆ SetPointError() [2/2]. void TGraphBentErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point number i. ; Definition at line 624 of file TGraphBentErrors",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:43285,Availability,error,errors,43285,"le TGraphBentErrors.h. ◆ IsA(). TClass * TGraphBentErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 101 of file TGraphBentErrors.h. ◆ Print(). void TGraphBentErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 495 of file TGraphBentErrors.cxx. ◆ SavePrimitive(). void TGraphBentErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 551 of file TGraphBentErrors.cxx. ◆ Scale(). void TGraphBentErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphBentErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 510 of file TGraphBentErrors.cxx. ◆ SetPointError() [1/2]. void TGraphBentErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 587 of file TGraphBentErrors.cxx. ◆ SetPointError() [2/2]. void TGraphBentErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point number i. ; Definition at line 624 of file TGraphBentErrors.cxx. ◆ Streamer(). void TGraphBentErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented f",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:43343,Availability,error,errors,43343,"le TGraphBentErrors.h. ◆ IsA(). TClass * TGraphBentErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 101 of file TGraphBentErrors.h. ◆ Print(). void TGraphBentErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 495 of file TGraphBentErrors.cxx. ◆ SavePrimitive(). void TGraphBentErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 551 of file TGraphBentErrors.cxx. ◆ Scale(). void TGraphBentErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphBentErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 510 of file TGraphBentErrors.cxx. ◆ SetPointError() [1/2]. void TGraphBentErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 587 of file TGraphBentErrors.cxx. ◆ SetPointError() [2/2]. void TGraphBentErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point number i. ; Definition at line 624 of file TGraphBentErrors.cxx. ◆ Streamer(). void TGraphBentErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented f",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:43409,Availability,error,errors,43409,"le TGraphBentErrors.h. ◆ IsA(). TClass * TGraphBentErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 101 of file TGraphBentErrors.h. ◆ Print(). void TGraphBentErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 495 of file TGraphBentErrors.cxx. ◆ SavePrimitive(). void TGraphBentErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 551 of file TGraphBentErrors.cxx. ◆ Scale(). void TGraphBentErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphBentErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 510 of file TGraphBentErrors.cxx. ◆ SetPointError() [1/2]. void TGraphBentErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 587 of file TGraphBentErrors.cxx. ◆ SetPointError() [2/2]. void TGraphBentErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point number i. ; Definition at line 624 of file TGraphBentErrors.cxx. ◆ Streamer(). void TGraphBentErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented f",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:45246,Availability,error,errors,45246," (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented from TGraph. ◆ StreamerNVirtual(). void TGraphBentErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 101 of file TGraphBentErrors.h. ◆ SwapPoints(). void TGraphBentErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 646 of file TGraphBentErrors.cxx. ◆ UpdateArrays(). void TGraphBentErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 665 of file TGraphBentErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphBentErrors::fEXhigh. protected . [fNpoints] array of X high errors ; Definition at line 29 of file TGraphBentErrors.h. ◆ fEXhighd. Double_t* TGraphBentErrors::fEXhighd. protected . [fNpoints] array of X high displacements ; Definition at line 34 of file TGraphBentErrors.h. ◆ fEXlow. Double_t* TGraphBentErrors::fEXlow. protected . [fNpoints] array of X low errors ; Definition at line 28 of file TGraphBentErrors.h. ◆ fEXlowd. Double_t* TGraphBentErrors::fEXlowd. protected . [fNpoints] array of X low displacements ; Definition at line 33 of file TGraphBentErrors.h. ◆ fEYhigh. Double_t* TGraphBentErrors::fEYhigh. protected . [fNpoints] array of Y high errors ; Definition at line 31 of file TGraphBentErrors.h. ◆ fEYhighd. Double_t* TGraphBentErrors::fEYhighd. protected . [fNpoints] array of Y high displacements ; Definition at line 36 of file TGraphBentErrors.h. ◆ fEYlow. Double_t* TGraphBentErrors::fEYlow. protected . [fNpoints] array of Y low errors ; Definition at line 30 of file TGraphBentErrors.h. ◆ fEYlowd. Double_t* TGraphBentErrors::fEYlowd. protected . [",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:45544,Availability,error,errors,45544,"entErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 646 of file TGraphBentErrors.cxx. ◆ UpdateArrays(). void TGraphBentErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 665 of file TGraphBentErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphBentErrors::fEXhigh. protected . [fNpoints] array of X high errors ; Definition at line 29 of file TGraphBentErrors.h. ◆ fEXhighd. Double_t* TGraphBentErrors::fEXhighd. protected . [fNpoints] array of X high displacements ; Definition at line 34 of file TGraphBentErrors.h. ◆ fEXlow. Double_t* TGraphBentErrors::fEXlow. protected . [fNpoints] array of X low errors ; Definition at line 28 of file TGraphBentErrors.h. ◆ fEXlowd. Double_t* TGraphBentErrors::fEXlowd. protected . [fNpoints] array of X low displacements ; Definition at line 33 of file TGraphBentErrors.h. ◆ fEYhigh. Double_t* TGraphBentErrors::fEYhigh. protected . [fNpoints] array of Y high errors ; Definition at line 31 of file TGraphBentErrors.h. ◆ fEYhighd. Double_t* TGraphBentErrors::fEYhighd. protected . [fNpoints] array of Y high displacements ; Definition at line 36 of file TGraphBentErrors.h. ◆ fEYlow. Double_t* TGraphBentErrors::fEYlow. protected . [fNpoints] array of Y low errors ; Definition at line 30 of file TGraphBentErrors.h. ◆ fEYlowd. Double_t* TGraphBentErrors::fEYlowd. protected . [fNpoints] array of Y low displacements ; Definition at line 35 of file TGraphBentErrors.h. Libraries for TGraphBentErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphBentErrors.h; hist/hist/src/TGraphBentErrors.cxx. TGraphBentErrors. ROO",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:45842,Availability,error,errors,45842," Reimplemented from TGraph.; Definition at line 646 of file TGraphBentErrors.cxx. ◆ UpdateArrays(). void TGraphBentErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 665 of file TGraphBentErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphBentErrors::fEXhigh. protected . [fNpoints] array of X high errors ; Definition at line 29 of file TGraphBentErrors.h. ◆ fEXhighd. Double_t* TGraphBentErrors::fEXhighd. protected . [fNpoints] array of X high displacements ; Definition at line 34 of file TGraphBentErrors.h. ◆ fEXlow. Double_t* TGraphBentErrors::fEXlow. protected . [fNpoints] array of X low errors ; Definition at line 28 of file TGraphBentErrors.h. ◆ fEXlowd. Double_t* TGraphBentErrors::fEXlowd. protected . [fNpoints] array of X low displacements ; Definition at line 33 of file TGraphBentErrors.h. ◆ fEYhigh. Double_t* TGraphBentErrors::fEYhigh. protected . [fNpoints] array of Y high errors ; Definition at line 31 of file TGraphBentErrors.h. ◆ fEYhighd. Double_t* TGraphBentErrors::fEYhighd. protected . [fNpoints] array of Y high displacements ; Definition at line 36 of file TGraphBentErrors.h. ◆ fEYlow. Double_t* TGraphBentErrors::fEYlow. protected . [fNpoints] array of Y low errors ; Definition at line 30 of file TGraphBentErrors.h. ◆ fEYlowd. Double_t* TGraphBentErrors::fEYlowd. protected . [fNpoints] array of Y low displacements ; Definition at line 35 of file TGraphBentErrors.h. Libraries for TGraphBentErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphBentErrors.h; hist/hist/src/TGraphBentErrors.cxx. TGraphBentErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:46140,Availability,error,errors,46140," Reimplemented from TGraph.; Definition at line 646 of file TGraphBentErrors.cxx. ◆ UpdateArrays(). void TGraphBentErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 665 of file TGraphBentErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphBentErrors::fEXhigh. protected . [fNpoints] array of X high errors ; Definition at line 29 of file TGraphBentErrors.h. ◆ fEXhighd. Double_t* TGraphBentErrors::fEXhighd. protected . [fNpoints] array of X high displacements ; Definition at line 34 of file TGraphBentErrors.h. ◆ fEXlow. Double_t* TGraphBentErrors::fEXlow. protected . [fNpoints] array of X low errors ; Definition at line 28 of file TGraphBentErrors.h. ◆ fEXlowd. Double_t* TGraphBentErrors::fEXlowd. protected . [fNpoints] array of X low displacements ; Definition at line 33 of file TGraphBentErrors.h. ◆ fEYhigh. Double_t* TGraphBentErrors::fEYhigh. protected . [fNpoints] array of Y high errors ; Definition at line 31 of file TGraphBentErrors.h. ◆ fEYhighd. Double_t* TGraphBentErrors::fEYhighd. protected . [fNpoints] array of Y high displacements ; Definition at line 36 of file TGraphBentErrors.h. ◆ fEYlow. Double_t* TGraphBentErrors::fEYlow. protected . [fNpoints] array of Y low errors ; Definition at line 30 of file TGraphBentErrors.h. ◆ fEYlowd. Double_t* TGraphBentErrors::fEYlowd. protected . [fNpoints] array of Y low displacements ; Definition at line 35 of file TGraphBentErrors.h. Libraries for TGraphBentErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphBentErrors.h; hist/hist/src/TGraphBentErrors.cxx. TGraphBentErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:15537,Deployability,continuous,continuous,15537,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:29538,Deployability,release,release,29538,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:38386,Deployability,release,release,38386," Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 210 of file TGraphBentErrors.cxx. ◆ Class(). static TClass * TGraphBentErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphBentErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphBentErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 101 of file TGraphBentErrors.h. ◆ ComputeRange(). void TGraphBentErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 248 of file TGraphBentErrors.cxx. ◆ CopyAndRelease(). void TGraphBentErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 278 of file TGraphBentErrors.cxx. ◆ CopyPoints(). Bool_t TGraphBentErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE***to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 312 of file TGraphBentErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphBentErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set. ; Definition at line 346 of file TGraphBentErrors.cxx. ◆ DeclFileName(). static const char * TGraphBentErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:30666,Energy Efficiency,allocate,allocate,30666,"E***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:31181,Energy Efficiency,allocate,allocate,31181,"tor< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Dou",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:18216,Integrability,message,message,18216,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:18637,Integrability,message,message,18637,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:19295,Integrability,message,message,19295,"ms, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:21911,Integrability,message,message,21911,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:22102,Integrability,message,message,22102,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:5694,Modifiability,inherit,inherited,5694,"e_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and vy. ;  ;  TGraph (const TVectorF &vx, const TVectorF &vy);  Graph constructor with two vectors of floats in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of poin",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:15588,Modifiability,inherit,inherited,15588,"er i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:17053,Modifiability,inherit,inherited,17053,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:17846,Modifiability,inherit,inheritance,17846,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:19393,Modifiability,inherit,inherits,19393,"ameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:19510,Modifiability,inherit,inherits,19510,"method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:22409,Modifiability,inherit,inherited,22409,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:23914,Modifiability,inherit,inherited,23914,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:25169,Modifiability,inherit,inherited,25169,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:26783,Modifiability,inherit,inherited,26783,"this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Me",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:27648,Modifiability,inherit,inherited,27648," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:27858,Modifiability,inherit,inherited,27858," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:28376,Modifiability,inherit,inherited,28376,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TG",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:28588,Modifiability,inherit,inherited,28588,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TG",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:28800,Modifiability,inherit,inherited,28800,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TG",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:30405,Modifiability,inherit,inherited,30405,"d CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void Ma",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:31272,Modifiability,inherit,inherited,31272,"fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotti",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:32003,Modifiability,inherit,inherited,32003,"mber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Pro",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:32582,Modifiability,inherit,inherited,32582,"isplacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:32664,Modifiability,inherit,inherited,32664,"isplacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:32825,Modifiability,inherit,inherited,32825,"lacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClean",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:32958,Modifiability,inherit,inherited,32958," ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoConte",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:33152,Modifiability,inherit,inherited,33152,"dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:33421,Modifiability,inherit,inherited,33421," X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphBentErrors.h>. Inheritance diagram for TGraphBentErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphBent",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:34062,Modifiability,inherit,inherited,34062,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphBentErrors.h>. Inheritance diagram for TGraphBentErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphBentErrors() [1/5]. TGraphBentErrors::TGraphBentErrors ; (; ). TGraphBentErrors default constructor. ; Definition at line 62 of file TGraphBentErrors.cxx. ◆ TGraphBentErrors() [2/5]. TGraphBentErrors::TGraphBentErrors ; (; Int_t ; n). TGraphBentErrors normal constructor. ; the arrays are preset to zero ; Definition at line 92 of file TGraphBentErrors.cxx. ◆ TGraphBentErrors() [3/5]. TGraphBentErrors::TGraphBentErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exl = nullptr, . const Float_t * ; exh = nullptr, . const Float_t * ; eyl = nullptr, . const Float_t * ; eyh = nullptr, . const Float_t * ; exld = nullptr, . ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:34168,Modifiability,inherit,inherited,34168,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphBentErrors.h>. Inheritance diagram for TGraphBentErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphBentErrors() [1/5]. TGraphBentErrors::TGraphBentErrors ; (; ). TGraphBentErrors default constructor. ; Definition at line 62 of file TGraphBentErrors.cxx. ◆ TGraphBentErrors() [2/5]. TGraphBentErrors::TGraphBentErrors ; (; Int_t ; n). TGraphBentErrors normal constructor. ; the arrays are preset to zero ; Definition at line 92 of file TGraphBentErrors.cxx. ◆ TGraphBentErrors() [3/5]. TGraphBentErrors::TGraphBentErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exl = nullptr, . const Float_t * ; exh = nullptr, . const Float_t * ; eyl = nullptr, . const Float_t * ; eyh = nullptr, . const Float_t * ; exld = nullptr, . ",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:452,Performance,perform,performed,452,". ROOT: TGraphBentErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphBentErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. ; The TGraphBentErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphBentErrors::TGraphBentErrorsTGraphBentErrors()TGraphBentErrors default constructor.Definition TGraphBentErrors.cxx:62; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this grap",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:29860,Performance,perform,perform,29860," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE***to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Re",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:39295,Performance,perform,perform,39295,"Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 278 of file TGraphBentErrors.cxx. ◆ CopyPoints(). Bool_t TGraphBentErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE***to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 312 of file TGraphBentErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphBentErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set. ; Definition at line 346 of file TGraphBentErrors.cxx. ◆ DeclFileName(). static const char * TGraphBentErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Defi",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:16456,Security,hash,hash,16456," Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:12491,Testability,log,logx,12491,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:12511,Testability,log,logy,12511,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:12577,Testability,log,log,12577,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:12621,Testability,log,logarithmic,12621,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphBentErrors.html:12662,Testability,log,log,12662,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html
https://root.cern/doc/master/classTGraphDelaunay-members.html:1554,Availability,error,error,1554,"nst char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeZ(Double_t x, Double_t y)TGraphDelaunay; Copy(TObject &named) const overrideTNamedvirtual; CreateTrianglesDataStructure()TGraphDelaunayprotected; DeclFileName()TGraphDelaunayinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Enclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) constTGraphDelaunayprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllTriTGraphDelaunayprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDistTGraphDelaunayprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraph2DTGraphDelaunayprotected; fHullPointsTGraphDelaunayprotected; FileIt(Int_t P, Int_t N, Int_t M)TGraphDelaunayprotected; FillBuffer(char *&buffer)TNamedvirtual; FindAllTriangles()TGraphDelaunay; FindHull()TGraphDelaunayprotected; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInitTGraphDelaunayprotected; fMaxIterTGraphDelaunayprotected; fMTriedTGraphDelaunayprotected; fNameTNamedprotected; fNdtTGraphDelaunayprotected; fNhullTGraphDelaunayprotected; fNpointsTGraphDelaunayprotected; fNTriedTGraphDelaunayprotected; fOrderTGraphDelaunayprotected; fPTriedTGraphDelaunayprotected; fTitleTNamedprotected; fTriedSizeTGr",MatchSource.WIKI,doc/master/classTGraphDelaunay-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay-members.html
https://root.cern/doc/master/classTGraphDelaunay-members.html:1635,Availability,error,error,1635,"nst char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeZ(Double_t x, Double_t y)TGraphDelaunay; Copy(TObject &named) const overrideTNamedvirtual; CreateTrianglesDataStructure()TGraphDelaunayprotected; DeclFileName()TGraphDelaunayinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Enclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) constTGraphDelaunayprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllTriTGraphDelaunayprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDistTGraphDelaunayprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraph2DTGraphDelaunayprotected; fHullPointsTGraphDelaunayprotected; FileIt(Int_t P, Int_t N, Int_t M)TGraphDelaunayprotected; FillBuffer(char *&buffer)TNamedvirtual; FindAllTriangles()TGraphDelaunay; FindHull()TGraphDelaunayprotected; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInitTGraphDelaunayprotected; fMaxIterTGraphDelaunayprotected; fMTriedTGraphDelaunayprotected; fNameTNamedprotected; fNdtTGraphDelaunayprotected; fNhullTGraphDelaunayprotected; fNpointsTGraphDelaunayprotected; fNTriedTGraphDelaunayprotected; fOrderTGraphDelaunayprotected; fPTriedTGraphDelaunayprotected; fTitleTNamedprotected; fTriedSizeTGr",MatchSource.WIKI,doc/master/classTGraphDelaunay-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay-members.html
https://root.cern/doc/master/classTGraphDelaunay-members.html:201,Modifiability,inherit,inherited,201,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphDelaunay Member List. This is the complete list of members for TGraphDelaunay, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TGraphDelaunaystatic; Class_Name()TGraphDelaunaystatic; Class_Version()TGraphDelaunayinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeZ(Double_t x, Double_t y)TGraphDelaunay; Copy(TObject &named) const overrideTNamedvirtual; CreateTrianglesDataStructure()TGraphDelaunayprotected; DeclFileName()TGraphDelaunayinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Enclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) constTGraphDelaunayprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllTriTGraphDelaunayprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDistTGraphDelaunayprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraph2DTGraphDelaunayprotected; fHullPointsTGraphDelau",MatchSource.WIKI,doc/master/classTGraphDelaunay-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay-members.html
https://root.cern/doc/master/classTGraphDelaunay.html:6243,Availability,error,error,6243,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:6332,Availability,error,error,6332,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:6487,Availability,error,error,6487,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:6784,Availability,error,error,6784,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:10868,Availability,error,error,10868,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:6249,Integrability,message,message,6249,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:6790,Integrability,message,message,6790,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:7780,Integrability,message,message,7780,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:10874,Integrability,message,message,10874,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:11247,Integrability,message,message,11247," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:3046,Modifiability,inherit,inherited,3046,"onst;  ; Int_t * GetNTried () const;  ; Int_t * GetPTried () const;  ; Double_t * GetXN () const;  ; Double_t GetXNmax () const;  ; Double_t GetXNmin () const;  ; Double_t * GetYN () const;  ; Double_t GetYNmax () const;  ; Double_t GetYNmin () const;  ; Double_t Interpolate (Double_t x, Double_t y);  Finds the Delaunay triangle that the point (xi,yi) sits in (if any) and calculate a z-value for it by linearly interpolating the z-values that make up that triangle. ;  ; TClass * IsA () const override;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the convex hull ie: the bins in the margin. ;  ; void SetMaxIter (Int_t n=100000);  Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoning the search. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:4786,Modifiability,inherit,inherited,4786,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:5879,Modifiability,inherit,inheritance,5879,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:7878,Modifiability,inherit,inherits,7878,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:7995,Modifiability,inherit,inherits,7995,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:11748,Modifiability,inherit,inherited,11748,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CreateTrianglesDataStructure ();  Function used internally only. ;  ; Bool_t Enclose (Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const;  Is point e inside the triangle t1-t2-t3 ? ;  ; void FileIt (Int_t P, Int_t N, Int_t M);  Files the triangle defined by the 3 vertices p, n and m into the fxTried arrays. ;  ; void FindHull ();  Finds those points which make up the convex hull of the set",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:11958,Modifiability,inherit,inherited,11958,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CreateTrianglesDataStructure ();  Function used internally only. ;  ; Bool_t Enclose (Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const;  Is point e inside the triangle t1-t2-t3 ? ;  ; void FileIt (Int_t P, Int_t N, Int_t M);  Files the triangle defined by the 3 vertices p, n and m into the fxTried arrays. ;  ; void FindHull ();  Finds those points which make up the convex hull of the set",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:13175,Modifiability,inherit,inherited,13175,";  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CreateTrianglesDataStructure ();  Function used internally only. ;  ; Bool_t Enclose (Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const;  Is point e inside the triangle t1-t2-t3 ? ;  ; void FileIt (Int_t P, Int_t N, Int_t M);  Files the triangle defined by the 3 vertices p, n and m into the fxTried arrays. ;  ; void FindHull ();  Finds those points which make up the convex hull of the set. ;  ; Bool_t InHull (Int_t E, Int_t X) const;  Is point e inside the hull defined by all points apart from x ? ;  ; Double_t InterpolateOnPlane (Int_t TI1, Int_t TI2, Int_t TI3, Int_t E) const;  Finds the z-value at point e given that it lies on the plane defined by t1,t2,t3. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fAllTri;  ! True if FindAllTriangles() has been performed on fGraph2D ;  ; Double_t * fDist;  ! Array used to order mass points by distance ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ; Int_t * fHullPoints;  ! Hull points of size fNhull ;  ; Bool_t fInit;  ! True if CreateTrianglesDataStructure() and FindHull() have been performed ;  ; Int_t fMaxIter;  ! Maximum number of iterations to find Delaunay triangles ;  ; Int_t * fMTried;  ! ;  ; Int_t fNdt;  ! Number of Delaunay triangles found ;  ; Int_t fNhull;  ! Number of points in the hull ;  ; Int_t fNpoints;  ! Number of data points in fGraph2D ;  ; Int_t * fNTried;  ! Delaunay triangles storage of size fNdt ;  ; Int_t * fOrder;  ! Array used to order mass points by distance ;  ; Int_t * fPTried;  ! ;  ; Int_t fTriedSize;  ! Real size of the fxTried arrays ;  ; Dou",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:14960,Modifiability,inherit,inherited,14960,"m TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fAllTri;  ! True if FindAllTriangles() has been performed on fGraph2D ;  ; Double_t * fDist;  ! Array used to order mass points by distance ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ; Int_t * fHullPoints;  ! Hull points of size fNhull ;  ; Bool_t fInit;  ! True if CreateTrianglesDataStructure() and FindHull() have been performed ;  ; Int_t fMaxIter;  ! Maximum number of iterations to find Delaunay triangles ;  ; Int_t * fMTried;  ! ;  ; Int_t fNdt;  ! Number of Delaunay triangles found ;  ; Int_t fNhull;  ! Number of points in the hull ;  ; Int_t fNpoints;  ! Number of data points in fGraph2D ;  ; Int_t * fNTried;  ! Delaunay triangles storage of size fNdt ;  ; Int_t * fOrder;  ! Array used to order mass points by distance ;  ; Int_t * fPTried;  ! ;  ; Int_t fTriedSize;  ! Real size of the fxTried arrays ;  ; Double_t * fX;  ! Pointer to fGraph2D->fX ;  ; Double_t * fXN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fXNmax;  ! Maximum value of fXN ;  ; Double_t fXNmin;  ! Minimum value of fXN ;  ; Double_t fXoffset;  ! ;  ; Double_t fXScaleFactor;  ! ;  ; Double_t * fY;  ! Pointer to fGraph2D->fY ;  ; Double_t * fYN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fYNmax;  ! Maximum value of fYN ;  ; Double_t fYNmin;  ! Minimum value of fYN ;  ; Double_t fYoffset;  ! Parameters used to normalize user data ;  ; Double_t fYScaleFactor;  ! ;  ; Double_t * fZ;  ! Pointer to fGraph2D->fZ ;  ; Double_t fZout;  ! Histogram bin height for points lying outside the convex hull ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay (const TGraphDelaunay &)=delete;  ; TGraphDelaunay & operator= (const TGraphDelaunay &)=delete;  . Additional Inherited Member",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:15205,Modifiability,inherit,inherited,15205,"2D->fX ;  ; Double_t * fXN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fXNmax;  ! Maximum value of fXN ;  ; Double_t fXNmin;  ! Minimum value of fXN ;  ; Double_t fXoffset;  ! ;  ; Double_t fXScaleFactor;  ! ;  ; Double_t * fY;  ! Pointer to fGraph2D->fY ;  ; Double_t * fYN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fYNmax;  ! Maximum value of fYN ;  ; Double_t fYNmin;  ! Minimum value of fYN ;  ; Double_t fYoffset;  ! Parameters used to normalize user data ;  ; Double_t fYScaleFactor;  ! ;  ; Double_t * fZ;  ! Pointer to fGraph2D->fZ ;  ; Double_t fZout;  ! Histogram bin height for points lying outside the convex hull ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay (const TGraphDelaunay &)=delete;  ; TGraphDelaunay & operator= (const TGraphDelaunay &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGraphDelaunay.h>. Inheritance diagram for TGraphDelaunay:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphDelaunay() [1/3]. TGraphDelaunay::TGraphDelaunay ; (; const TGraphDelaunay & ; ). privatedelete . ◆ TGraphDelaunay() [2/3]. TGraphDelauna",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:15846,Modifiability,inherit,inherited,15846,"! Histogram bin height for points lying outside the convex hull ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay (const TGraphDelaunay &)=delete;  ; TGraphDelaunay & operator= (const TGraphDelaunay &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGraphDelaunay.h>. Inheritance diagram for TGraphDelaunay:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphDelaunay() [1/3]. TGraphDelaunay::TGraphDelaunay ; (; const TGraphDelaunay & ; ). privatedelete . ◆ TGraphDelaunay() [2/3]. TGraphDelaunay::TGraphDelaunay ; (; ). TGraphDelaunay default constructor. ; Definition at line 49 of file TGraphDelaunay.cxx. ◆ TGraphDelaunay() [3/3]. TGraphDelaunay::TGraphDelaunay ; (; TGraph2D * ; g). TGraphDelaunay normal constructor. ; Definition at line 86 of file TGraphDelaunay.cxx. ◆ ~TGraphDelaunay(). TGraphDelaunay::~TGraphDelaunay ; (; ). override . TGraphDelaunay destructor. ; Definition at line 123 of file TGraphDelaunay.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphDelaunay::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char ",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:13435,Performance,perform,performed,13435,"m TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fAllTri;  ! True if FindAllTriangles() has been performed on fGraph2D ;  ; Double_t * fDist;  ! Array used to order mass points by distance ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ; Int_t * fHullPoints;  ! Hull points of size fNhull ;  ; Bool_t fInit;  ! True if CreateTrianglesDataStructure() and FindHull() have been performed ;  ; Int_t fMaxIter;  ! Maximum number of iterations to find Delaunay triangles ;  ; Int_t * fMTried;  ! ;  ; Int_t fNdt;  ! Number of Delaunay triangles found ;  ; Int_t fNhull;  ! Number of points in the hull ;  ; Int_t fNpoints;  ! Number of data points in fGraph2D ;  ; Int_t * fNTried;  ! Delaunay triangles storage of size fNdt ;  ; Int_t * fOrder;  ! Array used to order mass points by distance ;  ; Int_t * fPTried;  ! ;  ; Int_t fTriedSize;  ! Real size of the fxTried arrays ;  ; Double_t * fX;  ! Pointer to fGraph2D->fX ;  ; Double_t * fXN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fXNmax;  ! Maximum value of fXN ;  ; Double_t fXNmin;  ! Minimum value of fXN ;  ; Double_t fXoffset;  ! ;  ; Double_t fXScaleFactor;  ! ;  ; Double_t * fY;  ! Pointer to fGraph2D->fY ;  ; Double_t * fYN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fYNmax;  ! Maximum value of fYN ;  ; Double_t fYNmin;  ! Minimum value of fYN ;  ; Double_t fYoffset;  ! Parameters used to normalize user data ;  ; Double_t fYScaleFactor;  ! ;  ; Double_t * fZ;  ! Pointer to fGraph2D->fZ ;  ; Double_t fZout;  ! Histogram bin height for points lying outside the convex hull ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay (const TGraphDelaunay &)=delete;  ; TGraphDelaunay & operator= (const TGraphDelaunay &)=delete;  . Additional Inherited Member",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:13732,Performance,perform,performed,13732,"m TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fAllTri;  ! True if FindAllTriangles() has been performed on fGraph2D ;  ; Double_t * fDist;  ! Array used to order mass points by distance ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ; Int_t * fHullPoints;  ! Hull points of size fNhull ;  ; Bool_t fInit;  ! True if CreateTrianglesDataStructure() and FindHull() have been performed ;  ; Int_t fMaxIter;  ! Maximum number of iterations to find Delaunay triangles ;  ; Int_t * fMTried;  ! ;  ; Int_t fNdt;  ! Number of Delaunay triangles found ;  ; Int_t fNhull;  ! Number of points in the hull ;  ; Int_t fNpoints;  ! Number of data points in fGraph2D ;  ; Int_t * fNTried;  ! Delaunay triangles storage of size fNdt ;  ; Int_t * fOrder;  ! Array used to order mass points by distance ;  ; Int_t * fPTried;  ! ;  ; Int_t fTriedSize;  ! Real size of the fxTried arrays ;  ; Double_t * fX;  ! Pointer to fGraph2D->fX ;  ; Double_t * fXN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fXNmax;  ! Maximum value of fXN ;  ; Double_t fXNmin;  ! Minimum value of fXN ;  ; Double_t fXoffset;  ! ;  ; Double_t fXScaleFactor;  ! ;  ; Double_t * fY;  ! Pointer to fGraph2D->fY ;  ; Double_t * fYN;  ! fGraph2D vectors normalized of size fNpoints ;  ; Double_t fYNmax;  ! Maximum value of fYN ;  ; Double_t fYNmin;  ! Minimum value of fYN ;  ; Double_t fYoffset;  ! Parameters used to normalize user data ;  ; Double_t fYScaleFactor;  ! ;  ; Double_t * fZ;  ! Pointer to fGraph2D->fZ ;  ; Double_t fZout;  ! Histogram bin height for points lying outside the convex hull ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay (const TGraphDelaunay &)=delete;  ; TGraphDelaunay & operator= (const TGraphDelaunay &)=delete;  . Additional Inherited Member",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:23095,Performance,perform,performed,23095,::operator= ; (; const TGraphDelaunay & ; ). privatedelete . ◆ SetMarginBinsContent(). void TGraphDelaunay::SetMarginBinsContent ; (; Double_t ; z = 0.). Sets the histogram bin height for points lying outside the convex hull ie: the bins in the margin. ; Definition at line 943 of file TGraphDelaunay.cxx. ◆ SetMaxIter(). void TGraphDelaunay::SetMaxIter ; (; Int_t ; n = 100000). Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoning the search. ; Definition at line 932 of file TGraphDelaunay.cxx. ◆ Streamer(). void TGraphDelaunay::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphDelaunay::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TGraphDelaunay.h. Member Data Documentation. ◆ fAllTri. Bool_t TGraphDelaunay::fAllTri. protected . ! True if FindAllTriangles() has been performed on fGraph2D ; Definition at line 64 of file TGraphDelaunay.h. ◆ fDist. Double_t* TGraphDelaunay::fDist. protected . ! Array used to order mass points by distance ; Definition at line 56 of file TGraphDelaunay.h. ◆ fGraph2D. TGraph2D* TGraphDelaunay::fGraph2D. protected . ! 2D graph containing the user data ; Definition at line 66 of file TGraphDelaunay.h. ◆ fHullPoints. Int_t* TGraphDelaunay::fHullPoints. protected . ! Hull points of size fNhull ; Definition at line 62 of file TGraphDelaunay.h. ◆ fInit. Bool_t TGraphDelaunay::fInit. protected . ! True if CreateTrianglesDataStructure() and FindHull() have been performed ; Definition at line 65 of file TGraphDelaunay.h. ◆ fMaxIter. Int_t TGraphDelaunay::fMaxIter. protected . ! Maximum number of iterations to find Delaunay triangles ; Definition at line 57 of file TGraphDelaunay.h. ◆ fMTried. Int_t* TGraphDelaunay::fMTried. protected . ! ; Definition at line 61 of file TGraphDelaunay.h. ◆ fNdt. Int_t TGraphDelaunay::fNdt. protected . ! Number ,MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:23722,Performance,perform,performed,23722, ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphDelaunay::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TGraphDelaunay.h. Member Data Documentation. ◆ fAllTri. Bool_t TGraphDelaunay::fAllTri. protected . ! True if FindAllTriangles() has been performed on fGraph2D ; Definition at line 64 of file TGraphDelaunay.h. ◆ fDist. Double_t* TGraphDelaunay::fDist. protected . ! Array used to order mass points by distance ; Definition at line 56 of file TGraphDelaunay.h. ◆ fGraph2D. TGraph2D* TGraphDelaunay::fGraph2D. protected . ! 2D graph containing the user data ; Definition at line 66 of file TGraphDelaunay.h. ◆ fHullPoints. Int_t* TGraphDelaunay::fHullPoints. protected . ! Hull points of size fNhull ; Definition at line 62 of file TGraphDelaunay.h. ◆ fInit. Bool_t TGraphDelaunay::fInit. protected . ! True if CreateTrianglesDataStructure() and FindHull() have been performed ; Definition at line 65 of file TGraphDelaunay.h. ◆ fMaxIter. Int_t TGraphDelaunay::fMaxIter. protected . ! Maximum number of iterations to find Delaunay triangles ; Definition at line 57 of file TGraphDelaunay.h. ◆ fMTried. Int_t* TGraphDelaunay::fMTried. protected . ! ; Definition at line 61 of file TGraphDelaunay.h. ◆ fNdt. Int_t TGraphDelaunay::fNdt. protected . ! Number of Delaunay triangles found ; Definition at line 39 of file TGraphDelaunay.h. ◆ fNhull. Int_t TGraphDelaunay::fNhull. protected . ! Number of points in the hull ; Definition at line 41 of file TGraphDelaunay.h. ◆ fNpoints. Int_t TGraphDelaunay::fNpoints. protected . ! Number of data points in fGraph2D ; Definition at line 40 of file TGraphDelaunay.h. ◆ fNTried. Int_t* TGraphDelaunay::fNTried. protected . ! Delaunay triangles storage of size fNdt ; Definition at line 60 of file TGraphDelaunay.h. ◆ fOrder. Int_t* TGraphDelaunay::fOrder. protected . ! Array used to order mass points by distance ; Defini,MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:3914,Security,hash,hash,3914," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:2790,Testability,test,tested,2790," corresponding to the (x,y) point in fGraph2D. ;  ; void FindAllTriangles ();  Attempt to find all the Delaunay triangles of the point set. ;  ; TGraph2D * GetGraph2D () const;  ; Double_t GetMarginBinsContent () const;  ; Int_t * GetMTried () const;  ; Int_t GetNdt () const;  ; Int_t * GetNTried () const;  ; Int_t * GetPTried () const;  ; Double_t * GetXN () const;  ; Double_t GetXNmax () const;  ; Double_t GetXNmin () const;  ; Double_t * GetYN () const;  ; Double_t GetYNmax () const;  ; Double_t GetYNmin () const;  ; Double_t Interpolate (Double_t x, Double_t y);  Finds the Delaunay triangle that the point (xi,yi) sits in (if any) and calculate a z-value for it by linearly interpolating the z-values that make up that triangle. ;  ; TClass * IsA () const override;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the convex hull ie: the bins in the margin. ;  ; void SetMaxIter (Int_t n=100000);  Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoning the search. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay.html:22522,Testability,test,tested,22522," 595 of file TGraphDelaunay.cxx. ◆ InterpolateOnPlane(). Double_t TGraphDelaunay::InterpolateOnPlane ; (; Int_t ; TI1, . Int_t ; TI2, . Int_t ; TI3, . Int_t ; E . ); const. protected . Finds the z-value at point e given that it lies on the plane defined by t1,t2,t3. ; Definition at line 556 of file TGraphDelaunay.cxx. ◆ IsA(). TClass * TGraphDelaunay::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 100 of file TGraphDelaunay.h. ◆ operator=(). TGraphDelaunay & TGraphDelaunay::operator= ; (; const TGraphDelaunay & ; ). privatedelete . ◆ SetMarginBinsContent(). void TGraphDelaunay::SetMarginBinsContent ; (; Double_t ; z = 0.). Sets the histogram bin height for points lying outside the convex hull ie: the bins in the margin. ; Definition at line 943 of file TGraphDelaunay.cxx. ◆ SetMaxIter(). void TGraphDelaunay::SetMaxIter ; (; Int_t ; n = 100000). Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoning the search. ; Definition at line 932 of file TGraphDelaunay.cxx. ◆ Streamer(). void TGraphDelaunay::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphDelaunay::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TGraphDelaunay.h. Member Data Documentation. ◆ fAllTri. Bool_t TGraphDelaunay::fAllTri. protected . ! True if FindAllTriangles() has been performed on fGraph2D ; Definition at line 64 of file TGraphDelaunay.h. ◆ fDist. Double_t* TGraphDelaunay::fDist. protected . ! Array used to order mass points by distance ; Definition at line 56 of file TGraphDelaunay.h. ◆ fGraph2D. TGraph2D* TGraphDelaunay::fGraph2D. protected . ! 2D graph containing the user data ; Definition at line 66 of file TGraphDelaunay.h. ◆ fHullPoints. Int_t* TGraphDelaunay::fHullPoints. protected . ! Hull points of size",MatchSource.WIKI,doc/master/classTGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:771,Availability,avail,available,771,". ROOT: TGraphDelaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGraphDelaunay2D Class ReferenceHistogram Library » Graph classes. ; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D. ; The algorithm used for finding the triangles is based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; The ROOT::Math::Delaunay2D class provides a wrapper for using the CDT library.; This implementation provides large improvements in terms of computational performances compared to the legacy one available in TGraphDelaunay, and it is by default used in TGraph2D. The old, legacy implementation can be still used when calling TGraph2D::GetHistogram and TGraph2D::Draw with the old option.; Definition of Delaunay triangulation (After B. Delaunay): For a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circumcircle of any triangle in DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of points in S, the Voronoi diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. This applet gives a nice practical view of Delaunay triangulation and Voronoi diagram. ; Definition at line 32 of file TGraphDelaunay2D.h. Public Types; typedef ROOT::Math::Delaunay2D::Triangles Triangles;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6364,Availability,error,error,6364,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6453,Availability,error,error,6453,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6608,Availability,error,error,6608,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6905,Availability,error,error,6905,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:10989,Availability,error,error,10989,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:621,Integrability,wrap,wrapper,621,". ROOT: TGraphDelaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGraphDelaunay2D Class ReferenceHistogram Library » Graph classes. ; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D. ; The algorithm used for finding the triangles is based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; The ROOT::Math::Delaunay2D class provides a wrapper for using the CDT library.; This implementation provides large improvements in terms of computational performances compared to the legacy one available in TGraphDelaunay, and it is by default used in TGraph2D. The old, legacy implementation can be still used when calling TGraph2D::GetHistogram and TGraph2D::Draw with the old option.; Definition of Delaunay triangulation (After B. Delaunay): For a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circumcircle of any triangle in DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of points in S, the Voronoi diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. This applet gives a nice practical view of Delaunay triangulation and Voronoi diagram. ; Definition at line 32 of file TGraphDelaunay2D.h. Public Types; typedef ROOT::Math::Delaunay2D::Triangles Triangles;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6370,Integrability,message,message,6370,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6911,Integrability,message,message,6911,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:7901,Integrability,message,message,7901,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:10995,Integrability,message,message,10995,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:11368,Integrability,message,message,11368," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:1794,Modifiability,inherit,inherited,1794,"D. The old, legacy implementation can be still used when calling TGraph2D::GetHistogram and TGraph2D::Draw with the old option.; Definition of Delaunay triangulation (After B. Delaunay): For a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circumcircle of any triangle in DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of points in S, the Voronoi diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. This applet gives a nice practical view of Delaunay triangulation and Voronoi diagram. ; Definition at line 32 of file TGraphDelaunay2D.h. Public Types; typedef ROOT::Math::Delaunay2D::Triangles Triangles;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphDelaunay2D (TGraph2D *g=nullptr);  TGraphDelaunay2D normal constructor. ;  ; Triangles::const_iterator begin () const;  ; Double_t ComputeZ (Double_t x, Double_t y);  ; Triangles::const_iterator end () const;  ; void FindAllTriangles ();  ; TGraph2D * GetGraph2D () const;  ; Double_t GetMarginBinsContent () const;  ; Int_t GetNdt () const;  ; Double_t GetXNmax () const;  ; Double_t Ge",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:3167,Modifiability,inherit,inherited,3167,"1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphDelaunay2D (TGraph2D *g=nullptr);  TGraphDelaunay2D normal constructor. ;  ; Triangles::const_iterator begin () const;  ; Double_t ComputeZ (Double_t x, Double_t y);  ; Triangles::const_iterator end () const;  ; void FindAllTriangles ();  ; TGraph2D * GetGraph2D () const;  ; Double_t GetMarginBinsContent () const;  ; Int_t GetNdt () const;  ; Double_t GetXNmax () const;  ; Double_t GetXNmin () const;  ; Double_t GetYNmax () const;  ; Double_t GetYNmin () const;  ; TClass * IsA () const override;  ; void SetMarginBinsContent (Double_t z=0.);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:4907,Modifiability,inherit,inherited,4907,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:6000,Modifiability,inherit,inheritance,6000,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:7999,Modifiability,inherit,inherits,7999,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:8116,Modifiability,inherit,inherits,8116,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:11869,Modifiability,inherit,inherited,11869,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; ROOT::Math::Delaunay2D fDelaunay;  ! Delaunay interpolator class ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay2D (const TGraphDelaunay2D &)=delete;  ; TGraphDelaunay2D & operator= (const TGraphDelaunay2D &)=delete;  . Additional Inherited Members;  Pro",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:12079,Modifiability,inherit,inherited,12079,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; ROOT::Math::Delaunay2D fDelaunay;  ! Delaunay interpolator class ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay2D (const TGraphDelaunay2D &)=delete;  ; TGraphDelaunay2D & operator= (const TGraphDelaunay2D &)=delete;  . Additional Inherited Members;  Pro",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:12742,Modifiability,inherit,inherited,12742,"static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; ROOT::Math::Delaunay2D fDelaunay;  ! Delaunay interpolator class ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay2D (const TGraphDelaunay2D &)=delete;  ; TGraphDelaunay2D & operator= (const TGraphDelaunay2D &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphDelaunay2D.h>. Inheritance diagram for TGraphDelaunay2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Triangles. typedef ROOT::Math::Delaunay2D::Triangles TGraphDelaunay2D::Triangles. Definition at line 48 of file TGraphDelaunay2D.h. Constructor & Destructor Documentation. ◆ TGraphDelaunay2D() [1/2]. T",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:12998,Modifiability,inherit,inherited,12998,"t; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; ROOT::Math::Delaunay2D fDelaunay;  ! Delaunay interpolator class ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay2D (const TGraphDelaunay2D &)=delete;  ; TGraphDelaunay2D & operator= (const TGraphDelaunay2D &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphDelaunay2D.h>. Inheritance diagram for TGraphDelaunay2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Triangles. typedef ROOT::Math::Delaunay2D::Triangles TGraphDelaunay2D::Triangles. Definition at line 48 of file TGraphDelaunay2D.h. Constructor & Destructor Documentation. ◆ TGraphDelaunay2D() [1/2]. TGraphDelaunay2D::TGraphDelaunay2D ; (; const TGraphDelaunay2D & ; ). privatedelete . ◆ TGraphDelaunay2D() [2/2]. TGraphDelaunay2D::TGraphDelaunay2D ; (; TGraph2D * ; g = nullptr). TGraphDelaunay2D normal constructor. ; Definition at line 49 of file TGraphDelaunay2D.cxx. Member Function Documentation. ◆ begin(). Triangles::const_iterator TGraphDelaunay2D::begin ; (; ); const. inline . Definition at line 65 of file T",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:13097,Modifiability,inherit,inherited,13097,"t; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; ROOT::Math::Delaunay2D fDelaunay;  ! Delaunay interpolator class ;  ; TGraph2D * fGraph2D;  ! 2D graph containing the user data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphDelaunay2D (const TGraphDelaunay2D &)=delete;  ; TGraphDelaunay2D & operator= (const TGraphDelaunay2D &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphDelaunay2D.h>. Inheritance diagram for TGraphDelaunay2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Triangles. typedef ROOT::Math::Delaunay2D::Triangles TGraphDelaunay2D::Triangles. Definition at line 48 of file TGraphDelaunay2D.h. Constructor & Destructor Documentation. ◆ TGraphDelaunay2D() [1/2]. TGraphDelaunay2D::TGraphDelaunay2D ; (; const TGraphDelaunay2D & ; ). privatedelete . ◆ TGraphDelaunay2D() [2/2]. TGraphDelaunay2D::TGraphDelaunay2D ; (; TGraph2D * ; g = nullptr). TGraphDelaunay2D normal constructor. ; Definition at line 49 of file TGraphDelaunay2D.cxx. Member Function Documentation. ◆ begin(). Triangles::const_iterator TGraphDelaunay2D::begin ; (; ); const. inline . Definition at line 65 of file T",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:731,Performance,perform,performances,731,". ROOT: TGraphDelaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGraphDelaunay2D Class ReferenceHistogram Library » Graph classes. ; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D. ; The algorithm used for finding the triangles is based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; The ROOT::Math::Delaunay2D class provides a wrapper for using the CDT library.; This implementation provides large improvements in terms of computational performances compared to the legacy one available in TGraphDelaunay, and it is by default used in TGraph2D. The old, legacy implementation can be still used when calling TGraph2D::GetHistogram and TGraph2D::Draw with the old option.; Definition of Delaunay triangulation (After B. Delaunay): For a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circumcircle of any triangle in DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of points in S, the Voronoi diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. This applet gives a nice practical view of Delaunay triangulation and Voronoi diagram. ; Definition at line 32 of file TGraphDelaunay2D.h. Public Types; typedef ROOT::Math::Delaunay2D::Triangles Triangles;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphDelaunay2D.html:4035,Security,hash,hash,4035," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGraphDelaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html
https://root.cern/doc/master/classTGraphEdge.html:3404,Availability,error,error,3404,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:3493,Availability,error,error,3493,"f class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const cha",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:3648,Availability,error,error,3648,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:3825,Availability,error,error,3825,"py this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:8138,Availability,error,error,8138,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:307,Integrability,interface,interface,307,". ROOT: TGraphEdge Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraphEdge Class ReferenceGraphics » 2D Graphics » graphviz interface. ; An edge object connecting two nodes which can be added in a TGraphStruct. ; Definition at line 25 of file TGraphEdge.h. Public Member Functions;  TGraphEdge ();  Graph Edge default constructor. ;  ;  TGraphEdge (TGraphNode *n1, TGraphNode *n2);  Graph Edge normal constructor. ;  ;  ~TGraphEdge () override;  Graph Edge default destructor. ;  ; void CreateGVEdge (GVizAgraph_t *gv);  Create the GraphViz edge into the GraphViz data structure gv. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an edge. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; GVizAgedge_t * GetGVEdge ();  ; TGraphNode * GetNode1 ();  ; TGraphNode * GetNode2 ();  ; TClass * IsA () const override;  ; void Layout ();  Layout this edge in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this edge with its current attributes. ;  ; void SaveAttributes (std::ostream &, const char *);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVEdge (GVizAgedge_t *gve);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implem",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:3410,Integrability,message,message,3410,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:3831,Integrability,message,message,3831,"py this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:5033,Integrability,message,message,5033,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:8144,Integrability,message,message,8144,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:8517,Integrability,message,message,8517,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:1757,Modifiability,inherit,inherited,1757,"GraphViz data structure gv. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an edge. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; GVizAgedge_t * GetGVEdge ();  ; TGraphNode * GetNode1 ();  ; TGraphNode * GetNode2 ();  ; TClass * IsA () const override;  ; void Layout ();  Layout this edge in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this edge with its current attributes. ;  ; void SaveAttributes (std::ostream &, const char *);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVEdge (GVizAgedge_t *gve);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:3040,Modifiability,inherit,inheritance,3040,"t to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:5131,Modifiability,inherit,inherits,5131,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:5248,Modifiability,inherit,inherits,5248,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:8824,Modifiability,inherit,inherited,8824,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:10523,Modifiability,inherit,inherited,10523,"utes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fArrX;  Arrow X position. ;  ; Double_t fArrY;  Arrow Y position. ;  ; GVizAgedge_t * fGVEdge;  Graphviz edge. ;  ; Int_t * fN;  number of edge points (GV) fN[0] = number of splines fN[1...n] = number of points in each spline ;  ; TGraphNode * fNode1;  First node. ;  ; TGraphNode *",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:11041,Modifiability,inherit,inherited,11041," SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fArrX;  Arrow X position. ;  ; Double_t fArrY;  Arrow Y position. ;  ; GVizAgedge_t * fGVEdge;  Graphviz edge. ;  ; Int_t * fN;  number of edge points (GV) fN[0] = number of splines fN[1...n] = number of points in each spline ;  ; TGraphNode * fNode1;  First node. ;  ; TGraphNode * fNode2;  Second node. ;  ; Double_t * fX;  X edge points (GV) ;  ; Double_t * fY;  X edge points (GV) ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:11664,Modifiability,inherit,inherited,11664,"_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fArrX;  Arrow X position. ;  ; Double_t fArrY;  Arrow Y position. ;  ; GVizAgedge_t * fGVEdge;  Graphviz edge. ;  ; Int_t * fN;  number of edge points (GV) fN[0] = number of splines fN[1...n] = number of points in each spline ;  ; TGraphNode * fNode1;  First node. ;  ; TGraphNode * fNode2;  Second node. ;  ; Double_t * fX;  X edge points (GV) ;  ; Double_t * fY;  X edge points (GV) ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int le",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:11847,Modifiability,inherit,inherited,11847,"static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fArrX;  Arrow X position. ;  ; Double_t fArrY;  Arrow Y position. ;  ; GVizAgedge_t * fGVEdge;  Graphviz edge. ;  ; Int_t * fN;  number of edge points (GV) fN[0] = number of splines fN[1...n] = number of points in each spline ;  ; TGraphNode * fNode1;  First node. ;  ; TGraphNode * fNode2;  Second node. ;  ; Double_t * fX;  X edge points (GV) ;  ; Double_t * fY;  X edge points (GV) ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphEdge.h>. Inheritance diagram for TGraphEdge:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera in",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:12488,Modifiability,inherit,inherited,12488,"Double_t * fY;  X edge points (GV) ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphEdge.h>. Inheritance diagram for TGraphEdge:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphEdge() [1/2]. TGraphEdge::TGraphEdge ; (; ). Graph Edge default constructor. ; Definition at line 32 of file TGraphEdge.cxx. ◆ TGraphEdge() [2/2]. TGraphEdge::TGraphEdge ; (; TGraphNode * ; n1, . TGraphNode * ; n2 . ). Graph Edge normal constructor. ; Definition at line 47 of file TGraphEdge.cxx. ◆ ~TGraphEdge(). TGraphEdge::~TGraphEdge ; (; ). override . Graph Edge default destructor. ; Definition at line 63 of file TGraphEdge.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphEdge::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphEdge::Class_Name ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:12587,Modifiability,inherit,inherited,12587,"Double_t * fY;  X edge points (GV) ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphEdge.h>. Inheritance diagram for TGraphEdge:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphEdge() [1/2]. TGraphEdge::TGraphEdge ; (; ). Graph Edge default constructor. ; Definition at line 32 of file TGraphEdge.cxx. ◆ TGraphEdge() [2/2]. TGraphEdge::TGraphEdge ; (; TGraphNode * ; n1, . TGraphNode * ; n2 . ). Graph Edge normal constructor. ; Definition at line 47 of file TGraphEdge.cxx. ◆ ~TGraphEdge(). TGraphEdge::~TGraphEdge ; (; ). override . Graph Edge default destructor. ; Definition at line 63 of file TGraphEdge.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphEdge::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphEdge::Class_Name ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:15321,Performance,perform,performed,15321,"evirtual . Compute distance from point px,py to an edge. ; Reimplemented from TObject.; Definition at line 93 of file TGraphEdge.cxx. ◆ ExecuteEvent(). void TGraphEdge::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; Reimplemented from TObject.; Definition at line 111 of file TGraphEdge.cxx. ◆ GetGVEdge(). GVizAgedge_t * TGraphEdge::GetGVEdge ; (; ). inline . Definition at line 50 of file TGraphEdge.h. ◆ GetNode1(). TGraphNode * TGraphEdge::GetNode1 ; (; ). inline . Definition at line 51 of file TGraphEdge.h. ◆ GetNode2(). TGraphNode * TGraphEdge::GetNode2 ; (; ). inline . Definition at line 52 of file TGraphEdge.h. ◆ IsA(). TClass * TGraphEdge::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 59 of file TGraphEdge.h. ◆ Layout(). void TGraphEdge::Layout ; (; ). Layout this edge in the GraphViz space. ; This is done after gvLayout has been performed. ; Definition at line 127 of file TGraphEdge.cxx. ◆ Paint(). void TGraphEdge::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this edge with its current attributes. ; Reimplemented from TObject.; Definition at line 169 of file TGraphEdge.cxx. ◆ SaveAttributes(). void TGraphEdge::SaveAttributes ; (; std::ostream & ; out, . const char * ; name . ). Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ; Definition at line 209 of file TGraphEdge.cxx. ◆ SavePrimitive(). void TGraphEdge::SavePrimitive ; (; std::ostream & ; , . Option_t * ;  . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 201 of file TGraphEdge.cxx. ◆ SetGVEdge(). void TGraphEdge::SetGVEdge ; (; GVizAgedge_t * ; gve). inline . Definition at line 49 of file TGraphEdge.h. ◆ Streamer(). void TGraphEdge::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an ",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphEdge.html:4762,Security,hash,hash,4762," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html
https://root.cern/doc/master/classTGraphErrors-members.html:3248,Availability,error,error,3248," DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXTGraphErrorsprotected; fEYTGraphErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax",MatchSource.WIKI,doc/master/classTGraphErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors-members.html
https://root.cern/doc/master/classTGraphErrors-members.html:3329,Availability,error,error,3329," DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXTGraphErrorsprotected; fEYTGraphErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax",MatchSource.WIKI,doc/master/classTGraphErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors-members.html
https://root.cern/doc/master/classTGraphErrors-members.html:197,Modifiability,inherit,inherited,197,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphErrors Member List. This is the complete list of members for TGraphErrors, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *f, Double_t c1=1)TGraphvirtual; AddPoint(Double_t x, Double_t y)TGraphinlinevirtual; AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)TGraphErrorsvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; Allocate(Int_t size) overrideTGraphErrorsinlineprotectedvirtual; AllocateArrays(Int_t Narrays, Int_t arraySize)TGraphprotected; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF1 *f) overrideTGraphErrorsvirtual; ApplyX(TF1 *f)TGraphErrorsvirtual; Browse(TBrowser *b) overrideTGraphvirtual; CalculateScanfFields(const char *fmt)TGraphErrorsstatic; CheckedHash()TObjectinline; Chisquare(TF1 *f1, Option_t *option="""") constTGraphvirtual; Class()TGraphErrorsstatic; Class_Name()TGraphErrorsstatic; Class_Version()TGraphErrorsinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareArg(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareRadius(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareX(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareY(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideTGraphErrorsvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideTGraphErrorsprotectedvirtual; CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, ",MatchSource.WIKI,doc/master/classTGraphErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors-members.html
https://root.cern/doc/master/classTGraphErrors-members.html:9441,Testability,log,logx,9441,"alueTObject; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphErrors &gr)TGraphErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") con",MatchSource.WIKI,doc/master/classTGraphErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors-members.html
https://root.cern/doc/master/classTGraphErrors-members.html:9461,Testability,log,logy,9461,"renced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphErrors &gr)TGraphErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphErr",MatchSource.WIKI,doc/master/classTGraphErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors-members.html
https://root.cern/doc/master/classTGraphErrors.html:376,Availability,error,error,376,". ROOT: TGraphErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphErrors is a TGraph with error bars. ; The TGraphErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legen",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:625,Availability,error,error,625,". ROOT: TGraphErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphErrors is a TGraph with error bars. ; The TGraphErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legen",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:3477,Availability,error,errorbars,3477,"constructor. ;  ;  TGraphErrors (const TH1 *h);  TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vex, const TVectorD &vey);  Constructor with four vectors of doubles in input. ;  ;  TGraphErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vex, const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:3873,Availability,error,error,3873,", const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") ove",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:3971,Availability,error,error,3971,"nt_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:4068,Availability,error,error,4068,"Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constan",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:4162,Availability,error,error,4162,"ructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for poi",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:4260,Availability,error,error,4260,"tr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  S",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:4357,Availability,error,error,4357,";  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:4565,Availability,error,errors,4565,"graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:4768,Availability,error,errors,4768,", Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its param",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:5008,Availability,error,errors,5008," ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:18131,Availability,error,error,18131,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:18220,Availability,error,error,18220,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:18375,Availability,error,error,18375,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (co",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:18552,Availability,error,error,18552,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:21826,Availability,error,error,21826,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:29649,Availability,error,errors,29649,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and co",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:29920,Availability,error,errors,29920," const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:31468,Availability,error,errors,31468,"opy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMark",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:31529,Availability,error,errors,31529,"opy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMark",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:35339,Availability,error,errors,35339,"ro ; Definition at line 80 of file TGraphErrors.cxx. ◆ TGraphErrors() [3/9]. TGraphErrors::TGraphErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; ex = nullptr, . const Float_t * ; ey = nullptr . ). TGraphErrors normal constructor. ; if ex or ey are null, the corresponding arrays are preset to zero ; Definition at line 93 of file TGraphErrors.cxx. ◆ TGraphErrors() [4/9]. TGraphErrors::TGraphErrors ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; ex = nullptr, . const Double_t * ; ey = nullptr . ). TGraphErrors normal constructor. ; if ex or ey are null, the corresponding arrays are preset to zero ; Definition at line 112 of file TGraphErrors.cxx. ◆ TGraphErrors() [5/9]. TGraphErrors::TGraphErrors ; (; const TVectorF & ; vx, . const TVectorF & ; vy, . const TVectorF & ; vex, . const TVectorF & ; vey . ). Constructor with four vectors of floats in input. ; A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vex and vey. The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 133 of file TGraphErrors.cxx. ◆ TGraphErrors() [6/9]. TGraphErrors::TGraphErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vex, . const TVectorD & ; vey . ). Constructor with four vectors of doubles in input. ; A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vex and vey. The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 154 of file TGraphErrors.cxx. ◆ TGraphErrors() [7/9]. TGraphErrors::TGraphErrors ; (; const TGraphErrors & ; gr). TGraphErrors copy constructor. ; Definition at line 170 of file TGraphErrors.cxx. ◆ TGraphErrors() [8/9]. TGraphErrors::TGraphErrors ; (; const TH1 * ; h). TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ; Defi",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:35807,Availability,error,errors,35807,"le_t * ; x, . const Double_t * ; y, . const Double_t * ; ex = nullptr, . const Double_t * ; ey = nullptr . ). TGraphErrors normal constructor. ; if ex or ey are null, the corresponding arrays are preset to zero ; Definition at line 112 of file TGraphErrors.cxx. ◆ TGraphErrors() [5/9]. TGraphErrors::TGraphErrors ; (; const TVectorF & ; vx, . const TVectorF & ; vy, . const TVectorF & ; vex, . const TVectorF & ; vey . ). Constructor with four vectors of floats in input. ; A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vex and vey. The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 133 of file TGraphErrors.cxx. ◆ TGraphErrors() [6/9]. TGraphErrors::TGraphErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vex, . const TVectorD & ; vey . ). Constructor with four vectors of doubles in input. ; A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vex and vey. The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 154 of file TGraphErrors.cxx. ◆ TGraphErrors() [7/9]. TGraphErrors::TGraphErrors ; (; const TGraphErrors & ; gr). TGraphErrors copy constructor. ; Definition at line 170 of file TGraphErrors.cxx. ◆ TGraphErrors() [8/9]. TGraphErrors::TGraphErrors ; (; const TH1 * ; h). TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ; Definition at line 204 of file TGraphErrors.cxx. ◆ TGraphErrors() [9/9]. TGraphErrors::TGraphErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg"", . Option_t * ; option = """" . ). GraphErrors constructor reading input from filename. ; filename is assumed to contain at least 2 columns of numbers; Convention for format (default=""%lg %lg %lg %lg""). format = lg lg read only 2 first columns into X,Y; format = lg lg lg read only 3 first columns in",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:37737,Availability,error,errorbars,37737,"= lg lg lg read only 3 first columns into X,Y and EY; format = lg lg lg lg read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and \\t (e.g. ; in csv files) you can avoid using %*s to bypass this delimiter by explicitly specify the option argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters (‘’ ', '\t', ',', ';') used once (e.g.""1;1"") or in a combined way ("" 1;,;; 1""`).; Note in that case, the instantiation is about 2 times slower. In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38180,Availability,error,error,38180,"Note in that case, the instantiation is about 2 times slower. In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt)",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38260,Availability,error,error,38260,"case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of fil",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38296,Availability,error,errors,38296,"case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of fil",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38341,Availability,error,errors,38341,"ition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of file TGraphErrors.cxx. ◆ Class(). static TClass * TGraphErrors::Class ; (; ). stati",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38777,Availability,error,error,38777,"rrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of file TGraphErrors.cxx. ◆ Class(). static TClass * TGraphErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Dou",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38857,Availability,error,error,38857,"Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of file TGraphErrors.cxx. ◆ Class(). static TClass * TGraphErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Rei",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38893,Availability,error,errors,38893,"Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of file TGraphErrors.cxx. ◆ Class(). static TClass * TGraphErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Rei",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:38938,Availability,error,errors,38938,"res for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of file TGraphErrors.cxx. ◆ Class(). static TClass * TGraphErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 480 of file TGraphErrors.cxx. ◆ Copy",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:40368,Availability,error,errors,40368,"onst char * TGraphErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 480 of file TGraphErrors.cxx. ◆ CopyAndRelease(). void TGraphErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 510 of file TGraphErrors.cxx. ◆ CopyPoints(). Bool_t TGraphErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ; Reimplemented from TGraph.; Definition at line 532 of file TGraphErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphErrors::CtorAllocate ; (; ). protected . Constructor allocate. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 557 of file TGraphErrors.cxx. ◆ DeclFileName(). static const char * TGraphErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for poin",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:41168,Availability,error,errors,41168,"ted from TGraph.; Definition at line 510 of file TGraphErrors.cxx. ◆ CopyPoints(). Bool_t TGraphErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ; Reimplemented from TGraph.; Definition at line 532 of file TGraphErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphErrors::CtorAllocate ; (; ). protected . Constructor allocate. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 557 of file TGraphErrors.cxx. ◆ DeclFileName(). static const char * TGraphErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error al",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:41639,Availability,error,error,41639,". ; Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 557 of file TGraphErrors.cxx. ◆ DeclFileName(). static const char * TGraphErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:41857,Availability,error,error,41857,"ors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overr",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:42130,Availability,error,error,42130,"e merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Re",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:42399,Availability,error,error,42399,"alues for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; )",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:42617,Availability,error,error,42617, . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ;,MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:42890,Availability,error,error,42890,hErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator,MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:43686,Availability,error,errors,43686,"orY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a cons",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:43799,Availability,error,error,43799,"hErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled I",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:44165,Availability,error,errors,44165,"finition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file T",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:44662,Availability,error,errors,44662,"all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::Stre",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:44747,Availability,error,errors,44747,"implemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGra",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:44805,Availability,error,errors,44805,"implemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGra",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:44871,Availability,error,errors,44871,"implemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGra",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:46415,Availability,error,errors,46415,"mented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGraphErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 856 of file TGraphErrors.cxx. ◆ UpdateArrays(). void TGraphErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEX, and fEY arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 866 of file TGraphErrors.cxx. Member Data Documentation. ◆ fEX. Double_t* TGraphErrors::fEX {nullptr}. protected . [fNpoints] array of X errors ; Definition at line 29 of file TGraphErrors.h. ◆ fEY. Double_t* TGraphErrors::fEY {nullptr}. protected . [fNpoints] array of Y errors ; Definition at line 30 of file TGraphErrors.h. Libraries for TGraphErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphErrors.h; hist/hist/src/TGraphErrors.cxx. TGraphErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:46550,Availability,error,errors,46550,"mented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGraphErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 856 of file TGraphErrors.cxx. ◆ UpdateArrays(). void TGraphErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEX, and fEY arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 866 of file TGraphErrors.cxx. Member Data Documentation. ◆ fEX. Double_t* TGraphErrors::fEX {nullptr}. protected . [fNpoints] array of X errors ; Definition at line 29 of file TGraphErrors.h. ◆ fEY. Double_t* TGraphErrors::fEY {nullptr}. protected . [fNpoints] array of Y errors ; Definition at line 30 of file TGraphErrors.h. Libraries for TGraphErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphErrors.h; hist/hist/src/TGraphErrors.cxx. TGraphErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:15458,Deployability,continuous,continuous,15458,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:29541,Deployability,release,release,29541,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In construct",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:40117,Deployability,release,release,40117,"CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of file TGraphErrors.cxx. ◆ Class(). static TClass * TGraphErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 480 of file TGraphErrors.cxx. ◆ CopyAndRelease(). void TGraphErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 510 of file TGraphErrors.cxx. ◆ CopyPoints(). Bool_t TGraphErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ; Reimplemented from TGraph.; Definition at line 532 of file TGraphErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphErrors::CtorAllocate ; (; ). protected . Constructor allocate. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 557 of file TGraphErrors.cxx. ◆ DeclFileName(). static const char * TGraphErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected func",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:29795,Energy Efficiency,allocate,allocate,29795," Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save a",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:30608,Energy Efficiency,allocate,allocate,30608,"egin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFuncti",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:31123,Energy Efficiency,allocate,allocate,31123,") override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y poi",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:40635,Energy Efficiency,allocate,allocate,40635,"; Definition at line 78 of file TGraphErrors.h. ◆ ComputeRange(). void TGraphErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute range. ; Reimplemented from TGraph.; Definition at line 480 of file TGraphErrors.cxx. ◆ CopyAndRelease(). void TGraphErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 510 of file TGraphErrors.cxx. ◆ CopyPoints(). Bool_t TGraphErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ; Reimplemented from TGraph.; Definition at line 532 of file TGraphErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphErrors::CtorAllocate ; (; ). protected . Constructor allocate. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 557 of file TGraphErrors.cxx. ◆ DeclFileName(). static const char * TGraphErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It return",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:18137,Integrability,message,message,18137,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:18558,Integrability,message,message,18558,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:19216,Integrability,message,message,19216,"ms, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:21832,Integrability,message,message,21832,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:22023,Integrability,message,message,22023,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:5453,Modifiability,inherit,inherited,5453,"* GetEY () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and vy. ;  ;  TGraph (const TVectorF &vx, const TVectorF &vy);  Graph constructor with two vectors of floats in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of poin",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:15509,Modifiability,inherit,inherited,15509,"er i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:16974,Modifiability,inherit,inherited,16974,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:17767,Modifiability,inherit,inheritance,17767,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:19314,Modifiability,inherit,inherits,19314,"ameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:19431,Modifiability,inherit,inherits,19431,"method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:22330,Modifiability,inherit,inherited,22330,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:23835,Modifiability,inherit,inherited,23835,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:25090,Modifiability,inherit,inherited,25090,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:26786,Modifiability,inherit,inherited,26786,"eam &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static Int_t CalculateScanfFields (const char *fmt);  Calculate scan fields. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:27651,Modifiability,inherit,inherited,27651," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:27861,Modifiability,inherit,inherited,27861," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:28379,Modifiability,inherit,inherited,28379,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMe",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:28591,Modifiability,inherit,inherited,28591,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMe",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:28803,Modifiability,inherit,inherited,28803,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMe",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:30347,Modifiability,inherit,inherited,30347,"llocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void Ma",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:31214,Modifiability,inherit,inherited,31214," and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:31563,Modifiability,inherit,inherited,31563,"opy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMark",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:32142,Modifiability,inherit,inherited,32142,"ize points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:32224,Modifiability,inherit,inherited,32224,"ize points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:32385,Modifiability,inherit,inherited,32385,"cted Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClean",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:32518,Modifiability,inherit,inherited,32518," ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoConte",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:32712,Modifiability,inherit,inherited,32712,"dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:32981,Modifiability,inherit,inherited,32981," X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphErrors.h>. Inheritance diagram for TGraphErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphErrors() [1/",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:33622,Modifiability,inherit,inherited,33622,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphErrors.h>. Inheritance diagram for TGraphErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphErrors() [1/9]. TGraphErrors::TGraphErrors ; (; ). TGraphErrors default constructor. ; Definition at line 69 of file TGraphErrors.cxx. ◆ TGraphErrors() [2/9]. TGraphErrors::TGraphErrors ; (; Int_t ; n). TGraphErrors normal constructor. ; the arrays are preset to zero ; Definition at line 80 of file TGraphErrors.cxx. ◆ TGraphErrors() [3/9]. TGraphErrors::TGraphErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; ex = nullptr, . const Float_t * ; ey = nullptr . ). TGraphErrors normal constructor. ; if ex or ey are null, the corresponding arrays are preset to zero ; Definition at line 93 of file TGraphErrors.cxx. ◆ TGraphErrors(",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:33728,Modifiability,inherit,inherited,33728,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphErrors.h>. Inheritance diagram for TGraphErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphErrors() [1/9]. TGraphErrors::TGraphErrors ; (; ). TGraphErrors default constructor. ; Definition at line 69 of file TGraphErrors.cxx. ◆ TGraphErrors() [2/9]. TGraphErrors::TGraphErrors ; (; Int_t ; n). TGraphErrors normal constructor. ; the arrays are preset to zero ; Definition at line 80 of file TGraphErrors.cxx. ◆ TGraphErrors() [3/9]. TGraphErrors::TGraphErrors ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; ex = nullptr, . const Float_t * ; ey = nullptr . ). TGraphErrors normal constructor. ; if ex or ey are null, the corresponding arrays are preset to zero ; Definition at line 93 of file TGraphErrors.cxx. ◆ TGraphErrors(",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:419,Performance,perform,performed,419,". ROOT: TGraphErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphErrors is a TGraph with error bars. ; The TGraphErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legen",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:29876,Performance,perform,perform,29876," const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:41124,Performance,perform,perform,41124,"ted from TGraph.; Definition at line 510 of file TGraphErrors.cxx. ◆ CopyPoints(). Bool_t TGraphErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ; Reimplemented from TGraph.; Definition at line 532 of file TGraphErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphErrors::CtorAllocate ; (; ). protected . Constructor allocate. ; Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 557 of file TGraphErrors.cxx. ◆ DeclFileName(). static const char * TGraphErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error al",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:36957,Safety,avoid,avoid,36957,"s() [7/9]. TGraphErrors::TGraphErrors ; (; const TGraphErrors & ; gr). TGraphErrors copy constructor. ; Definition at line 170 of file TGraphErrors.cxx. ◆ TGraphErrors() [8/9]. TGraphErrors::TGraphErrors ; (; const TH1 * ; h). TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ; Definition at line 204 of file TGraphErrors.cxx. ◆ TGraphErrors() [9/9]. TGraphErrors::TGraphErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg"", . Option_t * ; option = """" . ). GraphErrors constructor reading input from filename. ; filename is assumed to contain at least 2 columns of numbers; Convention for format (default=""%lg %lg %lg %lg""). format = lg lg read only 2 first columns into X,Y; format = lg lg lg read only 3 first columns into X,Y and EY; format = lg lg lg lg read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and \\t (e.g. ; in csv files) you can avoid using %*s to bypass this delimiter by explicitly specify the option argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters (‘’ ', '\t', ',', ';') used once (e.g.""1;1"") or in a combined way ("" 1;,;; 1""`).; Note in that case, the instantiation is about 2 times slower. In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented f",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:16377,Security,hash,hash,16377," Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:12412,Testability,log,logx,12412,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:12432,Testability,log,logy,12432,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:12498,Testability,log,log,12498,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:12542,Testability,log,logarithmic,12542,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphErrors.html:12583,Testability,log,log,12583,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html
https://root.cern/doc/master/classTGraphMultiErrors-members.html:3540,Availability,error,error,3540,"ar *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *tg) overrideTGraphMultiErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; ESummationModes enum nameTGraphMultiErrors; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttFillTGraphMultiErrorsprotected; fAttLineTGraphMultiErrorsprotected; fBitsTObjectprivate; fExHTGraphMultiErrorsprotected; fExLTGraphMultiErrorsprotected; fEyHTGraphMultiErrorsprotected; fEyHSumTGraphMultiErrorsmutableprotected; fEyLTGraphMultiErrorsprotected; fEyLSumTGraphMultiErrorsmutableprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphMultiErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirt",MatchSource.WIKI,doc/master/classTGraphMultiErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors-members.html
https://root.cern/doc/master/classTGraphMultiErrors-members.html:3621,Availability,error,error,3621,"ar *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *tg) overrideTGraphMultiErrorsprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; ESummationModes enum nameTGraphMultiErrors; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttFillTGraphMultiErrorsprotected; fAttLineTGraphMultiErrorsprotected; fBitsTObjectprivate; fExHTGraphMultiErrorsprotected; fExLTGraphMultiErrorsprotected; fEyHTGraphMultiErrorsprotected; fEyHSumTGraphMultiErrorsmutableprotected; fEyLTGraphMultiErrorsprotected; fEyLSumTGraphMultiErrorsmutableprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphMultiErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirt",MatchSource.WIKI,doc/master/classTGraphMultiErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors-members.html
https://root.cern/doc/master/classTGraphMultiErrors-members.html:207,Modifiability,inherit,inherited,207,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphMultiErrors Member List. This is the complete list of members for TGraphMultiErrors, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *f, Double_t c1=1)TGraphvirtual; AddPoint(Double_t x, Double_t y)TGraphinlinevirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)TGraphMultiErrorsvirtual; Allocate(Int_t size) overrideTGraphMultiErrorsprotectedvirtual; AllocateArrays(Int_t Narrays, Int_t arraySize)TGraphprotected; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF1 *f) overrideTGraphMultiErrorsvirtual; BayesDivide(const TH1 *pass, const TH1 *total, Option_t *opt="""")TGraphMultiErrorsvirtual; Browse(TBrowser *b) overrideTGraphvirtual; CalcYErrorsSum() constTGraphMultiErrorsprotected; CheckedHash()TObjectinline; Chisquare(TF1 *f1, Option_t *option="""") constTGraphvirtual; Class()TGraphMultiErrorsstatic; Class_Name()TGraphMultiErrorsstatic; Class_Version()TGraphMultiErrorsinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareArg(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareRadius(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareX(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareY(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideTGraphMultiErrorsvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin)",MatchSource.WIKI,doc/master/classTGraphMultiErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors-members.html
https://root.cern/doc/master/classTGraphMultiErrors-members.html:10976,Testability,log,logx,10976,"ueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyFirst enum valueTGraphMultiErrors; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kSquareSum enum valueTGraphMultiErrors; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphMultiErrors &tgme)TGraphMultiErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *c",MatchSource.WIKI,doc/master/classTGraphMultiErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors-members.html
https://root.cern/doc/master/classTGraphMultiErrors-members.html:10996,Testability,log,logy,10996,"up enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyFirst enum valueTGraphMultiErrors; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kSquareSum enum valueTGraphMultiErrors; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphMultiErrors &tgme)TGraphMultiErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overr",MatchSource.WIKI,doc/master/classTGraphMultiErrors-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors-members.html
https://root.cern/doc/master/classTGraphMultiErrors.html:393,Availability,error,error,393,". ROOT: TGraphMultiErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphMultiErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars and multiple y error dimensions. ; The TGraphMultiErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:419,Availability,error,error,419,". ROOT: TGraphMultiErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphMultiErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars and multiple y error dimensions. ; The TGraphMultiErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:691,Availability,error,errors,691,". ROOT: TGraphMultiErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphMultiErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars and multiple y error dimensions. ; The TGraphMultiErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:4075,Availability,error,error,4075,"ed from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphMultiErrors ();  TGraphMultiErrors default constructor. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title);  TGraphMultiErrors default constructor with name and title. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:4408,Availability,error,error,4408,"3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphMultiErrors ();  TGraphMultiErrors default constructor. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title);  TGraphMultiErrors default constructor with name and title. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const F",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:4765,Availability,error,errors,4765,"s default constructor. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title);  TGraphMultiErrors default constructor with name and title. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:5091,Availability,error,errors,5091,"nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:5443,Availability,error,errors,5443,"tr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const TGraphMultiErrors &tgme);  TGraphMultiErrors copy constructor. ;  ;  TGraphMultiErrors (const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMu",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:5765,Availability,error,errors,5765,"le_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const TGraphMultiErrors &tgme);  TGraphMultiErrors copy constructor. ;  ;  TGraphMultiErrors (const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:5937,Availability,error,errors,5937," const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const TGraphMultiErrors &tgme);  TGraphMultiErrors copy constructor. ;  ;  TGraphMultiErrors (const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error dimension. ;  ;  TGraphMultiErrors (const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:6606,Availability,error,error,6606,"ame, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const TGraphMultiErrors &tgme);  TGraphMultiErrors copy constructor. ;  ;  TGraphMultiErrors (const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error dimension. ;  ;  TGraphMultiErrors (const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a single y error dimension. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, In",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:6867,Availability,error,error,6867,"nts and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const TGraphMultiErrors &tgme);  TGraphMultiErrors copy constructor. ;  ;  TGraphMultiErrors (const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error dimension. ;  ;  TGraphMultiErrors (const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a single y error dimension. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullpt",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:7144,Availability,error,error,7144,"t_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error dimension. ;  ;  TGraphMultiErrors (const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a single y error dimension. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:7257,Availability,error,errors,7257,"t_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error dimension. ;  ;  TGraphMultiErrors (const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a single y error dimension. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:7579,Availability,error,error,7579,"TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error dimension. ;  ;  TGraphMultiErrors (const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a single y error dimension. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:7874,Availability,error,error,7874,"onst TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of floats in input and a single y error dimension. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:8153,Availability,error,error,8153,"rD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:8456,Availability,error,errors,8456,"ension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGr",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:8728,Availability,error,errors,8728,";  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:9026,Availability,error,errors,9026,";  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backw",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:9294,Availability,error,errors,9294,"GraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:9412,Availability,error,errors,9412,"e_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine *",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:9608,Availability,error,error,9608,"< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10080,Availability,error,error,10080,"_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10320,Availability,error,error,10320,"d ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10418,Availability,error,error,10418,"or with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * Get",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10490,Availability,error,error,10490,"fault destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10589,Availability,error,error,10589,"uble_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10686,Availability,error,error,10686," ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const o",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10776,Availability,error,error,10776,"; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode.",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10874,Availability,error,error,10874,"n is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10975,Availability,error,error,10975,"Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetF",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11082,Availability,error,error,11082,";  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11181,Availability,error,error,11181,"*opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11286,Availability,error,error,11286,"tFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLin",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11467,Availability,error,errors,11467,"ion. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11598,Availability,error,errors,11598,"h error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11694,Availability,error,errors,11694,"rdinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:11823,Availability,error,errors,11823," ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNY",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12016,Availability,error,error,12016,"nate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignm",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12043,Availability,error,errors,12043,"nate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignm",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12206,Availability,error,error,12206,"rror on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12233,Availability,error,errors,12233,"rror on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12391,Availability,error,error,12391,"  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12418,Availability,error,errors,12418,"  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12576,Availability,error,error,12576,"Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12603,Availability,error,errors,12603,"Double_t * GetEYhigh (Int_t e);  Get all high errors e on y coordinates as an array. ;  ; Double_t * GetEYlow () const override;  Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12761,Availability,error,error,12761,"according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, cons",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:12788,Availability,error,errors,12788,"according to fSumErrorsMode. ;  ; virtual Double_t * GetEYlow (Int_t e);  Get all low errors e on y coordinates as an array. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Color_t GetFillColor (Int_t e) const;  Get Fill Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, cons",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13077,Availability,error,errors,13077,"s). ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Style_t GetFillStyle (Int_t e) const;  Get Fill Style for specified error e (-1 = Global and x errors). ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13317,Availability,error,errors,13317,"  ; virtual Color_t GetLineColor (Int_t e) const;  Get Line Color for specified error e (-1 = Global and x errors). ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13448,Availability,error,error,13448,"Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13508,Availability,error,errors,13508,"Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Style_t GetLineStyle (Int_t e) const;  Get Line Style for specified error e (-1 = Global and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13600,Availability,error,error,13600,"obal and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13660,Availability,error,errors,13660,"obal and x errors). ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual Width_t GetLineWidth (Int_t e) const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13761,Availability,error,error,13761," const;  Get Line Width for specified error e (-1 = Global and x errors). ;  ; Int_t GetNYErrors () const;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set L",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13855,Availability,error,error,13855,"st;  ; Int_t GetSumErrorsMode () const;  ; TClass * IsA () const override;  ; TGraphMultiErrors & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, F",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:13949,Availability,error,error,13949," & operator= (const TGraphMultiErrors &tgme);  TGraphMultiErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, C",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14121,Availability,error,error,14121,"id SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14148,Availability,error,errors,14148,"id SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14366,Availability,error,error,14366,"TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual vo",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14393,Availability,error,errors,14393,"TGraphMultiErrors by a constant c1. ;  ; virtual void SetAttFill (Int_t e, TAttFill *taf);  Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual vo",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14479,Availability,error,error,14479,"y copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14506,Availability,error,errors,14506,"y copying from another TAttFill (-1 = Global and x errors). ;  ; virtual void SetAttLine (Int_t e, TAttLine *tal);  Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ;  ; virtual void SetEY (Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14737,Availability,error,error,14737,"nst Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14764,Availability,error,errors,14764,"nst Double_t *eyL, const Double_t *eyH);  Set error e ey values. ;  ; virtual void SetEYhigh (Int_t e, Int_t np, const Double_t *eyH);  Set error e eyH values. ;  ; virtual void SetEYlow (Int_t e, Int_t np, const Double_t *eyL);  Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:14982,Availability,error,error,14982,"Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:15009,Availability,error,errors,15009,"Set error e eyL values. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColor (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:15095,Availability,error,error,15095,"r (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e,",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:15122,Availability,error,errors,15122,"r (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e,",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:15278,Availability,error,error,15278,". ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:15305,Availability,error,errors,15305,". ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:16109,Availability,error,error,16109,"ine Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:16332,Availability,error,error,16332,"s). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr); ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:16538,Availability,error,error,16538,"_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Gra",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:16731,Availability,error,errors,16731,");  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:16766,Availability,error,errors,16766,");  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:29631,Availability,error,error,29631,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:29720,Availability,error,error,29720,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:29875,Availability,error,error,29875,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (co",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:30052,Availability,error,error,30052,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:33326,Availability,error,error,33326,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change curren",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:39998,Availability,error,error,39998,"  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:40228,Availability,error,errors,40228,"Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In construc",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:40623,Availability,error,errors,40623," function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHi",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42210,Availability,error,errors,42210," ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42298,Availability,error,errors,42298,"** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value f",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42356,Availability,error,errors,42356,"ng SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; D",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42412,Availability,error,errors,42412,"ng SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; D",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42486,Availability,error,errors,42486,"ng SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; D",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42555,Availability,error,errors,42555,"nctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString f",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42640,Availability,error,errors,42640,"nctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString f",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42708,Availability,error,errors,42708,"atement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLin",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42776,Availability,error,errors,42776,"atement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLin",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42818,Availability,error,errors,42818,"new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyl",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:44602,Availability,error,errors,44602,"s inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . c",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:44676,Availability,error,errors,44676,"r. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ).",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:44728,Availability,error,errors,44728," fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with name, tit",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:45404,Availability,error,errors,45404,"rs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 95 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [5/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to z",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:45733,Availability,error,errors,45733,"late the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 95 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [5/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 107 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [6/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Fl",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:46198,Availability,error,error,46198,"ame and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 95 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [5/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 107 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [6/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,eyH are NULL, the corresponding values are preset to zero. ; Definition at line 141 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [7/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:46869,Availability,error,error,46869,"◆ TGraphMultiErrors() [5/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 107 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [6/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,eyH are NULL, the corresponding values are preset to zero. ; Definition at line 141 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [7/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 155 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [8/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:47384,Availability,error,error,47384,"g values are preset to zero. ; Definition at line 107 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [6/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,eyH are NULL, the corresponding values are preset to zero. ; Definition at line 141 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [7/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 155 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [8/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 191 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . cons",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:48061,Availability,error,error,48061,"iErrors() [7/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 155 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [8/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 191 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:48582,Availability,error,errors,48582,"eset to zero. ; Definition at line 155 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [8/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 191 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Do",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:48673,Availability,error,errors,48673," ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL = nullptr, . const Double_t * ; exH = nullptr, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ; If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 191 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::v",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:49224,Availability,error,errors,49224,"iErrors.cxx. ◆ TGraphMultiErrors() [9/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Do",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:49315,Availability,error,errors,49315,"Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 205 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:49808,Availability,error,errors,49808,"◆ TGraphMultiErrors() [10/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . con",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:49899,Availability,error,errors,49899,". Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< std::vector< Float_t > > ; eyL, . std::vector< std::vector< Float_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 244 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . I",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:50456,Availability,error,errors,50456,"◆ TGraphMultiErrors() [11/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:50547,Availability,error,errors,50547,"; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 259 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors n",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:51004,Availability,error,errors,51004,"f file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [12/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Do",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:51095,Availability,error,errors,51095,"r_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). T",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:51619,Availability,error,errors,51619,"td::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Doub",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:51710,Availability,error,errors,51710,"nt_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMult",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:52174,Availability,error,errors,52174,"s. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:52265,Availability,error,errors,52265," Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vect",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:52793,Availability,error,errors,52793,"cts. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. T",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:52884,Availability,error,errors,52884,"p, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvEx",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:53322,Availability,error,error,53322," of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tv",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:53535,Availability,error,errors,53535,". Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 462 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [19/23]. TGraphMultiErrors::T",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:54056,Availability,error,error,54056,"MultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 462 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [19/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minim",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:54269,Availability,error,errors,54269,"nlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 462 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [19/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 500 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [20/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorD & ; tvX, . const ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:54808,Availability,error,error,54808,"phMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 462 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [19/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 500 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [20/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMulti",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:54923,Availability,error,errors,54923,", . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 462 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [19/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 500 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [20/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [21/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TGraphMultiErrors & ; tgme). TGr",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:55475,Availability,error,error,55475,"s ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 500 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [20/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [21/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors copy constructor. ; Definition at line 574 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [22/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; h, . Int_t ; ne = 1 . ). TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ; The low and high errors are set to the bin error of the histogram. ; Definition at line 639 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [23/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Int_t ; ne = 1, . Option_t * ; option = """" . ). Creates a TGraphMultiErrors by divid",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:55588,Availability,error,errors,55588,"s ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 500 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [20/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [21/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors copy constructor. ; Definition at line 574 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [22/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; h, . Int_t ; ne = 1 . ). TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ; The low and high errors are set to the bin error of the histogram. ; Definition at line 639 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [23/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Int_t ; ne = 1, . Option_t * ; option = """" . ). Creates a TGraphMultiErrors by divid",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:56220,Availability,error,errors,56220,"vX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [21/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors copy constructor. ; Definition at line 574 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [22/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; h, . Int_t ; ne = 1 . ). TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ; The low and high errors are set to the bin error of the histogram. ; Definition at line 639 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [23/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Int_t ; ne = 1, . Option_t * ; option = """" . ). Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphMultiErrors::Divide) ; Definition at line 667 of file TGraphMultiErrors.cxx. ◆ ~TGraphMultiErrors(). TGraphMultiErrors::~TGraphMultiErrors ; (; ). override . TGraphMultiErrors default destructor. ; Definition at line 697 of file TGraphMultiErrors.cxx. Member Function Documentation. ◆ AddYError(). void TGraphMultiErrors::AddYError ; (; Int_t ; np, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr . ). virtual . Add a new y error to the graph and fill it with the values from eyL and eyH ; Definition at line 917 of file TGraphMultiErrors.cxx. ◆ Allocate(). Double_t ** TGraphMultiErrors::Allocate ; (; Int_t ; size). overridepro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:56246,Availability,error,error,56246,"vX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [21/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors copy constructor. ; Definition at line 574 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [22/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; h, . Int_t ; ne = 1 . ). TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ; The low and high errors are set to the bin error of the histogram. ; Definition at line 639 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [23/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Int_t ; ne = 1, . Option_t * ; option = """" . ). Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphMultiErrors::Divide) ; Definition at line 667 of file TGraphMultiErrors.cxx. ◆ ~TGraphMultiErrors(). TGraphMultiErrors::~TGraphMultiErrors ; (; ). override . TGraphMultiErrors default destructor. ; Definition at line 697 of file TGraphMultiErrors.cxx. Member Function Documentation. ◆ AddYError(). void TGraphMultiErrors::AddYError ; (; Int_t ; np, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr . ). virtual . Add a new y error to the graph and fill it with the values from eyL and eyH ; Definition at line 917 of file TGraphMultiErrors.cxx. ◆ Allocate(). Double_t ** TGraphMultiErrors::Allocate ; (; Int_t ; size). overridepro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:57030,Availability,error,error,57030,"h, . Int_t ; ne = 1 . ). TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ; The low and high errors are set to the bin error of the histogram. ; Definition at line 639 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [23/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Int_t ; ne = 1, . Option_t * ; option = """" . ). Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphMultiErrors::Divide) ; Definition at line 667 of file TGraphMultiErrors.cxx. ◆ ~TGraphMultiErrors(). TGraphMultiErrors::~TGraphMultiErrors ; (; ). override . TGraphMultiErrors default destructor. ; Definition at line 697 of file TGraphMultiErrors.cxx. Member Function Documentation. ◆ AddYError(). void TGraphMultiErrors::AddYError ; (; Int_t ; np, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr . ). virtual . Add a new y error to the graph and fill it with the values from eyL and eyH ; Definition at line 917 of file TGraphMultiErrors.cxx. ◆ Allocate(). Double_t ** TGraphMultiErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 933 of file TGraphMultiErrors.cxx. ◆ Apply(). void TGraphMultiErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Only the first error dimension is affected.; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 951 of file TGraphMultiErrors.cxx. ◆ BayesDivide(). void TGraphMultiErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:57623,Availability,error,error,57623,"MultiErrors::Divide) ; Definition at line 667 of file TGraphMultiErrors.cxx. ◆ ~TGraphMultiErrors(). TGraphMultiErrors::~TGraphMultiErrors ; (; ). override . TGraphMultiErrors default destructor. ; Definition at line 697 of file TGraphMultiErrors.cxx. Member Function Documentation. ◆ AddYError(). void TGraphMultiErrors::AddYError ; (; Int_t ; np, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr . ). virtual . Add a new y error to the graph and fill it with the values from eyL and eyH ; Definition at line 917 of file TGraphMultiErrors.cxx. ◆ Allocate(). Double_t ** TGraphMultiErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 933 of file TGraphMultiErrors.cxx. ◆ Apply(). void TGraphMultiErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Only the first error dimension is affected.; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 951 of file TGraphMultiErrors.cxx. ◆ BayesDivide(). void TGraphMultiErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual . This function is only kept for backward compatibility. ; You should rather use the Divide method. It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the former BayesDivide method. ; Definition at line 990 of file TGraphMultiErrors.cxx. ◆ CalcYErrorsSum(). void TGraphMultiErrors::CalcYErrorsSum ; (; ); const. protected . Recalculates the summed y error arrays. ; Definition at line 822 of file TGraphMultiErrors.cxx. ◆ Class(). static TClass * TGraphMultiErrors::Class ; (; ).",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:57735,Availability,down,down,57735,":~TGraphMultiErrors ; (; ). override . TGraphMultiErrors default destructor. ; Definition at line 697 of file TGraphMultiErrors.cxx. Member Function Documentation. ◆ AddYError(). void TGraphMultiErrors::AddYError ; (; Int_t ; np, . const Double_t * ; eyL = nullptr, . const Double_t * ; eyH = nullptr . ). virtual . Add a new y error to the graph and fill it with the values from eyL and eyH ; Definition at line 917 of file TGraphMultiErrors.cxx. ◆ Allocate(). Double_t ** TGraphMultiErrors::Allocate ; (; Int_t ; size). overrideprotectedvirtual . Allocate internal data structures for size points. ; Reimplemented from TGraph.; Definition at line 933 of file TGraphMultiErrors.cxx. ◆ Apply(). void TGraphMultiErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Only the first error dimension is affected.; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 951 of file TGraphMultiErrors.cxx. ◆ BayesDivide(). void TGraphMultiErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual . This function is only kept for backward compatibility. ; You should rather use the Divide method. It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the former BayesDivide method. ; Definition at line 990 of file TGraphMultiErrors.cxx. ◆ CalcYErrorsSum(). void TGraphMultiErrors::CalcYErrorsSum ; (; ); const. protected . Recalculates the summed y error arrays. ; Definition at line 822 of file TGraphMultiErrors.cxx. ◆ Class(). static TClass * TGraphMultiErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphMultiErrors::Class_Name ; (; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:58454,Availability,error,error,58454,"rridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \); Only the first error dimension is affected.; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 951 of file TGraphMultiErrors.cxx. ◆ BayesDivide(). void TGraphMultiErrors::BayesDivide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = """" . ). virtual . This function is only kept for backward compatibility. ; You should rather use the Divide method. It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the former BayesDivide method. ; Definition at line 990 of file TGraphMultiErrors.cxx. ◆ CalcYErrorsSum(). void TGraphMultiErrors::CalcYErrorsSum ; (; ); const. protected . Recalculates the summed y error arrays. ; Definition at line 822 of file TGraphMultiErrors.cxx. ◆ Class(). static TClass * TGraphMultiErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphMultiErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphMultiErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 213 of file TGraphMultiErrors.h. ◆ ComputeRange(). void TGraphMultiErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute Range. ; Reimplemented from TGraph.; Definition at line 1379 of file TGraphMultiErrors.cxx. ◆ CopyAndRelease(). void TGraphMultiErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 7",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:59649,Availability,error,errors,59649,"ultiErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphMultiErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 213 of file TGraphMultiErrors.h. ◆ ComputeRange(). void TGraphMultiErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute Range. ; Reimplemented from TGraph.; Definition at line 1379 of file TGraphMultiErrors.cxx. ◆ CopyAndRelease(). void TGraphMultiErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 748 of file TGraphMultiErrors.cxx. ◆ CopyPoints(). Bool_t TGraphMultiErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from th",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:60395,Availability,error,error,60395,"Reimplemented from TGraph.; Definition at line 748 of file TGraphMultiErrors.cxx. ◆ CopyPoints(). Bool_t TGraphMultiErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:60456,Availability,error,error,60456,"ltiErrors.cxx. ◆ CopyPoints(). Bool_t TGraphMultiErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiError",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:60771,Availability,error,error,60771," line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:61044,Availability,error,errors,61044,"delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is re",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:61541,Availability,error,error,61541,"void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of fil",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:61733,Availability,error,error,61733,"s::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of th",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:61906,Availability,error,error,61906,"h * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErr",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:61965,Availability,error,errors,61965,"he merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:62208,Availability,error,error,62208,"Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhi",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:62437,Availability,error,error,62437," TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplem",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:62662,Availability,error,error,62662," Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate fo",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:62712,Availability,error,errors,62712,"or dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErr",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:62799,Availability,error,errors,62799,"uble_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i)",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63043,Availability,error,error,63043,"e 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx.",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63104,Availability,error,errors,63104,"s::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63325,Availability,error,error,63325,"rXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63375,Availability,error,errors,63375," i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63651,Availability,error,error,63651,"ror on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMul",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63860,Availability,error,error,63860,".; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMul",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:63910,Availability,error,errors,63910,"tErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:64183,Availability,error,error,64183,"rrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:64730,Availability,error,errors,64730,"w() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:64988,Availability,error,errors,64988,"ph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttF",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:65188,Availability,error,errors,65188,i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; ,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:65443,Availability,error,errors,65443,tEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinev,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:65862,Availability,error,error,65862,TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlin,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:65889,Availability,error,errors,65889,TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlin,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:66278,Availability,error,error,66278, TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirt,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:66305,Availability,error,errors,66305, TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirt,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:66689,Availability,error,error,66689,; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirtual . Return the line width. ; Reimplemented from TAttLine.; Definition at line 35 of file TAttLine.h. ◆ GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:66716,Availability,error,errors,66716,; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttFill::GetFillStyle ; (; ); const. inlinevirtual . Return the fill area style. ; Reimplemented from TAttFill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirtual . Return the line width. ; Reimplemented from TAttLine.; Definition at line 35 of file TAttLine.h. ◆ GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:67100,Availability,error,error,67100,Fill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirtual . Return the line width. ; Reimplemented from TAttLine.; Definition at line 35 of file TAttLine.h. ◆ GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition at line 166 of file TGraphMultiErrors.h. ◆ GetSumErrorsMode(). Int_t TGraphMultiErrors::GetSumErrorsMode ; (; ); const. inline . Definition at line 165 of file TGraphMultiErrors.h. ◆ IsA(). TClass * TGraphMultiErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 213 of file TGraphMultiErrors.h. ◆ operator=(). TGraphMultiE,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:67127,Availability,error,errors,67127,Fill.; Definition at line 31 of file TAttFill.h. ◆ GetFillStyle() [2/2]. Style_t TGraphMultiErrors::GetFillStyle ; (; Int_t ; e); const. virtual . Get Fill Style for specified error e (-1 = Global and x errors). ; Definition at line 1656 of file TGraphMultiErrors.cxx. ◆ GetLineColor() [1/2]. virtual Color_t TAttLine::GetLineColor ; (; ); const. inlinevirtual . Return the line color. ; Reimplemented from TAttLine.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirtual . Return the line width. ; Reimplemented from TAttLine.; Definition at line 35 of file TAttLine.h. ◆ GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition at line 166 of file TGraphMultiErrors.h. ◆ GetSumErrorsMode(). Int_t TGraphMultiErrors::GetSumErrorsMode ; (; ); const. inline . Definition at line 165 of file TGraphMultiErrors.h. ◆ IsA(). TClass * TGraphMultiErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 213 of file TGraphMultiErrors.h. ◆ operator=(). TGraphMultiE,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:67511,Availability,error,error,67511,"Line.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirtual . Return the line width. ; Reimplemented from TAttLine.; Definition at line 35 of file TAttLine.h. ◆ GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition at line 166 of file TGraphMultiErrors.h. ◆ GetSumErrorsMode(). Int_t TGraphMultiErrors::GetSumErrorsMode ; (; ); const. inline . Definition at line 165 of file TGraphMultiErrors.h. ◆ IsA(). TClass * TGraphMultiErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 213 of file TGraphMultiErrors.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TG",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:67538,Availability,error,errors,67538,"Line.; Definition at line 33 of file TAttLine.h. ◆ GetLineColor() [2/2]. Color_t TGraphMultiErrors::GetLineColor ; (; Int_t ; e); const. virtual . Get Line Color for specified error e (-1 = Global and x errors). ; Definition at line 1669 of file TGraphMultiErrors.cxx. ◆ GetLineStyle() [1/2]. virtual Style_t TAttLine::GetLineStyle ; (; ); const. inlinevirtual . Return the line style. ; Reimplemented from TAttLine.; Definition at line 34 of file TAttLine.h. ◆ GetLineStyle() [2/2]. Style_t TGraphMultiErrors::GetLineStyle ; (; Int_t ; e); const. virtual . Get Line Style for specified error e (-1 = Global and x errors). ; Definition at line 1682 of file TGraphMultiErrors.cxx. ◆ GetLineWidth() [1/2]. virtual Width_t TAttLine::GetLineWidth ; (; ); const. inlinevirtual . Return the line width. ; Reimplemented from TAttLine.; Definition at line 35 of file TAttLine.h. ◆ GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition at line 166 of file TGraphMultiErrors.h. ◆ GetSumErrorsMode(). Int_t TGraphMultiErrors::GetSumErrorsMode ; (; ); const. inline . Definition at line 165 of file TGraphMultiErrors.h. ◆ IsA(). TClass * TGraphMultiErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 213 of file TGraphMultiErrors.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TG",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:68388,Availability,error,errors,68388,"GetLineWidth() [2/2]. Width_t TGraphMultiErrors::GetLineWidth ; (; Int_t ; e); const. virtual . Get Line Width for specified error e (-1 = Global and x errors). ; Definition at line 1695 of file TGraphMultiErrors.cxx. ◆ GetNYErrors(). Int_t TGraphMultiErrors::GetNYErrors ; (; ); const. inline . Definition at line 166 of file TGraphMultiErrors.h. ◆ GetSumErrorsMode(). Int_t TGraphMultiErrors::GetSumErrorsMode ; (; ); const. inline . Definition at line 165 of file TGraphMultiErrors.h. ◆ IsA(). TClass * TGraphMultiErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 213 of file TGraphMultiErrors.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by co",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:68907,Availability,error,errors,68907,"; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 213 of file TGraphMultiErrors.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; De",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:68997,Availability,error,errors,68997,"s.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69066,Availability,error,errors,69066,"s.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69143,Availability,error,errors,69143,"s.h. ◆ operator=(). TGraphMultiErrors & TGraphMultiErrors::operator= ; (; const TGraphMultiErrors & ; tgme). TGraphMultiErrors assignment operator. ; Definition at line 599 of file TGraphMultiErrors.cxx. ◆ Print(). void TGraphMultiErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; e",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69374,Availability,error,error,69374," values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. v",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69434,Availability,error,errors,69434," values. ; Reimplemented from TGraph.; Definition at line 1708 of file TGraphMultiErrors.cxx. ◆ SavePrimitive(). void TGraphMultiErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. v",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69628,Availability,error,error,69628,"atement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . C",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69688,Availability,error,errors,69688,"atement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1729 of file TGraphMultiErrors.cxx. ◆ Scale(). void TGraphMultiErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . C",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:69895,Availability,error,error,69895,"s and errors of a TGraphMultiErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and (multiple) errors are scaled If option contains ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). vir",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:70094,Availability,error,error,70094,"s ""xy"" both x and y values and (multiple) errors are scaled ; Reimplemented from TGraph.; Definition at line 1766 of file TGraphMultiErrors.cxx. ◆ SetAttFill(). void TGraphMultiErrors::SetAttFill ; (; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (tr",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:70292,Availability,error,error,70292,"(; Int_t ; e, . TAttFill * ; taf . ). virtual . Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors). ; Definition at line 2018 of file TGraphMultiErrors.cxx. ◆ SetAttLine(). void TGraphMultiErrors::SetAttLine ; (; Int_t ; e, . TAttLine * ; tal . ). virtual . Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors). ; Definition at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorA",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:70697,Availability,error,error,70697,"tion at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMulti",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:70724,Availability,error,errors,70724,"tion at line 2029 of file TGraphMultiErrors.cxx. ◆ SetEY(). void TGraphMultiErrors::SetEY ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set error e ey values. ; Definition at line 1973 of file TGraphMultiErrors.cxx. ◆ SetEYhigh(). void TGraphMultiErrors::SetEYhigh ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyH . ). virtual . Set error e eyH values. ; Definition at line 1995 of file TGraphMultiErrors.cxx. ◆ SetEYlow(). void TGraphMultiErrors::SetEYlow ; (; Int_t ; e, . Int_t ; np, . const Double_t * ; eyL . ). virtual . Set error e eyL values. ; Definition at line 1982 of file TGraphMultiErrors.cxx. ◆ SetFillColor() [1/2]. virtual void TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMulti",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:71402,Availability,error,error,71402," TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [2/2]. virtual void TAttFill::SetFillStyle ; (; Style_t ; fstyle). inlinevirtual . Set the fill area style. ; Reimplemented from TAttFill.; Definition at line 39 of file TAttFill.h. ◆ SetLineColor() [1/2]. virtual void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:71429,Availability,error,errors,71429," TAttFill::SetFillColor ; (; Color_t ; fcolor). inlinevirtual . Set the fill area color. ; Reimplemented from TAttFill.; Definition at line 37 of file TAttFill.h. ◆ SetFillColor() [2/2]. void TGraphMultiErrors::SetFillColor ; (; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [2/2]. virtual void TAttFill::SetFillStyle ; (; Style_t ; fstyle). inlinevirtual . Set the fill area style. ; Reimplemented from TAttFill.; Definition at line 39 of file TAttFill.h. ◆ SetLineColor() [1/2]. virtual void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:71624,Availability,error,error,71624,"; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [2/2]. virtual void TAttFill::SetFillStyle ; (; Style_t ; fstyle). inlinevirtual . Set the fill area style. ; Reimplemented from TAttFill.; Definition at line 39 of file TAttFill.h. ◆ SetLineColor() [1/2]. virtual void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:71651,Availability,error,errors,71651,"; Int_t ; e, . Color_t ; fcolor . ). virtual . Set Fill Color of error e (-1 = Global and x errors). ; Definition at line 2040 of file TGraphMultiErrors.cxx. ◆ SetFillColorAlpha() [1/2]. void TAttFill::SetFillColorAlpha ; (; Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set a transparent fill color. ; Parameters. fcolordefines the fill color ; falphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notefalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttFill.; Definition at line 38 of file TAttFill.cxx. ◆ SetFillColorAlpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [2/2]. virtual void TAttFill::SetFillStyle ; (; Style_t ; fstyle). inlinevirtual . Set the fill area style. ; Reimplemented from TAttFill.; Definition at line 39 of file TAttFill.h. ◆ SetLineColor() [1/2]. virtual void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:72239,Availability,error,error,72239,"Alpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [2/2]. virtual void TAttFill::SetFillStyle ; (; Style_t ; fstyle). inlinevirtual . Set the fill area style. ; Reimplemented from TAttFill.; Definition at line 39 of file TAttFill.h. ◆ SetLineColor() [1/2]. virtual void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMulti",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:72266,Availability,error,errors,72266,"Alpha() [2/2]. void TGraphMultiErrors::SetFillColorAlpha ; (; Int_t ; e, . Color_t ; fcolor, . Float_t ; falpha . ). virtual . Set Fill Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2051 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [1/2]. void TGraphMultiErrors::SetFillStyle ; (; Int_t ; e, . Style_t ; fstyle . ). virtual . Set Fill Style of error e (-1 = Global and x errors). ; Definition at line 2062 of file TGraphMultiErrors.cxx. ◆ SetFillStyle() [2/2]. virtual void TAttFill::SetFillStyle ; (; Style_t ; fstyle). inlinevirtual . Set the fill area style. ; Reimplemented from TAttFill.; Definition at line 39 of file TAttFill.h. ◆ SetLineColor() [1/2]. virtual void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMulti",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:72944,Availability,error,error,72944," void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:72971,Availability,error,errors,72971," void TAttLine::SetLineColor ; (; Color_t ; lcolor). inlinevirtual . Set the line color. ; Reimplemented from TAttLine.; Definition at line 40 of file TAttLine.h. ◆ SetLineColor() [2/2]. void TGraphMultiErrors::SetLineColor ; (; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:73166,Availability,error,error,73166,"; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ; exL, . Double_t ; exH, . Double_t ; eyL1, . Double_t ; eyH1, . Double_t ; eyL2 = 0., . Double_t ; eyH2 = 0., . Double_t ; eyL3 = 0., . Double_t ; eyH3 = 0. . ). virtual . Set ex and ey values for point pointed by the mouse. ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:73193,Availability,error,errors,73193,"; Int_t ; e, . Color_t ; lcolor . ). virtual . Set Line Color of error e (-1 = Global and x errors). ; Definition at line 2073 of file TGraphMultiErrors.cxx. ◆ SetLineColorAlpha() [1/2]. void TAttLine::SetLineColorAlpha ; (; Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set a transparent line color. ; Parameters. lcolordefines the line color ; lalphadefines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ; exL, . Double_t ; exH, . Double_t ; eyL1, . Double_t ; eyH1, . Double_t ; eyL2 = 0., . Double_t ; eyH2 = 0., . Double_t ; eyL3 = 0., . Double_t ; eyH3 = 0. . ). virtual . Set ex and ey values for point pointed by the mouse. ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:73582,Availability,error,error,73582,"nt) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ; exL, . Double_t ; exH, . Double_t ; eyL1, . Double_t ; eyH1, . Double_t ; eyL2 = 0., . Double_t ; eyH2 = 0., . Double_t ; eyL3 = 0., . Double_t ; eyH3 = 0. . ). virtual . Set ex and ey values for point pointed by the mouse. ; Up to 3 y error dimensions possible. ; Definition at line 1793 of file TGraphMultiErrors.cxx. ◆ SetPointError() [2/2]. void TGraphMultiErrors::SetPointError ; (; Int_t ; i, . Int_t ; ne, . Double_t ; exL, . Double_t ; exH, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ex and ey values for point i. ; Definition at line 1834 of file TGraphMultiErrors.cxx. ◆ SetPointEX(). void TGraphMultiErro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:73609,Availability,error,errors,73609,"nt) to 1. (fully opaque). . Notelalpha is ignored (treated as 1) if the TCanvas has no GL support activated. ; Reimplemented from TAttLine.; Definition at line 41 of file TAttLine.cxx. ◆ SetLineColorAlpha() [2/2]. void TGraphMultiErrors::SetLineColorAlpha ; (; Int_t ; e, . Color_t ; lcolor, . Float_t ; lalpha . ). virtual . Set Line Color and Alpha of error e (-1 = Global and x errors). ; Definition at line 2084 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [1/2]. void TGraphMultiErrors::SetLineStyle ; (; Int_t ; e, . Style_t ; lstyle . ). virtual . Set Line Style of error e (-1 = Global and x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ; exL, . Double_t ; exH, . Double_t ; eyL1, . Double_t ; eyH1, . Double_t ; eyL2 = 0., . Double_t ; eyH2 = 0., . Double_t ; eyL3 = 0., . Double_t ; eyH3 = 0. . ). virtual . Set ex and ey values for point pointed by the mouse. ; Up to 3 y error dimensions possible. ; Definition at line 1793 of file TGraphMultiErrors.cxx. ◆ SetPointError() [2/2]. void TGraphMultiErrors::SetPointError ; (; Int_t ; i, . Int_t ; ne, . Double_t ; exL, . Double_t ; exH, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ex and ey values for point i. ; Definition at line 1834 of file TGraphMultiErrors.cxx. ◆ SetPointEX(). void TGraphMultiErro",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:74184,Availability,error,error,74184," x errors). ; Definition at line 2095 of file TGraphMultiErrors.cxx. ◆ SetLineStyle() [2/2]. virtual void TAttLine::SetLineStyle ; (; Style_t ; lstyle). inlinevirtual . Set the line style. ; Reimplemented from TAttLine.; Definition at line 42 of file TAttLine.h. ◆ SetLineWidth() [1/2]. void TGraphMultiErrors::SetLineWidth ; (; Int_t ; e, . Width_t ; lwidth . ). virtual . Set Line Width of error e (-1 = Global and x errors). ; Definition at line 2106 of file TGraphMultiErrors.cxx. ◆ SetLineWidth() [2/2]. virtual void TAttLine::SetLineWidth ; (; Width_t ; lwidth). inlinevirtual . Set the line width. ; Reimplemented from TAttLine.; Definition at line 43 of file TAttLine.h. ◆ SetPointError() [1/2]. void TGraphMultiErrors::SetPointError ; (; Double_t ; exL, . Double_t ; exH, . Double_t ; eyL1, . Double_t ; eyH1, . Double_t ; eyL2 = 0., . Double_t ; eyH2 = 0., . Double_t ; eyL3 = 0., . Double_t ; eyH3 = 0. . ). virtual . Set ex and ey values for point pointed by the mouse. ; Up to 3 y error dimensions possible. ; Definition at line 1793 of file TGraphMultiErrors.cxx. ◆ SetPointError() [2/2]. void TGraphMultiErrors::SetPointError ; (; Int_t ; i, . Int_t ; ne, . Double_t ; exL, . Double_t ; exH, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ex and ey values for point i. ; Definition at line 1834 of file TGraphMultiErrors.cxx. ◆ SetPointEX(). void TGraphMultiErrors::SetPointEX ; (; Int_t ; i, . Double_t ; exL, . Double_t ; exH . ). virtual . Set ex values for point i. ; Definition at line 1844 of file TGraphMultiErrors.cxx. ◆ SetPointEXhigh(). void TGraphMultiErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exH . ). virtual . Set exH value for point i. ; Definition at line 1869 of file TGraphMultiErrors.cxx. ◆ SetPointEXlow(). void TGraphMultiErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exL . ). virtual . Set exL value for point i. ; Definition at line 1853 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [1/2]. void TGraphMultiErrors::SetPointEY",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:75275,Availability,error,error,75275,"2/2]. void TGraphMultiErrors::SetPointError ; (; Int_t ; i, . Int_t ; ne, . Double_t ; exL, . Double_t ; exH, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ex and ey values for point i. ; Definition at line 1834 of file TGraphMultiErrors.cxx. ◆ SetPointEX(). void TGraphMultiErrors::SetPointEX ; (; Int_t ; i, . Double_t ; exL, . Double_t ; exH . ). virtual . Set ex values for point i. ; Definition at line 1844 of file TGraphMultiErrors.cxx. ◆ SetPointEXhigh(). void TGraphMultiErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exH . ). virtual . Set exH value for point i. ; Definition at line 1869 of file TGraphMultiErrors.cxx. ◆ SetPointEXlow(). void TGraphMultiErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exL . ). virtual . Set exL value for point i. ; Definition at line 1853 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [1/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL, . Double_t ; eyH . ). virtual . Set error e ey values for point i. ; Definition at line 1920 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [2/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ey values for point i. ; Definition at line 1885 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [1/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyH . ). virtual . Set error e eyH value for point i. ; Definition at line 1951 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [2/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyH . ). virtual . Set eyH values for point i. ; Definition at line 1907 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [1/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL . ). virtual . Set error e eyL value for point i. ; Definition at line 1929 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [2/2]. void TGra",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:75730,Availability,error,error,75730,"iErrors.cxx. ◆ SetPointEXhigh(). void TGraphMultiErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exH . ). virtual . Set exH value for point i. ; Definition at line 1869 of file TGraphMultiErrors.cxx. ◆ SetPointEXlow(). void TGraphMultiErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exL . ). virtual . Set exL value for point i. ; Definition at line 1853 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [1/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL, . Double_t ; eyH . ). virtual . Set error e ey values for point i. ; Definition at line 1920 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [2/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ey values for point i. ; Definition at line 1885 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [1/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyH . ). virtual . Set error e eyH value for point i. ; Definition at line 1951 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [2/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyH . ). virtual . Set eyH values for point i. ; Definition at line 1907 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [1/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL . ). virtual . Set error e eyL value for point i. ; Definition at line 1929 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [2/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL . ). virtual . Set eyL values for point i. ; Definition at line 1894 of file TGraphMultiErrors.cxx. ◆ SetSumErrorsMode(). void TGraphMultiErrors::SetSumErrorsMode ; (; Int_t ; m). virtual . Set the sum errors mode and recalculate summed errors. ; Definition at line 2007 of file TGraphMultiErrors.cxx. ◆ Streamer(). void TGraphMultiErrors::Streamer ; (; TBuffer & ; b). o",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:76166,Availability,error,error,76166,"s::SetPointEY ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL, . Double_t ; eyH . ). virtual . Set error e ey values for point i. ; Definition at line 1920 of file TGraphMultiErrors.cxx. ◆ SetPointEY() [2/2]. void TGraphMultiErrors::SetPointEY ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL, . const Double_t * ; eyH . ). virtual . Set ey values for point i. ; Definition at line 1885 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [1/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyH . ). virtual . Set error e eyH value for point i. ; Definition at line 1951 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [2/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyH . ). virtual . Set eyH values for point i. ; Definition at line 1907 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [1/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL . ). virtual . Set error e eyL value for point i. ; Definition at line 1929 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [2/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL . ). virtual . Set eyL values for point i. ; Definition at line 1894 of file TGraphMultiErrors.cxx. ◆ SetSumErrorsMode(). void TGraphMultiErrors::SetSumErrorsMode ; (; Int_t ; m). virtual . Set the sum errors mode and recalculate summed errors. ; Definition at line 2007 of file TGraphMultiErrors.cxx. ◆ Streamer(). void TGraphMultiErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented from TGraph. ◆ StreamerNVirtual(). void TGraphMultiErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file TGraphMultiErrors.h. ◆ SwapPoints(). void TGraphMultiErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 869 of",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:76574,Availability,error,errors,76574,"Errors.cxx. ◆ SetPointEYhigh() [1/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyH . ). virtual . Set error e eyH value for point i. ; Definition at line 1951 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [2/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyH . ). virtual . Set eyH values for point i. ; Definition at line 1907 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [1/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL . ). virtual . Set error e eyL value for point i. ; Definition at line 1929 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [2/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL . ). virtual . Set eyL values for point i. ; Definition at line 1894 of file TGraphMultiErrors.cxx. ◆ SetSumErrorsMode(). void TGraphMultiErrors::SetSumErrorsMode ; (; Int_t ; m). virtual . Set the sum errors mode and recalculate summed errors. ; Definition at line 2007 of file TGraphMultiErrors.cxx. ◆ Streamer(). void TGraphMultiErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented from TGraph. ◆ StreamerNVirtual(). void TGraphMultiErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file TGraphMultiErrors.h. ◆ SwapPoints(). void TGraphMultiErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 869 of file TGraphMultiErrors.cxx. ◆ UpdateArrays(). void TGraphMultiErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. s",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:76609,Availability,error,errors,76609,"Errors.cxx. ◆ SetPointEYhigh() [1/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyH . ). virtual . Set error e eyH value for point i. ; Definition at line 1951 of file TGraphMultiErrors.cxx. ◆ SetPointEYhigh() [2/2]. void TGraphMultiErrors::SetPointEYhigh ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyH . ). virtual . Set eyH values for point i. ; Definition at line 1907 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [1/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; e, . Double_t ; eyL . ). virtual . Set error e eyL value for point i. ; Definition at line 1929 of file TGraphMultiErrors.cxx. ◆ SetPointEYlow() [2/2]. void TGraphMultiErrors::SetPointEYlow ; (; Int_t ; i, . Int_t ; ne, . const Double_t * ; eyL . ). virtual . Set eyL values for point i. ; Definition at line 1894 of file TGraphMultiErrors.cxx. ◆ SetSumErrorsMode(). void TGraphMultiErrors::SetSumErrorsMode ; (; Int_t ; m). virtual . Set the sum errors mode and recalculate summed errors. ; Definition at line 2007 of file TGraphMultiErrors.cxx. ◆ Streamer(). void TGraphMultiErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented from TGraph. ◆ StreamerNVirtual(). void TGraphMultiErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file TGraphMultiErrors.h. ◆ SwapPoints(). void TGraphMultiErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 869 of file TGraphMultiErrors.cxx. ◆ UpdateArrays(). void TGraphMultiErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. s",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:77691,Availability,error,errors,77691,"◆ Streamer(). void TGraphMultiErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented from TGraph. ◆ StreamerNVirtual(). void TGraphMultiErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file TGraphMultiErrors.h. ◆ SwapPoints(). void TGraphMultiErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 869 of file TGraphMultiErrors.cxx. ◆ UpdateArrays(). void TGraphMultiErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:77867,Availability,error,errors,77867,"TGraphMultiErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file TGraphMultiErrors.h. ◆ SwapPoints(). void TGraphMultiErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 869 of file TGraphMultiErrors.cxx. ◆ UpdateArrays(). void TGraphMultiErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78010,Availability,error,errors,78010,"tiErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 869 of file TGraphMultiErrors.cxx. ◆ UpdateArrays(). void TGraphMultiErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78151,Availability,error,errors,78151,"t line 869 of file TGraphMultiErrors.cxx. ◆ UpdateArrays(). void TGraphMultiErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78309,Availability,error,errors,78309," ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; T",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78473,Availability,error,errors,78473, Definition at line 885 of file TGraphMultiErrors.cxx. Member Data Documentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphMultiErrors.h; hist/hist/src/TGraphMultiErrors.cxx. TGraphMultiErrors. ROOT master - Reference Guide Gener,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78642,Availability,error,errors,78642,umentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphMultiErrors.h; hist/hist/src/TGraphMultiErrors.cxx. TGraphMultiErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78805,Availability,error,errors,78805,umentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphMultiErrors.h; hist/hist/src/TGraphMultiErrors.cxx. TGraphMultiErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:78964,Availability,error,errors,78964,umentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphMultiErrors.h; hist/hist/src/TGraphMultiErrors.cxx. TGraphMultiErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:79102,Availability,error,errors,79102,umentation. ◆ fAttFill. std::vector<TAttFill> TGraphMultiErrors::fAttFill. protected . The AttFill attributes of the different errors. ; Definition at line 41 of file TGraphMultiErrors.h. ◆ fAttLine. std::vector<TAttLine> TGraphMultiErrors::fAttLine. protected . The AttLine attributes of the different errors. ; Definition at line 42 of file TGraphMultiErrors.h. ◆ fExH. Double_t* TGraphMultiErrors::fExH. protected . [fNpoints] array of X high errors ; Definition at line 36 of file TGraphMultiErrors.h. ◆ fExL. Double_t* TGraphMultiErrors::fExL. protected . [fNpoints] array of X low errors ; Definition at line 35 of file TGraphMultiErrors.h. ◆ fEyH. std::vector<TArrayD> TGraphMultiErrors::fEyH. protected . Two dimensional array of Y high errors. ; Definition at line 38 of file TGraphMultiErrors.h. ◆ fEyHSum. Double_t* TGraphMultiErrors::fEyHSum = nullptr. mutableprotected . ! Array of summed Y high errors for fitting ; Definition at line 40 of file TGraphMultiErrors.h. ◆ fEyL. std::vector<TArrayD> TGraphMultiErrors::fEyL. protected . Two dimensional array of Y low errors. ; Definition at line 37 of file TGraphMultiErrors.h. ◆ fEyLSum. Double_t* TGraphMultiErrors::fEyLSum = nullptr. mutableprotected . ! Array of summed Y low errors for fitting ; Definition at line 39 of file TGraphMultiErrors.h. ◆ fNYErrors. Int_t TGraphMultiErrors::fNYErrors. protected . The amount of different y-errors. ; Definition at line 32 of file TGraphMultiErrors.h. ◆ fSumErrorsMode. Int_t TGraphMultiErrors::fSumErrorsMode. protected . How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ; Definition at line 33 of file TGraphMultiErrors.h. Libraries for TGraphMultiErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphMultiErrors.h; hist/hist/src/TGraphMultiErrors.cxx. TGraphMultiErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:26958,Deployability,continuous,continuous,26958,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:40120,Deployability,release,release,40120,"tic Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherit",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:59388,Deployability,release,release,59388,"alcYErrorsSum ; (; ); const. protected . Recalculates the summed y error arrays. ; Definition at line 822 of file TGraphMultiErrors.cxx. ◆ Class(). static TClass * TGraphMultiErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphMultiErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphMultiErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 213 of file TGraphMultiErrors.h. ◆ ComputeRange(). void TGraphMultiErrors::ComputeRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. overridevirtual . Compute Range. ; Reimplemented from TGraph.; Definition at line 1379 of file TGraphMultiErrors.cxx. ◆ CopyAndRelease(). void TGraphMultiErrors::CopyAndRelease ; (; Double_t ** ; newarrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy and release. ; Reimplemented from TGraph.; Definition at line 748 of file TGraphMultiErrors.cxx. ◆ CopyPoints(). Bool_t TGraphMultiErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Delete",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10197,Energy Efficiency,adapt,adapted,10197,"rrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:41324,Energy Efficiency,allocate,allocate,41324,"ould be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:41839,Energy Efficiency,allocate,allocate,41839,"Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors ar",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:60659,Energy Efficiency,adapt,adapted,60659,"arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLin",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:29637,Integrability,message,message,29637,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:30058,Integrability,message,message,30058,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:30716,Integrability,message,message,30716,"ms, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:33332,Integrability,message,message,33332,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change curren",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:33523,Integrability,message,message,33523,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, con",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:2635,Modifiability,inherit,inherited,2635,"eColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphMultiErrors::TGraphMultiErrorsTGraphMultiErrors()TGraphMultiErrors default constructor.Definition TGraphMultiErrors.cxx:66; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17. Definition at line 29 of file TGraphMultiErrors.h. Public Types; enum  ESummationModes { kOnlyFirst = 0; , kSquareSum = 1; , kAbsSum = 2; };  ;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphMultiErrors ();  TGraphMultiErrors default constructor. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title);  TGraphMultiErrors def",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:2904,Modifiability,inherit,inherited,2904,"en GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphMultiErrors::TGraphMultiErrorsTGraphMultiErrors()TGraphMultiErrors default constructor.Definition TGraphMultiErrors.cxx:66; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17. Definition at line 29 of file TGraphMultiErrors.h. Public Types; enum  ESummationModes { kOnlyFirst = 0; , kSquareSum = 1; , kAbsSum = 2; };  ;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphMultiErrors ();  TGraphMultiErrors default constructor. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title);  TGraphMultiErrors default constructor with name and title. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:10197,Modifiability,adapt,adapted,10197,"rrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:16945,Modifiability,inherit,inherited,16945," for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e, Double_t eyL, Double_t eyH);  Set error e ey values for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);  Set ey values for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t e, Double_t eyH);  Set error e eyH value for point i. ;  ; virtual void SetPointEYhigh (Int_t i, Int_t ne, const Double_t *eyH);  Set eyH values for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t e, Double_t eyL);  Set error e eyL value for point i. ;  ; virtual void SetPointEYlow (Int_t i, Int_t ne, const Double_t *eyL);  Set eyL values for point i. ;  ; virtual void SetSumErrorsMode (Int_t m);  Set the sum errors mode and recalculate summed errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and vy. ;  ;  TGraph (const TVectorF &vx, const TVectorF &vy);  Graph constructor with two vectors of floats in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of poin",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:27009,Modifiability,inherit,inherited,27009,"er i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:28474,Modifiability,inherit,inherited,28474,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:29267,Modifiability,inherit,inheritance,29267,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:30814,Modifiability,inherit,inherits,30814,"ameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:30931,Modifiability,inherit,inherits,30931,"method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:33830,Modifiability,inherit,inherited,33830,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAt",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:34820,Modifiability,inherit,inherited,34820,"Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:35678,Modifiability,inherit,inherited,35678,"eAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:37292,Modifiability,inherit,inherited,37292,"this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Me",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:38157,Modifiability,inherit,inherited,38157," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:38367,Modifiability,inherit,inherited,38367," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:38885,Modifiability,inherit,inherited,38885,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be ca",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:39097,Modifiability,inherit,inherited,39097,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be ca",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:39309,Modifiability,inherit,inherited,39309,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be ca",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:41063,Modifiability,inherit,inherited,41063,"in) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void Ma",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:41930,Modifiability,inherit,inherited,41930,"and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Point",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:42941,Modifiability,inherit,inherited,42941,"on, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TAttFill > fAttFill;  The AttFill attributes of the different errors. ;  ; std::vector< TAttLine > fAttLine;  The AttLine attributes of the different errors. ;  ; Double_t * fExH;  [fNpoints] array of X high errors ;  ; Double_t * fExL;  [fNpoints] array of X low errors ;  ; std::vector< TArrayD > fEyH;  Two dimensional array of Y high errors. ;  ; Double_t * fEyHSum = nullptr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; St",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:43520,Modifiability,inherit,inherited,43520,"tr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationMod",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:43602,Modifiability,inherit,inherited,43602,"tr;  ! Array of summed Y high errors for fitting ;  ; std::vector< TArrayD > fEyL;  Two dimensional array of Y low errors. ;  ; Double_t * fEyLSum = nullptr;  ! Array of summed Y low errors for fitting ;  ; Int_t fNYErrors;  The amount of different y-errors. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationMod",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:43763,Modifiability,inherit,inherited,43763,"rs. ;  ; Int_t fSumErrorsMode;  How y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition. ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiE",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:43896,Modifiability,inherit,inherited,43896," ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMult",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:44093,Modifiability,inherit,inherited,44093,"MaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name a",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:44199,Modifiability,inherit,inherited,44199,"MaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name a",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:60659,Modifiability,adapt,adapted,60659,"arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLin",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:473,Performance,perform,performed,473,". ROOT: TGraphMultiErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphMultiErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars and multiple y error dimensions. ; The TGraphMultiErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativ",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:40559,Performance,perform,perform,40559," function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CalcYErrorsSum () const;  Recalculates the summed y error arrays. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ;  ; Bool_t DoMerge (const TGraph *tg) override;  Protected function to perform the merge operation of a graph with multiple asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHi",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:60980,Performance,perform,perform,60980,"delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is re",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:27877,Security,hash,hash,27877," Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:23912,Testability,log,logx,23912,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:23932,Testability,log,logy,23932,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:23998,Testability,log,log,23998,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:24042,Testability,log,logarithmic,24042,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphMultiErrors.html:24083,Testability,log,log,24083,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphMultiErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html
https://root.cern/doc/master/classTGraphNode.html:4823,Availability,error,error,4823," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:4912,Availability,error,error,4912,"owser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:5067,Availability,error,error,5067,"/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this obj",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:5244,Availability,error,error,5244,"object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:9077,Availability,error,error,9077,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a n",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:307,Integrability,interface,interface,307,". ROOT: TGraphNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraphNode Class ReferenceGraphics » 2D Graphics » graphviz interface. ; A graph node object which can be added in a TGraphStruct. ; Definition at line 27 of file TGraphNode.h. Public Member Functions;  TGraphNode ();  Graph node default constructor. ;  ;  TGraphNode (const char *name, const char *title="""");  Graph node normal constructor. ;  ;  ~TGraphNode () override;  Graph Node default destructor. ;  ; void CreateGVNode (GVizAgraph_t *gv);  Create the GraphViz node into the GraphViz data structure gv. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a node. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; GVizAgnode_t * GetGVNode ();  ; TClass * IsA () const override;  ; void Layout ();  Layout this node in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this node with its current attributes. ;  ; void SaveAttributes (std::ostream &);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVNode (GVizAgnode_t *gvn);  ; void SetTextAngle (Float_t) override;  Set the text angle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Optio",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:4829,Integrability,message,message,4829," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:5250,Integrability,message,message,5250,"object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:6240,Integrability,message,message,6240,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:9083,Integrability,message,message,9083,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a n",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:9456,Integrability,message,message,9456,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t Ge",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:1740,Modifiability,inherit,inherited,1740," ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a node. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; GVizAgnode_t * GetGVNode ();  ; TClass * IsA () const override;  ; void Layout ();  Layout this node in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this node with its current attributes. ;  ; void SaveAttributes (std::ostream &);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVNode (GVizAgnode_t *gvn);  ; void SetTextAngle (Float_t) override;  Set the text angle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:3480,Modifiability,inherit,inherited,3480,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:4459,Modifiability,inherit,inheritance,4459,"Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:6338,Modifiability,inherit,inherits,6338,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:6455,Modifiability,inherit,inherits,6455,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:9763,Modifiability,inherit,inherited,9763,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:11575,Modifiability,inherit,inherited,11575,"e current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextAlign (Short_t align=11);  Set the text alignment. ;  ; virtual void SetTextAttributes ();  Invoke the DialogCanvas Text attributes. ;  ; virtual void SetTextColor (Color_t tcolor=1);  Set the text color. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; virtual void SetTextFont (Font_t tfont=62);  Set the text font. ;  ; virtual void SetTextSize (Float_t tsize=1);  Set the text size. ;  ; virtual void SetTextSizePixels (Int_t npixels);  Set the text size in pixel. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:12830,Modifiability,inherit,inherited,12830,"y this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ stat",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:14529,Modifiability,inherit,inherited,14529,"efault values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:14739,Modifiability,inherit,inherited,14739,"efault values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:15257,Modifiability,inherit,inherited,15257,from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Pro,MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:15469,Modifiability,inherit,inherited,15469,from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Pro,MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:15681,Modifiability,inherit,inherited,15681,from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Pro,MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:16107,Modifiability,inherit,inherited,16107,";  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:16189,Modifiability,inherit,inherited,16189,";  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:16425,Modifiability,inherit,inherited,16425,"ic Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:16558,Modifiability,inherit,inherited,16558,"texpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *f",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:16741,Modifiability,inherit,inherited,16741,"ss_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; GVizAgnode_t * fGVNode;  Graphviz node. ;  ; Double_t fH;  Node height. ;  ; Double_t fW;  Node width. ;  ; Double_t fX;  Node's center X coordinate. ;  ; Double_t fY;  Node's center Y coordinate. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphNode.h>. Inheritance diagram for TGraphNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera in",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:17382,Modifiability,inherit,inherited,17382,"le_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphNode.h>. Inheritance diagram for TGraphNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphNode() [1/2]. TGraphNode::TGraphNode ; (; ). Graph node default constructor. ; Definition at line 29 of file TGraphNode.cxx. ◆ TGraphNode() [2/2]. TGraphNode::TGraphNode ; (; const char * ; name, . const char * ; title = """" . ). Graph node normal constructor. ; Definition at line 41 of file TGraphNode.cxx. ◆ ~TGraphNode(). TGraphNode::~TGraphNode ; (; ). override . Graph Node default destructor. ; Definition at line 54 of file TGraphNode.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphNode::C",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:17481,Modifiability,inherit,inherited,17481,"le_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphNode.h>. Inheritance diagram for TGraphNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphNode() [1/2]. TGraphNode::TGraphNode ; (; ). Graph node default constructor. ; Definition at line 29 of file TGraphNode.cxx. ◆ TGraphNode() [2/2]. TGraphNode::TGraphNode ; (; const char * ; name, . const char * ; title = """" . ). Graph node normal constructor. ; Definition at line 41 of file TGraphNode.cxx. ◆ ~TGraphNode(). TGraphNode::~TGraphNode ; (; ). override . Graph Node default destructor. ; Definition at line 54 of file TGraphNode.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphNode::C",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:20005,Performance,perform,performed,20005,"inestatic . ReturnsName of the file containing the class declaration ; Definition at line 56 of file TGraphNode.h. ◆ DistancetoPrimitive(). Int_t TGraphNode::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a node. ; Reimplemented from TObject.; Definition at line 77 of file TGraphNode.cxx. ◆ ExecuteEvent(). void TGraphNode::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; Reimplemented from TObject.; Definition at line 92 of file TGraphNode.cxx. ◆ GetGVNode(). GVizAgnode_t * TGraphNode::GetGVNode ; (; ). inline . Definition at line 50 of file TGraphNode.h. ◆ IsA(). TClass * TGraphNode::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TGraphNode.h. ◆ Layout(). void TGraphNode::Layout ; (; ). Layout this node in the GraphViz space. ; This is done after gvLayout has been performed. ; Definition at line 106 of file TGraphNode.cxx. ◆ Paint(). void TGraphNode::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this node with its current attributes. ; Reimplemented from TObject.; Definition at line 123 of file TGraphNode.cxx. ◆ SaveAttributes(). void TGraphNode::SaveAttributes ; (; std::ostream & ; out). Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ; Definition at line 155 of file TGraphNode.cxx. ◆ SavePrimitive(). void TGraphNode::SavePrimitive ; (; std::ostream & ; , . Option_t * ;  . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 147 of file TGraphNode.cxx. ◆ SetGVNode(). void TGraphNode::SetGVNode ; (; GVizAgnode_t * ; gvn). inline . Definition at line 48 of file TGraphNode.h. ◆ SetTextAngle(). void TGraphNode::SetTextAngle ; (; Float_t ; tangle). inlineoverridevirtual . Set the text angle. ; ",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphNode.html:2608,Security,hash,hash,2608," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphNode.html
https://root.cern/doc/master/classTGraphPainter-members.html:1546,Availability,error,error,1546,"al; Compare(const TObject *obj) constTObjectvirtual; ComputeLogs(Int_t npoints, Int_t opt)TGraphPainter; Copy(TObject &object) constTObjectvirtual; DeclFileName()TGraphPainterinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DistancetoPrimitiveHelper(TGraph *theGraph, Int_t px, Int_t py) overrideTGraphPaintervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPanelHelper(TGraph *theGraph) overrideTGraphPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteEventHelper(TGraph *theGraph, Int_t event, Int_t px, Int_t py) overrideTGraphPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgMaxPointsPerLineTGraphPainterprotectedstatic; fgObjectStatTObjectprivatestatic; fgPainterTVirtualGraphPainterprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetHighlightPoint(TGraph *theGraph) constTGraphPaintervirtual; GetIconName() constTObjectvirtual; GetName() constTObjectvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectInfoHelper(TGraph *theGraph, Int_t px, Int_t py) const overrideTGraphPaintervirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetPainter()TVirtualGraphPainterstatic; GetT",MatchSource.WIKI,doc/master/classTGraphPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter-members.html
https://root.cern/doc/master/classTGraphPainter-members.html:1627,Availability,error,error,1627,"al; Compare(const TObject *obj) constTObjectvirtual; ComputeLogs(Int_t npoints, Int_t opt)TGraphPainter; Copy(TObject &object) constTObjectvirtual; DeclFileName()TGraphPainterinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DistancetoPrimitiveHelper(TGraph *theGraph, Int_t px, Int_t py) overrideTGraphPaintervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPanelHelper(TGraph *theGraph) overrideTGraphPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteEventHelper(TGraph *theGraph, Int_t event, Int_t px, Int_t py) overrideTGraphPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgMaxPointsPerLineTGraphPainterprotectedstatic; fgObjectStatTObjectprivatestatic; fgPainterTVirtualGraphPainterprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetHighlightPoint(TGraph *theGraph) constTGraphPaintervirtual; GetIconName() constTObjectvirtual; GetName() constTObjectvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectInfoHelper(TGraph *theGraph, Int_t px, Int_t py) const overrideTGraphPaintervirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetPainter()TVirtualGraphPainterstatic; GetT",MatchSource.WIKI,doc/master/classTGraphPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter-members.html
https://root.cern/doc/master/classTGraphPainter-members.html:199,Modifiability,inherit,inherited,199,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphPainter Member List. This is the complete list of members for TGraphPainter, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TGraphPainterstatic; Class_Name()TGraphPainterstatic; Class_Version()TGraphPainterinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ComputeLogs(Int_t npoints, Int_t opt)TGraphPainter; Copy(TObject &object) constTObjectvirtual; DeclFileName()TGraphPainterinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DistancetoPrimitiveHelper(TGraph *theGraph, Int_t px, Int_t py) overrideTGraphPaintervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPanelHelper(TGraph *theGraph) overrideTGraphPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteEventHelper(TGraph *theGraph, Int_t event, Int_t px, Int_t py) overrideTGraphPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgMaxPointsPerLineTGraphPainterprotectedstatic; fgObjectSta",MatchSource.WIKI,doc/master/classTGraphPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter-members.html
https://root.cern/doc/master/classTGraphPainter.html:530,Availability,error,error,530,". ROOT: TGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' i",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:7976,Availability,error,error,7976,"eColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);; ; TGraph *gr2 = new TGraph(n,xvalues2,yvalues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the en",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8006,Availability,avail,available,8006,"eColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);; ; TGraph *gr2 = new TGraph(n,xvalues2,yvalues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the en",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8038,Availability,error,error,8038,"eColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);; ; TGraph *gr2 = new TGraph(n,xvalues2,yvalues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the en",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8162,Availability,error,error,8162,"lues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8263,Availability,error,error,8263,"lColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8360,Availability,error,error,8360,"gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the v",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8477,Availability,error,error,8477,"; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8563,Availability,error,error,8563,"e.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8611,Availability,error,errors,8611,"or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like opti",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8637,Availability,error,errors,8637,"or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like opti",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8666,Availability,error,errors,8666,"or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like opti",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8781,Availability,error,error,8781,"ph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in g",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8889,Availability,error,errors,8889,"s multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gSty",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:8942,Availability,error,errors,8942,"s multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gSty",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9247,Availability,error,error,9247,"l horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X an",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9292,Availability,error,error,9292,"is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9498,Availability,error,error,9498,"of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9587,Availability,error,error,9587,"not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""a",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9835,Availability,error,error,9835,"themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new T",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9869,Availability,error,error,9869,"mpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] =",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:9962,Availability,error,error,9962,"c errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] =",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10100,Availability,error,error,10100,"kes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10116,Availability,error,errors,10116,"a point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10187,Availability,error,errors,10187,"a point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10237,Availability,error,errors,10237,"a point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10533,Availability,error,errors,10533,"rea is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option ""3"" shows the errors as a band.; {; auto c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyl",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10608,Availability,error,error,10608,"rea is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option ""3"" shows the errors as a band.; {; auto c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyl",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:10756,Availability,error,error,10756,"or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option ""3"" shows the errors as a band.; {; auto c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; }. The option ""4"" is similar to the option ""3"" except that the band is smoothed. As the following picture shows, this option should be used carefully because the smoothing algorithm may show some (huge",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:11203,Availability,error,errors,11203,"the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option ""3"" shows the errors as a band.; {; auto c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; }. The option ""4"" is similar to the option ""3"" except that the band is smoothed. As the following picture shows, this option should be used carefully because the smoothing algorithm may show some (huge) ""bouncing"" effects. In some cases it looks nicer than option ""3"" (because it is smooth) but it can be misleading.; {; auto c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a smooth band"");; ge->SetFillColor(6);; ge->SetFillS",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:12318,Availability,error,errors,12318,", 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; }. The option ""4"" is similar to the option ""3"" except that the band is smoothed. As the following picture shows, this option should be used carefully because the smoothing algorithm may show some (huge) ""bouncing"" effects. In some cases it looks nicer than option ""3"" (because it is smooth) but it can be misleading.; {; auto c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a smooth band"");; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; }. The following example shows how the option ""[]"" can be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to dr",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:12360,Availability,error,errors,12360,", 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; }. The option ""4"" is similar to the option ""3"" except that the band is smoothed. As the following picture shows, this option should be used carefully because the smoothing algorithm may show some (huge) ""bouncing"" effects. In some cases it looks nicer than option ""3"" (because it is smooth) but it can be misleading.; {; auto c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a smooth band"");; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; }. The following example shows how the option ""[]"" can be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to dr",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:12564,Availability,error,errors,12564,"ge->SetFillStyle(3010);; ge->Draw(""a3"");; }. The option ""4"" is similar to the option ""3"" except that the band is smoothed. As the following picture shows, this option should be used carefully because the smoothing algorithm may show some (huge) ""bouncing"" effects. In some cases it looks nicer than option ""3"" (because it is smooth) but it can be misleading.; {; auto c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a smooth band"");; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; }. The following example shows how the option ""[]"" can be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphE",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:12756,Availability,error,errors,12756," show some (huge) ""bouncing"" effects. In some cases it looks nicer than option ""3"" (because it is smooth) but it can be misleading.; {; auto c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a smooth band"");; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; }. The following example shows how the option ""[]"" can be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors d",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:12989,Availability,error,errors,12989,"be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:13149,Availability,error,errors,13149,"be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:13324,Availability,error,errors,13324,"be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:13483,Availability,error,errors,13483,"be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:13740,Availability,error,errors,13740," {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; }; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:13807,Availability,error,errors,13807," {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; }; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:13858,Availability,error,errors,13858," {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; }; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:14274,Availability,error,errors,14274," draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; }; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:14412,Availability,error,error,14412," draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; }; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:14562,Availability,error,error,14562,"; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; }; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with be",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:15395,Availability,error,errors,15395,"asymmetric error bars.Definition TGraphAsymmErrors.h:26. TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors. An extra parameter allows to bend the error bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blo",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:15596,Availability,error,error,15596,"ror bars to better see them when several graphs are drawn on the same plot.; {; auto c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Descripti",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:15872,Availability,error,errors,15872,"ble_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:15953,Availability,error,error,15953,"_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16092,Availability,error,error,16092,"ble_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styl",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16327,Availability,error,error,16327,"= new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; doub",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16377,Availability,error,errors,16377,"= new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; doub",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16601,Availability,error,errors,16601,"or bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys =",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16664,Availability,error,errors,16664,"TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors*",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16839,Availability,error,errors,16839,"on of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeyls",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:16995,Availability,error,error,16995,"option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillS",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:17115,Availability,error,error,17115,"o the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18132,Availability,error,error,18132,"s. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each po",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18158,Availability,error,error,18158,"s. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each po",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18311,Availability,error,error,18311," ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each point position. . ""E"" Draw error bars. . ""F"" Draw fill area (closed polygon). . ""A"" Force axis redrawing even if a polargram already exis",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18496,Availability,error,error,18496,"* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each point position. . ""E"" Draw error bars. . ""F"" Draw fill area (closed polygon). . ""A"" Force axis redrawing even if a polargram already exists. . ""N"" Disable the display of the polar labels. . {; auto c46 = new TCanvas(""c46"",""c46"",500,500);; auto grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18698,Availability,error,error,18698,"MultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each point position. . ""E"" Draw error bars. . ""F"" Draw fill area (closed polygon). . ""A"" Force axis redrawing even if a polargram already exists. . ""N"" Disable the display of the polar labels. . {; auto c46 = new TCanvas(""c46"",""c46"",500,500);; auto grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMat",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18852,Availability,error,error,18852,">SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each point position. . ""E"" Draw error bars. . ""F"" Draw fill area (closed polygon). . ""A"" Force axis redrawing even if a polargram already exists. . ""N"" Disable the display of the polar labels. . {; auto c46 = new TCanvas(""c46"",""c46"",500,500);; auto grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);; ; grP",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:18879,Availability,error,errors,18879,">SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; gme->Draw(""a p s ; ; 5 s=0.5"");; }; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each point position. . ""E"" Draw error bars. . ""F"" Draw fill area (closed polygon). . ""A"" Force axis redrawing even if a polargram already exists. . ""N"" Disable the display of the polar labels. . {; auto c46 = new TCanvas(""c46"",""c46"",500,500);; auto grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);; ; grP",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:19156,Availability,error,error,19156,"y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073. TGraphPolar options; The drawing options for the polar graphs are the following:. Option Description . ""O"" Polar labels are drawn orthogonally to the polargram radius. . ""P"" Polymarker are drawn at each point position. . ""E"" Draw error bars. . ""F"" Draw fill area (closed polygon). . ""A"" Force axis redrawing even if a polargram already exists. . ""N"" Disable the display of the polar labels. . {; auto c46 = new TCanvas(""c46"",""c46"",500,500);; auto grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);; ; grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");; ; // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();; }; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. C",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:29417,Availability,error,errors,29417,". ;  ; void PaintGraphBentErrors (TGraph *theGraph, Option_t *option);  Paint this TGraphBentErrors with its current attributes. ;  ; void PaintGraphErrors (TGraph *theGraph, Option_t *option);  Paint this TGraphErrors with its current attributes. ;  ; void PaintGrapHist (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt) override;  This is a service method used by THistPainter to paint 1D histograms. ;  ; void PaintGraphMultiErrors (TGraph *theGraph, Option_t *option);  Paint this TGraphMultiErrors with its current attributes. ;  ; void PaintGraphPolar (TGraph *theGraph, Option_t *option);  Paint this TGraphPolar with its current attributes. ;  ; void PaintGraphQQ (TGraph *theGraph, Option_t *option);  Paint this graphQQ. No options for the time being. ;  ; void PaintGraphReverse (TGraph *theGraph, Option_t *option);  Paint theGraph reverting values along X and/or Y axis. a new graph is created. ;  ; void PaintGraphSimple (TGraph *theGraph, Option_t *option);  Paint a simple graph, without errors bars. ;  ; void PaintHelper (TGraph *theGraph, Option_t *option) override;  Paint a any kind of TGraph. ;  ; virtual void PaintHighlightPoint (TGraph *theGraph, Option_t *option);  Paint highlight point as TMarker object (open circle) ;  ; void PaintPolyLineHatches (TGraph *theGraph, Int_t n, const Double_t *x, const Double_t *y);  Paint a polyline with hatches on one side showing an exclusion zone. ;  ; void PaintScatter (TScatter *theScatter, Option_t *option) override;  Paint a scatter plot. ;  ; void PaintStats (TGraph *theGraph, TF1 *fit) override;  Paint the statistics box with the fit info. ;  ; void SetHighlight (TGraph *theGraph) override;  Set highlight (enable/disable) mode for theGraph. ;  ; void Smooth (TGraph *theGraph, Int_t npoints, Double_t *x, Double_t *y, Int_t drawtype);  Smooth a curve given by N points. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:32501,Availability,error,error,32501,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:32590,Availability,error,error,32590,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:32745,Availability,error,error,32745,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:33042,Availability,error,error,33042,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:37606,Availability,error,error,37606," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMaxPointsPerLine (Int_t maxp=50);  Static function to set fgMaxPointsPerLine for graph painting. ;  ;  Static Public Member Functions",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:48675,Availability,error,errors,48675,"raphPainter::PaintGraphMultiErrors ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphMultiErrors with its current attributes. ; Definition at line 2720 of file TGraphPainter.cxx. ◆ PaintGraphPolar(). void TGraphPainter::PaintGraphPolar ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphPolar with its current attributes. ; Definition at line 3789 of file TGraphPainter.cxx. ◆ PaintGraphQQ(). void TGraphPainter::PaintGraphQQ ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this graphQQ. No options for the time being. ; Definition at line 4084 of file TGraphPainter.cxx. ◆ PaintGraphReverse(). void TGraphPainter::PaintGraphReverse ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint theGraph reverting values along X and/or Y axis. a new graph is created. ; Definition at line 4144 of file TGraphPainter.cxx. ◆ PaintGraphSimple(). void TGraphPainter::PaintGraphSimple ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint a simple graph, without errors bars. ; Definition at line 4584 of file TGraphPainter.cxx. ◆ PaintHelper(). void TGraphPainter::PaintHelper ; (; TGraph * ; theGraph, . Option_t * ; option . ). overridevirtual . Paint a any kind of TGraph. ; Implements TVirtualGraphPainter.; Definition at line 1211 of file TGraphPainter.cxx. ◆ PaintHighlightPoint(). void TGraphPainter::PaintHighlightPoint ; (; TGraph * ; theGraph, . Option_t * ; option . ). virtual . Paint highlight point as TMarker object (open circle) ; Definition at line 1165 of file TGraphPainter.cxx. ◆ PaintPolyLineHatches(). void TGraphPainter::PaintPolyLineHatches ; (; TGraph * ; theGraph, . Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). Paint a polyline with hatches on one side showing an exclusion zone. ; x and y are the vectors holding the polyline and n the number of points in the polyline and w the width of the hatches. w can be negative. This method is not meant to be used directly. It is called automatically according to t",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:1669,Deployability,update,updated,1669,"rrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' it draws invisible axis . ""L"" A simple polyline is drawn . ""F"" A fill area is drawn ('CF' draw a smoothed fill area) . ""C"" A smooth Curve is drawn . ""*"" A Star is plotted at each point . ""P"" The current marker is plotted at each point . ""B"" A Bar chart is drawn . ""1"" When a graph is drawn as a bar chart, this option makes the bars start from the bottom of the pad. By default they start at 0. . ""X+"" The X-axis is drawn on the top side of the plot. . ""Y+"" The Y-axis is drawn on the right side of the plot. . ""PFC"" Palette Fill Color: graph's fill color is taken in the current palette. . ""PLC"" Palette L",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:1687,Deployability,update,updated,1687,"n logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' it draws invisible axis . ""L"" A simple polyline is drawn . ""F"" A fill area is drawn ('CF' draw a smoothed fill area) . ""C"" A smooth Curve is drawn . ""*"" A Star is plotted at each point . ""P"" The current marker is plotted at each point . ""B"" A Bar chart is drawn . ""1"" When a graph is drawn as a bar chart, this option makes the bars start from the bottom of the pad. By default they start at 0. . ""X+"" The X-axis is drawn on the top side of the plot. . ""Y+"" The Y-axis is drawn on the right side of the plot. . ""PFC"" Palette Fill Color: graph's fill color is taken in the current palette. . ""PLC"" Palette Line Color: graph's line color is taken in the current palette. . ""PMC"" Palette Marker Color: grap",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:43426,Deployability,release,released,43426," file TGraphPainter.h. ◆ DistancetoPrimitiveHelper(). Int_t TGraphPainter::DistancetoPrimitiveHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all histogram drawing options. ; Implements TVirtualGraphPainter.; Definition at line 796 of file TGraphPainter.cxx. ◆ ExecuteEventHelper(). void TGraphPainter::ExecuteEventHelper ; (; TGraph * ; theGraph, . Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a graph is clicked with the locator.; If the left mouse button is clicked on one of the line end points, this point follows the cursor until button is released.; If the middle mouse button clicked, the line is moved parallel to itself until the button is released. ; Implements TVirtualGraphPainter.; Definition at line 821 of file TGraphPainter.cxx. ◆ GetHighlightPoint(). Int_t TGraphPainter::GetHighlightPoint ; (; TGraph * ; theGraph); const. virtual . Return the highlighted point for theGraph. ; Definition at line 1110 of file TGraphPainter.cxx. ◆ GetObjectInfoHelper(). char * TGraphPainter::GetObjectInfoHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ); const. overridevirtual . Implements TVirtualGraphPainter.; Definition at line 1101 of file TGraphPainter.cxx. ◆ HighlightPoint(). void TGraphPainter::HighlightPoint ; (; TGraph * ; theGraph, . Int_t ; hpoint, . Int_t ; distance . ). virtual . Check on highlight point. ; Definition at line 1136 of file TGraphPainter.cxx. ◆ IsA(). TClass * TGraphPainter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describi",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:43530,Deployability,release,released,43530," ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all histogram drawing options. ; Implements TVirtualGraphPainter.; Definition at line 796 of file TGraphPainter.cxx. ◆ ExecuteEventHelper(). void TGraphPainter::ExecuteEventHelper ; (; TGraph * ; theGraph, . Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a graph is clicked with the locator.; If the left mouse button is clicked on one of the line end points, this point follows the cursor until button is released.; If the middle mouse button clicked, the line is moved parallel to itself until the button is released. ; Implements TVirtualGraphPainter.; Definition at line 821 of file TGraphPainter.cxx. ◆ GetHighlightPoint(). Int_t TGraphPainter::GetHighlightPoint ; (; TGraph * ; theGraph); const. virtual . Return the highlighted point for theGraph. ; Definition at line 1110 of file TGraphPainter.cxx. ◆ GetObjectInfoHelper(). char * TGraphPainter::GetObjectInfoHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ); const. overridevirtual . Implements TVirtualGraphPainter.; Definition at line 1101 of file TGraphPainter.cxx. ◆ HighlightPoint(). void TGraphPainter::HighlightPoint ; (; TGraph * ; theGraph, . Int_t ; hpoint, . Int_t ; distance . ). virtual . Check on highlight point. ; Definition at line 1136 of file TGraphPainter.cxx. ◆ IsA(). TClass * TGraphPainter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 71 of file TGraphPainter.h. ◆ PaintGraph(). vo",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:51480,Deployability,continuous,continuous,51480,"etMaxPointsPerLine ; (; Int_t ; maxp = 50). static . Static function to set fgMaxPointsPerLine for graph painting. ; When graphs are painted with lines, they are split into chunks of length fgMaxPointsPerLine. This allows to paint line with an ""infinite"" number of points. In some case this ""chunks painting"" technic may create artefacts at the chunk's boundaries. For instance when zooming deeply in a PDF file. To avoid this effect it might be necessary to increase the chunks' size using this function: TGraphPainter::SetMaxPointsPerLine(20000). ; Definition at line 5407 of file TGraphPainter.cxx. ◆ Smooth(). void TGraphPainter::Smooth ; (; TGraph * ; theGraph, . Int_t ; npoints, . Double_t * ; x, . Double_t * ; y, . Int_t ; drawtype . ). Smooth a curve given by N points. ; The original code is from an underlaying routine for Draw based on the CERN GD3 routine TVIPTE:; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; This method draws a smooth tangentially continuous curve through the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)). The curve is approximated by a polygonal arc of short vectors. The data points can represent open curves, P(1) != P(N) or closed curves P(2) == P(N). If a tangential discontinuity at P(I) is required, then set P(I)=P(I+1). Loops are also allowed.; Reference Marlow and Powell, Harwell report No.R.7092.1972 MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6. npoints : Number of data points.; x : Abscissa; y : Ordinate . Definition at line 4938 of file TGraphPainter.cxx. ◆ Streamer(). void TGraphPainter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphPainter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TGraphPainter.h. Member Data Documentation. ◆ fgMaxPointsPerLine. Int_t TGraphPainter::fgMaxPointsPerLine = 50. staticprotected . Number of points per chunks",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:32507,Integrability,message,message,32507,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:33048,Integrability,message,message,33048,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:34250,Integrability,message,message,34250,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:37612,Integrability,message,message,37612," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMaxPointsPerLine (Int_t maxp=50);  Static function to set fgMaxPointsPerLine for graph painting. ;  ;  Static Public Member Functions",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:37985,Integrability,message,message,37985," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMaxPointsPerLine (Int_t maxp=50);  Static function to set fgMaxPointsPerLine for graph painting. ;  ;  Static Public Member Functions inherited from TVirtualGraphPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGraphPainter * GetPainter ();  Static function returning a pointer to the current graph painter. ;  ; static void SetPainter (TVirtualGraphPainter *painter);  Static f",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:51323,Integrability,rout,routine,51323,"disable) mode for theGraph. ; Implements TVirtualGraphPainter.; Definition at line 1120 of file TGraphPainter.cxx. ◆ SetMaxPointsPerLine(). void TGraphPainter::SetMaxPointsPerLine ; (; Int_t ; maxp = 50). static . Static function to set fgMaxPointsPerLine for graph painting. ; When graphs are painted with lines, they are split into chunks of length fgMaxPointsPerLine. This allows to paint line with an ""infinite"" number of points. In some case this ""chunks painting"" technic may create artefacts at the chunk's boundaries. For instance when zooming deeply in a PDF file. To avoid this effect it might be necessary to increase the chunks' size using this function: TGraphPainter::SetMaxPointsPerLine(20000). ; Definition at line 5407 of file TGraphPainter.cxx. ◆ Smooth(). void TGraphPainter::Smooth ; (; TGraph * ; theGraph, . Int_t ; npoints, . Double_t * ; x, . Double_t * ; y, . Int_t ; drawtype . ). Smooth a curve given by N points. ; The original code is from an underlaying routine for Draw based on the CERN GD3 routine TVIPTE:; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; This method draws a smooth tangentially continuous curve through the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)). The curve is approximated by a polygonal arc of short vectors. The data points can represent open curves, P(1) != P(N) or closed curves P(2) == P(N). If a tangential discontinuity at P(I) is required, then set P(I)=P(I+1). Loops are also allowed.; Reference Marlow and Powell, Harwell report No.R.7092.1972 MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6. npoints : Number of data points.; x : Abscissa; y : Ordinate . Definition at line 4938 of file TGraphPainter.cxx. ◆ Streamer(). void TGraphPainter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphPainter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:51362,Integrability,rout,routine,51362,"disable) mode for theGraph. ; Implements TVirtualGraphPainter.; Definition at line 1120 of file TGraphPainter.cxx. ◆ SetMaxPointsPerLine(). void TGraphPainter::SetMaxPointsPerLine ; (; Int_t ; maxp = 50). static . Static function to set fgMaxPointsPerLine for graph painting. ; When graphs are painted with lines, they are split into chunks of length fgMaxPointsPerLine. This allows to paint line with an ""infinite"" number of points. In some case this ""chunks painting"" technic may create artefacts at the chunk's boundaries. For instance when zooming deeply in a PDF file. To avoid this effect it might be necessary to increase the chunks' size using this function: TGraphPainter::SetMaxPointsPerLine(20000). ; Definition at line 5407 of file TGraphPainter.cxx. ◆ Smooth(). void TGraphPainter::Smooth ; (; TGraph * ; theGraph, . Int_t ; npoints, . Double_t * ; x, . Double_t * ; y, . Int_t ; drawtype . ). Smooth a curve given by N points. ; The original code is from an underlaying routine for Draw based on the CERN GD3 routine TVIPTE:; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; This method draws a smooth tangentially continuous curve through the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)). The curve is approximated by a polygonal arc of short vectors. The data points can represent open curves, P(1) != P(N) or closed curves P(2) == P(N). If a tangential discontinuity at P(I) is required, then set P(I)=P(I+1). Loops are also allowed.; Reference Marlow and Powell, Harwell report No.R.7092.1972 MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6. npoints : Number of data points.; x : Abscissa; y : Ordinate . Definition at line 4938 of file TGraphPainter.cxx. ◆ Streamer(). void TGraphPainter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphPainter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:27259,Modifiability,variab,variables,27259,"text menu. TGraph::IsHighlight() to verify whether the highlight mode enabled or disabled, default it is disabled.; root [0] .x $ROOTSYS/tutorials/graphs/gerrors2.C; root [1] // try SetHighlight() interactively from TGraph context menu. Highlight mode for graph; See how it is used highlight mode and user function (is fully equivalent as for histogram).; NOTE all parameters of user function are taken from void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y). pad is pointer to pad with highlighted graph; obj is pointer to highlighted graph; x is highlighted x-th (i-th) point for graph; y not in use (only for 2D histogram). For more complex demo please see for example $ROOTSYS/tutorials/math/hlquantiles.C file. ; Definition at line 31 of file TGraphPainter.h. Public Member Functions;  TGraphPainter ();  Default constructor. ;  ;  ~TGraphPainter () override;  Destructor. ;  ; void ComputeLogs (Int_t npoints, Int_t opt);  Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ;  ; Int_t DistancetoPrimitiveHelper (TGraph *theGraph, Int_t px, Int_t py) override;  Compute distance from point px,py to a graph. ;  ; void DrawPanelHelper (TGraph *theGraph) override;  Display a panel with all histogram drawing options. ;  ; void ExecuteEventHelper (TGraph *theGraph, Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetHighlightPoint (TGraph *theGraph) const;  Return the highlighted point for theGraph. ;  ; char * GetObjectInfoHelper (TGraph *theGraph, Int_t px, Int_t py) const override;  ; virtual void HighlightPoint (TGraph *theGraph, Int_t hpoint, Int_t distance);  Check on highlight point. ;  ; TClass * IsA () const override;  ; void PaintGraph (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt) override;  Control function to draw a graph. ;  ; void PaintGraphAsymmErrors (",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:27348,Modifiability,variab,variables,27348,"text menu. TGraph::IsHighlight() to verify whether the highlight mode enabled or disabled, default it is disabled.; root [0] .x $ROOTSYS/tutorials/graphs/gerrors2.C; root [1] // try SetHighlight() interactively from TGraph context menu. Highlight mode for graph; See how it is used highlight mode and user function (is fully equivalent as for histogram).; NOTE all parameters of user function are taken from void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y). pad is pointer to pad with highlighted graph; obj is pointer to highlighted graph; x is highlighted x-th (i-th) point for graph; y not in use (only for 2D histogram). For more complex demo please see for example $ROOTSYS/tutorials/math/hlquantiles.C file. ; Definition at line 31 of file TGraphPainter.h. Public Member Functions;  TGraphPainter ();  Default constructor. ;  ;  ~TGraphPainter () override;  Destructor. ;  ; void ComputeLogs (Int_t npoints, Int_t opt);  Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ;  ; Int_t DistancetoPrimitiveHelper (TGraph *theGraph, Int_t px, Int_t py) override;  Compute distance from point px,py to a graph. ;  ; void DrawPanelHelper (TGraph *theGraph) override;  Display a panel with all histogram drawing options. ;  ; void ExecuteEventHelper (TGraph *theGraph, Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetHighlightPoint (TGraph *theGraph) const;  Return the highlighted point for theGraph. ;  ; char * GetObjectInfoHelper (TGraph *theGraph, Int_t px, Int_t py) const override;  ; virtual void HighlightPoint (TGraph *theGraph, Int_t hpoint, Int_t distance);  Check on highlight point. ;  ; TClass * IsA () const override;  ; void PaintGraph (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt) override;  Control function to draw a graph. ;  ; void PaintGraphAsymmErrors (",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:30433,Modifiability,inherit,inherited,30433,"verride;  Paint a any kind of TGraph. ;  ; virtual void PaintHighlightPoint (TGraph *theGraph, Option_t *option);  Paint highlight point as TMarker object (open circle) ;  ; void PaintPolyLineHatches (TGraph *theGraph, Int_t n, const Double_t *x, const Double_t *y);  Paint a polyline with hatches on one side showing an exclusion zone. ;  ; void PaintScatter (TScatter *theScatter, Option_t *option) override;  Paint a scatter plot. ;  ; void PaintStats (TGraph *theGraph, TF1 *fit) override;  Paint the statistics box with the fit info. ;  ; void SetHighlight (TGraph *theGraph) override;  Set highlight (enable/disable) mode for theGraph. ;  ; void Smooth (TGraph *theGraph, Int_t npoints, Double_t *x, Double_t *y, Int_t drawtype);  Smooth a curve given by N points. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualGraphPainter;  TVirtualGraphPainter ();  ;  ~TVirtualGraphPainter () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to w",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:30740,Modifiability,inherit,inherited,30740,"st Double_t *x, const Double_t *y);  Paint a polyline with hatches on one side showing an exclusion zone. ;  ; void PaintScatter (TScatter *theScatter, Option_t *option) override;  Paint a scatter plot. ;  ; void PaintStats (TGraph *theGraph, TF1 *fit) override;  Paint the statistics box with the fit info. ;  ; void SetHighlight (TGraph *theGraph) override;  Set highlight (enable/disable) mode for theGraph. ;  ; void Smooth (TGraph *theGraph, Int_t npoints, Double_t *x, Double_t *y, Int_t drawtype);  Smooth a curve given by N points. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualGraphPainter;  TVirtualGraphPainter ();  ;  ~TVirtualGraphPainter () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:32137,Modifiability,inherit,inheritance,32137,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:34348,Modifiability,inherit,inherits,34348,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:34465,Modifiability,inherit,inherits,34465,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:38603,Modifiability,inherit,inherited,38603,"entStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMaxPointsPerLine (Int_t maxp=50);  Static function to set fgMaxPointsPerLine for graph painting. ;  ;  Static Public Member Functions inherited from TVirtualGraphPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGraphPainter * GetPainter ();  Static function returning a pointer to the current graph painter. ;  ; static void SetPainter (TVirtualGraphPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; std::vector< Double_t > gxwork;  ; std::vector< Double_t > gxworkl;  ; std::vector< Double_t > gywork;  ; std::vector< Double_t > gyworkl;  Internal buffers for coor",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:39063,Modifiability,inherit,inherited,39063,"ame=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMaxPointsPerLine (Int_t maxp=50);  Static function to set fgMaxPointsPerLine for graph painting. ;  ;  Static Public Member Functions inherited from TVirtualGraphPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGraphPainter * GetPainter ();  Static function returning a pointer to the current graph painter. ;  ; static void SetPainter (TVirtualGraphPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; std::vector< Double_t > gxwork;  ; std::vector< Double_t > gxworkl;  ; std::vector< Double_t > gywork;  ; std::vector< Double_t > gyworkl;  Internal buffers for coordinates. Used for graphs painting. ;  . Static Protected Attributes; static Int_t fgMaxPointsPerLine = 50;  Number of points per chunks' line when drawing a graph. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); ,",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:39949,Modifiability,inherit,inherited,39949,"ogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; std::vector< Double_t > gxwork;  ; std::vector< Double_t > gxworkl;  ; std::vector< Double_t > gywork;  ; std::vector< Double_t > gyworkl;  Internal buffers for coordinates. Used for graphs painting. ;  . Static Protected Attributes; static Int_t fgMaxPointsPerLine = 50;  Number of points per chunks' line when drawing a graph. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphPainter.h>. Inheritance diagram for TGraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Op",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:40590,Modifiability,inherit,inherited,40590,"orkl;  Internal buffers for coordinates. Used for graphs painting. ;  . Static Protected Attributes; static Int_t fgMaxPointsPerLine = 50;  Number of points per chunks' line when drawing a graph. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphPainter.h>. Inheritance diagram for TGraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPainter(). TGraphPainter::TGraphPainter ; (; ). Default constructor. ; Definition at line 667 of file TGraphPainter.cxx. ◆ ~TGraphPainter(). TGraphPainter::~TGraphPainter ; (; ). override . Destructor. ; Definition at line 675 of file TGraphPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of t",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:40689,Modifiability,inherit,inherited,40689,"orkl;  Internal buffers for coordinates. Used for graphs painting. ;  . Static Protected Attributes; static Int_t fgMaxPointsPerLine = 50;  Number of points per chunks' line when drawing a graph. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphPainter.h>. Inheritance diagram for TGraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPainter(). TGraphPainter::TGraphPainter ; (; ). Default constructor. ; Definition at line 667 of file TGraphPainter.cxx. ◆ ~TGraphPainter(). TGraphPainter::~TGraphPainter ; (; ). override . Destructor. ; Definition at line 675 of file TGraphPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of t",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:41879,Modifiability,variab,variables,41879,"GraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPainter(). TGraphPainter::TGraphPainter ; (; ). Default constructor. ; Definition at line 667 of file TGraphPainter.cxx. ◆ ~TGraphPainter(). TGraphPainter::~TGraphPainter ; (; ). override . Destructor. ; Definition at line 675 of file TGraphPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file TGraphPainter.h. ◆ ComputeLogs(). void TGraphPainter::ComputeLogs ; (; Int_t ; npoints, . Int_t ; opt . ). Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ; npoints : Number of points in gxwork and in gywork. opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph . Definition at line 690 of file TGraphPainter.cxx. ◆ DeclFileName(). static const char * TGraphPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TGraphPainter.h. ◆ DistancetoPrimitiveHelper(). Int_t TGraphPainter::DistancetoPrimitiveHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all h",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:41968,Modifiability,variab,variables,41968,"GraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPainter(). TGraphPainter::TGraphPainter ; (; ). Default constructor. ; Definition at line 667 of file TGraphPainter.cxx. ◆ ~TGraphPainter(). TGraphPainter::~TGraphPainter ; (; ). override . Destructor. ; Definition at line 675 of file TGraphPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file TGraphPainter.h. ◆ ComputeLogs(). void TGraphPainter::ComputeLogs ; (; Int_t ; npoints, . Int_t ; opt . ). Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ; npoints : Number of points in gxwork and in gywork. opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph . Definition at line 690 of file TGraphPainter.cxx. ◆ DeclFileName(). static const char * TGraphPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TGraphPainter.h. ◆ DistancetoPrimitiveHelper(). Int_t TGraphPainter::DistancetoPrimitiveHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all h",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:50916,Safety,avoid,avoid,50916,"◆ PaintStats(). void TGraphPainter::PaintStats ; (; TGraph * ; theGraph, . TF1 * ; fit . ). overridevirtual . Paint the statistics box with the fit info. ; Implements TVirtualGraphPainter.; Definition at line 4820 of file TGraphPainter.cxx. ◆ SetHighlight(). void TGraphPainter::SetHighlight ; (; TGraph * ; theGraph). overridevirtual . Set highlight (enable/disable) mode for theGraph. ; Implements TVirtualGraphPainter.; Definition at line 1120 of file TGraphPainter.cxx. ◆ SetMaxPointsPerLine(). void TGraphPainter::SetMaxPointsPerLine ; (; Int_t ; maxp = 50). static . Static function to set fgMaxPointsPerLine for graph painting. ; When graphs are painted with lines, they are split into chunks of length fgMaxPointsPerLine. This allows to paint line with an ""infinite"" number of points. In some case this ""chunks painting"" technic may create artefacts at the chunk's boundaries. For instance when zooming deeply in a PDF file. To avoid this effect it might be necessary to increase the chunks' size using this function: TGraphPainter::SetMaxPointsPerLine(20000). ; Definition at line 5407 of file TGraphPainter.cxx. ◆ Smooth(). void TGraphPainter::Smooth ; (; TGraph * ; theGraph, . Int_t ; npoints, . Double_t * ; x, . Double_t * ; y, . Int_t ; drawtype . ). Smooth a curve given by N points. ; The original code is from an underlaying routine for Draw based on the CERN GD3 routine TVIPTE:; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; This method draws a smooth tangentially continuous curve through the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)). The curve is approximated by a polygonal arc of short vectors. The data points can represent open curves, P(1) != P(N) or closed curves P(2) == P(N). If a tangential discontinuity at P(I) is required, then set P(I)=P(I+1). Loops are also allowed.; Reference Marlow and Powell, Harwell report No.R.7092.1972 MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6. npoints : Number of data points.; x : Absciss",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:33979,Security,hash,hash,33979," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:705,Testability,log,logarithmic,705,". ROOT: TGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' i",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:24612,Testability,log,logarithmic,24612,"ing values from left to right and the Y-axis from bottom to top. The two options RX and RY allow to change this order. The option RX allows to draw the X-axis with increasing values from right to left and the RY option allows to draw the Y-axis with increasing values from top to bottom. The following example illustrate how to use these options.; {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");; ; g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);; ; g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);; ; g->GetXaxis()->SetNdivisions(520);; ; g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");; ; c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105. Graphs in logarithmic scale; Like histograms, graphs can be drawn in logarithmic scale along X and Y. When a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy() the points building the graph are converted into logarithmic scale. But only the points not the lines connecting them which stay linear. This can be clearly seen on the following example:; {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph(3);; g->SetPoint(0,xmin,0.1);; g->SetPoint(1,845,0.06504);; g->SetPoint(2,xmax,0.008);; ; // The same graph with n points; Int_t n = 10000;; Double_t dx = (xmax-xmin)/n;; Double_t x = xmin;; auto g2 = new TGraph();; for (Int_t i=0; i<n; i++) {; g2->SetPoint(i, x, g->Eval(x));; x = x + dx;; }; ; auto cv = new TCanvas(""cv"",""cv"",800,600);; cv->SetLogy();; cv->SetGridx();; cv->SetGridy();; g->Draw(""AL*"");; ; g2->SetMarkerColor(kRed);; g2->SetMarkerStyle(1);; g2->Draw(""P"");; }; ; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95. Highligh",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:24671,Testability,log,logarithmic,24671,"ing values from left to right and the Y-axis from bottom to top. The two options RX and RY allow to change this order. The option RX allows to draw the X-axis with increasing values from right to left and the RY option allows to draw the Y-axis with increasing values from top to bottom. The following example illustrate how to use these options.; {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");; ; g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);; ; g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);; ; g->GetXaxis()->SetNdivisions(520);; ; g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");; ; c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105. Graphs in logarithmic scale; Like histograms, graphs can be drawn in logarithmic scale along X and Y. When a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy() the points building the graph are converted into logarithmic scale. But only the points not the lines connecting them which stay linear. This can be clearly seen on the following example:; {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph(3);; g->SetPoint(0,xmin,0.1);; g->SetPoint(1,845,0.06504);; g->SetPoint(2,xmax,0.008);; ; // The same graph with n points; Int_t n = 10000;; Double_t dx = (xmax-xmin)/n;; Double_t x = xmin;; auto g2 = new TGraph();; for (Int_t i=0; i<n; i++) {; g2->SetPoint(i, x, g->Eval(x));; x = x + dx;; }; ; auto cv = new TCanvas(""cv"",""cv"",800,600);; cv->SetLogy();; cv->SetGridx();; cv->SetGridy();; g->Draw(""AL*"");; ; g2->SetMarkerColor(kRed);; g2->SetMarkerStyle(1);; g2->Draw(""P"");; }; ; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95. Highligh",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:24725,Testability,log,logarithmic,24725," RX allows to draw the X-axis with increasing values from right to left and the RY option allows to draw the Y-axis with increasing values from top to bottom. The following example illustrate how to use these options.; {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");; ; g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);; ; g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);; ; g->GetXaxis()->SetNdivisions(520);; ; g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");; ; c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105. Graphs in logarithmic scale; Like histograms, graphs can be drawn in logarithmic scale along X and Y. When a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy() the points building the graph are converted into logarithmic scale. But only the points not the lines connecting them which stay linear. This can be clearly seen on the following example:; {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph(3);; g->SetPoint(0,xmin,0.1);; g->SetPoint(1,845,0.06504);; g->SetPoint(2,xmax,0.008);; ; // The same graph with n points; Int_t n = 10000;; Double_t dx = (xmax-xmin)/n;; Double_t x = xmin;; auto g2 = new TGraph();; for (Int_t i=0; i<n; i++) {; g2->SetPoint(i, x, g->Eval(x));; x = x + dx;; }; ; auto cv = new TCanvas(""cv"",""cv"",800,600);; cv->SetLogy();; cv->SetGridx();; cv->SetGridy();; g->Draw(""AL*"");; ; g2->SetMarkerColor(kRed);; g2->SetMarkerStyle(1);; g2->Draw(""P"");; }; ; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95. Highlight mode for graph; SinceROOT version 6.15/01. Highlight mode; Highlight mode is implemented for TGraph (and for TH1) class. When h",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:24841,Testability,log,logarithmic,24841," RX allows to draw the X-axis with increasing values from right to left and the RY option allows to draw the Y-axis with increasing values from top to bottom. The following example illustrate how to use these options.; {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");; ; g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);; ; g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);; ; g->GetXaxis()->SetNdivisions(520);; ; g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");; ; c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105. Graphs in logarithmic scale; Like histograms, graphs can be drawn in logarithmic scale along X and Y. When a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy() the points building the graph are converted into logarithmic scale. But only the points not the lines connecting them which stay linear. This can be clearly seen on the following example:; {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph(3);; g->SetPoint(0,xmin,0.1);; g->SetPoint(1,845,0.06504);; g->SetPoint(2,xmax,0.008);; ; // The same graph with n points; Int_t n = 10000;; Double_t dx = (xmax-xmin)/n;; Double_t x = xmin;; auto g2 = new TGraph();; for (Int_t i=0; i<n; i++) {; g2->SetPoint(i, x, g->Eval(x));; x = x + dx;; }; ; auto cv = new TCanvas(""cv"",""cv"",800,600);; cv->SetLogy();; cv->SetGridx();; cv->SetGridy();; g->Draw(""AL*"");; ; g2->SetMarkerColor(kRed);; g2->SetMarkerStyle(1);; g2->Draw(""P"");; }; ; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95. Highlight mode for graph; SinceROOT version 6.15/01. Highlight mode; Highlight mode is implemented for TGraph (and for TH1) class. When h",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:27246,Testability,log,logarithm,27246,"text menu. TGraph::IsHighlight() to verify whether the highlight mode enabled or disabled, default it is disabled.; root [0] .x $ROOTSYS/tutorials/graphs/gerrors2.C; root [1] // try SetHighlight() interactively from TGraph context menu. Highlight mode for graph; See how it is used highlight mode and user function (is fully equivalent as for histogram).; NOTE all parameters of user function are taken from void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y). pad is pointer to pad with highlighted graph; obj is pointer to highlighted graph; x is highlighted x-th (i-th) point for graph; y not in use (only for 2D histogram). For more complex demo please see for example $ROOTSYS/tutorials/math/hlquantiles.C file. ; Definition at line 31 of file TGraphPainter.h. Public Member Functions;  TGraphPainter ();  Default constructor. ;  ;  ~TGraphPainter () override;  Destructor. ;  ; void ComputeLogs (Int_t npoints, Int_t opt);  Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ;  ; Int_t DistancetoPrimitiveHelper (TGraph *theGraph, Int_t px, Int_t py) override;  Compute distance from point px,py to a graph. ;  ; void DrawPanelHelper (TGraph *theGraph) override;  Display a panel with all histogram drawing options. ;  ; void ExecuteEventHelper (TGraph *theGraph, Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetHighlightPoint (TGraph *theGraph) const;  Return the highlighted point for theGraph. ;  ; char * GetObjectInfoHelper (TGraph *theGraph, Int_t px, Int_t py) const override;  ; virtual void HighlightPoint (TGraph *theGraph, Int_t hpoint, Int_t distance);  Check on highlight point. ;  ; TClass * IsA () const override;  ; void PaintGraph (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt) override;  Control function to draw a graph. ;  ; void PaintGraphAsymmErrors (",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:41866,Testability,log,logarithm,41866,"GraphPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPainter(). TGraphPainter::TGraphPainter ; (; ). Default constructor. ; Definition at line 667 of file TGraphPainter.cxx. ◆ ~TGraphPainter(). TGraphPainter::~TGraphPainter ; (; ). override . Destructor. ; Definition at line 675 of file TGraphPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TGraphPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraphPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file TGraphPainter.h. ◆ ComputeLogs(). void TGraphPainter::ComputeLogs ; (; Int_t ; npoints, . Int_t ; opt . ). Compute the logarithm of variables gxwork and gywork according to the value of Options and put the results in the variables gxworkl and gyworkl. ; npoints : Number of points in gxwork and in gywork. opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph . Definition at line 690 of file TGraphPainter.cxx. ◆ DeclFileName(). static const char * TGraphPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TGraphPainter.h. ◆ DistancetoPrimitiveHelper(). Int_t TGraphPainter::DistancetoPrimitiveHelper ; (; TGraph * ; theGraph, . Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a graph. ; Compute the closest distance of approach from point px,py to this line. The distance is computed in pixels units. ; Implements TVirtualGraphPainter.; Definition at line 717 of file TGraphPainter.cxx. ◆ DrawPanelHelper(). void TGraphPainter::DrawPanelHelper ; (; TGraph * ; theGraph). overridevirtual . Display a panel with all h",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:1138,Usability,simpl,simple,1138,"ches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' it draws invisible axis . ""L"" A simple polyline is drawn . ""F"" A fill area is drawn ('CF' draw a smoothed fill area",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:2032,Usability,simpl,simple,2032,"n the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' it draws invisible axis . ""L"" A simple polyline is drawn . ""F"" A fill area is drawn ('CF' draw a smoothed fill area) . ""C"" A smooth Curve is drawn . ""*"" A Star is plotted at each point . ""P"" The current marker is plotted at each point . ""B"" A Bar chart is drawn . ""1"" When a graph is drawn as a bar chart, this option makes the bars start from the bottom of the pad. By default they start at 0. . ""X+"" The X-axis is drawn on the top side of the plot. . ""Y+"" The Y-axis is drawn on the right side of the plot. . ""PFC"" Palette Fill Color: graph's fill color is taken in the current palette. . ""PLC"" Palette Line Color: graph's line color is taken in the current palette. . ""PMC"" Palette Marker Color: graph's marker color is taken in the current palette. . ""RX"" Reverse the X axis. . ""RY"" Reverse the Y axis. . Drawing options can be combined. In the following example the graph is drawn as a smooth curve (option ""C"") with markers (option ""P"") and with axes (option ""A"").; {; auto c1 = new TCanvas(""c1"",""c1"",200,10,600,400);; ; c1->SetFillColo",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:20386,Usability,simpl,simplest,20386,"GraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);; ; grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");; ; // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();; }; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Colors automatically picked in palette; SinceROOT version 6.09/01; When several graphs are painted in the same canvas or when a multi-graph is drawn, it might be useful to have an easy and automatic way to choose their color. The simplest way is to pick colors in the current active color palette. Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and PMC (Palette Marker Color). When one of these options is given to TGraph::Draw the graph get its color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of objects having palette coloring in the current pad.; ; void graphpalettecolor () {; ; gStyle->SetOptTitle(kFALSE);; gStyle->SetPalette(kSolar);; ; double x[5] = {1,2,3,4,5};; double y1[5] = {1.0,2.0,1.0,2.5,3.0};; double y2[5] = {1.1,2.1,1.1,2.6,3.1};; double y3[5] = {1.2,2.2,1.2,2.7,3.2};; double y4[5] = {1.3,2.3,1.3,2.8,3.3};; double y5[5] = {1.4,2.4,1.4,2.9,3.4};; ; TGraph *g1 = new TGraph(5,x,y1); g1->SetTitle(""Graph with a red star"");; TGraph *g2 = new TGraph(5,x,y2); g2->SetTitle(""Graph with a circular marker"");; TGraph *g3 = new TGraph(5,x,y3); g3->SetTitle(""Graph with an open square marker"");; TGraph *g4 =",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:24941,Usability,clear,clearly,24941," use these options.; {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");; ; g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);; ; g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);; ; g->GetXaxis()->SetNdivisions(520);; ; g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");; ; c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105. Graphs in logarithmic scale; Like histograms, graphs can be drawn in logarithmic scale along X and Y. When a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy() the points building the graph are converted into logarithmic scale. But only the points not the lines connecting them which stay linear. This can be clearly seen on the following example:; {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph(3);; g->SetPoint(0,xmin,0.1);; g->SetPoint(1,845,0.06504);; g->SetPoint(2,xmax,0.008);; ; // The same graph with n points; Int_t n = 10000;; Double_t dx = (xmax-xmin)/n;; Double_t x = xmin;; auto g2 = new TGraph();; for (Int_t i=0; i<n; i++) {; g2->SetPoint(i, x, g->Eval(x));; x = x + dx;; }; ; auto cv = new TCanvas(""cv"",""cv"",800,600);; cv->SetLogy();; cv->SetGridx();; cv->SetGridy();; g->Draw(""AL*"");; ; g2->SetMarkerColor(kRed);; g2->SetMarkerStyle(1);; g2->Draw(""P"");; }; ; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95. Highlight mode for graph; SinceROOT version 6.15/01. Highlight mode; Highlight mode is implemented for TGraph (and for TH1) class. When highlight mode is on, mouse movement over the point will be represented graphically. Point will be highlighted as ""point circle"" (presented by marker object). Moreover, any highlight (change of point",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:29395,Usability,simpl,simple,29395,". ;  ; void PaintGraphBentErrors (TGraph *theGraph, Option_t *option);  Paint this TGraphBentErrors with its current attributes. ;  ; void PaintGraphErrors (TGraph *theGraph, Option_t *option);  Paint this TGraphErrors with its current attributes. ;  ; void PaintGrapHist (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt) override;  This is a service method used by THistPainter to paint 1D histograms. ;  ; void PaintGraphMultiErrors (TGraph *theGraph, Option_t *option);  Paint this TGraphMultiErrors with its current attributes. ;  ; void PaintGraphPolar (TGraph *theGraph, Option_t *option);  Paint this TGraphPolar with its current attributes. ;  ; void PaintGraphQQ (TGraph *theGraph, Option_t *option);  Paint this graphQQ. No options for the time being. ;  ; void PaintGraphReverse (TGraph *theGraph, Option_t *option);  Paint theGraph reverting values along X and/or Y axis. a new graph is created. ;  ; void PaintGraphSimple (TGraph *theGraph, Option_t *option);  Paint a simple graph, without errors bars. ;  ; void PaintHelper (TGraph *theGraph, Option_t *option) override;  Paint a any kind of TGraph. ;  ; virtual void PaintHighlightPoint (TGraph *theGraph, Option_t *option);  Paint highlight point as TMarker object (open circle) ;  ; void PaintPolyLineHatches (TGraph *theGraph, Int_t n, const Double_t *x, const Double_t *y);  Paint a polyline with hatches on one side showing an exclusion zone. ;  ; void PaintScatter (TScatter *theScatter, Option_t *option) override;  Paint a scatter plot. ;  ; void PaintStats (TGraph *theGraph, TF1 *fit) override;  Paint the statistics box with the fit info. ;  ; void SetHighlight (TGraph *theGraph) override;  Set highlight (enable/disable) mode for theGraph. ;  ; void Smooth (TGraph *theGraph, Int_t npoints, Double_t *x, Double_t *y, Int_t drawtype);  Smooth a curve given by N points. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:46366,Usability,simpl,simple,46366,"rent attributes. ; Definition at line 3499 of file TGraphPainter.cxx. ◆ PaintGrapHist(). void TGraphPainter::PaintGrapHist ; (; TGraph * ; theGraph, . Int_t ; npoints, . const Double_t * ; x, . const Double_t * ; y, . Option_t * ; chopt . ). overridevirtual . This is a service method used by THistPainter to paint 1D histograms. ; It is not used to paint TGraph.; Input parameters:. npoints : Number of points in X or in Y.; x[npoints] or x[0] : x coordinates or (xmin,xmax).; y[npoints] or y[0] : y coordinates or (ymin,ymax).; chopt : Option. The aspect of the histogram is done according to the value of the chopt. Option Description . ""R"" Graph is drawn horizontally, parallel to X axis. (default is vertically, parallel to Y axis).If option R is selected the user must give 2 values for Y (y[0]=YMIN and y[1]=YMAX) or N values for X, one for each channel. Otherwise the user must give, N values for Y, one for each channel or 2 values for X (x[0]=XMIN and x[1]=XMAX) . ""L"" A simple polyline between every points is drawn. . ""H"" An Histogram with equidistant bins is drawn as a polyline. . ""F"" An histogram with equidistant bins is drawn as a fill area. Contour is not drawn unless chopt='H' is also selected.. . ""N"" Non equidistant bins (default is equidistant). If N is the number of channels array X and Y must be dimensioned as follow: If option R is not selected (default) then the user must give (N+1) values for X (limits of channels) or N values for Y, one for each channel. Otherwise the user must give (N+1) values for Y (limits of channels). or N values for X, one for each channel . ""F1"" Idem as 'F' except that fill area base line is the minimum of the pad instead of Y=0. . ""F2"" Draw a Fill area polyline connecting the center of bins . ""C"" A smooth Curve is drawn. . ""*"" A Star is plotted at the center of each bin. . ""P"" Idem with the current marker. . ""P0"" Idem with the current marker. Empty bins also drawn. . ""B"" A Bar chart with equidistant bins is drawn as fill areas (Conto",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPainter.html:48653,Usability,simpl,simple,48653,"raphPainter::PaintGraphMultiErrors ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphMultiErrors with its current attributes. ; Definition at line 2720 of file TGraphPainter.cxx. ◆ PaintGraphPolar(). void TGraphPainter::PaintGraphPolar ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphPolar with its current attributes. ; Definition at line 3789 of file TGraphPainter.cxx. ◆ PaintGraphQQ(). void TGraphPainter::PaintGraphQQ ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this graphQQ. No options for the time being. ; Definition at line 4084 of file TGraphPainter.cxx. ◆ PaintGraphReverse(). void TGraphPainter::PaintGraphReverse ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint theGraph reverting values along X and/or Y axis. a new graph is created. ; Definition at line 4144 of file TGraphPainter.cxx. ◆ PaintGraphSimple(). void TGraphPainter::PaintGraphSimple ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint a simple graph, without errors bars. ; Definition at line 4584 of file TGraphPainter.cxx. ◆ PaintHelper(). void TGraphPainter::PaintHelper ; (; TGraph * ; theGraph, . Option_t * ; option . ). overridevirtual . Paint a any kind of TGraph. ; Implements TVirtualGraphPainter.; Definition at line 1211 of file TGraphPainter.cxx. ◆ PaintHighlightPoint(). void TGraphPainter::PaintHighlightPoint ; (; TGraph * ; theGraph, . Option_t * ; option . ). virtual . Paint highlight point as TMarker object (open circle) ; Definition at line 1165 of file TGraphPainter.cxx. ◆ PaintPolyLineHatches(). void TGraphPainter::PaintPolyLineHatches ; (; TGraph * ; theGraph, . Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). Paint a polyline with hatches on one side showing an exclusion zone. ; x and y are the vectors holding the polyline and n the number of points in the polyline and w the width of the hatches. w can be negative. This method is not meant to be used directly. It is called automatically according to t",MatchSource.WIKI,doc/master/classTGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html
https://root.cern/doc/master/classTGraphPolar-members.html:3249,Availability,error,error,3249,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphErrorsprotectedvirtual; Draw(Option_t *options="""") overrideTGraphPolarvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXTGraphErrorsprotected; fEYTGraphErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax",MatchSource.WIKI,doc/master/classTGraphPolar-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html
https://root.cern/doc/master/classTGraphPolar-members.html:3330,Availability,error,error,3330,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphErrorsprotectedvirtual; Draw(Option_t *options="""") overrideTGraphPolarvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXTGraphErrorsprotected; fEYTGraphErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax",MatchSource.WIKI,doc/master/classTGraphPolar-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html
https://root.cern/doc/master/classTGraphPolar-members.html:195,Modifiability,inherit,inherited,195,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphPolar Member List. This is the complete list of members for TGraphPolar, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *f, Double_t c1=1)TGraphvirtual; AddPoint(Double_t x, Double_t y)TGraphinlinevirtual; AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)TGraphErrorsvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; Allocate(Int_t size) overrideTGraphErrorsinlineprotectedvirtual; AllocateArrays(Int_t Narrays, Int_t arraySize)TGraphprotected; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF1 *f) overrideTGraphErrorsvirtual; ApplyX(TF1 *f)TGraphErrorsvirtual; Browse(TBrowser *b) overrideTGraphvirtual; CalculateScanfFields(const char *fmt)TGraphErrorsstatic; CheckedHash()TObjectinline; Chisquare(TF1 *f1, Option_t *option="""") constTGraphvirtual; Class()TGraphPolarstatic; Class_Name()TGraphPolarstatic; Class_Version()TGraphPolarinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareArg(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareRadius(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareX(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareY(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideTGraphErrorsvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideTGraphErrorsprotectedvirtual; CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t",MatchSource.WIKI,doc/master/classTGraphPolar-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html
https://root.cern/doc/master/classTGraphPolar-members.html:9669,Testability,log,logx,9669,"alueTObject; kIsReferenced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphErrors &gr)TGraphErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") con",MatchSource.WIKI,doc/master/classTGraphPolar-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html
https://root.cern/doc/master/classTGraphPolar-members.html:9689,Testability,log,logy,9689,"renced enum valueTObject; kIsSortedX enum valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list) overrideTGraphErrorsvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraphErrors &gr)TGraphErrors; TGraph::operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphErr",MatchSource.WIKI,doc/master/classTGraphPolar-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html
https://root.cern/doc/master/classTGraphPolar.html:410,Availability,error,error,410,". ROOT: TGraphPolar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TGraphPolar Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw a polar graph. ; TGraphPolar creates a polar graph (including error bars). A TGraphPolar is a TGraphErrors represented in polar coordinates. It uses the class TGraphPolargram to draw the polar axis.; Example:; {; TCanvas * CPol = new TCanvas(""CPol"",""TGraphPolar Example"",500,500);; ; Double_t theta[8];; Double_t radius[8];; Double_t etheta[8];; Double_t eradius[8];; ; for (int i=0; i<8; i++) {; theta[i] = (i+1)*(TMath::Pi()/4.);; radius[i] = (i+1)*0.05;; etheta[i] = TMath::Pi()/8.;; eradius[i] = 0.05;; }; ; TGraphPolar * grP1 = new TGraphPolar(8, theta, radius, etheta, eradius);; grP1->SetTitle(""TGraphPolar Example"");; ; grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(2.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(2);; grP1->SetLineWidth(3);; grP1->Draw(""PE"");; ; // Update, otherwise GetPolargram returns 0; CPol->Update();; grP1->GetPolargram()->SetToRadian();; ; return CPol;; }; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TGraphPolarTo draw a polar graph.Definition TG",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:5337,Availability,error,errorbars,5337,"constructor. ;  ;  TGraphErrors (const TH1 *h);  TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vex, const TVectorD &vey);  Constructor with four vectors of doubles in input. ;  ;  TGraphErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vex, const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:5733,Availability,error,error,5733,", const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ sta",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:5831,Availability,error,error,5831,"nt_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:5928,Availability,error,error,5928,"Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointErr",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:6022,Availability,error,error,6022,"ructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtu",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:6120,Availability,error,error,6120,"tr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point numbe",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:6217,Availability,error,error,6217,";  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Function",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:6390,Availability,error,errors,6390," errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *op",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:6593,Availability,error,errors,6593,"nge (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Co",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:6833,Availability,error,errors,6833,"ns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A gra",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:19610,Availability,error,error,19610,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:19699,Availability,error,error,19699,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:19854,Availability,error,error,19854,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (co",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:20031,Availability,error,error,20031,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:23305,Availability,error,error,23305,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:31315,Availability,error,errors,31315,* Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:31376,Availability,error,errors,31376,* Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:33993,Availability,error,errors,33993,"0; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and co",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:34264,Availability,error,errors,34264,"atedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:16937,Deployability,continuous,continuous,16937,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:33885,Deployability,release,release,33885,"= (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In construct",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:34139,Energy Efficiency,allocate,allocate,34139,"; , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save a",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:34952,Energy Efficiency,allocate,allocate,34952,"egin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphPolar.h>. Inheritance diagram for TGraphPolar:.",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:35467,Energy Efficiency,allocate,allocate,35467,") override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphPolar.h>. Inheritance diagram for TGraphPolar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPolar() [1/2]. TGraphPolar::TGraphPolar ; (; ). TGraphPolar default constructor. ; Definition at line 66 of file TGraphPolar.cxx. ◆ TGraphPolar() [2/2]. TGraphPolar::TGraphPolar ; (; Int_t ; n, . const Double_t * ; theta = nullptr, . const Double_t * ; r = nullptr, . const Double_t * ; etheta = nullptr, . const Double_t * ; er = nullptr . ). TGraphPolar construct",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:19616,Integrability,message,message,19616,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:20037,Integrability,message,message,20037,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:20695,Integrability,message,message,20695,"ms, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:23311,Integrability,message,message,23311,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:23502,Integrability,message,message,23502,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:4036,Modifiability,inherit,inherited,4036,"tOptionAxis ();  ; TGraphPolargram * GetPolargram ();  ; Double_t * GetXpol ();  Return points in polar coordinates. ;  ; Double_t * GetYpol ();  Return points in polar coordinates. ;  ; TClass * IsA () const override;  ; void SetMaximum (Double_t maximum=1) override;  Set the maximum of the graph. ;  ; void SetMaxPolar (Double_t maximum=6.28318530717958623);  Set maximum Polar. ;  ; void SetMaxRadial (Double_t maximum=1);  Set maximum radial at the intersection of the positive X axis part and the circle. ;  ; void SetMinimum (Double_t minimum=0) override;  Set the minimum of the graph. ;  ; void SetMinPolar (Double_t minimum=0);  Set minimum Polar. ;  ; void SetMinRadial (Double_t minimum=0);  Set minimum radial in the center of the circle. ;  ; void SetOptionAxis (Bool_t opt);  ; void SetPolargram (TGraphPolargram *p);  ; void Streamer (TBuffer &) override;  Stream an object of class TGraphErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraphErrors;  TGraphErrors ();  TGraphErrors default constructor. ;  ;  TGraphErrors (const char *filename, const char *format=""%lg %lg %lg %lg"", Option_t *option="""");  GraphErrors constructor reading input from filename. ;  ;  TGraphErrors (const TGraphErrors &gr);  TGraphErrors copy constructor. ;  ;  TGraphErrors (const TH1 *h);  TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vex, const TVectorD &vey);  Constructor with four vectors of doubles in input. ;  ;  TGraphErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vex, const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (I",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:7196,Modifiability,inherit,inherited,7196," bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with errors from the collection to this graph. ;  ; TGraphErrors & operator= (const TGraphErrors &gr);  TGraphErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphErrors by a constant c1. ;  ; virtual void SetPointError (Double_t ex, Double_t ey);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey);  Set ex and ey values for point number i. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and vy. ;  ;  TGraph (const TVectorF &vx, const TVectorF &vy);  Graph constructor with two vectors of floats in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of poin",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:16988,Modifiability,inherit,inherited,16988,"er i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:18453,Modifiability,inherit,inherited,18453,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:19246,Modifiability,inherit,inheritance,19246,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:20793,Modifiability,inherit,inherits,20793,"ameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:20910,Modifiability,inherit,inherits,20910,"method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:23809,Modifiability,inherit,inherited,23809,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:25314,Modifiability,inherit,inherited,25314,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:26569,Modifiability,inherit,inherited,26569,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:28183,Modifiability,inherit,inherited,28183,"y ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraphErrors; static Int_t CalculateScanfFields (const char *fmt);  Calculate scan fields. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:28481,Modifiability,inherit,inherited,28481,"ttributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraphErrors; static Int_t CalculateScanfFields (const char *fmt);  Calculate scan fields. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:29346,Modifiability,inherit,inherited,29346," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:29556,Modifiability,inherit,inherited,29556," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:30074,Modifiability,inherit,inherited,30074,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHist,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:30286,Modifiability,inherit,inherited,30286,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHist,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:30498,Modifiability,inherit,inherited,30498,e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHist,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:31237,Modifiability,inherit,inherited,31237,* Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:31410,Modifiability,inherit,inherited,31410,* Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill,MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:31989,Modifiability,inherit,inherited,31989,". ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Attributes; Bool_t fOptionAxis;  Force drawing of new coord system. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:32071,Modifiability,inherit,inherited,32071,". ;  . Protected Attributes; TGraphPolargram * fPolargram;  The polar coordinates system. ;  ; Double_t * fXpol;  [fNpoints] points in polar coordinates ;  ; Double_t * fYpol;  [fNpoints] points in polar coordinates ;  ;  Protected Attributes inherited from TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Attributes; Bool_t fOptionAxis;  Force drawing of new coord system. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:32232,Modifiability,inherit,inherited,32232,"om TGraphErrors; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Attributes; Bool_t fOptionAxis;  Force drawing of new coord system. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL <<",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:32365,Modifiability,inherit,inherited,32365," ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Attributes; Bool_t fOptionAxis;  Force drawing of new coord system. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:32640,Modifiability,inherit,inherited,32640," along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Attributes; Bool_t fOptionAxis;  Force drawing of new coord system. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal d",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:32909,Modifiability,inherit,inherited,32909,"butes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Attributes; Bool_t fOptionAxis;  Force drawing of new coord system. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrid",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:33550,Modifiability,inherit,inherited,33550,"rom TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted v",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:33649,Modifiability,inherit,inherited,33649,"rom TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted v",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:34691,Modifiability,inherit,inherited,34691,"llocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void Ma",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:35558,Modifiability,inherit,inherited,35558," and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphPolar.h>. Inheritance diagram for TGraphPolar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPolar() [1/2]. TGraphPolar::TGraphPolar ; (; ). TGraphPolar default constructor. ; Definition at line 66 of file TGraphPolar.cxx. ◆ TGraphPolar() [2/2]. TGraphPolar::TGraphPolar ; (; Int_t ; n, . const Double_t * ; theta = nullptr, . const Double_t * ; r = nullptr, . const Double_t * ; etheta = nullptr, . const Double_t * ; er = nullptr . ). TGraphPolar constructor. ; Parameters. [in]nnumber of points. ; [in]thetaangular values. ; [in]rradial values. ; [in]ethetaerrors on angular values. ; [in]ererrors on radial values. . ",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:35776,Modifiability,inherit,inherited,35776,"  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphPolar.h>. Inheritance diagram for TGraphPolar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphPolar() [1/2]. TGraphPolar::TGraphPolar ; (; ). TGraphPolar default constructor. ; Definition at line 66 of file TGraphPolar.cxx. ◆ TGraphPolar() [2/2]. TGraphPolar::TGraphPolar ; (; Int_t ; n, . const Double_t * ; theta = nullptr, . const Double_t * ; r = nullptr, . const Double_t * ; etheta = nullptr, . const Double_t * ; er = nullptr . ). TGraphPolar constructor. ; Parameters. [in]nnumber of points. ; [in]thetaangular values. ; [in]rradial values. ; [in]ethetaerrors on angular values. ; [in]ererrors on radial values. . Definition at line 80 of file TGraphPolar.cxx. ◆ ~TGraphPolar(). TGraphPolar::~TGraphPolar ; (; ). override . TGraphPolar destructor. ; Definition at line 91 of file TGraphPola",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:34220,Performance,perform,perform,34220,"atedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraphErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:17856,Security,hash,hash,17856," Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:14063,Testability,log,logx,14063,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:14083,Testability,log,logy,14083,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:14149,Testability,log,log,14149,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:14193,Testability,log,logarithmic,14193,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolar.html:14234,Testability,log,log,14234,"int ();  Insert a new point at the mouse position. ;  ; virtual void InsertPointBefore (Int_t ipoint, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint Returns index of removed point (or -1 if nothing was changed) ;  ; void Sav",MatchSource.WIKI,doc/master/classTGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html
https://root.cern/doc/master/classTGraphPolargram.html:8745,Availability,error,error,8745,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:8834,Availability,error,error,8834,"t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:8989,Availability,error,error,8989,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this obj",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:9166,Availability,error,error,9166,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:13137,Availability,error,error,13137,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a n",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:8751,Integrability,message,message,8751,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:9172,Integrability,message,message,9172,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:10162,Integrability,message,message,10162,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:13143,Integrability,message,message,13143,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a n",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:13516,Integrability,message,message,13516," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t Ge",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:1961,Modifiability,inherit,inherited,1961,"h GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Evalvirtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::Drawvoid Draw(Option_t *options="""") overrideDraw TGraphPolar.Definition TGraphPolar.cxx:100; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Definition at line 20 of file TGraphPolargram.h. Public Types; enum  { kLabelOrtho = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphPolargram (const char *name, Double_t rmin, Double_t rmax, Double_t tmin, Double_t tmax);  TGraphPolargram Constructor. ;  ;  TGraphPolargram (const char *name="""");  Short constructor used in the case of a spider plot. ;  ;  ~TGraphPolargram () override;  TGraphPolargram destructor. ;  ; void ChangeRangePolar (Double_t tmin, Double_t tmax);  Set the Polar range. ;  ; Int_t DistancetoPrimit",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:5746,Modifiability,inherit,inherited,5746,"lColor (Color_t tcolorradial=1);  Set radial labels color. ;  ; void SetRadialLabelFont (Font_t tfontradial=62);  Set radial label font. ;  ; void SetRadialLabelSize (Double_t radialsize=0.035);  Set radial labels size. ;  ; void SetRadialOffset (Double_t RadialOffset=0.025);  Set the labels offset. ;  ; void SetRangePolar (Double_t tmin, Double_t tmax);  Allows to change range Polar. ;  ; void SetRangeRadial (Double_t rmin, Double_t rmax);  Set the radial range. ;  ; void SetTickpolarSize (Double_t tickpolarsize=0.02);  Set polar ticks size. ;  ; void SetToDegree ();  The Polar circle is labelled using degree. ;  ; void SetToGrad ();  The Polar circle is labelled using gradian. ;  ; void SetToRadian ();  The Polar circle is labelled using radian. ;  ; void SetTwoPi ();  Set range from 0 to 2*pi. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:7486,Modifiability,inherit,inherited,7486,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * Dra",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:8381,Modifiability,inherit,inheritance,8381,"ject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:10260,Modifiability,inherit,inherits,10260,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:10377,Modifiability,inherit,inherits,10377,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:13823,Modifiability,inherit,inherited,13823,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:15707,Modifiability,inherit,inherited,15707,"Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextAlign (Short_t align=11);  Set the text alignment. ;  ; virtual void SetTextAngle (Float_t tangle=0);  Set the text angle. ;  ; virtual void SetTextAttributes ();  Invoke the DialogCanvas Text attributes. ;  ; virtual void SetTextColor (Color_t tcolor=1);  Set the text color. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; virtual void SetTextFont (Font_t tfont=62);  Set the text font. ;  ; virtual void SetTextSize (Float_t tsize=1);  Set the text size. ;  ; virtual void SetTextSizePixels (Int_t npixels);  Set the text size in pixel. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ stat",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:17406,Modifiability,inherit,inherited,17406,"efault values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:17616,Modifiability,inherit,inherited,17616,"efault values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:18134,Modifiability,inherit,inherited,18134,"_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Int_t FindAlign (Double_t angle);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void Init ();  Initialize some of the fields of TGraphPolargram. ;  ; void Paint (Option_t *options="""") override;  Paint TGraphPolargram. ;  ; void PaintPolarDivisions (Bool_t noLabels);  Draw Polar divisions. ;  ; void PaintRadialDivisions (Bool_t drawaxis);  Paint radial divisions. ;  ; void ReduceFraction (Int_t Num, Int_t Denom, Int_t &rnum, Int_t &rden);  Reduce fractions. ;  . Private Attributes; Double_t fAxisAngle;  Set angle of the radial axis. ;  ; Int_t fCutRadial;  if fCutRadial = 0, circles are cut by radial axis ",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:18346,Modifiability,inherit,inherited,18346,"_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Int_t FindAlign (Double_t angle);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void Init ();  Initialize some of the fields of TGraphPolargram. ;  ; void Paint (Option_t *options="""") override;  Paint TGraphPolargram. ;  ; void PaintPolarDivisions (Bool_t noLabels);  Draw Polar divisions. ;  ; void PaintRadialDivisions (Bool_t drawaxis);  Paint radial divisions. ;  ; void ReduceFraction (Int_t Num, Int_t Denom, Int_t &rnum, Int_t &rden);  Reduce fractions. ;  . Private Attributes; Double_t fAxisAngle;  Set angle of the radial axis. ;  ; Int_t fCutRadial;  if fCutRadial = 0, circles are cut by radial axis ",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:20347,Modifiability,inherit,inherited,20347,"ivRad;  Number of radial divisions. ;  ; Color_t fPolarLabelColor;  Set color of the angular labels. ;  ; Font_t fPolarLabelFont;  Set font of angular labels. ;  ; TString * fPolarLabels;  ! [fNdivPol] Specified polar labels ;  ; Double_t fPolarOffset;  Offset for Polar labels. ;  ; Double_t fPolarTextSize;  Set Polar text size. ;  ; Color_t fRadialLabelColor;  Set color of the radial labels. ;  ; Font_t fRadialLabelFont;  Set font of radial labels. ;  ; Double_t fRadialOffset;  Offset for radial labels. ;  ; Double_t fRadialTextSize;  ; Bool_t fRadian;  ; Double_t fRwrmax;  Maximal radial value (real world) ;  ; Double_t fRwrmin;  Minimal radial value (real world) ;  ; Double_t fRwtmax;  Minimal angular value (real world) ;  ; Double_t fRwtmin;  Minimal angular value (real world) ;  ; Double_t fTickpolarSize;  Set size of Tickmarks. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TGraphPolargram.h>. Inheritance diagram for TGraphPolargram:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkLabelOrtho . Definition at line 61 of file TGraphPolargram.h. Constructor & Destructor Document",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:20446,Modifiability,inherit,inherited,20446,"ivRad;  Number of radial divisions. ;  ; Color_t fPolarLabelColor;  Set color of the angular labels. ;  ; Font_t fPolarLabelFont;  Set font of angular labels. ;  ; TString * fPolarLabels;  ! [fNdivPol] Specified polar labels ;  ; Double_t fPolarOffset;  Offset for Polar labels. ;  ; Double_t fPolarTextSize;  Set Polar text size. ;  ; Color_t fRadialLabelColor;  Set color of the radial labels. ;  ; Font_t fRadialLabelFont;  Set font of radial labels. ;  ; Double_t fRadialOffset;  Offset for radial labels. ;  ; Double_t fRadialTextSize;  ; Bool_t fRadian;  ; Double_t fRwrmax;  Maximal radial value (real world) ;  ; Double_t fRwrmin;  Minimal radial value (real world) ;  ; Double_t fRwtmax;  Minimal angular value (real world) ;  ; Double_t fRwtmin;  Minimal angular value (real world) ;  ; Double_t fTickpolarSize;  Set size of Tickmarks. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TGraphPolargram.h>. Inheritance diagram for TGraphPolargram:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkLabelOrtho . Definition at line 61 of file TGraphPolargram.h. Constructor & Destructor Document",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:20651,Modifiability,inherit,inherited,20651,"set;  Offset for Polar labels. ;  ; Double_t fPolarTextSize;  Set Polar text size. ;  ; Color_t fRadialLabelColor;  Set color of the radial labels. ;  ; Font_t fRadialLabelFont;  Set font of radial labels. ;  ; Double_t fRadialOffset;  Offset for radial labels. ;  ; Double_t fRadialTextSize;  ; Bool_t fRadian;  ; Double_t fRwrmax;  Maximal radial value (real world) ;  ; Double_t fRwrmin;  Minimal radial value (real world) ;  ; Double_t fRwtmax;  Minimal angular value (real world) ;  ; Double_t fRwtmin;  Minimal angular value (real world) ;  ; Double_t fTickpolarSize;  Set size of Tickmarks. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TGraphPolargram.h>. Inheritance diagram for TGraphPolargram:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkLabelOrtho . Definition at line 61 of file TGraphPolargram.h. Constructor & Destructor Documentation. ◆ TGraphPolargram() [1/2]. TGraphPolargram::TGraphPolargram ; (; const char * ; name, . Double_t ; rmin, . Double_t ; rmax, . Double_t ; tmin, . Double_t ; tmax . ). TGraphPolargram Constructor. ; Definition at line 57 of file TGraphPolargr",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:20733,Modifiability,inherit,inherited,20733,"set;  Offset for Polar labels. ;  ; Double_t fPolarTextSize;  Set Polar text size. ;  ; Color_t fRadialLabelColor;  Set color of the radial labels. ;  ; Font_t fRadialLabelFont;  Set font of radial labels. ;  ; Double_t fRadialOffset;  Offset for radial labels. ;  ; Double_t fRadialTextSize;  ; Bool_t fRadian;  ; Double_t fRwrmax;  Maximal radial value (real world) ;  ; Double_t fRwrmin;  Minimal radial value (real world) ;  ; Double_t fRwtmax;  Minimal angular value (real world) ;  ; Double_t fRwtmin;  Minimal angular value (real world) ;  ; Double_t fTickpolarSize;  Set size of Tickmarks. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TGraphPolargram.h>. Inheritance diagram for TGraphPolargram:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkLabelOrtho . Definition at line 61 of file TGraphPolargram.h. Constructor & Destructor Documentation. ◆ TGraphPolargram() [1/2]. TGraphPolargram::TGraphPolargram ; (; const char * ; name, . Double_t ; rmin, . Double_t ; rmax, . Double_t ; tmin, . Double_t ; tmax . ). TGraphPolargram Constructor. ; Definition at line 57 of file TGraphPolargr",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:20969,Modifiability,inherit,inherited,20969,"tSize;  ; Bool_t fRadian;  ; Double_t fRwrmax;  Maximal radial value (real world) ;  ; Double_t fRwrmin;  Minimal radial value (real world) ;  ; Double_t fRwtmax;  Minimal angular value (real world) ;  ; Double_t fRwtmin;  Minimal angular value (real world) ;  ; Double_t fTickpolarSize;  Set size of Tickmarks. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TGraphPolargram.h>. Inheritance diagram for TGraphPolargram:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkLabelOrtho . Definition at line 61 of file TGraphPolargram.h. Constructor & Destructor Documentation. ◆ TGraphPolargram() [1/2]. TGraphPolargram::TGraphPolargram ; (; const char * ; name, . Double_t ; rmin, . Double_t ; rmax, . Double_t ; tmin, . Double_t ; tmax . ). TGraphPolargram Constructor. ; Definition at line 57 of file TGraphPolargram.cxx. ◆ TGraphPolargram() [2/2]. TGraphPolargram::TGraphPolargram ; (; const char * ; name = """"). Short constructor used in the case of a spider plot. ; Definition at line 74 of file TGraphPolargram.cxx. ◆ ~TGraphPolargram(). TGraphPolargram::~TGraphPolargram ; (; ). override . TGraph",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:6614,Security,hash,hash,6614," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:3981,Usability,simpl,simplified,3981,"t rmin, Double_t rmax, Double_t tmin, Double_t tmax);  TGraphPolargram Constructor. ;  ;  TGraphPolargram (const char *name="""");  Short constructor used in the case of a spider plot. ;  ;  ~TGraphPolargram () override;  TGraphPolargram destructor. ;  ; void ChangeRangePolar (Double_t tmin, Double_t tmax);  Set the Polar range. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Everything within the circle belongs to the TGraphPolargram. ;  ; void Draw (Option_t *options="""") override;  Draw Polargram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Indicate that there is something to click here. ;  ; Double_t GetAngle ();  ; Int_t GetNdivPolar ();  ; Int_t GetNdivRadial ();  ; Color_t GetPolarColorLabel ();  ; Font_t GetPolarLabelFont ();  ; Double_t GetPolarLabelSize ();  ; Double_t GetPolarOffset ();  ; Color_t GetRadialColorLabel ();  ; Font_t GetRadialLabelFont ();  ; Double_t GetRadialLabelSize ();  ; Double_t GetRadialOffset ();  ; Double_t GetRMax ();  ; Double_t GetRMin ();  ; Double_t GetTickpolarSize ();  ; Double_t GetTMax ();  ; Double_t GetTMin ();  ; TClass * IsA () const override;  ; Bool_t IsDegree ();  ; Bool_t IsGrad ();  ; Bool_t IsRadian ();  ; void PaintCircle (Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta);  This is simplified from TEllipse::PaintEllipse. ;  ; void SetAxisAngle (Double_t angle=0);  Set axis angle. ;  ; void SetNdivPolar (Int_t Ndiv=508);  Set the number of Polar divisions: enter a number ij with 0<i<99 and 0<j<99. ;  ; void SetNdivRadial (Int_t Ndiv=508);  Set the number of radial divisions: enter a number ij with 0<i<99 and 0<j<99. ;  ; void SetPolarLabel (Int_t div, const TString &label);  Set some specified polar labels, used in the case of a spider plot. ;  ; void SetPolarLabelColor (Color_t tcolorangular=1);  Set Polar labels color. ;  ; void SetPolarLabelFont (Font_t tfontangular=62);  ; void SetPolarLabelSize (Double_t angularsize=0.04);  Set angular l",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphPolargram.html:27142,Usability,simpl,simplified,27142,"GraphPolargram. ; Definition at line 327 of file TGraphPolargram.cxx. ◆ IsA(). TClass * TGraphPolargram::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 119 of file TGraphPolargram.h. ◆ IsDegree(). Bool_t TGraphPolargram::IsDegree ; (; ). inline . Definition at line 90 of file TGraphPolargram.h. ◆ IsGrad(). Bool_t TGraphPolargram::IsGrad ; (; ). inline . Definition at line 92 of file TGraphPolargram.h. ◆ IsRadian(). Bool_t TGraphPolargram::IsRadian ; (; ). inline . Definition at line 91 of file TGraphPolargram.h. ◆ Paint(). void TGraphPolargram::Paint ; (; Option_t * ; options = """"). overrideprivatevirtual . Paint TGraphPolargram. ; Reimplemented from TObject.; Definition at line 349 of file TGraphPolargram.cxx. ◆ PaintCircle(). void TGraphPolargram::PaintCircle ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; r, . Double_t ; phimin, . Double_t ; phimax, . Double_t ; theta . ). This is simplified from TEllipse::PaintEllipse. ; Draw this ellipse with new coordinates. ; Definition at line 373 of file TGraphPolargram.cxx. ◆ PaintPolarDivisions(). void TGraphPolargram::PaintPolarDivisions ; (; Bool_t ; optionLabels). private . Draw Polar divisions. ; Check for editable pad or create default. ; Definition at line 408 of file TGraphPolargram.cxx. ◆ PaintRadialDivisions(). void TGraphPolargram::PaintRadialDivisions ; (; Bool_t ; drawaxis). private . Paint radial divisions. ; Check for editable pad or create default. ; Definition at line 625 of file TGraphPolargram.cxx. ◆ ReduceFraction(). void TGraphPolargram::ReduceFraction ; (; Int_t ; Num, . Int_t ; Denom, . Int_t & ; rnum, . Int_t & ; rden . ). private . Reduce fractions. ; Definition at line 739 of file TGraphPolargram.cxx. ◆ SetAxisAngle(). void TGraphPolargram::SetAxisAngle ; (; Double_t ; angle = 0). Set axis angle. ; Definition at line 765 of file TGraphPolargram.cxx. ◆ SetNdivPolar(). void TGraphPolargram::SetNdivPolar ; (; Int_",MatchSource.WIKI,doc/master/classTGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html
https://root.cern/doc/master/classTGraphQQ-members.html:2946,Availability,error,error,2946,"eTGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g)TGraphprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFTGraphQQprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)TGraphprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; FitPanel()TGraphvirtual; fLi",MatchSource.WIKI,doc/master/classTGraphQQ-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html
https://root.cern/doc/master/classTGraphQQ-members.html:3027,Availability,error,error,3027,"eTGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g)TGraphprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFTGraphQQprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)TGraphprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; FitPanel()TGraphvirtual; fLi",MatchSource.WIKI,doc/master/classTGraphQQ-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html
https://root.cern/doc/master/classTGraphQQ-members.html:189,Modifiability,inherit,inherited,189,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphQQ Member List. This is the complete list of members for TGraphQQ, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *f, Double_t c1=1)TGraphvirtual; AddPoint(Double_t x, Double_t y)TGraphinlinevirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; Allocate(Int_t newsize)TGraphprotectedvirtual; AllocateArrays(Int_t Narrays, Int_t arraySize)TGraphprotected; AppendPad(Option_t *option="""")TObjectvirtual; Apply(TF1 *f)TGraphvirtual; Browse(TBrowser *b) overrideTGraphvirtual; CheckedHash()TObjectinline; Chisquare(TF1 *f1, Option_t *option="""") constTGraphvirtual; Class()TGraphQQstatic; Class_Name()TGraphQQstatic; Class_Version()TGraphQQinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareArg(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareRadius(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareX(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; CompareY(const TGraph *gr, Int_t left, Int_t right)TGraphstatic; ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) constTGraphvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin)TGraphprotectedvirtual; CopyPoints(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin)TGraphprotectedvirtual; CtorAllocate()TGraphprotected; DeclFileName()TGraphQQinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimi",MatchSource.WIKI,doc/master/classTGraphQQ-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html
https://root.cern/doc/master/classTGraphQQ-members.html:9315,Testability,log,logx,9315," valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeFunctionQuantiles()TGraphQQprotected; MakeQuantiles()TGraphQQprotected; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphvirtual; Quartiles()TGraphQQprotected;",MatchSource.WIKI,doc/master/classTGraphQQ-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html
https://root.cern/doc/master/classTGraphQQ-members.html:9335,Testability,log,logy,9335,"leanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeFunctionQuantiles()TGraphQQprotected; MakeQuantiles()TGraphQQprotected; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphvirtual; Quartiles()TGraphQQprotected; Read(const char *na",MatchSource.WIKI,doc/master/classTGraphQQ-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html
https://root.cern/doc/master/classTGraphQQ.html:877,Availability,robust,robust,877,". ROOT: TGraphQQ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphQQ Class ReferenceGraphics » 2D Graphics » Basic graphics. ; This class allows to draw quantile-quantile plots. ; Plots can be drawn for 2 datasets or for a dataset and a theoretical distribution function. 2 datasets:; Quantile-quantile plots are used to determine whether 2 samples come from the same distribution. A qq-plot draws the quantiles of one dataset against the quantile of the the other. The quantiles of the dataset with fewer entries are on Y axis, with more entries - on X axis. A straight line, going through 0.25 and 0.75 quantiles is also plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the datasets. If the datasets come from the same distribution, points of the plot should fall approximately on the 45 degrees line. If they have the same distribution function, but location or scale different parameters, they should still fall on the straight line, but not the 45 degrees one. The greater their departure from the straight line, the more evidence there is, that the datasets come from different distributions. The advantage of qq-plot is that it not only shows that the underlying distributions are different, but, unlike the analytical methods, it also gives information on the nature of this difference: heavier tails, different location/scale, different shape, etc.; Some examples of qqplots of 2 datasets:. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the specified theoretical distribution, such as normal. A qq-plot draws quantiles of the dataset against quantiles of the specified theoretical distribution. (NOTE, that density, not CDF should be specified) A straight line, going through 0.25 and 0.75 quantil",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:2055,Availability,robust,robust,2055,"same distribution function, but location or scale different parameters, they should still fall on the straight line, but not the 45 degrees one. The greater their departure from the straight line, the more evidence there is, that the datasets come from different distributions. The advantage of qq-plot is that it not only shows that the underlying distributions are different, but, unlike the analytical methods, it also gives information on the nature of this difference: heavier tails, different location/scale, different shape, etc.; Some examples of qqplots of 2 datasets:. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the specified theoretical distribution, such as normal. A qq-plot draws quantiles of the dataset against quantiles of the specified theoretical distribution. (NOTE, that density, not CDF should be specified) A straight line, going through 0.25 and 0.75 quantiles can also be plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the dataset. As in the 2 datasets case, departures from straight line indicate departures from the specified distribution.; ""The correlation coefficient associated with the linear fit to the data; in the probability plot (qq plot in our case) is a measure of the; goodness of the fit.; Estimates of the location and scale parameters of the distribution; are given by the intercept and slope. Probability plots can be generated; for several competing distributions to see which provides the best fit,; and the probability plot generating the highest correlation coefficient; is the best choice since it generates the straightest probability plot.""; From ""Engineering statistic handbook"",; http://www.itl.nist.gov/div898/handbook/eda/section3/probplot.htm; Example of a qq-plot of a dataset from N(3, 2) distribution and TMath::Gaus(0, 1) theoretical function. Fitting parameters are estimates of the distribution mean and sigma. References:; http://www.itl.nist.gov/div898/",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:18329,Availability,error,error,18329,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:18418,Availability,error,error,18418,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:18573,Availability,error,error,18573,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (co",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:18750,Availability,error,error,18750,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:22024,Availability,error,error,22024,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:15656,Deployability,continuous,continuous,15656,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:30674,Energy Efficiency,allocate,allocate,30674,"antiles of the bigger sample by linear interpolation. ;  ; void Quartiles ();  compute quartiles a quartile is a 25 per cent or 75 per cent quantile ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; virtual void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; virtual Bool_t CopyPoints (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; virtual Bool_t DoMerge (const TGraph *g);  protected function to perform the merge operation of a graph ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; virtual void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE);  Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Upda",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:31369,Energy Efficiency,allocate,allocate,31369," to fX and fY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; virtual Bool_t DoMerge (const TGraph *g);  protected function to perform the merge operation of a graph ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; virtual void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE);  Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Update the fX and fY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TF1 * fF {nullptr};  theoretical density function, if specified ;  ; Int_t fNy0 {0};  size of the fY0 dataset ;  ; Double_t fXq1 {0.};  x1 coordinate of the interquartile line ;  ; Double_t fXq2 {0.};  x2 coordinate of the interquartile line ;  ; Double_t * fY0 {nullptr};  ! second dataset, if specified ;  ; Double_t fYq1 {0.};  y1 coordinate of the interquartile line ;  ; Double_t fYq2 {0.};  y2 coordinate of the interquartile line ;  ;  Protected Attri",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:18335,Integrability,message,message,18335,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:18756,Integrability,message,message,18756,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:19414,Integrability,message,message,19414,"ms, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:22030,Integrability,message,message,22030,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:22221,Integrability,message,message,22221,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:4173,Modifiability,inherit,inherited,4173,"/section3/probplot.htm ; Definition at line 18 of file TGraphQQ.h. Public Member Functions;  TGraphQQ ();  default constructor ;  ;  TGraphQQ (Int_t n, Double_t *x);  Creates a quantile-quantile plot of dataset x. ;  ;  TGraphQQ (Int_t n, Double_t *x, TF1 *f);  Creates a quantile-quantile plot of dataset x against function f. ;  ;  TGraphQQ (Int_t nx, Double_t *x, Int_t ny, Double_t *y);  Creates a quantile-quantile plot of dataset x against dataset y Parameters nx and ny are respective array sizes. ;  ;  ~TGraphQQ () override;  Destroys a TGraphQQ. ;  ; TF1 * GetF () const;  ; Double_t GetXq1 () const;  ; Double_t GetXq2 () const;  ; Double_t GetYq1 () const;  ; Double_t GetYq2 () const;  ; TClass * IsA () const override;  ; void SetFunction (TF1 *f);  Sets the theoretical distribution function (density!) and computes its quantiles. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor for this graph. ;  ;  TGraph (const TH1 *h);  Graph constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraph (const TVectorD &vx, const TVectorD &vy);  Graph constructor with two vectors of doubles in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of points in the graph is the minimum of number of points in vx and vy. ;  ;  TGraph (const TVectorF &vx, const TVectorF &vy);  Graph constructor with two vectors of floats in input A graph is build with the X coordinates taken from vx and Y coord from vy The number of poin",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:15707,Modifiability,inherit,inherited,15707,"er i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:17172,Modifiability,inherit,inherited,17172,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:17965,Modifiability,inherit,inheritance,17965,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:19512,Modifiability,inherit,inherits,19512,"ameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:19629,Modifiability,inherit,inherits,19629,"method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:22528,Modifiability,inherit,inherited,22528,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:24033,Modifiability,inherit,inherited,24033,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:25288,Modifiability,inherit,inherited,25288,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:26902,Modifiability,inherit,inherited,26902,"this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGraph; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Me",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:27767,Modifiability,inherit,inherited,27767," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:27977,Modifiability,inherit,inherited,27977," static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t CompareArg (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ;  ; static Bool_t CompareRadius (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if point number ""left""'s distance to origin is bigger than that of point number ""right"". ;  ; static Bool_t CompareX (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fX[left] > fX[right]. Can be used by Sort. ;  ; static Bool_t CompareY (const TGraph *gr, Int_t left, Int_t right);  Return kTRUE if fY[left] > fY[right]. Can be used by Sort. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static T",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:28495,Modifiability,inherit,inherited,28495,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void MakeFunctionQuantiles ();  Computes quantiles of theoretical distribution function. ;  ; void MakeQuantiles ();  When sample sizes are not equal, computes quantiles of the bigger sample by linear interpolation. ;  ; void Quartiles ();  compute quartiles a quartile is a 25 per cent or 75 per cent quantile ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** Al",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:28707,Modifiability,inherit,inherited,28707,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void MakeFunctionQuantiles ();  Computes quantiles of theoretical distribution function. ;  ; void MakeQuantiles ();  When sample sizes are not equal, computes quantiles of the bigger sample by linear interpolation. ;  ; void Quartiles ();  compute quartiles a quartile is a 25 per cent or 75 per cent quantile ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** Al",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:28919,Modifiability,inherit,inherited,28919,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void MakeFunctionQuantiles ();  Computes quantiles of theoretical distribution function. ;  ; void MakeQuantiles ();  When sample sizes are not equal, computes quantiles of the bigger sample by linear interpolation. ;  ; void Quartiles ();  compute quartiles a quartile is a 25 per cent or 75 per cent quantile ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** Al",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:29794,Modifiability,inherit,inherited,29794," ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void MakeFunctionQuantiles ();  Computes quantiles of theoretical distribution function. ;  ; void MakeQuantiles ();  When sample sizes are not equal, computes quantiles of the bigger sample by linear interpolation. ;  ; void Quartiles ();  compute quartiles a quartile is a 25 per cent or 75 per cent quantile ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; virtual void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; virtual Bool_t CopyPoints (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; virtual Bool_t DoMerge (const TGraph *g);  protected function to perform the merge operation of a graph ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; virtual void FillZero (Int_t begin, Int_t end, ",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:31694,Modifiability,inherit,inherited,31694,"id FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE);  Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Update the fX and fY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TF1 * fF {nullptr};  theoretical density function, if specified ;  ; Int_t fNy0 {0};  size of the fY0 dataset ;  ; Double_t fXq1 {0.};  x1 coordinate of the interquartile line ;  ; Double_t fXq2 {0.};  x2 coordinate of the interquartile line ;  ; Double_t * fY0 {nullptr};  ! second dataset, if specified ;  ; Double_t fYq1 {0.};  y1 coordinate of the interquartile line ;  ; Double_t fYq2 {0.};  y2 coordinate of the interquartile line ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:32363,Modifiability,inherit,inherited,32363,"opy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Update the fX and fY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TF1 * fF {nullptr};  theoretical density function, if specified ;  ; Int_t fNy0 {0};  size of the fY0 dataset ;  ; Double_t fXq1 {0.};  x1 coordinate of the interquartile line ;  ; Double_t fXq2 {0.};  x2 coordinate of the interquartile line ;  ; Double_t * fY0 {nullptr};  ! second dataset, if specified ;  ; Double_t fYq1 {0.};  y1 coordinate of the interquartile line ;  ; Double_t fYq2 {0.};  y2 coordinate of the interquartile line ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:32942,Modifiability,inherit,inherited,32942,"n, if specified ;  ; Int_t fNy0 {0};  size of the fY0 dataset ;  ; Double_t fXq1 {0.};  x1 coordinate of the interquartile line ;  ; Double_t fXq2 {0.};  x2 coordinate of the interquartile line ;  ; Double_t * fY0 {nullptr};  ! second dataset, if specified ;  ; Double_t fYq1 {0.};  y1 coordinate of the interquartile line ;  ; Double_t fYq2 {0.};  y2 coordinate of the interquartile line ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:33024,Modifiability,inherit,inherited,33024,"n, if specified ;  ; Int_t fNy0 {0};  size of the fY0 dataset ;  ; Double_t fXq1 {0.};  x1 coordinate of the interquartile line ;  ; Double_t fXq2 {0.};  x2 coordinate of the interquartile line ;  ; Double_t * fY0 {nullptr};  ! second dataset, if specified ;  ; Double_t fYq1 {0.};  y1 coordinate of the interquartile line ;  ; Double_t fYq2 {0.};  y2 coordinate of the interquartile line ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:33185,Modifiability,inherit,inherited,33185,"d ;  ; Double_t fYq1 {0.};  y1 coordinate of the interquartile line ;  ; Double_t fYq2 {0.};  y2 coordinate of the interquartile line ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClean",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:33318,Modifiability,inherit,inherited,33318," ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoConte",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:33512,Modifiability,inherit,inherited,33512,"dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:33781,Modifiability,inherit,inherited,33781," X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphQQ.h>. Inheritance diagram for TGraphQQ:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphQQ() [1/4]. TGraphQQ",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:34422,Modifiability,inherit,inherited,34422,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphQQ.h>. Inheritance diagram for TGraphQQ:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphQQ() [1/4]. TGraphQQ::TGraphQQ ; (; ). default constructor ; Definition at line 92 of file TGraphQQ.cxx. ◆ TGraphQQ() [2/4]. TGraphQQ::TGraphQQ ; (; Int_t ; n, . Double_t * ; x . ). Creates a quantile-quantile plot of dataset x. ; Theoretical distribution function can be defined later by SetFunction method ; Definition at line 100 of file TGraphQQ.cxx. ◆ TGraphQQ() [3/4]. TGraphQQ::TGraphQQ ; (; Int_t ; n, . Double_t * ; x, . TF1 * ; f . ). Creates a quantile-quantile plot of dataset x against function f. ; Definition at line 113 of file TGraphQQ.cxx. ◆ TGraphQQ() [4/4]. TGraphQQ::TGraphQQ ; (; Int_t ; nx, . Double_t * ; x, . Int_t ; ny, . Double_t * ; y . ). Creates a",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:34528,Modifiability,inherit,inherited,34528,"nherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphQQ.h>. Inheritance diagram for TGraphQQ:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphQQ() [1/4]. TGraphQQ::TGraphQQ ; (; ). default constructor ; Definition at line 92 of file TGraphQQ.cxx. ◆ TGraphQQ() [2/4]. TGraphQQ::TGraphQQ ; (; Int_t ; n, . Double_t * ; x . ). Creates a quantile-quantile plot of dataset x. ; Theoretical distribution function can be defined later by SetFunction method ; Definition at line 100 of file TGraphQQ.cxx. ◆ TGraphQQ() [3/4]. TGraphQQ::TGraphQQ ; (; Int_t ; n, . Double_t * ; x, . TF1 * ; f . ). Creates a quantile-quantile plot of dataset x against function f. ; Definition at line 113 of file TGraphQQ.cxx. ◆ TGraphQQ() [4/4]. TGraphQQ::TGraphQQ ; (; Int_t ; nx, . Double_t * ; x, . Int_t ; ny, . Double_t * ; y . ). Creates a",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:30558,Performance,perform,perform,30558,"antiles of the bigger sample by linear interpolation. ;  ; void Quartiles ();  compute quartiles a quartile is a 25 per cent or 75 per cent quantile ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; virtual void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; virtual Bool_t CopyPoints (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; virtual Bool_t DoMerge (const TGraph *g);  protected function to perform the merge operation of a graph ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; virtual void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE);  Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Upda",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:16575,Security,hash,hash,16575," Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:12286,Testability,log,logx,12286,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void Print (Option_t *chopt="""") const override;  Print graph values. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint R",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:12306,Testability,log,logy,12306,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void Print (Option_t *chopt="""") const override;  Print graph values. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint R",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:12372,Testability,log,log,12372,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void Print (Option_t *chopt="""") const override;  Print graph values. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint R",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:12416,Testability,log,logarithmic,12416,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void Print (Option_t *chopt="""") const override;  Print graph values. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint R",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphQQ.html:12457,Testability,log,log,12457,"nt, Double_t x, Double_t y);  Insert a new point with coordinates (x,y) before the point number ipoint. ;  ; virtual Double_t Integral (Int_t first=0, Int_t last=-1) const;  Integrate the TGraph data within a given (index) range. ;  ; virtual Bool_t IsEditable () const;  ; virtual Bool_t IsHighlight () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise. ;  ; virtual void LeastSquareFit (Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0);  Least squares polynomial fitting without weights. ;  ; virtual void LeastSquareLinearFit (Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0);  Least square linear fit without weights. ;  ; virtual Int_t Merge (TCollection *list);  Adds all graphs from the collection to this graph. ;  ; virtual void MovePoints (Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE);  Move all graph points on specified values dx,dy If log argument specified, calculation done in logarithmic scale like: new_value = exp( log(old_value) + delta );. ;  ; TGraph & operator= (const TGraph &);  Equal operator for this graph. ;  ; void Paint (Option_t *chopt="""") override;  Draw this graph with its current attributes. ;  ; void PaintGraph (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a graph. ;  ; void PaintGrapHist (Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt);  Draw the (x,y) as a histogram. ;  ; virtual void PaintStats (TF1 *fit);  Draw the stats. ;  ; void Print (Option_t *chopt="""") const override;  Print graph values. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual Int_t RemovePoint ();  Delete point close to the mouse position Returns index of removed point (or -1 if nothing was changed) ;  ; virtual Int_t RemovePoint (Int_t ipoint);  Delete point number ipoint R",MatchSource.WIKI,doc/master/classTGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html
https://root.cern/doc/master/classTGraphSmooth.html:5129,Availability,error,error,5129,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html
