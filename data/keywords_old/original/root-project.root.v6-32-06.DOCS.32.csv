id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:40599,Availability,redundant,redundant,40599,"------------------------------------------------------===//. The hot loop of 256.bzip2 contains code that looks a bit like this:. int foo(char *P, char *Q, int x, int y) {; if (P[0] != Q[0]); return P[0] < Q[0];; if (P[1] != Q[1]); return P[1] < Q[1];; if (P[2] != Q[2]); return P[2] < Q[2];; return P[3] < Q[3];; }. In the real code, we get a lot more wrong than this. However, even in this; code we generate:. _foo: ## @foo; ## %bb.0: ## %entry; 	movb	(%rsi), %al; 	movb	(%rdi), %cl; 	cmpb	%al, %cl; 	je	LBB0_2; LBB0_1: ## %if.then; 	cmpb	%al, %cl; 	jmp	LBB0_5; LBB0_2: ## %if.end; 	movb	1(%rsi), %al; 	movb	1(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.3: ## %if.end38; 	movb	2(%rsi), %al; 	movb	2(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.4: ## %if.end60; 	movb	3(%rdi), %al; 	cmpb	3(%rsi), %al; LBB0_5: ## %if.end60; 	setl	%al; 	movzbl	%al, %eax; 	ret. Note that we generate jumps to LBB0_1 which does a redundant compare. The; redundant compare also forces the register values to be live, which prevents; folding one of the loads into the compare. In contrast, GCC 4.2 produces:. _foo:; 	movzbl	(%rsi), %eax; 	cmpb	%al, (%rdi); 	jne	L10; L12:; 	movzbl	1(%rsi), %eax; 	cmpb	%al, 1(%rdi); 	jne	L10; 	movzbl	2(%rsi), %eax; 	cmpb	%al, 2(%rdi); 	jne	L10; 	movzbl	3(%rdi), %eax; 	cmpb	3(%rsi), %al; L10:; 	setl	%al; 	movzbl	%al, %eax; 	ret. which is ""perfect"". //===---------------------------------------------------------------------===//. For the branch in the following code:; int a();; int b(int x, int y) {; if (x & (1<<(y&7))); return a();; return y;; }. We currently generate:; 	movb	%sil, %al; 	andb	$7, %al; 	movzbl	%al, %eax; 	btl	%eax, %edi; 	jae	.LBB0_2. movl+andl would be shorter than the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:280,Deployability,patch,patches,280,"//===---------------------------------------------------------------------===//; // Random ideas for the X86 backend.; //===---------------------------------------------------------------------===//. Improvements to the multiply -> shift/add algorithm:; http://gcc.gnu.org/ml/gcc-patches/2004-08/msg01590.html. //===---------------------------------------------------------------------===//. Improve code like this (occurs fairly frequently, e.g. in LLVM):; long long foo(int x) { return 1LL << x; }. http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01109.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01128.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01136.html. Another useful one would be ~0ULL >> X and ~0ULL << X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------=",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:527,Deployability,patch,patches,527,"//===---------------------------------------------------------------------===//; // Random ideas for the X86 backend.; //===---------------------------------------------------------------------===//. Improvements to the multiply -> shift/add algorithm:; http://gcc.gnu.org/ml/gcc-patches/2004-08/msg01590.html. //===---------------------------------------------------------------------===//. Improve code like this (occurs fairly frequently, e.g. in LLVM):; long long foo(int x) { return 1LL << x; }. http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01109.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01128.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01136.html. Another useful one would be ~0ULL >> X and ~0ULL << X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------=",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:584,Deployability,patch,patches,584,"//===---------------------------------------------------------------------===//; // Random ideas for the X86 backend.; //===---------------------------------------------------------------------===//. Improvements to the multiply -> shift/add algorithm:; http://gcc.gnu.org/ml/gcc-patches/2004-08/msg01590.html. //===---------------------------------------------------------------------===//. Improve code like this (occurs fairly frequently, e.g. in LLVM):; long long foo(int x) { return 1LL << x; }. http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01109.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01128.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01136.html. Another useful one would be ~0ULL >> X and ~0ULL << X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------=",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:641,Deployability,patch,patches,641,"//===---------------------------------------------------------------------===//; // Random ideas for the X86 backend.; //===---------------------------------------------------------------------===//. Improvements to the multiply -> shift/add algorithm:; http://gcc.gnu.org/ml/gcc-patches/2004-08/msg01590.html. //===---------------------------------------------------------------------===//. Improve code like this (occurs fairly frequently, e.g. in LLVM):; long long foo(int x) { return 1LL << x; }. http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01109.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01128.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01136.html. Another useful one would be ~0ULL >> X and ~0ULL << X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------=",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:1071,Deployability,patch,patches,1071,"/; // Random ideas for the X86 backend.; //===---------------------------------------------------------------------===//. Improvements to the multiply -> shift/add algorithm:; http://gcc.gnu.org/ml/gcc-patches/2004-08/msg01590.html. //===---------------------------------------------------------------------===//. Improve code like this (occurs fairly frequently, e.g. in LLVM):; long long foo(int x) { return 1LL << x; }. http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01109.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01128.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01136.html. Another useful one would be ~0ULL >> X and ~0ULL << X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:2062,Deployability,update,update,2062,"rom http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===------------------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:1716,Energy Efficiency,reduce,reduced,1716,"<< X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is writ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:3243,Energy Efficiency,efficient,efficient,3243,"Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===---------------------------------------------------------------------===//. In many cases, LLVM generates code like this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= (1 << bit);; }; void clearbit(int *target, int bit) {; *target &= ~(1 << bit);; }. //===---------------------------------------------------------------------===//. Instead of the following for memset char*, 1, 10:. 	movl $16843009, 4(%edx); 	movl $16843009, (%edx); 	movw $257, 8(%edx). It might be better to generate. 	movl $16843009, %eax; 	movl %eax, 4(%edx); 	movl %eax, (%edx); 	movw al, 8(%edx); 	; when we can spare a register. It reduces code size. //===---------------------------------------------------------------------===//. Evaluate what the best way to",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:4102,Energy Efficiency,reduce,reduces,4102," this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= (1 << bit);; }; void clearbit(int *target, int bit) {; *target &= ~(1 << bit);; }. //===---------------------------------------------------------------------===//. Instead of the following for memset char*, 1, 10:. 	movl $16843009, 4(%edx); 	movl $16843009, (%edx); 	movw $257, 8(%edx). It might be better to generate. 	movl $16843009, %eax; 	movl %eax, 4(%edx); 	movl %eax, (%edx); 	movw al, 8(%edx); 	; when we can spare a register. It reduces code size. //===---------------------------------------------------------------------===//. Evaluate what the best way to codegen sdiv X, (2^C) is. For X/8, we currently; get this:. define i32 @test1(i32 %X) {; %Y = sdiv i32 %X, 8; ret i32 %Y; }. _test1:; movl 4(%esp), %eax; movl %eax, %ecx; sarl $31, %ecx; shrl $29, %ecx; addl %ecx, %eax; sarl $3, %eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===----------------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:8767,Energy Efficiency,reduce,reduce,8767,"//. It appears gcc place string data with linkonce linkage in; .section __TEXT,__const_coal,coalesced instead of; .section __DATA,__const_coal,coalesced.; Take a look at darwin.h, there are other Darwin assembler directives that we; do not make use of. //===---------------------------------------------------------------------===//. define i32 @foo(i32* %a, i32 %t) {; entry:; 	br label %cond_true. cond_true:		; preds = %cond_true, %entry; 	%x.0.0 = phi i32 [ 0, %entry ], [ %tmp9, %cond_true ]		; <i32> [#uses=3]; 	%t_addr.0.0 = phi i32 [ %t, %entry ], [ %tmp7, %cond_true ]		; <i32> [#uses=1]; 	%tmp2 = getelementptr i32* %a, i32 %x.0.0		; <i32*> [#uses=1]; 	%tmp3 = load i32* %tmp2		; <i32> [#uses=1]; 	%tmp5 = add i32 %t_addr.0.0, %x.0.0		; <i32> [#uses=1]; 	%tmp7 = add i32 %tmp5, %tmp3		; <i32> [#uses=2]; 	%tmp9 = add i32 %x.0.0, 1		; <i32> [#uses=2]; 	%tmp = icmp sgt i32 %tmp9, 39		; <i1> [#uses=1]; 	br i1 %tmp, label %bb12, label %cond_true. bb12:		; preds = %cond_true; 	ret i32 %tmp7; }; is pessimized by -loop-reduce and -indvars. //===---------------------------------------------------------------------===//. u32 to float conversion improvement:. float uint32_2_float( unsigned u ) {; float fl = (int) (u & 0xffff);; float fh = (int) (u >> 16);; fh *= 0x1.0p16f;; return fh + fl;; }. 00000000 subl $0x04,%esp; 00000003 movl 0x08(%esp,1),%eax; 00000007 movl %eax,%ecx; 00000009 shrl $0x10,%ecx; 0000000c cvtsi2ss %ecx,%xmm0; 00000010 andl $0x0000ffff,%eax; 00000015 cvtsi2ss %eax,%xmm1; 00000019 mulss 0x00000078,%xmm0; 00000021 addss %xmm1,%xmm0; 00000025 movss %xmm0,(%esp,1); 0000002a flds (%esp,1); 0000002d addl $0x04,%esp; 00000030 ret. //===---------------------------------------------------------------------===//. When using fastcc abi, align stack slot of argument of type double on 8 byte; boundary to improve performance. //===---------------------------------------------------------------------===//. GCC's ix86_expand_int_movcc function (in i386.c) has a ton of inte",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:21452,Energy Efficiency,schedul,scheduling,21452," 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //===---------------------------------------------------------------------===//. This code:; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), %eax; 	orl	$255, %eax; 	ret. //===---------------------------------------------------------------------===//. We're codegen'ing multiply of long longs inefficiently:. unsigned long long LLM(unsigned long long arg1, unsigned long long arg2) {; return arg1 * arg2;; }. We compile to (fomit-frame-pointer):. _LLM:; 	pushl	%esi; 	movl	8(%esp), %ecx; 	movl	16(%esp), %esi; 	movl	%esi, %eax; 	mull	%ecx; 	imull	12(%esp), %esi; 	addl	%edx, %esi; 	imull	20(%esp), %ecx; 	movl	%esi, %edx; 	addl	%ecx, %edx; 	popl	%esi; 	ret. This looks like a scheduling deficiency and lack of remat of the load from; the argument area. ICC apparently produces:. movl 8(%esp), %ecx; imull 12(%esp), %ecx; movl 16(%esp), %eax; imull 4(%esp), %eax ; addl %eax, %ecx ; movl 4(%esp), %eax; mull 12(%esp) ; addl %ecx, %edx; ret. Note that it remat'd loads from 4(esp) and 12(esp). See this GCC PR:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=17236. //===---------------------------------------------------------------------===//. We can fold a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:.",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:42526,Energy Efficiency,schedul,scheduled,42526,"the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = xmm0[1,0,0,0]; 	addss	%xmm1, %xmm0; 	ret. We could save an instruction here by commuting the addss. //===---------------------------------------------------------------------===//. This (from PR9661):. float clamp_float(float a) {; if (a > 1.0f); return 1.0f;; else if (a < 0.0f); return 0.0f;; else; return a;; }. Could compile to:. clamp_float: # @clamp_float; movss .LCPI0_0(%rip), %xmm1; minss %xmm1, %xmm0; pxor %xmm1, %xmm1; maxss %xmm1, %xmm0; ret. with -ffast-math. //===---------------------------------------------------------------------===//. This function (from PR9803):. int clamp2(int a) {; if (a > 5); a = 5;; if (a < 0) ; return 0;; return a;; }. Compiles to:. _clamp2: ## @clamp2; pushq %rbp; movq %rsp, %rbp; cmpl $5, %edi; movl $5, %ecx; cmovlel %edi, %ecx; testl %ecx, %ecx; movl $0, %eax; cmovnsl %ecx, %eax; popq %rbp; ret. The move of 0 could be scheduled above the test to make it is xor reg,reg. //===---------------------------------------------------------------------===//. GCC PR48986. We currently compile this:. void bar(void);; void yyy(int* p) {; if (__sync_fetch_and_add(p, -1) == 1); bar();; }. into:; 	movl	$-1, %eax; 	lock; 	xaddl	%eax, (%rdi); 	cmpl	$1, %eax; 	je	LBB0_2. Instead we could generate:. 	lock; 	dec %rdi; 	je LBB0_2. The trick is to match ""fetch_and_add(X, -C) == C"". //===---------------------------------------------------------------------===//. unsigned t(unsigned a, unsigned b) {; return a <= b ? 5 : -5;; }. We generate:; 	movl	$5, %ecx; 	cmpl	%esi, %edi; 	movl	$-5, %eax; 	cmovbel	%ecx, %eax. GCC:; 	cmpl	%edi, %esi; 	sbbl	%eax, %eax; 	andl	$-10, %eax; 	addl	$5, %eax. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12174,Integrability,wrap,wrapped,12174,">. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. /",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12372,Integrability,wrap,wrapped,12372,"----------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog lik",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:6267,Modifiability,extend,extend,6267,"--------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:6296,Modifiability,extend,extend,6296,"--------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:19053,Modifiability,variab,variables,19053,"uments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stu",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:20090,Modifiability,rewrite,rewrite,20090,"write each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //===---------------------------------------------------------------------===//. This code:; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), %eax; 	orl	$255, %eax; 	ret. //===---------------------------------------------------------------------===//. We're codegen'ing multiply of long longs inefficiently:. unsigned long long LLM(un",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:20127,Modifiability,variab,variable,20127,"write each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //===---------------------------------------------------------------------===//. This code:; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), %eax; 	orl	$255, %eax; 	ret. //===---------------------------------------------------------------------===//. We're codegen'ing multiply of long longs inefficiently:. unsigned long long LLM(un",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:2680,Performance,load,load,2680,"and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===---------------------------------------------------------------------===//. In many cases, LLVM generates code like this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:2739,Performance,load,load,2739,"register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===---------------------------------------------------------------------===//. In many cases, LLVM generates code like this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= (1 << bit);; }; void clearbit(int *target, int bit) {; *targ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:2816,Performance,load,load,2816,"blem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===---------------------------------------------------------------------===//. In many cases, LLVM generates code like this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= (1 << bit);; }; void clearbit(int *target, int bit) {; *target &= ~(1 << bit);; }. //===----------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:2902,Performance,load,load,2902,"1minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===---------------------------------------------------------------------===//. In many cases, LLVM generates code like this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= (1 << bit);; }; void clearbit(int *target, int bit) {; *target &= ~(1 << bit);; }. //===---------------------------------------------------------------------===//. Instead of the following for memset char*, 1, 10:. 	movl $16843009, 4(%edx); 	movl $",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:4968,Performance,tune,tuned,4968,"(%edx); 	movw $257, 8(%edx). It might be better to generate. 	movl $16843009, %eax; 	movl %eax, 4(%edx); 	movl %eax, (%edx); 	movw al, 8(%edx); 	; when we can spare a register. It reduces code size. //===---------------------------------------------------------------------===//. Evaluate what the best way to codegen sdiv X, (2^C) is. For X/8, we currently; get this:. define i32 @test1(i32 %X) {; %Y = sdiv i32 %X, 8; ret i32 %Y; }. _test1:; movl 4(%esp), %eax; movl %eax, %ecx; sarl $31, %ecx; shrl $29, %ecx; addl %ecx, %eax; sarl $3, %eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %a",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5346,Performance,load,load,5346," i32 %X, 8; ret i32 %Y; }. _test1:; movl 4(%esp), %eax; movl %eax, %ecx; sarl $31, %ecx; shrl $29, %ecx; addl %ecx, %eax; sarl $3, %eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5460,Performance,perform,perform,5460,"%eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5499,Performance,optimiz,optimizer-eval,5499,"of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http:/",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:7113,Performance,load,load,7113,"ber of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA first since the LEA matching code does some; estimate to determine whether the match is profitable. However, if we care more about code size, then imull is better. It's two bytes; shorter than movl + leal. On a Pentium M, both variants have the same characteristics with regard; to throughput; however, the multiplication has a latency of four cycles, as; opposed to two cycles for the movl+lea variant. //===---------------------------------------------------------------------===//. It appears gcc place string data with linkonce linkage in; .section __TEXT,__const_coal,coalesced instead of; .section __DATA,__const_coal,coalesced.; Take a look at darwin.h, there are other Darwin assembler directives that we; do not make use of. //===---------------------------------------------------------------------===//. define i32 @foo(i32* %a, i32 %t) ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:7542,Performance,throughput,throughput,7542,"1150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA first since the LEA matching code does some; estimate to determine whether the match is profitable. However, if we care more about code size, then imull is better. It's two bytes; shorter than movl + leal. On a Pentium M, both variants have the same characteristics with regard; to throughput; however, the multiplication has a latency of four cycles, as; opposed to two cycles for the movl+lea variant. //===---------------------------------------------------------------------===//. It appears gcc place string data with linkonce linkage in; .section __TEXT,__const_coal,coalesced instead of; .section __DATA,__const_coal,coalesced.; Take a look at darwin.h, there are other Darwin assembler directives that we; do not make use of. //===---------------------------------------------------------------------===//. define i32 @foo(i32* %a, i32 %t) {; entry:; 	br label %cond_true. cond_true:		; preds = %cond_true, %entry; 	%x.0.0 = phi i32 [ 0, %entry ], [ %tmp9, %cond_true ]		; <i32> [#uses=3]; 	%t_addr.0.0 = phi i32 [ %t, %entry ], [ %tmp7, %cond_true ]		; <i32> [#uses=1]; 	%tmp2 = getelementptr i32* %a, i32 %x.0.0		; <i32*> [#uses=1]; 	%tmp3 = load i32* %tmp2		; <i32> [#uses=1]; 	%tmp5 = add i32 %t_addr.0.0, %x.0.0		; <i32> [#uses=1]; 	%tmp7 = add i32 %tmp5, %tmp3		; <i32> [#uses=2]; 	%tmp9 = ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:7588,Performance,latency,latency,7588,"1150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA first since the LEA matching code does some; estimate to determine whether the match is profitable. However, if we care more about code size, then imull is better. It's two bytes; shorter than movl + leal. On a Pentium M, both variants have the same characteristics with regard; to throughput; however, the multiplication has a latency of four cycles, as; opposed to two cycles for the movl+lea variant. //===---------------------------------------------------------------------===//. It appears gcc place string data with linkonce linkage in; .section __TEXT,__const_coal,coalesced instead of; .section __DATA,__const_coal,coalesced.; Take a look at darwin.h, there are other Darwin assembler directives that we; do not make use of. //===---------------------------------------------------------------------===//. define i32 @foo(i32* %a, i32 %t) {; entry:; 	br label %cond_true. cond_true:		; preds = %cond_true, %entry; 	%x.0.0 = phi i32 [ 0, %entry ], [ %tmp9, %cond_true ]		; <i32> [#uses=3]; 	%t_addr.0.0 = phi i32 [ %t, %entry ], [ %tmp7, %cond_true ]		; <i32> [#uses=1]; 	%tmp2 = getelementptr i32* %a, i32 %x.0.0		; <i32*> [#uses=1]; 	%tmp3 = load i32* %tmp2		; <i32> [#uses=1]; 	%tmp5 = add i32 %t_addr.0.0, %x.0.0		; <i32> [#uses=1]; 	%tmp7 = add i32 %tmp5, %tmp3		; <i32> [#uses=2]; 	%tmp9 = ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:8412,Performance,load,load,8412,"'s two bytes; shorter than movl + leal. On a Pentium M, both variants have the same characteristics with regard; to throughput; however, the multiplication has a latency of four cycles, as; opposed to two cycles for the movl+lea variant. //===---------------------------------------------------------------------===//. It appears gcc place string data with linkonce linkage in; .section __TEXT,__const_coal,coalesced instead of; .section __DATA,__const_coal,coalesced.; Take a look at darwin.h, there are other Darwin assembler directives that we; do not make use of. //===---------------------------------------------------------------------===//. define i32 @foo(i32* %a, i32 %t) {; entry:; 	br label %cond_true. cond_true:		; preds = %cond_true, %entry; 	%x.0.0 = phi i32 [ 0, %entry ], [ %tmp9, %cond_true ]		; <i32> [#uses=3]; 	%t_addr.0.0 = phi i32 [ %t, %entry ], [ %tmp7, %cond_true ]		; <i32> [#uses=1]; 	%tmp2 = getelementptr i32* %a, i32 %x.0.0		; <i32*> [#uses=1]; 	%tmp3 = load i32* %tmp2		; <i32> [#uses=1]; 	%tmp5 = add i32 %t_addr.0.0, %x.0.0		; <i32> [#uses=1]; 	%tmp7 = add i32 %tmp5, %tmp3		; <i32> [#uses=2]; 	%tmp9 = add i32 %x.0.0, 1		; <i32> [#uses=2]; 	%tmp = icmp sgt i32 %tmp9, 39		; <i1> [#uses=1]; 	br i1 %tmp, label %bb12, label %cond_true. bb12:		; preds = %cond_true; 	ret i32 %tmp7; }; is pessimized by -loop-reduce and -indvars. //===---------------------------------------------------------------------===//. u32 to float conversion improvement:. float uint32_2_float( unsigned u ) {; float fl = (int) (u & 0xffff);; float fh = (int) (u >> 16);; fh *= 0x1.0p16f;; return fh + fl;; }. 00000000 subl $0x04,%esp; 00000003 movl 0x08(%esp,1),%eax; 00000007 movl %eax,%ecx; 00000009 shrl $0x10,%ecx; 0000000c cvtsi2ss %ecx,%xmm0; 00000010 andl $0x0000ffff,%eax; 00000015 cvtsi2ss %eax,%xmm1; 00000019 mulss 0x00000078,%xmm0; 00000021 addss %xmm1,%xmm0; 00000025 movss %xmm0,(%esp,1); 0000002a flds (%esp,1); 0000002d addl $0x04,%esp; 00000030 ret. //===--------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:9581,Performance,perform,performance,9581," <i32> [#uses=2]; 	%tmp9 = add i32 %x.0.0, 1		; <i32> [#uses=2]; 	%tmp = icmp sgt i32 %tmp9, 39		; <i1> [#uses=1]; 	br i1 %tmp, label %bb12, label %cond_true. bb12:		; preds = %cond_true; 	ret i32 %tmp7; }; is pessimized by -loop-reduce and -indvars. //===---------------------------------------------------------------------===//. u32 to float conversion improvement:. float uint32_2_float( unsigned u ) {; float fl = (int) (u & 0xffff);; float fh = (int) (u >> 16);; fh *= 0x1.0p16f;; return fh + fl;; }. 00000000 subl $0x04,%esp; 00000003 movl 0x08(%esp,1),%eax; 00000007 movl %eax,%ecx; 00000009 shrl $0x10,%ecx; 0000000c cvtsi2ss %ecx,%xmm0; 00000010 andl $0x0000ffff,%eax; 00000015 cvtsi2ss %eax,%xmm1; 00000019 mulss 0x00000078,%xmm0; 00000021 addss %xmm1,%xmm0; 00000025 movss %xmm0,(%esp,1); 0000002a flds (%esp,1); 0000002d addl $0x04,%esp; 00000030 ret. //===---------------------------------------------------------------------===//. When using fastcc abi, align stack slot of argument of type double on 8 byte; boundary to improve performance. //===---------------------------------------------------------------------===//. GCC's ix86_expand_int_movcc function (in i386.c) has a ton of interesting; simplifications for integer ""x cmp y ? a : b"". //===---------------------------------------------------------------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; bound",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:10522,Performance,cache,cacheline,10522," abi, align stack slot of argument of type double on 8 byte; boundary to improve performance. //===---------------------------------------------------------------------===//. GCC's ix86_expand_int_movcc function (in i386.c) has a ton of interesting; simplifications for integer ""x cmp y ? a : b"". //===---------------------------------------------------------------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundary. In addition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;;",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:10741,Performance,cache,cacheline,10741,"386.c) has a ton of interesting; simplifications for integer ""x cmp y ? a : b"". //===---------------------------------------------------------------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundary. In addition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===----------------------------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:10787,Performance,cache,cache,10787,"--------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundary. In addition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:10944,Performance,cache,cacheline,10944,"--------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundary. In addition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:11435,Performance,load,load,11435,"------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundary. In addition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:13018,Performance,load,load,13018,"dl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:14444,Performance,load,load,14444," faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl; testb %cl, %al; jne LBB1_5 # UnifiedReturnBlock; LBB1_1: # cond_true. it would be better to replace the last four instructions with:. 	jp LBB1_1; 	je LBB1_5; LBB1_1:. We also codegen the inner ?: into a diamond:. cvtss2sd LCPI1_0(%rip), %xmm2; cvtss2sd LCPI1_1(%rip), %xmm3; ucomisd %xmm1, %xmm0; ja LBB1_3 # cond_true; LBB1_2: # cond_true; movapd %xmm3, %xmm2; LBB1_3: # cond_true; movapd %xmm2, %xmm0; ret. We should sink the load into xmm3 into the LBB1_2 block. This should; be pretty easy, and will nuke all the copies. //===---------------------------------------------------------------------===//. This:; #include <algorithm>; inline std::pair<unsigned, bool> full_add(unsigned a, unsigned b); { return std::make_pair(a + b, a + b < a); }; bool no_overflow(unsigned a, unsigned b); { return !full_add(a, b).second; }. Should compile to:; 	addl	%esi, %edi; 	setae	%al; 	movzbl	%al, %eax; 	ret. on x86-64, instead of the rather stupid-looking:; 	addl	%esi, %edi; 	setb	%al; 	xorb	$1, %al; 	movzbl	%al, %eax; 	ret. //===---------------------------------------------------------------------===//. The following code:. bb114.preheader:		; preds = %cond_next94; 	%tmp231232 = sext i16 %tmp62 to i32		; <i32> [#uses=1]; 	%tmp233 = sub i32 32, %tmp231232		; <i32> [#uses=1]; 	%tmp245246 = sext i16 %tmp65 to i32		; <i32> [#uses=1]; 	%tmp252253 = sext i16 %tmp68 to i32		; <i32> [#uses=1]; 	%tmp254 = sub i32 32, %tmp252253		; <i32> [#use",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:17998,Performance,optimiz,optimization,17998,"------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:18035,Performance,optimiz,optimization,18035,"------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:18143,Performance,optimiz,optimized,18143,"------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:18728,Performance,optimiz,optimizations,18728,"), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%es",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:21499,Performance,load,load,21499," 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //===---------------------------------------------------------------------===//. This code:; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), %eax; 	orl	$255, %eax; 	ret. //===---------------------------------------------------------------------===//. We're codegen'ing multiply of long longs inefficiently:. unsigned long long LLM(unsigned long long arg1, unsigned long long arg2) {; return arg1 * arg2;; }. We compile to (fomit-frame-pointer):. _LLM:; 	pushl	%esi; 	movl	8(%esp), %ecx; 	movl	16(%esp), %esi; 	movl	%esi, %eax; 	mull	%ecx; 	imull	12(%esp), %esi; 	addl	%edx, %esi; 	imull	20(%esp), %ecx; 	movl	%esi, %edx; 	addl	%ecx, %edx; 	popl	%esi; 	ret. This looks like a scheduling deficiency and lack of remat of the load from; the argument area. ICC apparently produces:. movl 8(%esp), %ecx; imull 12(%esp), %ecx; movl 16(%esp), %eax; imull 4(%esp), %eax ; addl %eax, %ecx ; movl 4(%esp), %eax; mull 12(%esp) ; addl %ecx, %edx; ret. Note that it remat'd loads from 4(esp) and 12(esp). See this GCC PR:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=17236. //===---------------------------------------------------------------------===//. We can fold a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:.",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:21737,Performance,load,loads,21737,":; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), %eax; 	orl	$255, %eax; 	ret. //===---------------------------------------------------------------------===//. We're codegen'ing multiply of long longs inefficiently:. unsigned long long LLM(unsigned long long arg1, unsigned long long arg2) {; return arg1 * arg2;; }. We compile to (fomit-frame-pointer):. _LLM:; 	pushl	%esi; 	movl	8(%esp), %ecx; 	movl	16(%esp), %esi; 	movl	%esi, %eax; 	mull	%ecx; 	imull	12(%esp), %esi; 	addl	%edx, %esi; 	imull	20(%esp), %ecx; 	movl	%esi, %edx; 	addl	%ecx, %edx; 	popl	%esi; 	ret. This looks like a scheduling deficiency and lack of remat of the load from; the argument area. ICC apparently produces:. movl 8(%esp), %ecx; imull 12(%esp), %ecx; movl 16(%esp), %eax; imull 4(%esp), %eax ; addl %eax, %ecx ; movl 4(%esp), %eax; mull 12(%esp) ; addl %ecx, %edx; ret. Note that it remat'd loads from 4(esp) and 12(esp). See this GCC PR:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=17236. //===---------------------------------------------------------------------===//. We can fold a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:. 	movsd	(%esp), %xmm0; 	xorpd	LCPI1_0, %xmm0; 	movsd	%xmm0, (%esp). Since we 'know' that this is a 'neg', we can actually ""fold"" the spill into; the neg/abs instruction, turning it into an *integer* operation, like this:. 	xorl 2147483648, [mem+4] ## 214748364",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:22310,Performance,load,load,22310,"%esp), %esi; 	addl	%edx, %esi; 	imull	20(%esp), %ecx; 	movl	%esi, %edx; 	addl	%ecx, %edx; 	popl	%esi; 	ret. This looks like a scheduling deficiency and lack of remat of the load from; the argument area. ICC apparently produces:. movl 8(%esp), %ecx; imull 12(%esp), %ecx; movl 16(%esp), %eax; imull 4(%esp), %eax ; addl %eax, %ecx ; movl 4(%esp), %eax; mull 12(%esp) ; addl %ecx, %edx; ret. Note that it remat'd loads from 4(esp) and 12(esp). See this GCC PR:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=17236. //===---------------------------------------------------------------------===//. We can fold a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:. 	movsd	(%esp), %xmm0; 	xorpd	LCPI1_0, %xmm0; 	movsd	%xmm0, (%esp). Since we 'know' that this is a 'neg', we can actually ""fold"" the spill into; the neg/abs instruction, turning it into an *integer* operation, like this:. 	xorl 2147483648, [mem+4] ## 2147483648 = (1 << 31). you could also use xorb, but xorl is less likely to lead to a partial register; stall. Here is a contrived testcase:. double a, b, c;; void test(double *P) {; double X = *P;; a = X;; bar();; X = -X;; b = X;; bar();; c = X;; }. //===---------------------------------------------------------------------===//. The generated code on x86 for checking for signed overflow on a multiply the; obvious way is much longer than it needs to be. int x(int a, int b) {; long long prod = (long long)a*b;; return prod > 0x7FFFFFFF || prod < (-0x7FFFFFFF-1);; }. See PR2053 for more det",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:25861,Performance,load,load,25861,"label %bb7, label %bb. bb:		; preds = %entry; 	%tmp6 = add i32 %b, %a		; <i32> [#uses=1]; 	ret i32 %tmp6. bb7:		; preds = %entry; 	%tmp10 = sub i32 %a, %c		; <i32> [#uses=1]; 	ret i32 %tmp10; }. to:. foo: # @foo; # %bb.0: # %entry; 	movl	4(%esp), %ecx; 	cmpb	$0, 16(%esp); 	je	.LBB0_2; # %bb.1: # %bb; 	movl	8(%esp), %eax; 	addl	%ecx, %eax; 	ret; .LBB0_2: # %bb7; 	movl	12(%esp), %edx; 	movl	%ecx, %eax; 	subl	%edx, %eax; 	ret. There's an obviously unnecessary movl in .LBB0_2, and we could eliminate a; couple more movls by putting 4(%esp) into %eax instead of %ecx. //===---------------------------------------------------------------------===//. Take the following:. target datalayout = ""e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-S128""; target triple = ""i386-apple-darwin8""; @in_exit.4870.b = internal global i1 false		; <i1*> [#uses=2]; define fastcc void @abort_gzip() noreturn nounwind {; entry:; 	%tmp.b.i = load i1* @in_exit.4870.b		; <i1> [#uses=1]; 	br i1 %tmp.b.i, label %bb.i, label %bb4.i; bb.i:		; preds = %entry; 	tail call void @exit( i32 1 ) noreturn nounwind ; 	unreachable; bb4.i:		; preds = %entry; 	store i1 true, i1* @in_exit.4870.b; 	tail call void @exit( i32 1 ) noreturn nounwind ; 	unreachable; }; declare void @exit(i32) noreturn nounwind . This compiles into:; _abort_gzip: ## @abort_gzip; ## %bb.0: ## %entry; 	subl	$12, %esp; 	movb	_in_exit.4870.b, %al; 	cmpb	$1, %al; 	jne	LBB0_2. We somehow miss folding the movb into the cmpb. //===---------------------------------------------------------------------===//. We compile:. int test(int x, int y) {; return x-y-1;; }. into (-m64):. _test:; 	decl	%edi; 	movl	%edi, %eax; 	subl	%esi, %eax; 	ret. it would be better to codegen as: x+~y (notl+addl). //===---------------------------------------------------------------------===//. This code:. int foo(const char *str,...); {; __builtin_va_list a; int x;; __builtin_va_start(a,str); x = __builtin_",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:31992,Performance,load,load,31992,"modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%esp); 	movaps	%xmm0, 64(%esp); 	movl	60(%esp), %eax; 	movl	%eax, 124(%esp); 	movl	56(%esp), %eax; 	movl	%eax, 120(%esp); 	movl	52(%esp), %eax; <many many more 32-bit copies>; 	movaps	(%esp), %xmm0; 	movaps	16(%esp), %xmm1; 	movaps	32(%esp), %xmm2; 	movaps	48(%esp), %xmm3; 	addl	$140, %esp; 	ret. On Nehalem, it may even be cheaper to just use movups when unaligned than to; fall back to lower-granularity chunks. //===---------------------------------------------------------------------===//. Implement processor-specific optimizations for parity with GCC on these; processors. GCC does two optimizations:. 1. ix86_pad_returns inserts a noop before ret instructions if immediately; preceded by a conditional branch or is the target of a jump.; 2. ix86_avo",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:32762,Performance,optimiz,optimizations,32762,"6 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%esp); 	movaps	%xmm0, 64(%esp); 	movl	60(%esp), %eax; 	movl	%eax, 124(%esp); 	movl	56(%esp), %eax; 	movl	%eax, 120(%esp); 	movl	52(%esp), %eax; <many many more 32-bit copies>; 	movaps	(%esp), %xmm0; 	movaps	16(%esp), %xmm1; 	movaps	32(%esp), %xmm2; 	movaps	48(%esp), %xmm3; 	addl	$140, %esp; 	ret. On Nehalem, it may even be cheaper to just use movups when unaligned than to; fall back to lower-granularity chunks. //===---------------------------------------------------------------------===//. Implement processor-specific optimizations for parity with GCC on these; processors. GCC does two optimizations:. 1. ix86_pad_returns inserts a noop before ret instructions if immediately; preceded by a conditional branch or is the target of a jump.; 2. ix86_avoid_jump_misspredicts inserts noops in cases where a 16-byte block of; code contains more than 3 branches.; ; The first one is done for all AMDs, Core2, and ""Generic""; The second one is done for: Atom, Pentium Pro, all AMDs, Pentium 4, Nocona,; Core 2, and ""Generic"". //===---------------------------------------------------------------------===//; Testcase:; int x(int a) { return (a&0xf0)>>4; }. Current output:; 	movl	4(%esp), %eax; 	shrl	$4, %eax; 	andl	$15, %eax; 	ret. Ideal output:; 	movzbl	4(%esp), %eax; 	shrl	$4, %eax; 	ret. //===---------------------------------------------------------------------===//. Re-implement atomic builtins __sync_add_and_fetch() and __sync_sub_and_fetch; properly. When the return value is not used (i.e. only care about the value in the; mem",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:32831,Performance,optimiz,optimizations,32831,">* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%esp); 	movaps	%xmm0, 64(%esp); 	movl	60(%esp), %eax; 	movl	%eax, 124(%esp); 	movl	56(%esp), %eax; 	movl	%eax, 120(%esp); 	movl	52(%esp), %eax; <many many more 32-bit copies>; 	movaps	(%esp), %xmm0; 	movaps	16(%esp), %xmm1; 	movaps	32(%esp), %xmm2; 	movaps	48(%esp), %xmm3; 	addl	$140, %esp; 	ret. On Nehalem, it may even be cheaper to just use movups when unaligned than to; fall back to lower-granularity chunks. //===---------------------------------------------------------------------===//. Implement processor-specific optimizations for parity with GCC on these; processors. GCC does two optimizations:. 1. ix86_pad_returns inserts a noop before ret instructions if immediately; preceded by a conditional branch or is the target of a jump.; 2. ix86_avoid_jump_misspredicts inserts noops in cases where a 16-byte block of; code contains more than 3 branches.; ; The first one is done for all AMDs, Core2, and ""Generic""; The second one is done for: Atom, Pentium Pro, all AMDs, Pentium 4, Nocona,; Core 2, and ""Generic"". //===---------------------------------------------------------------------===//; Testcase:; int x(int a) { return (a&0xf0)>>4; }. Current output:; 	movl	4(%esp), %eax; 	shrl	$4, %eax; 	andl	$15, %eax; 	ret. Ideal output:; 	movzbl	4(%esp), %eax; 	shrl	$4, %eax; 	ret. //===---------------------------------------------------------------------===//. Re-implement atomic builtins __sync_add_and_fetch() and __sync_sub_and_fetch; properly. When the return value is not used (i.e. only care about the value in the; memory), x86 does not have to use add to implement these. In",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:35015,Performance,load,load,35015,"tput and a chain and we; want to map it into one that just output a chain. The current trick is to select; it into a MERGE_VALUES with the first definition being an implicit_def. The; proper solution is to add new ISD opcodes for the no-output variant. DAG; combiner can then transform the node before it gets to target node selection. Problem #2 is we are adding a whole bunch of x86 atomic instructions when in; fact these instructions are identical to the non-lock versions. We need a way to; add target specific information to target nodes and have this information; carried over to machine instructions. Asm printer (or JIT) can use this; information to add the ""lock"" prefix. //===---------------------------------------------------------------------===//. struct B {; unsigned char y0 : 1;; };. int bar(struct B* a) { return a->y0; }. define i32 @bar(%struct.B* nocapture %a) nounwind readonly optsize {; %1 = getelementptr inbounds %struct.B* %a, i64 0, i32 0; %2 = load i8* %1, align 1; %3 = and i8 %2, 1; %4 = zext i8 %3 to i32; ret i32 %4; }. bar: # @bar; # %bb.0:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. Missed optimization: should be movl+andl. //===---------------------------------------------------------------------===//. The x86_64 abi says:. Booleans, when stored in a memory object, are stored as single byte objects the; value of which is always 0 (false) or 1 (true). We are not using this fact:. int bar(_Bool *a) { return *a; }. define i32 @bar(i8* nocapture %a) nounwind readonly optsize {; %1 = load i8* %a, align 1, !tbaa !0; %tmp = and i8 %1, 1; %2 = zext i8 %tmp to i32; ret i32 %2; }. bar:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. GCC produces. bar:; movzbl (%rdi), %eax; ret. //===---------------------------------------------------------------------===//. Take the following C code:; int f(int a, int b) { return (unsigned char)a == (unsigned char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind rea",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:35180,Performance,optimiz,optimization,35180,"ion being an implicit_def. The; proper solution is to add new ISD opcodes for the no-output variant. DAG; combiner can then transform the node before it gets to target node selection. Problem #2 is we are adding a whole bunch of x86 atomic instructions when in; fact these instructions are identical to the non-lock versions. We need a way to; add target specific information to target nodes and have this information; carried over to machine instructions. Asm printer (or JIT) can use this; information to add the ""lock"" prefix. //===---------------------------------------------------------------------===//. struct B {; unsigned char y0 : 1;; };. int bar(struct B* a) { return a->y0; }. define i32 @bar(%struct.B* nocapture %a) nounwind readonly optsize {; %1 = getelementptr inbounds %struct.B* %a, i64 0, i32 0; %2 = load i8* %1, align 1; %3 = and i8 %2, 1; %4 = zext i8 %3 to i32; ret i32 %4; }. bar: # @bar; # %bb.0:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. Missed optimization: should be movl+andl. //===---------------------------------------------------------------------===//. The x86_64 abi says:. Booleans, when stored in a memory object, are stored as single byte objects the; value of which is always 0 (false) or 1 (true). We are not using this fact:. int bar(_Bool *a) { return *a; }. define i32 @bar(i8* nocapture %a) nounwind readonly optsize {; %1 = load i8* %a, align 1, !tbaa !0; %tmp = and i8 %1, 1; %2 = zext i8 %tmp to i32; ret i32 %2; }. bar:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. GCC produces. bar:; movzbl (%rdi), %eax; ret. //===---------------------------------------------------------------------===//. Take the following C code:; int f(int a, int b) { return (unsigned char)a == (unsigned char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %tmp = xor i32 %b, %a ; <i32> [#uses=1]; %tmp6 = and i32 %tmp, 255 ; <i32> [#uses=1]; %cmp = icmp eq i32 %tmp6, 0 ; <i1> [#uses=1]; %c",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:35578,Performance,load,load,35578,"ave this information; carried over to machine instructions. Asm printer (or JIT) can use this; information to add the ""lock"" prefix. //===---------------------------------------------------------------------===//. struct B {; unsigned char y0 : 1;; };. int bar(struct B* a) { return a->y0; }. define i32 @bar(%struct.B* nocapture %a) nounwind readonly optsize {; %1 = getelementptr inbounds %struct.B* %a, i64 0, i32 0; %2 = load i8* %1, align 1; %3 = and i8 %2, 1; %4 = zext i8 %3 to i32; ret i32 %4; }. bar: # @bar; # %bb.0:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. Missed optimization: should be movl+andl. //===---------------------------------------------------------------------===//. The x86_64 abi says:. Booleans, when stored in a memory object, are stored as single byte objects the; value of which is always 0 (false) or 1 (true). We are not using this fact:. int bar(_Bool *a) { return *a; }. define i32 @bar(i8* nocapture %a) nounwind readonly optsize {; %1 = load i8* %a, align 1, !tbaa !0; %tmp = and i8 %1, 1; %2 = zext i8 %tmp to i32; ret i32 %2; }. bar:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. GCC produces. bar:; movzbl (%rdi), %eax; ret. //===---------------------------------------------------------------------===//. Take the following C code:; int f(int a, int b) { return (unsigned char)a == (unsigned char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %tmp = xor i32 %b, %a ; <i32> [#uses=1]; %tmp6 = and i32 %tmp, 255 ; <i32> [#uses=1]; %cmp = icmp eq i32 %tmp6, 0 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	xorl	%esi, %edi; 	testb	$-1, %dil; 	sete	%al; 	movzbl	%al, %eax; 	ret. A cmpb instead of the xorl+testb would be one instruction shorter. //===---------------------------------------------------------------------===//. Given the following C code:; int f(int a, int b) { return (signed char)a == (signed",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:37276,Performance,load,load,37276,"	%esi, %edi; 	testb	$-1, %dil; 	sete	%al; 	movzbl	%al, %eax; 	ret. A cmpb instead of the xorl+testb would be one instruction shorter. //===---------------------------------------------------------------------===//. Given the following C code:; int f(int a, int b) { return (signed char)a == (signed char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %struct.bf* ; <%struct.bf**> [#uses=2]. define void @t1() nounwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:37476,Performance,load,load,37476,"------------------------------------------===//. Given the following C code:; int f(int a, int b) { return (signed char)a == (signed char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %struct.bf* ; <%struct.bf**> [#uses=2]. define void @t1() nounwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to dete",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:37657,Performance,load,load,37657,"unwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %struct.bf* ; <%struct.bf**> [#uses=2]. define void @t1() nounwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0)",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:37778,Performance,load,load,37778,"unwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %struct.bf* ; <%struct.bf**> [#uses=2]. define void @t1() nounwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0)",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:37959,Performance,load,load,37959,"es=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %struct.bf* ; <%struct.bf**> [#uses=2]. define void @t1() nounwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0) bar();; else if (x == 1) qux();; }. currently compiles into:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	testl	%eax, %eax; 	jne	LBB0_4. the testl could be removed:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	jb	LBB0_4. 0 is the only unsigned number < 1. //===-----------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:38233,Performance,load,loads,38233,"-----------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %struct.bf* ; <%struct.bf**> [#uses=2]. define void @t1() nounwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0) bar();; else if (x == 1) qux();; }. currently compiles into:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	testl	%eax, %eax; 	jne	LBB0_4. the testl could be removed:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	jb	LBB0_4. 0 is the only unsigned number < 1. //===---------------------------------------------------------------------===//. This code:. %0 = type { i32, i1 }. define i32 @add32carry(i32 %sum, i32 %x) nounwind readnone ssp {; entry:; %uadd = tail call %0 @llvm.uadd.with.overflow.i32(i32 %sum, i32 %x); %cmp = extractvalue",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:38424,Performance,load,load,38424,"nwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0) bar();; else if (x == 1) qux();; }. currently compiles into:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	testl	%eax, %eax; 	jne	LBB0_4. the testl could be removed:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	jb	LBB0_4. 0 is the only unsigned number < 1. //===---------------------------------------------------------------------===//. This code:. %0 = type { i32, i1 }. define i32 @add32carry(i32 %sum, i32 %x) nounwind readnone ssp {; entry:; %uadd = tail call %0 @llvm.uadd.with.overflow.i32(i32 %sum, i32 %x); %cmp = extractvalue %0 %uadd, 1; %inc = zext i1 %cmp to i32; %add = add i32 %x, %sum; %z.0 = add i32 %add, %inc; ret i32 %z.0; }. declare %0 @llvm.uadd.with.overflow.i32(i32, i32) nounwind readnone. compiles to:. _add32carry: ## @ad",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:38498,Performance,load,load,38498,"nwind ssp {; entry:; %0 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %1 = getelementptr %struct.bf* %0, i64 0, i32 1 ; <i16*> [#uses=1]; %2 = bitcast i16* %1 to i32* ; <i32*> [#uses=2]; %3 = load i32* %2, align 1 ; <i32> [#uses=1]; %4 = and i32 %3, -65537 ; <i32> [#uses=1]; store i32 %4, i32* %2, align 1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0) bar();; else if (x == 1) qux();; }. currently compiles into:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	testl	%eax, %eax; 	jne	LBB0_4. the testl could be removed:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	jb	LBB0_4. 0 is the only unsigned number < 1. //===---------------------------------------------------------------------===//. This code:. %0 = type { i32, i1 }. define i32 @add32carry(i32 %sum, i32 %x) nounwind readnone ssp {; entry:; %uadd = tail call %0 @llvm.uadd.with.overflow.i32(i32 %sum, i32 %x); %cmp = extractvalue %0 %uadd, 1; %inc = zext i1 %cmp to i32; %add = add i32 %x, %sum; %z.0 = add i32 %add, %inc; ret i32 %z.0; }. declare %0 @llvm.uadd.with.overflow.i32(i32, i32) nounwind readnone. compiles to:. _add32carry: ## @ad",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:40696,Performance,load,loads,40696,"------------------------------------------------------===//. The hot loop of 256.bzip2 contains code that looks a bit like this:. int foo(char *P, char *Q, int x, int y) {; if (P[0] != Q[0]); return P[0] < Q[0];; if (P[1] != Q[1]); return P[1] < Q[1];; if (P[2] != Q[2]); return P[2] < Q[2];; return P[3] < Q[3];; }. In the real code, we get a lot more wrong than this. However, even in this; code we generate:. _foo: ## @foo; ## %bb.0: ## %entry; 	movb	(%rsi), %al; 	movb	(%rdi), %cl; 	cmpb	%al, %cl; 	je	LBB0_2; LBB0_1: ## %if.then; 	cmpb	%al, %cl; 	jmp	LBB0_5; LBB0_2: ## %if.end; 	movb	1(%rsi), %al; 	movb	1(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.3: ## %if.end38; 	movb	2(%rsi), %al; 	movb	2(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.4: ## %if.end60; 	movb	3(%rdi), %al; 	cmpb	3(%rsi), %al; LBB0_5: ## %if.end60; 	setl	%al; 	movzbl	%al, %eax; 	ret. Note that we generate jumps to LBB0_1 which does a redundant compare. The; redundant compare also forces the register values to be live, which prevents; folding one of the loads into the compare. In contrast, GCC 4.2 produces:. _foo:; 	movzbl	(%rsi), %eax; 	cmpb	%al, (%rdi); 	jne	L10; L12:; 	movzbl	1(%rsi), %eax; 	cmpb	%al, 1(%rdi); 	jne	L10; 	movzbl	2(%rsi), %eax; 	cmpb	%al, 2(%rdi); 	jne	L10; 	movzbl	3(%rdi), %eax; 	cmpb	3(%rsi), %al; L10:; 	setl	%al; 	movzbl	%al, %eax; 	ret. which is ""perfect"". //===---------------------------------------------------------------------===//. For the branch in the following code:; int a();; int b(int x, int y) {; if (x & (1<<(y&7))); return a();; return y;; }. We currently generate:; 	movb	%sil, %al; 	andb	$7, %al; 	movzbl	%al, %eax; 	btl	%eax, %edi; 	jae	.LBB0_2. movl+andl would be shorter than the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:2039,Safety,avoid,avoid,2039,"rom http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------===//. Should we promote i16 to i32 to avoid partial register update stalls?. //===---------------------------------------------------------------------===//. Leave any_extend as pseudo instruction and hint to register; allocator. Delay codegen until post register allocation.; Note. any_extend is now turned into an INSERT_SUBREG. We still need to teach; the coalescer how to deal with it though. //===---------------------------------------------------------------------===//. It appears icc use push for parameter passing. Need to investigate. //===---------------------------------------------------------------------===//. The instruction selector sometimes misses folding a load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===------------------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5004,Safety,avoid,avoiding,5004,"(%edx); 	movw $257, 8(%edx). It might be better to generate. 	movl $16843009, %eax; 	movl %eax, 4(%edx); 	movl %eax, (%edx); 	movw al, 8(%edx); 	; when we can spare a register. It reduces code size. //===---------------------------------------------------------------------===//. Evaluate what the best way to codegen sdiv X, (2^C) is. For X/8, we currently; get this:. define i32 @test1(i32 %X) {; %Y = sdiv i32 %X, 8; ret i32 %Y; }. _test1:; movl 4(%esp), %eax; movl %eax, %ecx; sarl $31, %ecx; shrl $29, %ecx; addl %ecx, %eax; sarl $3, %eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %a",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:10181,Safety,avoid,avoid,10181,"000010 andl $0x0000ffff,%eax; 00000015 cvtsi2ss %eax,%xmm1; 00000019 mulss 0x00000078,%xmm0; 00000021 addss %xmm1,%xmm0; 00000025 movss %xmm0,(%esp,1); 0000002a flds (%esp,1); 0000002d addl $0x04,%esp; 00000030 ret. //===---------------------------------------------------------------------===//. When using fastcc abi, align stack slot of argument of type double on 8 byte; boundary to improve performance. //===---------------------------------------------------------------------===//. GCC's ix86_expand_int_movcc function (in i386.c) has a ton of interesting; simplifications for integer ""x cmp y ? a : b"". //===---------------------------------------------------------------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundary. In addition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===----------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:11775,Safety,abort,abort,11775,"dition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:16522,Safety,redund,redundant,16522,"6 %tmp98 to i32		; <i32> [#uses=1]; 	%tmp585 = sub i32 32, %tmp583584		; <i32> [#uses=1]; 	%tmp614615 = sext i16 %tmp101 to i32		; <i32> [#uses=1]; 	%tmp621622 = sext i16 %tmp104 to i32		; <i32> [#uses=1]; 	%tmp623 = sub i32 32, %tmp621622		; <i32> [#uses=1]; 	br label %bb114. produces:. LBB3_5:	# bb114.preheader; 	movswl	-68(%ebp), %eax; 	movl	$32, %ecx; 	movl	%ecx, -80(%ebp); 	subl	%eax, -80(%ebp); 	movswl	-52(%ebp), %eax; 	movl	%ecx, -84(%ebp); 	subl	%eax, -84(%ebp); 	movswl	-70(%ebp), %eax; 	movl	%ecx, -88(%ebp); 	subl	%eax, -88(%ebp); 	movswl	-50(%ebp), %eax; 	subl	%eax, %ecx; 	movl	%ecx, -76(%ebp); 	movswl	-42(%ebp), %eax; 	movl	%eax, -92(%ebp); 	movswl	-66(%ebp), %eax; 	movl	%eax, -96(%ebp); 	movw	$0, -98(%ebp). This appears to be bad because the RA is not folding the store to the stack ; slot into the movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:17267,Safety,abort,abort,17267,"bp); 	movw	$0, -98(%ebp). This appears to be bad because the RA is not folding the store to the stack ; slot into the movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:17491,Safety,abort,abort,17491,"ween remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:17900,Safety,abort,abort,17900,"produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) that might be used later. example: . int callee(int32, int64); ; int caller(int32 arg1, int32 arg2) { ; int64 local = arg2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto th",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:19487,Safety,abort,abort,19487,"2 * 2; ; return callee(arg2, (int64)local); ; }. [arg1] [!arg2 no longer valid since we moved local onto it]; [arg2] -> [(int64); [RETADDR] local ]. Moving arg1 onto the stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:40575,Safety,redund,redundant,40575,"add32carry:; 	leal	(%rsi,%rdi), %eax; 	cmpl	%esi, %eax; 	adcl	$0, %eax; 	ret. //===---------------------------------------------------------------------===//. The hot loop of 256.bzip2 contains code that looks a bit like this:. int foo(char *P, char *Q, int x, int y) {; if (P[0] != Q[0]); return P[0] < Q[0];; if (P[1] != Q[1]); return P[1] < Q[1];; if (P[2] != Q[2]); return P[2] < Q[2];; return P[3] < Q[3];; }. In the real code, we get a lot more wrong than this. However, even in this; code we generate:. _foo: ## @foo; ## %bb.0: ## %entry; 	movb	(%rsi), %al; 	movb	(%rdi), %cl; 	cmpb	%al, %cl; 	je	LBB0_2; LBB0_1: ## %if.then; 	cmpb	%al, %cl; 	jmp	LBB0_5; LBB0_2: ## %if.end; 	movb	1(%rsi), %al; 	movb	1(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.3: ## %if.end38; 	movb	2(%rsi), %al; 	movb	2(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.4: ## %if.end60; 	movb	3(%rdi), %al; 	cmpb	3(%rsi), %al; LBB0_5: ## %if.end60; 	setl	%al; 	movzbl	%al, %eax; 	ret. Note that we generate jumps to LBB0_1 which does a redundant compare. The; redundant compare also forces the register values to be live, which prevents; folding one of the loads into the compare. In contrast, GCC 4.2 produces:. _foo:; 	movzbl	(%rsi), %eax; 	cmpb	%al, (%rdi); 	jne	L10; L12:; 	movzbl	1(%rsi), %eax; 	cmpb	%al, 1(%rdi); 	jne	L10; 	movzbl	2(%rsi), %eax; 	cmpb	%al, 2(%rdi); 	jne	L10; 	movzbl	3(%rdi), %eax; 	cmpb	3(%rsi), %al; L10:; 	setl	%al; 	movzbl	%al, %eax; 	ret. which is ""perfect"". //===---------------------------------------------------------------------===//. For the branch in the following code:; int a();; int b(int x, int y) {; if (x & (1<<(y&7))); return a();; return y;; }. We currently generate:; 	movb	%sil, %al; 	andb	$7, %al; 	movzbl	%al, %eax; 	btl	%eax, %edi; 	jae	.LBB0_2. movl+andl would be shorter than the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; retu",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:40599,Safety,redund,redundant,40599,"------------------------------------------------------===//. The hot loop of 256.bzip2 contains code that looks a bit like this:. int foo(char *P, char *Q, int x, int y) {; if (P[0] != Q[0]); return P[0] < Q[0];; if (P[1] != Q[1]); return P[1] < Q[1];; if (P[2] != Q[2]); return P[2] < Q[2];; return P[3] < Q[3];; }. In the real code, we get a lot more wrong than this. However, even in this; code we generate:. _foo: ## @foo; ## %bb.0: ## %entry; 	movb	(%rsi), %al; 	movb	(%rdi), %cl; 	cmpb	%al, %cl; 	je	LBB0_2; LBB0_1: ## %if.then; 	cmpb	%al, %cl; 	jmp	LBB0_5; LBB0_2: ## %if.end; 	movb	1(%rsi), %al; 	movb	1(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.3: ## %if.end38; 	movb	2(%rsi), %al; 	movb	2(%rdi), %cl; 	cmpb	%al, %cl; 	jne	LBB0_1; ## %bb.4: ## %if.end60; 	movb	3(%rdi), %al; 	cmpb	3(%rsi), %al; LBB0_5: ## %if.end60; 	setl	%al; 	movzbl	%al, %eax; 	ret. Note that we generate jumps to LBB0_1 which does a redundant compare. The; redundant compare also forces the register values to be live, which prevents; folding one of the loads into the compare. In contrast, GCC 4.2 produces:. _foo:; 	movzbl	(%rsi), %eax; 	cmpb	%al, (%rdi); 	jne	L10; L12:; 	movzbl	1(%rsi), %eax; 	cmpb	%al, 1(%rdi); 	jne	L10; 	movzbl	2(%rsi), %eax; 	cmpb	%al, 2(%rdi); 	jne	L10; 	movzbl	3(%rdi), %eax; 	cmpb	3(%rsi), %al; L10:; 	setl	%al; 	movzbl	%al, %eax; 	ret. which is ""perfect"". //===---------------------------------------------------------------------===//. For the branch in the following code:; int a();; int b(int x, int y) {; if (x & (1<<(y&7))); return a();; return y;; }. We currently generate:; 	movb	%sil, %al; 	andb	$7, %al; 	movzbl	%al, %eax; 	btl	%eax, %edi; 	jae	.LBB0_2. movl+andl would be shorter than the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:799,Testability,test,testb,799,"//===---------------------------------------------------------------------===//; // Random ideas for the X86 backend.; //===---------------------------------------------------------------------===//. Improvements to the multiply -> shift/add algorithm:; http://gcc.gnu.org/ml/gcc-patches/2004-08/msg01590.html. //===---------------------------------------------------------------------===//. Improve code like this (occurs fairly frequently, e.g. in LLVM):; long long foo(int x) { return 1LL << x; }. http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01109.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01128.html; http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01136.html. Another useful one would be ~0ULL >> X and ~0ULL << X. One better solution for 1LL << x is:; xorl %eax, %eax; xorl %edx, %edx; testb $32, %cl; sete %al; setne %dl; sall %cl, %eax; sall %cl, %edx. But that requires good 8-bit subreg support. Also, this might be better. It's an extra shift, but it's one instruction; shorter, and doesn't stress 8-bit subreg support.; (From http://gcc.gnu.org/ml/gcc-patches/2004-09/msg01148.html,; but without the unnecessary and.); movl %ecx, %eax; shrl $5, %eax; movl %eax, %edx; xorl $1, %edx; sall %cl, %eax; sall %cl. %edx. 64-bit shifts (in general) expand to really bad code. Instead of using; cmovs, we should expand to a conditional branch like GCC produces. //===---------------------------------------------------------------------===//. Some isel ideas:. 1. Dynamic programming based approach when compile time is not an; issue.; 2. Code duplication (addressing mode) during isel.; 3. Other ideas from ""Register-Sensitive Selection, Duplication, and; Sequencing of Instructions"".; 4. Scheduling for reduced register pressure. E.g. ""Minimum Register; Instruction Sequence Problem: Revisiting Optimal Code Generation for DAGs""; and other related papers.; http://citeseer.ist.psu.edu/govindarajan01minimum.html. //===---------------------------------------------------------------------=",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5454,Testability,test,tests,5454,"%eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5675,Testability,test,test,5675,"but it's interesting at least :). //===---------------------------------------------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===----",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:5706,Testability,test,test,5706,"----------------------------------===//. We are currently lowering large (1MB+) memmove/memcpy to rep/stosl and rep/movsl; We should leave these as libcalls for everything over a much lower threshold,; since libc is hand tuned for medium and large mem ops (avoiding RFO for large; stores, TLB preheating, etc). //===---------------------------------------------------------------------===//. Optimize this into something reasonable:; x * copysign(1.0, y) * copysign(1.0, z). //===---------------------------------------------------------------------===//. Optimize copysign(x, *y) to use an integer load from y. //===---------------------------------------------------------------------===//. The following tests perform worse with LSR:. lambda, siod, optimizer-eval, ackermann, hash2, nestedloop, strcat, and Treesor. //===---------------------------------------------------------------------===//. Adding to the list of cmp / test poor codegen issues:. int test(__m128 *A, __m128 *B) {; if (_mm_comige_ss(*A, *B)); return 3;; else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. Fo",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:6761,Testability,test,test,6761,"else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA first since the LEA matching code does some; estimate to determine whether the match is profitable. However, if we care more about code size, then imull is better. It's two bytes; shorter than movl + leal. On a Pentium M, both variants have the same characteristics with regard; to throughput; however, the multiplication has a latency of four cycles, as; opposed to two cycles for the movl+lea variant. //===---------------------------------------------------------------------===//. It appears gcc place string da",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:11753,Testability,test,test,11753,"dition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:11913,Testability,stub,stub,11913,"of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12006,Testability,stub,stub,12006,"), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that th",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12152,Testability,log,logic,12152,">. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. /",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12297,Testability,stub,stub,12297,", the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12502,Testability,stub,stub,12502,"1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop int",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12757,Testability,test,test,12757,"f (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We gene",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:13086,Testability,test,test,13086,"tively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl; testb %cl, %al; jne LBB1_5 # UnifiedReturnBlock; LBB1_1: # cond_true. it would be better to replace the la",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:13804,Testability,test,testf,13804,"; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl; testb %cl, %al; jne LBB1_5 # UnifiedReturnBlock; LBB1_1: # cond_true. it would be better to replace the last four instructions with:. 	jp LBB1_1; 	je LBB1_5; LBB1_1:. We also codegen the inner ?: into a diamond:. cvtss2sd LCPI1_0(%rip), %xmm2; cvtss2sd LCPI1_1(%rip), %xmm3; ucomisd %xmm1, %xmm0; ja LBB1_3 # cond_true; LBB1_2: # cond_true; movapd %xmm3, %xmm2; LBB1_3: # cond_true; movapd %xmm2, %xmm0; ret. We should sink the load into xmm3 into the LBB1_2 block. This should; be pretty easy, and will nuke all the copies. //===---------------------------------------------------------------------===//. This:; #include <algorithm>; inline std::pair<unsigned, bool> full_add(unsigned a, unsigned b); { return std::make_pair(a + b, a + b < a); }; bool no_overflow(unsigned a, unsigned b); { return !f",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:14016,Testability,test,testb,14016,"sn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl; testb %cl, %al; jne LBB1_5 # UnifiedReturnBlock; LBB1_1: # cond_true. it would be better to replace the last four instructions with:. 	jp LBB1_1; 	je LBB1_5; LBB1_1:. We also codegen the inner ?: into a diamond:. cvtss2sd LCPI1_0(%rip), %xmm2; cvtss2sd LCPI1_1(%rip), %xmm3; ucomisd %xmm1, %xmm0; ja LBB1_3 # cond_true; LBB1_2: # cond_true; movapd %xmm3, %xmm2; LBB1_3: # cond_true; movapd %xmm2, %xmm0; ret. We should sink the load into xmm3 into the LBB1_2 block. This should; be pretty easy, and will nuke all the copies. //===---------------------------------------------------------------------===//. This:; #include <algorithm>; inline std::pair<unsigned, bool> full_add(unsigned a, unsigned b); { return std::make_pair(a + b, a + b < a); }; bool no_overflow(unsigned a, unsigned b); { return !full_add(a, b).second; }. Should compile to:; 	addl	%esi, %edi; 	setae	%al; 	movzbl	%al, %eax; 	ret. on x86-64, instead of the rather stupid-looking:; 	addl	%esi, %edi; 	setb	%al;",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:16910,Testability,test,testw,16910,"p); 	movswl	-52(%ebp), %eax; 	movl	%ecx, -84(%ebp); 	subl	%eax, -84(%ebp); 	movswl	-70(%ebp), %eax; 	movl	%ecx, -88(%ebp); 	subl	%eax, -88(%ebp); 	movswl	-50(%ebp), %eax; 	subl	%eax, %ecx; 	movl	%ecx, -76(%ebp); 	movswl	-42(%ebp), %eax; 	movl	%eax, -92(%ebp); 	movswl	-66(%ebp), %eax; 	movl	%eax, -96(%ebp); 	movw	$0, -98(%ebp). This appears to be bad because the RA is not folding the store to the stack ; slot into the movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===-----------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:17012,Testability,test,testw,17012,"%ebp); 	movswl	-70(%ebp), %eax; 	movl	%ecx, -88(%ebp); 	subl	%eax, -88(%ebp); 	movswl	-50(%ebp), %eax; 	subl	%eax, %ecx; 	movl	%ecx, -76(%ebp); 	movswl	-42(%ebp), %eax; 	movl	%eax, -92(%ebp); 	movswl	-66(%ebp), %eax; 	movl	%eax, -96(%ebp); 	movw	$0, -98(%ebp). This appears to be bad because the RA is not folding the store to the stack ; slot into the movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:17418,Testability,test,testb,17418," movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===---------------------------------------------------------------------===//. Tail call optimization improvements: Tail call optimization currently; pushes all arguments on the top of the stack (their normal place for; non-tail call optimized calls) that source from the callers arguments; or that source from a virtual register (also possibly sourcing from; callers arguments).; This is done to prevent overwriting of parameters (see example; below) ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:19705,Testability,stub,stub,19705,"stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:19748,Testability,stub,stub,19748,"stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:20070,Testability,stub,stub,20070," callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //===---------------------------------------------------------------------===//. This code:; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:20329,Testability,test,test,20329,"------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //===---------------------------------------------------------------------===//. This code:; int foo (int x) { return (x & 65535) | 255; }. Should compile into:. _foo:; movzwl 4(%esp), %eax; orl $255, %eax; ret. instead of:; _foo:; 	movl	$65280, %eax; 	andl	4(%esp), %eax; 	orl	$255, %eax; 	ret. //===---------------------------------------------------------------------===//. We're codegen'ing multiply of long longs inefficiently:. unsigned long long LLM(unsigned long long arg1, unsigned long long arg2) {; return arg1 * arg2;; }. We compile to (fomit-frame-pointer):. _LLM:; 	pushl	%esi; 	movl	8(%esp), %ecx; 	movl	16(%esp), %esi; 	movl	%esi, %eax; 	mull	%ecx; 	imull	12(%esp), %esi; 	addl	%edx, %esi",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:22863,Testability,test,testcase,22863,"------------------------------------------------------===//. We can fold a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:. 	movsd	(%esp), %xmm0; 	xorpd	LCPI1_0, %xmm0; 	movsd	%xmm0, (%esp). Since we 'know' that this is a 'neg', we can actually ""fold"" the spill into; the neg/abs instruction, turning it into an *integer* operation, like this:. 	xorl 2147483648, [mem+4] ## 2147483648 = (1 << 31). you could also use xorb, but xorl is less likely to lead to a partial register; stall. Here is a contrived testcase:. double a, b, c;; void test(double *P) {; double X = *P;; a = X;; bar();; X = -X;; b = X;; bar();; c = X;; }. //===---------------------------------------------------------------------===//. The generated code on x86 for checking for signed overflow on a multiply the; obvious way is much longer than it needs to be. int x(int a, int b) {; long long prod = (long long)a*b;; return prod > 0x7FFFFFFF || prod < (-0x7FFFFFFF-1);; }. See PR2053 for more details. //===---------------------------------------------------------------------===//. We should investigate using cdq/ctld (effect: edx = sar eax, 31); more aggressively; it should cost the same as a move+shift on any modern; processor, but it's a lot shorter. Downside is that it puts more; pressure on register allocation because it has fixed operands. Example:; int abs(int x) {return x < 0 ? -x : x;}. gcc compiles this to the following when using march/mtune=pentium2/3/4/m/etc.:; abs:; movl 4(%esp), %eax; cltd; xorl %edx, %e",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:22896,Testability,test,test,22896,"ld a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:. 	movsd	(%esp), %xmm0; 	xorpd	LCPI1_0, %xmm0; 	movsd	%xmm0, (%esp). Since we 'know' that this is a 'neg', we can actually ""fold"" the spill into; the neg/abs instruction, turning it into an *integer* operation, like this:. 	xorl 2147483648, [mem+4] ## 2147483648 = (1 << 31). you could also use xorb, but xorl is less likely to lead to a partial register; stall. Here is a contrived testcase:. double a, b, c;; void test(double *P) {; double X = *P;; a = X;; bar();; X = -X;; b = X;; bar();; c = X;; }. //===---------------------------------------------------------------------===//. The generated code on x86 for checking for signed overflow on a multiply the; obvious way is much longer than it needs to be. int x(int a, int b) {; long long prod = (long long)a*b;; return prod > 0x7FFFFFFF || prod < (-0x7FFFFFFF-1);; }. See PR2053 for more details. //===---------------------------------------------------------------------===//. We should investigate using cdq/ctld (effect: edx = sar eax, 31); more aggressively; it should cost the same as a move+shift on any modern; processor, but it's a lot shorter. Downside is that it puts more; pressure on register allocation because it has fixed operands. Example:; int abs(int x) {return x < 0 ? -x : x;}. gcc compiles this to the following when using march/mtune=pentium2/3/4/m/etc.:; abs:; movl 4(%esp), %eax; cltd; xorl %edx, %eax; subl %edx, %eax; ret. //===---------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:24576,Testability,test,testl,24576,"odern; processor, but it's a lot shorter. Downside is that it puts more; pressure on register allocation because it has fixed operands. Example:; int abs(int x) {return x < 0 ? -x : x;}. gcc compiles this to the following when using march/mtune=pentium2/3/4/m/etc.:; abs:; movl 4(%esp), %eax; cltd; xorl %edx, %eax; subl %edx, %eax; ret. //===---------------------------------------------------------------------===//. Take the following code (from ; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16541):. extern unsigned char first_one[65536];; int FirstOnet(unsigned long long arg1); {; if (arg1 >> 48); return (first_one[arg1 >> 48]);; return 0;; }. The following code is currently generated:; FirstOnet:; movl 8(%esp), %eax; cmpl $65536, %eax; movl 4(%esp), %ecx; jb .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; shrl $16, %eax; movzbl first_one(%eax), %eax; ret; .LBB1_2: # UnifiedReturnBlock; xorl %eax, %eax; ret. We could change the ""movl 8(%esp), %eax"" into ""movzwl 10(%esp), %eax""; this; lets us change the cmpl into a testl, which is shorter, and eliminate the shift. //===---------------------------------------------------------------------===//. We compile this function:. define i32 @foo(i32 %a, i32 %b, i32 %c, i8 zeroext %d) nounwind {; entry:; 	%tmp2 = icmp eq i8 %d, 0		; <i1> [#uses=1]; 	br i1 %tmp2, label %bb7, label %bb. bb:		; preds = %entry; 	%tmp6 = add i32 %b, %a		; <i32> [#uses=1]; 	ret i32 %tmp6. bb7:		; preds = %entry; 	%tmp10 = sub i32 %a, %c		; <i32> [#uses=1]; 	ret i32 %tmp10; }. to:. foo: # @foo; # %bb.0: # %entry; 	movl	4(%esp), %ecx; 	cmpb	$0, 16(%esp); 	je	.LBB0_2; # %bb.1: # %bb; 	movl	8(%esp), %eax; 	addl	%ecx, %eax; 	ret; .LBB0_2: # %bb7; 	movl	12(%esp), %edx; 	movl	%ecx, %eax; 	subl	%edx, %eax; 	ret. There's an obviously unnecessary movl in .LBB0_2, and we could eliminate a; couple more movls by putting 4(%esp) into %eax instead of %ecx. //===---------------------------------------------------------------------===//. Take the following:. target d",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:26504,Testability,test,test,26504," the following:. target datalayout = ""e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-S128""; target triple = ""i386-apple-darwin8""; @in_exit.4870.b = internal global i1 false		; <i1*> [#uses=2]; define fastcc void @abort_gzip() noreturn nounwind {; entry:; 	%tmp.b.i = load i1* @in_exit.4870.b		; <i1> [#uses=1]; 	br i1 %tmp.b.i, label %bb.i, label %bb4.i; bb.i:		; preds = %entry; 	tail call void @exit( i32 1 ) noreturn nounwind ; 	unreachable; bb4.i:		; preds = %entry; 	store i1 true, i1* @in_exit.4870.b; 	tail call void @exit( i32 1 ) noreturn nounwind ; 	unreachable; }; declare void @exit(i32) noreturn nounwind . This compiles into:; _abort_gzip: ## @abort_gzip; ## %bb.0: ## %entry; 	subl	$12, %esp; 	movb	_in_exit.4870.b, %al; 	cmpb	$1, %al; 	jne	LBB0_2. We somehow miss folding the movb into the cmpb. //===---------------------------------------------------------------------===//. We compile:. int test(int x, int y) {; return x-y-1;; }. into (-m64):. _test:; 	decl	%edi; 	movl	%edi, %eax; 	subl	%esi, %eax; 	ret. it would be better to codegen as: x+~y (notl+addl). //===---------------------------------------------------------------------===//. This code:. int foo(const char *str,...); {; __builtin_va_list a; int x;; __builtin_va_start(a,str); x = __builtin_va_arg(a,int); __builtin_va_end(a);; return x;; }. gets compiled into this on x86-64:; 	subq $200, %rsp; movaps %xmm7, 160(%rsp); movaps %xmm6, 144(%rsp); movaps %xmm5, 128(%rsp); movaps %xmm4, 112(%rsp); movaps %xmm3, 96(%rsp); movaps %xmm2, 80(%rsp); movaps %xmm1, 64(%rsp); movaps %xmm0, 48(%rsp); movq %r9, 40(%rsp); movq %r8, 32(%rsp); movq %rcx, 24(%rsp); movq %rdx, 16(%rsp); movq %rsi, 8(%rsp); leaq (%rsp), %rax; movq %rax, 192(%rsp); leaq 208(%rsp), %rax; movq %rax, 184(%rsp); movl $48, 180(%rsp); movl $8, 176(%rsp); movl 176(%rsp), %eax; cmpl $47, %eax; jbe .LBB1_3 # bb; .LBB1_1: # bb3; movq 184(%rsp), %rcx; leaq 8(%rcx), %rax; movq %rax,",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:30829,Testability,test,test,30829,"vm.sadd.with.overflow.i32(i32 %v1, i32 %v2); %sum = extractvalue {i32, i1} %t, 0; %obit = extractvalue {i32, i1} %t, 1; br i1 %obit, label %overflow, label %normal; normal:; ret i32 %sum; overflow:; call void @llvm.trap(); unreachable; }; declare {i32, i1} @llvm.sadd.with.overflow.i32(i32, i32); declare void @llvm.trap(). to:. _func1:; 	movl	4(%esp), %eax; 	addl	8(%esp), %eax; 	jo	LBB1_2	## overflow; LBB1_1:	## normal; 	ret; LBB1_2:	## overflow; 	ud2. it would be nice to produce ""into"" someday. //===---------------------------------------------------------------------===//. Test instructions can be eliminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:31264,Testability,test,test,31264,"verflow; 	ud2. it would be nice to produce ""into"" someday. //===---------------------------------------------------------------------===//. Test instructions can be eliminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%e",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:31329,Testability,test,test,31329,"liminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%esp); 	movaps	%xmm0, 64(%esp); 	movl	60(%esp), %eax; 	movl	%eax, 124(%esp); 	movl	56(%esp), %eax; 	movl	%eax, 120(%esp); 	movl	52(%esp), %eax; <many many more 32-bit ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:36306,Testability,test,testb,36306,"abi says:. Booleans, when stored in a memory object, are stored as single byte objects the; value of which is always 0 (false) or 1 (true). We are not using this fact:. int bar(_Bool *a) { return *a; }. define i32 @bar(i8* nocapture %a) nounwind readonly optsize {; %1 = load i8* %a, align 1, !tbaa !0; %tmp = and i8 %1, 1; %2 = zext i8 %tmp to i32; ret i32 %2; }. bar:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. GCC produces. bar:; movzbl (%rdi), %eax; ret. //===---------------------------------------------------------------------===//. Take the following C code:; int f(int a, int b) { return (unsigned char)a == (unsigned char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %tmp = xor i32 %b, %a ; <i32> [#uses=1]; %tmp6 = and i32 %tmp, 255 ; <i32> [#uses=1]; %cmp = icmp eq i32 %tmp6, 0 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	xorl	%esi, %edi; 	testb	$-1, %dil; 	sete	%al; 	movzbl	%al, %eax; 	ret. A cmpb instead of the xorl+testb would be one instruction shorter. //===---------------------------------------------------------------------===//. Given the following C code:; int f(int a, int b) { return (signed char)a == (signed char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:36386,Testability,test,testb,36386,"ts the; value of which is always 0 (false) or 1 (true). We are not using this fact:. int bar(_Bool *a) { return *a; }. define i32 @bar(i8* nocapture %a) nounwind readonly optsize {; %1 = load i8* %a, align 1, !tbaa !0; %tmp = and i8 %1, 1; %2 = zext i8 %tmp to i32; ret i32 %2; }. bar:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. GCC produces. bar:; movzbl (%rdi), %eax; ret. //===---------------------------------------------------------------------===//. Take the following C code:; int f(int a, int b) { return (unsigned char)a == (unsigned char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %tmp = xor i32 %b, %a ; <i32> [#uses=1]; %tmp6 = and i32 %tmp, 255 ; <i32> [#uses=1]; %cmp = icmp eq i32 %tmp6, 0 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	xorl	%esi, %edi; 	testb	$-1, %dil; 	sete	%al; 	movzbl	%al, %eax; 	ret. A cmpb instead of the xorl+testb would be one instruction shorter. //===---------------------------------------------------------------------===//. Given the following C code:; int f(int a, int b) { return (signed char)a == (signed char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %st",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:38797,Testability,test,testl,38797,"1; %5 = load %struct.bf** @bfi, align 8 ; <%struct.bf*> [#uses=1]; %6 = getelementptr %struct.bf* %5, i64 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0) bar();; else if (x == 1) qux();; }. currently compiles into:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	testl	%eax, %eax; 	jne	LBB0_4. the testl could be removed:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	jb	LBB0_4. 0 is the only unsigned number < 1. //===---------------------------------------------------------------------===//. This code:. %0 = type { i32, i1 }. define i32 @add32carry(i32 %sum, i32 %x) nounwind readnone ssp {; entry:; %uadd = tail call %0 @llvm.uadd.with.overflow.i32(i32 %sum, i32 %x); %cmp = extractvalue %0 %uadd, 1; %inc = zext i1 %cmp to i32; %add = add i32 %x, %sum; %z.0 = add i32 %add, %inc; ret i32 %z.0; }. declare %0 @llvm.uadd.with.overflow.i32(i32, i32) nounwind readnone. compiles to:. _add32carry: ## @add32carry; 	addl	%esi, %edi; 	sbbl	%ecx, %ecx; 	movl	%edi, %eax; 	subl	%ecx, %eax; 	ret. But it could be:. _add32carry:; 	leal	(%rsi,%rdi), %eax; 	cmpl	%esi, %eax; 	adcl	$0, %eax; 	ret. //===---------------------------------------------------------------------===//. The hot loop of 256.bzip2 contains code that looks a ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:38832,Testability,test,testl,38832," 0, i32 1 ; <i16*> [#uses=1]; %7 = bitcast i16* %6 to i32* ; <i32*> [#uses=2]; %8 = load i32* %7, align 1 ; <i32> [#uses=1]; %9 = and i32 %8, -131073 ; <i32> [#uses=1]; store i32 %9, i32* %7, align 1; ret void; }. LLVM currently emits this:. movq bfi(%rip), %rax; andl $-65537, 8(%rax); movq bfi(%rip), %rax; andl $-131073, 8(%rax); ret. It could narrow the loads and stores to emit this:. movq bfi(%rip), %rax; andb $-2, 10(%rax); movq bfi(%rip), %rax; andb $-3, 10(%rax); ret. The trouble is that there is a TokenFactor between the store and the; load, making it non-trivial to determine if there's anything between; the load and the store which would prohibit narrowing. //===---------------------------------------------------------------------===//. This code:; void foo(unsigned x) {; if (x == 0) bar();; else if (x == 1) qux();; }. currently compiles into:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	testl	%eax, %eax; 	jne	LBB0_4. the testl could be removed:; _foo:; 	movl	4(%esp), %eax; 	cmpl	$1, %eax; 	je	LBB0_3; 	jb	LBB0_4. 0 is the only unsigned number < 1. //===---------------------------------------------------------------------===//. This code:. %0 = type { i32, i1 }. define i32 @add32carry(i32 %sum, i32 %x) nounwind readnone ssp {; entry:; %uadd = tail call %0 @llvm.uadd.with.overflow.i32(i32 %sum, i32 %x); %cmp = extractvalue %0 %uadd, 1; %inc = zext i1 %cmp to i32; %add = add i32 %x, %sum; %z.0 = add i32 %add, %inc; ret i32 %z.0; }. declare %0 @llvm.uadd.with.overflow.i32(i32, i32) nounwind readnone. compiles to:. _add32carry: ## @add32carry; 	addl	%esi, %edi; 	sbbl	%ecx, %ecx; 	movl	%edi, %eax; 	subl	%ecx, %eax; 	ret. But it could be:. _add32carry:; 	leal	(%rsi,%rdi), %eax; 	cmpl	%esi, %eax; 	adcl	$0, %eax; 	ret. //===---------------------------------------------------------------------===//. The hot loop of 256.bzip2 contains code that looks a bit like this:. int foo(char *P, char *Q, int x, int y) {; if (P[0] != Q[0]); return P[0] < Q[0];; if (P[1",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:42434,Testability,test,testl,42434,"the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = xmm0[1,0,0,0]; 	addss	%xmm1, %xmm0; 	ret. We could save an instruction here by commuting the addss. //===---------------------------------------------------------------------===//. This (from PR9661):. float clamp_float(float a) {; if (a > 1.0f); return 1.0f;; else if (a < 0.0f); return 0.0f;; else; return a;; }. Could compile to:. clamp_float: # @clamp_float; movss .LCPI0_0(%rip), %xmm1; minss %xmm1, %xmm0; pxor %xmm1, %xmm1; maxss %xmm1, %xmm0; ret. with -ffast-math. //===---------------------------------------------------------------------===//. This function (from PR9803):. int clamp2(int a) {; if (a > 5); a = 5;; if (a < 0) ; return 0;; return a;; }. Compiles to:. _clamp2: ## @clamp2; pushq %rbp; movq %rsp, %rbp; cmpl $5, %edi; movl $5, %ecx; cmovlel %edi, %ecx; testl %ecx, %ecx; movl $0, %eax; cmovnsl %ecx, %eax; popq %rbp; ret. The move of 0 could be scheduled above the test to make it is xor reg,reg. //===---------------------------------------------------------------------===//. GCC PR48986. We currently compile this:. void bar(void);; void yyy(int* p) {; if (__sync_fetch_and_add(p, -1) == 1); bar();; }. into:; 	movl	$-1, %eax; 	lock; 	xaddl	%eax, (%rdi); 	cmpl	$1, %eax; 	je	LBB0_2. Instead we could generate:. 	lock; 	dec %rdi; 	je LBB0_2. The trick is to match ""fetch_and_add(X, -C) == C"". //===---------------------------------------------------------------------===//. unsigned t(unsigned a, unsigned b) {; return a <= b ? 5 : -5;; }. We generate:; 	movl	$5, %ecx; 	cmpl	%esi, %edi; 	movl	$-5, %eax; 	cmovbel	%ecx, %eax. GCC:; 	cmpl	%edi, %esi; 	sbbl	%eax, %eax; 	andl	$-10, %eax; 	addl	$5, %eax. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:42546,Testability,test,test,42546,"the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = xmm0[1,0,0,0]; 	addss	%xmm1, %xmm0; 	ret. We could save an instruction here by commuting the addss. //===---------------------------------------------------------------------===//. This (from PR9661):. float clamp_float(float a) {; if (a > 1.0f); return 1.0f;; else if (a < 0.0f); return 0.0f;; else; return a;; }. Could compile to:. clamp_float: # @clamp_float; movss .LCPI0_0(%rip), %xmm1; minss %xmm1, %xmm0; pxor %xmm1, %xmm1; maxss %xmm1, %xmm0; ret. with -ffast-math. //===---------------------------------------------------------------------===//. This function (from PR9803):. int clamp2(int a) {; if (a > 5); a = 5;; if (a < 0) ; return 0;; return a;; }. Compiles to:. _clamp2: ## @clamp2; pushq %rbp; movq %rsp, %rbp; cmpl $5, %edi; movl $5, %ecx; cmovlel %edi, %ecx; testl %ecx, %ecx; movl $0, %eax; cmovnsl %ecx, %eax; popq %rbp; ret. The move of 0 could be scheduled above the test to make it is xor reg,reg. //===---------------------------------------------------------------------===//. GCC PR48986. We currently compile this:. void bar(void);; void yyy(int* p) {; if (__sync_fetch_and_add(p, -1) == 1); bar();; }. into:; 	movl	$-1, %eax; 	lock; 	xaddl	%eax, (%rdi); 	cmpl	$1, %eax; 	je	LBB0_2. Instead we could generate:. 	lock; 	dec %rdi; 	je LBB0_2. The trick is to match ""fetch_and_add(X, -C) == C"". //===---------------------------------------------------------------------===//. unsigned t(unsigned a, unsigned b) {; return a <= b ? 5 : -5;; }. We generate:; 	movl	$5, %ecx; 	cmpl	%esi, %edi; 	movl	$-5, %eax; 	cmovbel	%ecx, %eax. GCC:; 	cmpl	%edi, %esi; 	sbbl	%eax, %eax; 	andl	$-10, %eax; 	addl	$5, %eax. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:3685,Usability,clear,clearbit,3685,"load into a compare. The; pattern is written as (cmp reg, (load p)). Because the compare isn't; commutative, it is not matched with the load on both sides. The dag combiner; should be made smart enough to canonicalize the load into the RHS of a compare; when it can invert the result of the compare for free. //===---------------------------------------------------------------------===//. In many cases, LLVM generates code like this:. _test:; movl 8(%esp), %eax; cmpl %eax, 4(%esp); setl %al; movzbl %al, %eax; ret. on some processors (which ones?), it is more efficient to do this:. _test:; movl 8(%esp), %ebx; xor %eax, %eax; cmpl %ebx, 4(%esp); setl %al; ret. Doing this correctly is tricky though, as the xor clobbers the flags. //===---------------------------------------------------------------------===//. We should generate bts/btr/etc instructions on targets where they are cheap or; when codesize is important. e.g., for:. void setbit(int *target, int bit) {; *target |= (1 << bit);; }; void clearbit(int *target, int bit) {; *target &= ~(1 << bit);; }. //===---------------------------------------------------------------------===//. Instead of the following for memset char*, 1, 10:. 	movl $16843009, 4(%edx); 	movl $16843009, (%edx); 	movw $257, 8(%edx). It might be better to generate. 	movl $16843009, %eax; 	movl %eax, 4(%edx); 	movl %eax, (%edx); 	movw al, 8(%edx); 	; when we can spare a register. It reduces code size. //===---------------------------------------------------------------------===//. Evaluate what the best way to codegen sdiv X, (2^C) is. For X/8, we currently; get this:. define i32 @test1(i32 %X) {; %Y = sdiv i32 %X, 8; ret i32 %Y; }. _test1:; movl 4(%esp), %eax; movl %eax, %ecx; sarl $31, %ecx; shrl $29, %ecx; addl %ecx, %eax; sarl $3, %eax; ret. GCC knows several different ways to codegen it, one of which is this:. _test1:; movl 4(%esp), %eax; cmpl $-1, %eax; leal 7(%eax), %ecx; cmovle %ecx, %eax; sarl $3, %eax; ret. which is probably slower, but it's",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:9750,Usability,simpl,simplifications,9750,"by -loop-reduce and -indvars. //===---------------------------------------------------------------------===//. u32 to float conversion improvement:. float uint32_2_float( unsigned u ) {; float fl = (int) (u & 0xffff);; float fh = (int) (u >> 16);; fh *= 0x1.0p16f;; return fh + fl;; }. 00000000 subl $0x04,%esp; 00000003 movl 0x08(%esp,1),%eax; 00000007 movl %eax,%ecx; 00000009 shrl $0x10,%ecx; 0000000c cvtsi2ss %ecx,%xmm0; 00000010 andl $0x0000ffff,%eax; 00000015 cvtsi2ss %eax,%xmm1; 00000019 mulss 0x00000078,%xmm0; 00000021 addss %xmm1,%xmm0; 00000025 movss %xmm0,(%esp,1); 0000002a flds (%esp,1); 0000002d addl $0x04,%esp; 00000030 ret. //===---------------------------------------------------------------------===//. When using fastcc abi, align stack slot of argument of type double on 8 byte; boundary to improve performance. //===---------------------------------------------------------------------===//. GCC's ix86_expand_int_movcc function (in i386.c) has a ton of interesting; simplifications for integer ""x cmp y ? a : b"". //===---------------------------------------------------------------------===//. Consider the expansion of:. define i32 @test3(i32 %X) {; %tmp1 = urem i32 %X, 255; ret i32 %tmp1; }. Currently it compiles to:. ...; movl $2155905153, %ecx; movl 8(%esp), %esi; movl %esi, %eax; mull %ecx; ... This could be ""reassociated"" into:. movl $2155905153, %eax; movl 8(%esp), %ecx; mull %ecx. to avoid the copy. In fact, the existing two-address stuff would do this; except that mul isn't a commutative 2-addr instruction. I guess this has; to be done at isel time based on the #uses to mul?. //===---------------------------------------------------------------------===//. Make sure the instruction which starts a loop does not cross a cacheline; boundary. This requires knowning the exact length of each machine instruction.; That is somewhat complicated, but doable. Example 256.bzip2:. In the new trace, the hot loop has an instruction which crosses a cacheline; boundar",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:16615,Usability,simpl,simply,16615,"; 	%tmp614615 = sext i16 %tmp101 to i32		; <i32> [#uses=1]; 	%tmp621622 = sext i16 %tmp104 to i32		; <i32> [#uses=1]; 	%tmp623 = sub i32 32, %tmp621622		; <i32> [#uses=1]; 	br label %bb114. produces:. LBB3_5:	# bb114.preheader; 	movswl	-68(%ebp), %eax; 	movl	$32, %ecx; 	movl	%ecx, -80(%ebp); 	subl	%eax, -80(%ebp); 	movswl	-52(%ebp), %eax; 	movl	%ecx, -84(%ebp); 	subl	%eax, -84(%ebp); 	movswl	-70(%ebp), %eax; 	movl	%ecx, -88(%ebp); 	subl	%eax, -88(%ebp); 	movswl	-50(%ebp), %eax; 	subl	%eax, %ecx; 	movl	%ecx, -76(%ebp); 	movswl	-42(%ebp), %eax; 	movl	%eax, -92(%ebp); 	movswl	-66(%ebp), %eax; 	movl	%eax, -96(%ebp); 	movw	$0, -98(%ebp). This appears to be bad because the RA is not folding the store to the stack ; slot into the movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; c",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:31289,Usability,clear,clear,31289,"verflow; 	ud2. it would be nice to produce ""into"" someday. //===---------------------------------------------------------------------===//. Test instructions can be eliminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%e",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt:485,Availability,error,error,485,"# Do not build unittest libraries automatically, they will be pulled in; # by unittests if these are built.; if (NOT ${LLVM_INSTALL_GTEST}); set (BUILDTREE_ONLY BUILDTREE_ONLY); set(EXCLUDE_FROM_ALL ON); endif(). add_llvm_library(LLVMTestingSupport; Error.cpp; SupportHelpers.cpp. ${BUILDTREE_ONLY}. ADDITIONAL_HEADER_DIRS; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Testing/Support. LINK_COMPONENTS; Support; ). target_link_libraries(LLVMTestingSupport PRIVATE llvm_gtest). # This is to avoid the error in gtest-death-test-internal.h; # (150,16): error: 'Create' overrides a member function but; # is not marked 'override' [-Werror,-Wsuggest-override]; # during self-compile on Windows. if (HOST_WINNT AND ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-suggest-override""); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt:535,Availability,error,error,535,"# Do not build unittest libraries automatically, they will be pulled in; # by unittests if these are built.; if (NOT ${LLVM_INSTALL_GTEST}); set (BUILDTREE_ONLY BUILDTREE_ONLY); set(EXCLUDE_FROM_ALL ON); endif(). add_llvm_library(LLVMTestingSupport; Error.cpp; SupportHelpers.cpp. ${BUILDTREE_ONLY}. ADDITIONAL_HEADER_DIRS; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Testing/Support. LINK_COMPONENTS; Support; ). target_link_libraries(LLVMTestingSupport PRIVATE llvm_gtest). # This is to avoid the error in gtest-death-test-internal.h; # (150,16): error: 'Create' overrides a member function but; # is not marked 'override' [-Werror,-Wsuggest-override]; # during self-compile on Windows. if (HOST_WINNT AND ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-suggest-override""); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt:475,Safety,avoid,avoid,475,"# Do not build unittest libraries automatically, they will be pulled in; # by unittests if these are built.; if (NOT ${LLVM_INSTALL_GTEST}); set (BUILDTREE_ONLY BUILDTREE_ONLY); set(EXCLUDE_FROM_ALL ON); endif(). add_llvm_library(LLVMTestingSupport; Error.cpp; SupportHelpers.cpp. ${BUILDTREE_ONLY}. ADDITIONAL_HEADER_DIRS; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Testing/Support. LINK_COMPONENTS; Support; ). target_link_libraries(LLVMTestingSupport PRIVATE llvm_gtest). # This is to avoid the error in gtest-death-test-internal.h; # (150,16): error: 'Create' overrides a member function but; # is not marked 'override' [-Werror,-Wsuggest-override]; # during self-compile on Windows. if (HOST_WINNT AND ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-suggest-override""); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt:506,Testability,test,test-internal,506,"# Do not build unittest libraries automatically, they will be pulled in; # by unittests if these are built.; if (NOT ${LLVM_INSTALL_GTEST}); set (BUILDTREE_ONLY BUILDTREE_ONLY); set(EXCLUDE_FROM_ALL ON); endif(). add_llvm_library(LLVMTestingSupport; Error.cpp; SupportHelpers.cpp. ${BUILDTREE_ONLY}. ADDITIONAL_HEADER_DIRS; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Testing/Support. LINK_COMPONENTS; Support; ). target_link_libraries(LLVMTestingSupport PRIVATE llvm_gtest). # This is to avoid the error in gtest-death-test-internal.h; # (150,16): error: 'Create' overrides a member function but; # is not marked 'override' [-Werror,-Wsuggest-override]; # during self-compile on Windows. if (HOST_WINNT AND ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-suggest-override""); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Support/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Hello/CMakeLists.txt:86,Modifiability,plugin,plugin,86,"# If we don't need RTTI or EH, there's no reason to export anything; # from the hello plugin.; if( NOT LLVM_REQUIRES_RTTI ); if( NOT LLVM_REQUIRES_EH ); set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/Hello.exports); endif(); endif(). if(WIN32 OR CYGWIN OR ZOS); set(LLVM_LINK_COMPONENTS Core Support); endif(). add_llvm_library( LLVMHello MODULE BUILDTREE_ONLY; Hello.cpp. DEPENDS; intrinsics_gen; PLUGIN_TOOL; opt; ); ",MatchSource.DOCS,interpreter/llvm-project/llvm/lib/Transforms/Hello/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Hello/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/CMakeLists.txt:144,Modifiability,plugin,plugin,144,"if( NOT LLVM_BUILD_TOOLS ); set(EXCLUDE_FROM_ALL ON); endif(). # If we don't need RTTI or EH, there's no reason to export anything; # from this plugin.; if( NOT LLVM_REQUIRES_RTTI ); if( NOT LLVM_REQUIRES_EH ); set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bugpoint.exports); endif(); endif(). if(WIN32 OR CYGWIN OR ZOS); set(LLVM_LINK_COMPONENTS Core Support); endif(). add_llvm_library( BugpointPasses MODULE BUILDTREE_ONLY; TestPasses.cpp. DEPENDS; intrinsics_gen; bugpoint; ); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/bugpoint-passes/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint-passes/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt:205,Integrability,message,message,205,"option(LLVM_INCLUDE_DXIL_TESTS ""Include DXIL tests"" Off); mark_as_advanced(LLVM_INCLUDE_DXIL_TESTS). if (NOT LLVM_INCLUDE_DXIL_TESTS); return(); endif (). if (NOT ""DirectX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building dxil-dis tests is unsupported without the DirectX target""); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). if (DXIL_DIS); add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${DXIL_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""); return(); endif (). include(ExternalProject). set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-src); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-bins); set(GIT_SETTINGS GIT_REPOSITORY https://github.com/microsoft/DirectXShaderCompiler.git). if (DXC_SOURCE_DIR); set(SOURCE_DIR ${DXC_SOURCE_DIR}); unset(GIT_SETTINGS); endif (). ExternalProject_Add(DXC; ${GIT_SETTINGS}; SOURCE_DIR ${SOURCE_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS -C ${SOURCE_DIR}/cmake/caches/PredefinedParams.cmake -DLLVM_INCLUDE_TESTS=On; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target llvm-dis; BUILD_BYPRODUCTS ${BINARY_DIR}/bin/llvm-dis; INSTALL_COMMAND """"; ). add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/bin/llvm-dis${CMAKE_EXECUTABLE_SUFFIX}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""; DEPENDS DXC; ); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt:1046,Performance,cache,caches,1046,"option(LLVM_INCLUDE_DXIL_TESTS ""Include DXIL tests"" Off); mark_as_advanced(LLVM_INCLUDE_DXIL_TESTS). if (NOT LLVM_INCLUDE_DXIL_TESTS); return(); endif (). if (NOT ""DirectX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building dxil-dis tests is unsupported without the DirectX target""); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). if (DXIL_DIS); add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${DXIL_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""); return(); endif (). include(ExternalProject). set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-src); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-bins); set(GIT_SETTINGS GIT_REPOSITORY https://github.com/microsoft/DirectXShaderCompiler.git). if (DXC_SOURCE_DIR); set(SOURCE_DIR ${DXC_SOURCE_DIR}); unset(GIT_SETTINGS); endif (). ExternalProject_Add(DXC; ${GIT_SETTINGS}; SOURCE_DIR ${SOURCE_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS -C ${SOURCE_DIR}/cmake/caches/PredefinedParams.cmake -DLLVM_INCLUDE_TESTS=On; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target llvm-dis; BUILD_BYPRODUCTS ${BINARY_DIR}/bin/llvm-dis; INSTALL_COMMAND """"; ). add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/bin/llvm-dis${CMAKE_EXECUTABLE_SUFFIX}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""; DEPENDS DXC; ); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt:45,Testability,test,tests,45,"option(LLVM_INCLUDE_DXIL_TESTS ""Include DXIL tests"" Off); mark_as_advanced(LLVM_INCLUDE_DXIL_TESTS). if (NOT LLVM_INCLUDE_DXIL_TESTS); return(); endif (). if (NOT ""DirectX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building dxil-dis tests is unsupported without the DirectX target""); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). if (DXIL_DIS); add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${DXIL_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""); return(); endif (). include(ExternalProject). set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-src); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-bins); set(GIT_SETTINGS GIT_REPOSITORY https://github.com/microsoft/DirectXShaderCompiler.git). if (DXC_SOURCE_DIR); set(SOURCE_DIR ${DXC_SOURCE_DIR}); unset(GIT_SETTINGS); endif (). ExternalProject_Add(DXC; ${GIT_SETTINGS}; SOURCE_DIR ${SOURCE_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS -C ${SOURCE_DIR}/cmake/caches/PredefinedParams.cmake -DLLVM_INCLUDE_TESTS=On; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target llvm-dis; BUILD_BYPRODUCTS ${BINARY_DIR}/bin/llvm-dis; INSTALL_COMMAND """"; ). add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/bin/llvm-dis${CMAKE_EXECUTABLE_SUFFIX}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""; DEPENDS DXC; ); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt:244,Testability,test,tests,244,"option(LLVM_INCLUDE_DXIL_TESTS ""Include DXIL tests"" Off); mark_as_advanced(LLVM_INCLUDE_DXIL_TESTS). if (NOT LLVM_INCLUDE_DXIL_TESTS); return(); endif (). if (NOT ""DirectX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building dxil-dis tests is unsupported without the DirectX target""); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). if (DXIL_DIS); add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${DXIL_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""); return(); endif (). include(ExternalProject). set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-src); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-bins); set(GIT_SETTINGS GIT_REPOSITORY https://github.com/microsoft/DirectXShaderCompiler.git). if (DXC_SOURCE_DIR); set(SOURCE_DIR ${DXC_SOURCE_DIR}); unset(GIT_SETTINGS); endif (). ExternalProject_Add(DXC; ${GIT_SETTINGS}; SOURCE_DIR ${SOURCE_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS -C ${SOURCE_DIR}/cmake/caches/PredefinedParams.cmake -DLLVM_INCLUDE_TESTS=On; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target llvm-dis; BUILD_BYPRODUCTS ${BINARY_DIR}/bin/llvm-dis; INSTALL_COMMAND """"; ). add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/bin/llvm-dis${CMAKE_EXECUTABLE_SUFFIX}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""; DEPENDS DXC; ); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/CMakeLists.txt:306,Modifiability,plugin,plugin,306,set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gold.exports). if( LLVM_ENABLE_PIC AND LLVM_BINUTILS_INCDIR ); include_directories( ${LLVM_BINUTILS_INCDIR} ). set(LLVM_LINK_COMPONENTS; ${LLVM_TARGETS_TO_BUILD}; Linker; LTO; BitWriter; IPO; TargetParser; ). add_llvm_library(LLVMgold MODULE; gold-plugin.cpp; ). endif(); ,MatchSource.DOCS,interpreter/llvm-project/llvm/tools/gold/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/README.txt:436,Availability,error,error,436,"The LLVM Gold LTO Plugin; ========================. This directory contains a plugin that is designed to work with binutils; gold linker. At present time, this is not the default linker in; binutils, and the default build of gold does not support plugins. See docs/GoldPlugin.html for complete build and usage instructions. NOTE: libLTO and LLVMgold aren't built without PIC because they would fail; to link on x86-64 with a relocation error: PIC and non-PIC can't be combined.; As an alternative to passing --enable-pic, you can use 'make ENABLE_PIC=1' in; your entire LLVM build.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/gold/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/README.txt:78,Modifiability,plugin,plugin,78,"The LLVM Gold LTO Plugin; ========================. This directory contains a plugin that is designed to work with binutils; gold linker. At present time, this is not the default linker in; binutils, and the default build of gold does not support plugins. See docs/GoldPlugin.html for complete build and usage instructions. NOTE: libLTO and LLVMgold aren't built without PIC because they would fail; to link on x86-64 with a relocation error: PIC and non-PIC can't be combined.; As an alternative to passing --enable-pic, you can use 'make ENABLE_PIC=1' in; your entire LLVM build.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/gold/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/README.txt:247,Modifiability,plugin,plugins,247,"The LLVM Gold LTO Plugin; ========================. This directory contains a plugin that is designed to work with binutils; gold linker. At present time, this is not the default linker in; binutils, and the default build of gold does not support plugins. See docs/GoldPlugin.html for complete build and usage instructions. NOTE: libLTO and LLVMgold aren't built without PIC because they would fail; to link on x86-64 with a relocation error: PIC and non-PIC can't be combined.; As an alternative to passing --enable-pic, you can use 'make ENABLE_PIC=1' in; your entire LLVM build.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/gold/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt:354,Availability,failure,failures,354,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; MCDisassembler; Object; Support; Target; ). # We should only have llvm-c-test use libLLVM if libLLVM is built with the; # default list of components. Using libLLVM with custom components can result in; # build failures. set (USE_LLVM_DYLIB FALSE). if (TARGET LLVM); set (USE_LLVM_DYLIB TRUE); if (DEFINED LLVM_DYLIB_COMPONENTS); foreach(c in ${LLVM_LINK_COMPONENTS}); list(FIND LLVM_DYLIB_COMPONENTS ${c} C_IDX); if (C_IDX EQUAL -1); set(USE_LLVM_DYLIB FALSE); break(); endif(); endforeach(); endif(); endif(). if(USE_LLVM_DYLIB); set(LLVM_LINK_COMPONENTS); endif(). if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wstrict-prototypes""); endif (). add_llvm_tool(llvm-c-test; attributes.c; calc.c; debuginfo.c; diagnostic.c; disassemble.c; echo.cpp; helpers.c; include-all.c; main.c; module.c; metadata.c; object.c; targets.c; ). if(USE_LLVM_DYLIB); target_link_libraries(llvm-c-test LLVM); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt:920,Availability,echo,echo,920,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; MCDisassembler; Object; Support; Target; ). # We should only have llvm-c-test use libLLVM if libLLVM is built with the; # default list of components. Using libLLVM with custom components can result in; # build failures. set (USE_LLVM_DYLIB FALSE). if (TARGET LLVM); set (USE_LLVM_DYLIB TRUE); if (DEFINED LLVM_DYLIB_COMPONENTS); foreach(c in ${LLVM_LINK_COMPONENTS}); list(FIND LLVM_DYLIB_COMPONENTS ${c} C_IDX); if (C_IDX EQUAL -1); set(USE_LLVM_DYLIB FALSE); break(); endif(); endforeach(); endif(); endif(). if(USE_LLVM_DYLIB); set(LLVM_LINK_COMPONENTS); endif(). if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wstrict-prototypes""); endif (). add_llvm_tool(llvm-c-test; attributes.c; calc.c; debuginfo.c; diagnostic.c; disassemble.c; echo.cpp; helpers.c; include-all.c; main.c; module.c; metadata.c; object.c; targets.c; ). if(USE_LLVM_DYLIB); target_link_libraries(llvm-c-test LLVM); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt:217,Testability,test,test,217,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; MCDisassembler; Object; Support; Target; ). # We should only have llvm-c-test use libLLVM if libLLVM is built with the; # default list of components. Using libLLVM with custom components can result in; # build failures. set (USE_LLVM_DYLIB FALSE). if (TARGET LLVM); set (USE_LLVM_DYLIB TRUE); if (DEFINED LLVM_DYLIB_COMPONENTS); foreach(c in ${LLVM_LINK_COMPONENTS}); list(FIND LLVM_DYLIB_COMPONENTS ${c} C_IDX); if (C_IDX EQUAL -1); set(USE_LLVM_DYLIB FALSE); break(); endif(); endforeach(); endif(); endif(). if(USE_LLVM_DYLIB); set(LLVM_LINK_COMPONENTS); endif(). if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wstrict-prototypes""); endif (). add_llvm_tool(llvm-c-test; attributes.c; calc.c; debuginfo.c; diagnostic.c; disassemble.c; echo.cpp; helpers.c; include-all.c; main.c; module.c; metadata.c; object.c; targets.c; ). if(USE_LLVM_DYLIB); target_link_libraries(llvm-c-test LLVM); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt:850,Testability,test,test,850,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; MCDisassembler; Object; Support; Target; ). # We should only have llvm-c-test use libLLVM if libLLVM is built with the; # default list of components. Using libLLVM with custom components can result in; # build failures. set (USE_LLVM_DYLIB FALSE). if (TARGET LLVM); set (USE_LLVM_DYLIB TRUE); if (DEFINED LLVM_DYLIB_COMPONENTS); foreach(c in ${LLVM_LINK_COMPONENTS}); list(FIND LLVM_DYLIB_COMPONENTS ${c} C_IDX); if (C_IDX EQUAL -1); set(USE_LLVM_DYLIB FALSE); break(); endif(); endforeach(); endif(); endif(). if(USE_LLVM_DYLIB); set(LLVM_LINK_COMPONENTS); endif(). if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wstrict-prototypes""); endif (). add_llvm_tool(llvm-c-test; attributes.c; calc.c; debuginfo.c; diagnostic.c; disassemble.c; echo.cpp; helpers.c; include-all.c; main.c; module.c; metadata.c; object.c; targets.c; ). if(USE_LLVM_DYLIB); target_link_libraries(llvm-c-test LLVM); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt:1059,Testability,test,test,1059,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; MCDisassembler; Object; Support; Target; ). # We should only have llvm-c-test use libLLVM if libLLVM is built with the; # default list of components. Using libLLVM with custom components can result in; # build failures. set (USE_LLVM_DYLIB FALSE). if (TARGET LLVM); set (USE_LLVM_DYLIB TRUE); if (DEFINED LLVM_DYLIB_COMPONENTS); foreach(c in ${LLVM_LINK_COMPONENTS}); list(FIND LLVM_DYLIB_COMPONENTS ${c} C_IDX); if (C_IDX EQUAL -1); set(USE_LLVM_DYLIB FALSE); break(); endif(); endforeach(); endif(); endif(). if(USE_LLVM_DYLIB); set(LLVM_LINK_COMPONENTS); endif(). if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wstrict-prototypes""); endif (). add_llvm_tool(llvm-c-test; attributes.c; calc.c; debuginfo.c; diagnostic.c; disassemble.c; echo.cpp; helpers.c; include-all.c; main.c; module.c; metadata.c; object.c; targets.c; ). if(USE_LLVM_DYLIB); target_link_libraries(llvm-c-test LLVM); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3376,Integrability,depend,dependency,3376,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:222,Modifiability,config,config,222,"set(LLVM_LINK_COMPONENTS; Support; TargetParser; ). set(BUILDVARIABLES_SRCPATH ${CMAKE_CURRENT_SOURCE_DIR}/BuildVariables.inc.in); set(BUILDVARIABLES_OBJPATH ${CMAKE_CURRENT_BINARY_DIR}/BuildVariables.inc). # Add the llvm-config tool.; add_llvm_tool(llvm-config; llvm-config.cpp; # This utility doesn't use much of LLVM, so linking a shared library for the; # entire thing is overkill. Avoiding that especially saves on build time when cross; # compiling LLVM and building both cross and native `llvm-config`s. We don't; # want to build an entire native libLLVM.so in addition to the cross one just; # for the native `llvm-config`!; DISABLE_LLVM_LINK_LLVM_DYLIB; ). # Compute the substitution values for various items.; get_property(SUPPORT_SYSTEM_LIBS TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS); get_property(WINDOWSMANIFEST_SYSTEM_LIBS TARGET LLVMWindowsManifest PROPERTY LLVM_SYSTEM_LIBS). foreach(l ${SUPPORT_SYSTEM_LIBS} ${WINDOWSMANIFEST_SYSTEM_LIBS}); if(MSVC); if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}.lib""); endif(); else(); if (l MATCHES ""^-""); # If it's an option, pass it without changes.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVaria",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:255,Modifiability,config,config,255,"set(LLVM_LINK_COMPONENTS; Support; TargetParser; ). set(BUILDVARIABLES_SRCPATH ${CMAKE_CURRENT_SOURCE_DIR}/BuildVariables.inc.in); set(BUILDVARIABLES_OBJPATH ${CMAKE_CURRENT_BINARY_DIR}/BuildVariables.inc). # Add the llvm-config tool.; add_llvm_tool(llvm-config; llvm-config.cpp; # This utility doesn't use much of LLVM, so linking a shared library for the; # entire thing is overkill. Avoiding that especially saves on build time when cross; # compiling LLVM and building both cross and native `llvm-config`s. We don't; # want to build an entire native libLLVM.so in addition to the cross one just; # for the native `llvm-config`!; DISABLE_LLVM_LINK_LLVM_DYLIB; ). # Compute the substitution values for various items.; get_property(SUPPORT_SYSTEM_LIBS TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS); get_property(WINDOWSMANIFEST_SYSTEM_LIBS TARGET LLVMWindowsManifest PROPERTY LLVM_SYSTEM_LIBS). foreach(l ${SUPPORT_SYSTEM_LIBS} ${WINDOWSMANIFEST_SYSTEM_LIBS}); if(MSVC); if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}.lib""); endif(); else(); if (l MATCHES ""^-""); # If it's an option, pass it without changes.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVaria",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:268,Modifiability,config,config,268,"set(LLVM_LINK_COMPONENTS; Support; TargetParser; ). set(BUILDVARIABLES_SRCPATH ${CMAKE_CURRENT_SOURCE_DIR}/BuildVariables.inc.in); set(BUILDVARIABLES_OBJPATH ${CMAKE_CURRENT_BINARY_DIR}/BuildVariables.inc). # Add the llvm-config tool.; add_llvm_tool(llvm-config; llvm-config.cpp; # This utility doesn't use much of LLVM, so linking a shared library for the; # entire thing is overkill. Avoiding that especially saves on build time when cross; # compiling LLVM and building both cross and native `llvm-config`s. We don't; # want to build an entire native libLLVM.so in addition to the cross one just; # for the native `llvm-config`!; DISABLE_LLVM_LINK_LLVM_DYLIB; ). # Compute the substitution values for various items.; get_property(SUPPORT_SYSTEM_LIBS TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS); get_property(WINDOWSMANIFEST_SYSTEM_LIBS TARGET LLVMWindowsManifest PROPERTY LLVM_SYSTEM_LIBS). foreach(l ${SUPPORT_SYSTEM_LIBS} ${WINDOWSMANIFEST_SYSTEM_LIBS}); if(MSVC); if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}.lib""); endif(); else(); if (l MATCHES ""^-""); # If it's an option, pass it without changes.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVaria",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:501,Modifiability,config,config,501,"set(LLVM_LINK_COMPONENTS; Support; TargetParser; ). set(BUILDVARIABLES_SRCPATH ${CMAKE_CURRENT_SOURCE_DIR}/BuildVariables.inc.in); set(BUILDVARIABLES_OBJPATH ${CMAKE_CURRENT_BINARY_DIR}/BuildVariables.inc). # Add the llvm-config tool.; add_llvm_tool(llvm-config; llvm-config.cpp; # This utility doesn't use much of LLVM, so linking a shared library for the; # entire thing is overkill. Avoiding that especially saves on build time when cross; # compiling LLVM and building both cross and native `llvm-config`s. We don't; # want to build an entire native libLLVM.so in addition to the cross one just; # for the native `llvm-config`!; DISABLE_LLVM_LINK_LLVM_DYLIB; ). # Compute the substitution values for various items.; get_property(SUPPORT_SYSTEM_LIBS TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS); get_property(WINDOWSMANIFEST_SYSTEM_LIBS TARGET LLVMWindowsManifest PROPERTY LLVM_SYSTEM_LIBS). foreach(l ${SUPPORT_SYSTEM_LIBS} ${WINDOWSMANIFEST_SYSTEM_LIBS}); if(MSVC); if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}.lib""); endif(); else(); if (l MATCHES ""^-""); # If it's an option, pass it without changes.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVaria",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:623,Modifiability,config,config,623,"set(LLVM_LINK_COMPONENTS; Support; TargetParser; ). set(BUILDVARIABLES_SRCPATH ${CMAKE_CURRENT_SOURCE_DIR}/BuildVariables.inc.in); set(BUILDVARIABLES_OBJPATH ${CMAKE_CURRENT_BINARY_DIR}/BuildVariables.inc). # Add the llvm-config tool.; add_llvm_tool(llvm-config; llvm-config.cpp; # This utility doesn't use much of LLVM, so linking a shared library for the; # entire thing is overkill. Avoiding that especially saves on build time when cross; # compiling LLVM and building both cross and native `llvm-config`s. We don't; # want to build an entire native libLLVM.so in addition to the cross one just; # for the native `llvm-config`!; DISABLE_LLVM_LINK_LLVM_DYLIB; ). # Compute the substitution values for various items.; get_property(SUPPORT_SYSTEM_LIBS TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS); get_property(WINDOWSMANIFEST_SYSTEM_LIBS TARGET LLVMWindowsManifest PROPERTY LLVM_SYSTEM_LIBS). foreach(l ${SUPPORT_SYSTEM_LIBS} ${WINDOWSMANIFEST_SYSTEM_LIBS}); if(MSVC); if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}.lib""); endif(); else(); if (l MATCHES ""^-""); # If it's an option, pass it without changes.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVaria",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:1586,Modifiability,config,config,1586,"n to the cross one just; # for the native `llvm-config`!; DISABLE_LLVM_LINK_LLVM_DYLIB; ). # Compute the substitution values for various items.; get_property(SUPPORT_SYSTEM_LIBS TARGET LLVMSupport PROPERTY LLVM_SYSTEM_LIBS); get_property(WINDOWSMANIFEST_SYSTEM_LIBS TARGET LLVMWindowsManifest PROPERTY LLVM_SYSTEM_LIBS). foreach(l ${SUPPORT_SYSTEM_LIBS} ${WINDOWSMANIFEST_SYSTEM_LIBS}); if(MSVC); if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}.lib""); endif(); else(); if (l MATCHES ""^-""); # If it's an option, pass it without changes.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVariables.inc.; set(LLVM_SRC_ROOT ${LLVM_MAIN_SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJO",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:2308,Modifiability,config,config,2308,"hanges.; set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); # Otherwise assume it's a library name we need to link with.; if(IS_ABSOLUTE ${l}); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""${l}""); else(); set(SYSTEM_LIBS ${SYSTEM_LIBS} ""-l${l}""); endif(); endif(); endif(); endforeach(). string(REPLACE "";"" "" "" SYSTEM_LIBS ""${SYSTEM_LIBS}""). # Fetch target specific compile options, e.g. RTTI option; get_property(COMPILE_FLAGS TARGET llvm-config PROPERTY COMPILE_FLAGS). # NOTE: We don't want to start extracting any random C/CXX flags that the; # user may add that could affect the ABI. We only want to extract flags; # that have been added by the LLVM build system.; string(REGEX MATCH ""-stdlib=[^ ]+"" LLVM_CXX_STDLIB_FLAG ${CMAKE_CXX_FLAGS}); string(REGEX MATCH ""-std=[^ ]+"" LLVM_C_STD_FLAG ${CMAKE_C_FLAGS}). # Use configure_file to create BuildVariables.inc.; set(LLVM_SRC_ROOT ${LLVM_MAIN_SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set bui",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3296,Modifiability,config,config,3296,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3467,Modifiability,config,config,3467,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3625,Modifiability,config,config,3625,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3716,Modifiability,config,config,3716,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3824,Modifiability,config,config,3824,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt:3998,Modifiability,config,config,3998,"SRC_DIR}); set(LLVM_OBJ_ROOT ${LLVM_BINARY_DIR}); set(LLVM_CPPFLAGS ""${LLVM_DEFINITIONS}""); set(LLVM_CFLAGS ""${LLVM_C_STD_FLAG} ${LLVM_DEFINITIONS}""); # The language standard potentially affects the ABI/API of LLVM, so we want; # to make sure it is reported by llvm-config.; set(LLVM_CXXFLAGS ""${CMAKE_CXX${CMAKE_CXX_STANDARD}_STANDARD_COMPILE_OPTION} ${LLVM_CXX_STDLIB_FLAG} ${COMPILE_FLAGS} ${LLVM_DEFINITIONS}""); set(LLVM_BUILD_SYSTEM cmake); set(LLVM_HAS_RTTI ${LLVM_CONFIG_HAS_RTTI}); set(LLVM_DYLIB_VERSION ""${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX}""). # Use the C++ link flags, since they should be a superset of C link flags.; set(LLVM_LDFLAGS ""${CMAKE_CXX_LINK_FLAGS}""); set(LLVM_BUILDMODE ${CMAKE_BUILD_TYPE}); set(LLVM_SYSTEM_LIBS ${SYSTEM_LIBS}); string(REPLACE "";"" "" "" LLVM_TARGETS_BUILT ""${LLVM_TARGETS_TO_BUILD}""); llvm_canonicalize_cmake_booleans(; LLVM_BUILD_LLVM_DYLIB; LLVM_LINK_LLVM_DYLIB; LLVM_HAS_RTTI; BUILD_SHARED_LIBS); llvm_expand_pseudo_components(LLVM_DYLIB_COMPONENTS_expanded ""${LLVM_DYLIB_COMPONENTS}""); configure_file(${BUILDVARIABLES_SRCPATH} ${BUILDVARIABLES_OBJPATH} @ONLY). # Set build-time environment(s).; add_compile_definitions(CMAKE_CFG_INTDIR=""$<CONFIG>""). if(LLVM_ENABLE_MODULES); target_compile_options(llvm-config PUBLIC; ""-fmodules-ignore-macro=CMAKE_CFG_INTDIR""; ); endif(). # Add the dependency on the generation step.; add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/llvm-config.cpp ${BUILDVARIABLES_OBJPATH}). if(CMAKE_CROSSCOMPILING); if (LLVM_NATIVE_TOOL_DIR AND NOT LLVM_CONFIG_PATH); if (EXISTS ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); set(LLVM_CONFIG_PATH ""${LLVM_NATIVE_TOOL_DIR}/llvm-config${LLVM_HOST_EXECUTABLE_SUFFIX}""); endif(); endif(). if (NOT LLVM_CONFIG_PATH); build_native_tool(llvm-config LLVM_CONFIG_PATH); set(LLVM_CONFIG_PATH ""${LLVM_CONFIG_PATH}"" CACHE STRING """"). add_custom_target(NativeLLVMConfig DEPENDS ${LLVM_CONFIG_PATH}); add_dependencies(llvm-config NativeLLVMConfig); endif(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:4613,Energy Efficiency,efficient,efficient,4613,"---------------------===//; // LVDoubleMap to return optional<ValueType> instead of null pointer.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294164. The more idiomatic LLVM way to handle this would be to have 'find '; return Optional<ValueType>. //===----------------------------------------------------------------------===//; // Pass references instead of pointers (Comparison functions).; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125782#inline-1293920. In the comparison functions, pass references instead of pointers (when; pointers cannot be null). //===----------------------------------------------------------------------===//; // Use StringMap where possible.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; fro",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:5598,Energy Efficiency,adapt,adapted,5598,"e-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'lib/DebugInfo/CodeView/SymbolDumper.cpp' that can be used. //===----------------------------------------------------------------------===//; // Use of std::unordered_set instead of std::set.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1221421. Replace the std::set usage for DeducedScopes, UnresolvedScopes and; IdentifiedNamespaces with std",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:6113,Energy Efficiency,adapt,adapted,6113,"==//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'lib/DebugInfo/CodeView/SymbolDumper.cpp' that can be used. //===----------------------------------------------------------------------===//; // Use of std::unordered_set instead of std::set.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1221421. Replace the std::set usage for DeducedScopes, UnresolvedScopes and; IdentifiedNamespaces with std::unordered_set and get the benefit; of the O(1) while inserting/searching, as the order is not important. //===----------------------------------------------------------------------===//; // Optimize 'LVNamespaceDeduction::find' funtion.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1296195. Optimize the 'find' method to use the proposed code:. LVStringRefs::iterator Iter = std::find_if(Components.begin(), Components.end(),; [](StringRe",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:8128,Energy Efficiency,allocate,allocate,8128,"tifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWAR",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:5598,Modifiability,adapt,adapted,5598,"e-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'lib/DebugInfo/CodeView/SymbolDumper.cpp' that can be used. //===----------------------------------------------------------------------===//; // Use of std::unordered_set instead of std::set.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1221421. Replace the std::set usage for DeducedScopes, UnresolvedScopes and; IdentifiedNamespaces with std",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:6113,Modifiability,adapt,adapted,6113,"==//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'lib/DebugInfo/CodeView/SymbolDumper.cpp' that can be used. //===----------------------------------------------------------------------===//; // Use of std::unordered_set instead of std::set.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1221421. Replace the std::set usage for DeducedScopes, UnresolvedScopes and; IdentifiedNamespaces with std::unordered_set and get the benefit; of the O(1) while inserting/searching, as the order is not important. //===----------------------------------------------------------------------===//; // Optimize 'LVNamespaceDeduction::find' funtion.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1296195. Optimize the 'find' method to use the proposed code:. LVStringRefs::iterator Iter = std::find_if(Components.begin(), Components.end(),; [](StringRe",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:973,Security,expose,expose,973,"//===- llvm/tools/llvm-debuginfo-analyzer/README.txt ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains notes collected during the development, review and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.;",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:993,Security,hash,hasher,993,"//===- llvm/tools/llvm-debuginfo-analyzer/README.txt ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains notes collected during the development, review and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.;",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1410,Security,expose,exposed,1410,"and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch bet",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1512,Security,validat,validate,1512,"and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch bet",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:453,Testability,test,test,453,"//===- llvm/tools/llvm-debuginfo-analyzer/README.txt ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains notes collected during the development, review and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.;",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1173,Testability,test,test,1173,"LVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains notes collected during the development, review and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unitte",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1196,Testability,test,test,1196,"LVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains notes collected during the development, review and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unitte",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1209,Testability,log,logical,1209,"LVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains notes collected during the development, review and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unitte",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1503,Testability,test,tests,1503,"and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch bet",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1525,Testability,log,logical,1525,"and test.; // It describes limitations, know issues and future work.; //; //===----------------------------------------------------------------------===//. //===----------------------------------------------------------------------===//; // Remove the use of macros in 'LVReader.h' that describe the bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch bet",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1717,Testability,test,tests,1717,"he bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1743,Testability,test,test,1743,"he bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1785,Testability,test,test,1785,"--------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===--------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1809,Testability,test,test,1809,"--------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===--------------------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1846,Testability,test,test,1846,"https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------=",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1994,Testability,test,tests,1994," with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------===//; // Remove 'LVScope::Children' container.; //===------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:2295,Testability,test,test,2295,"s://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------===//; // Remove 'LVScope::Children' container.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1373902. Use a chaining iterator over the other containers rather than keep a; separate container 'Children' that mirrors their contents. //===----------------------------------------------------------------------===//; // Use TableGen for command line options.; //===--------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:2318,Testability,test,test,2318,"s://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------===//; // Remove 'LVScope::Children' container.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1373902. Use a chaining iterator over the other containers rather than keep a; separate container 'Children' that mirrors their contents. //===----------------------------------------------------------------------===//; // Use TableGen for command line options.; //===--------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:2331,Testability,log,logical,2331,"s://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------===//; // Remove 'LVScope::Children' container.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1373902. Use a chaining iterator over the other containers rather than keep a; separate container 'Children' that mirrors their contents. //===----------------------------------------------------------------------===//; // Use TableGen for command line options.; //===--------------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:5098,Testability,log,logical,5098,"n functions).; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125782#inline-1293920. In the comparison functions, pass references instead of pointers (when; pointers cannot be null). //===----------------------------------------------------------------------===//; // Use StringMap where possible.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some cod",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:5229,Testability,log,logical,5229,"of pointers (when; pointers cannot be null). //===----------------------------------------------------------------------===//; // Use StringMap where possible.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'lib/DebugInfo/CodeView/SymbolDumper.cpp' that can be used. //===----------------------------------------------------------------------===//",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:7500,Testability,log,logical,7500,"ce the std::set usage for DeducedScopes, UnresolvedScopes and; IdentifiedNamespaces with std::unordered_set and get the benefit; of the O(1) while inserting/searching, as the order is not important. //===----------------------------------------------------------------------===//; // Optimize 'LVNamespaceDeduction::find' funtion.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125784#inline-1296195. Optimize the 'find' method to use the proposed code:. LVStringRefs::iterator Iter = std::find_if(Components.begin(), Components.end(),; [](StringRef Name) {; return IdentifiedNamespaces.find(Name) == IdentifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===---------------------",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:7904,Testability,log,logical,7904," use the proposed code:. LVStringRefs::iterator Iter = std::find_if(Components.begin(), Components.end(),; [](StringRef Name) {; return IdentifiedNamespaces.find(Name) == IdentifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://r",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:7992,Testability,log,logical,7992," use the proposed code:. LVStringRefs::iterator Iter = std::find_if(Components.begin(), Components.end(),; [](StringRef Name) {; return IdentifiedNamespaces.find(Name) == IdentifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://r",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:8103,Testability,log,logical,8103,"tifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWAR",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:8143,Testability,log,logical,8143,"tifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWAR",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:8166,Testability,log,logical,8166,"tifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWAR",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:10282,Testability,log,logical,10282,"---------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWARF section; names (.debug_pubnames, .debug_names) and CodeView public symbol stream; (S_PUB32), the readers collects the needed information while processing; the debug information. If the object file supports the above section names and stream, use them; to create the public names. //===----------------------------------------------------------------------===//; // Add support for some extra DWARF locations.; //===----------------------------------------------------------------------===//; The following DWARF debug location operands are not supported:. - DW_OP_const_type; - DW_OP_entry_value; - DW_OP_implicit_value. //===----------------------------------------------------------------------===//; // Add support for additional binary formats.; //===----------------------------------------------------------------------===//; - WebAssembly (Wasm).; https://github.com/llvm/llvm-project/issues/57040#issuecomment-1211336680. - Extended COFF (XCOFF). //===----------------------------------------------------------------------===//; // Add support for JSON or YAML.; //===----------------------------------------------------------------------===//; The logical view uses its own and non-standard free form text when; displaying information on logical elements. //===----------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:10372,Testability,log,logical,10372,"---------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWARF section; names (.debug_pubnames, .debug_names) and CodeView public symbol stream; (S_PUB32), the readers collects the needed information while processing; the debug information. If the object file supports the above section names and stream, use them; to create the public names. //===----------------------------------------------------------------------===//; // Add support for some extra DWARF locations.; //===----------------------------------------------------------------------===//; The following DWARF debug location operands are not supported:. - DW_OP_const_type; - DW_OP_entry_value; - DW_OP_implicit_value. //===----------------------------------------------------------------------===//; // Add support for additional binary formats.; //===----------------------------------------------------------------------===//; - WebAssembly (Wasm).; https://github.com/llvm/llvm-project/issues/57040#issuecomment-1211336680. - Extended COFF (XCOFF). //===----------------------------------------------------------------------===//; // Add support for JSON or YAML.; //===----------------------------------------------------------------------===//; The logical view uses its own and non-standard free form text when; displaying information on logical elements. //===----------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-driver/CMakeLists.txt:1495,Deployability,install,install,1495,"get_property(LLVM_COMMON_DEPENDS GLOBAL PROPERTY LLVM_DRIVER_DEPS); get_property(LLVM_DRIVER_OBJLIBS GLOBAL PROPERTY LLVM_DRIVER_OBJLIBS). get_property(LLVM_DRIVER_TOOLS GLOBAL PROPERTY LLVM_DRIVER_TOOLS). list(SORT LLVM_DRIVER_TOOLS); list(REVERSE LLVM_DRIVER_TOOLS); foreach(tool ${LLVM_DRIVER_TOOLS}); string(REPLACE ""-"" ""_"" tool_entry ${tool}); get_property(tool_aliases GLOBAL PROPERTY LLVM_DRIVER_TOOL_ALIASES_${tool}); foreach(alias ${tool_aliases}); set_property(GLOBAL APPEND PROPERTY LLVM_DRIVER_TOOL_SYMLINKS ${alias}); string(REPLACE ""llvm-"" """" alias ${alias}); set(def_decl ""${def_decl}LLVM_DRIVER_TOOL(\""${alias}\"", ${tool_entry})\n""); endforeach(); endforeach(). file(WRITE; ""${CMAKE_CURRENT_BINARY_DIR}/LLVMDriverTools.def""; ""${def_decl}#undef LLVM_DRIVER_TOOL\n""). target_include_directories(llvm-driver PRIVATE ${CMAKE_CURRENT_BINARY_DIR}); target_sources(llvm-driver PRIVATE llvm-driver.cpp). set_target_properties(llvm-driver PROPERTIES OUTPUT_NAME llvm). target_link_libraries(llvm-driver PUBLIC ${LLVM_DRIVER_OBJLIBS}); target_link_libraries(llvm-driver PUBLIC LLVMDebuginfod). if(APPLE); # dsymutil uses some CoreFoundation stuff on Darwin...; target_link_libraries(llvm-driver PRIVATE ""-framework CoreFoundation""); endif(APPLE). macro(generate_driver_tool_targets); get_property(LLVM_DRIVER_TOOL_SYMLINKS GLOBAL PROPERTY LLVM_DRIVER_TOOL_SYMLINKS); foreach(name ${LLVM_DRIVER_TOOL_SYMLINKS}); add_llvm_tool_symlink(${name} llvm-driver ALWAYS_GENERATE); # Always generate install targets; llvm_install_symlink(LLVM ${name} llvm-driver ALWAYS_GENERATE); endforeach(); endmacro(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/CMakeLists.txt:907,Deployability,install,install-name-tool,907,set(LLVM_LINK_COMPONENTS; Object; ObjCopy; Option; Support; TargetParser; MC; BinaryFormat; ). set(LLVM_TARGET_DEFINITIONS ObjcopyOpts.td); tablegen(LLVM ObjcopyOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(ObjcopyOptsTableGen). set(LLVM_TARGET_DEFINITIONS InstallNameToolOpts.td); tablegen(LLVM InstallNameToolOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(InstallNameToolOptsTableGen). set(LLVM_TARGET_DEFINITIONS BitcodeStripOpts.td); tablegen(LLVM BitcodeStripOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(BitcodeStripOptsTableGen). set(LLVM_TARGET_DEFINITIONS StripOpts.td); tablegen(LLVM StripOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(StripOptsTableGen). add_llvm_tool(llvm-objcopy; ObjcopyOptions.cpp; llvm-objcopy.cpp; DEPENDS; ObjcopyOptsTableGen; InstallNameToolOptsTableGen; StripOptsTableGen; GENERATE_DRIVER; ). add_llvm_tool_symlink(llvm-install-name-tool llvm-objcopy); add_llvm_tool_symlink(llvm-bitcode-strip llvm-objcopy); add_llvm_tool_symlink(llvm-strip llvm-objcopy). if(LLVM_INSTALL_BINUTILS_SYMLINKS); add_llvm_tool_symlink(objcopy llvm-objcopy); add_llvm_tool_symlink(strip llvm-objcopy); endif(). if(LLVM_INSTALL_CCTOOLS_SYMLINKS); add_llvm_tool_symlink(install_name_tool llvm-install-name-tool); add_llvm_tool_symlink(bitcode_strip llvm-bitcode-strip); endif(); ,MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-objcopy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/CMakeLists.txt:1257,Deployability,install,install-name-tool,1257,set(LLVM_LINK_COMPONENTS; Object; ObjCopy; Option; Support; TargetParser; MC; BinaryFormat; ). set(LLVM_TARGET_DEFINITIONS ObjcopyOpts.td); tablegen(LLVM ObjcopyOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(ObjcopyOptsTableGen). set(LLVM_TARGET_DEFINITIONS InstallNameToolOpts.td); tablegen(LLVM InstallNameToolOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(InstallNameToolOptsTableGen). set(LLVM_TARGET_DEFINITIONS BitcodeStripOpts.td); tablegen(LLVM BitcodeStripOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(BitcodeStripOptsTableGen). set(LLVM_TARGET_DEFINITIONS StripOpts.td); tablegen(LLVM StripOpts.inc -gen-opt-parser-defs); add_public_tablegen_target(StripOptsTableGen). add_llvm_tool(llvm-objcopy; ObjcopyOptions.cpp; llvm-objcopy.cpp; DEPENDS; ObjcopyOptsTableGen; InstallNameToolOptsTableGen; StripOptsTableGen; GENERATE_DRIVER; ). add_llvm_tool_symlink(llvm-install-name-tool llvm-objcopy); add_llvm_tool_symlink(llvm-bitcode-strip llvm-objcopy); add_llvm_tool_symlink(llvm-strip llvm-objcopy). if(LLVM_INSTALL_BINUTILS_SYMLINKS); add_llvm_tool_symlink(objcopy llvm-objcopy); add_llvm_tool_symlink(strip llvm-objcopy); endif(). if(LLVM_INSTALL_CCTOOLS_SYMLINKS); add_llvm_tool_symlink(install_name_tool llvm-install-name-tool); add_llvm_tool_symlink(bitcode_strip llvm-bitcode-strip); endif(); ,MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-objcopy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/CMakeLists.txt:270,Energy Efficiency,reduce,reduce,270,set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsInfos; Analysis; BitReader; BitWriter; CodeGen; CodeGenTypes; Core; IPO; IRReader; MC; MIRParser; Passes; Support; Target; TargetParser; TransformUtils; ). add_llvm_tool(llvm-reduce; DeltaManager.cpp; ReducerWorkItem.cpp; TestRunner.cpp; deltas/Delta.cpp; deltas/Utils.cpp; deltas/ReduceAliases.cpp; deltas/ReduceArguments.cpp; deltas/ReduceAttributes.cpp; deltas/ReduceBasicBlocks.cpp; deltas/ReduceDIMetadata.cpp; deltas/ReduceDPValues.cpp; deltas/ReduceFunctionBodies.cpp; deltas/ReduceFunctions.cpp; deltas/ReduceGlobalObjects.cpp; deltas/ReduceGlobalValues.cpp; deltas/ReduceGlobalVarInitializers.cpp; deltas/ReduceGlobalVars.cpp; deltas/ReduceInstructions.cpp; deltas/ReduceInstructionFlags.cpp; deltas/ReduceInvokes.cpp; deltas/ReduceMetadata.cpp; deltas/ReduceModuleData.cpp; deltas/ReduceMemoryOperations.cpp; deltas/ReduceOperandBundles.cpp; deltas/ReduceOpcodes.cpp; deltas/ReduceSpecialGlobals.cpp; deltas/ReduceOperands.cpp; deltas/ReduceOperandsSkip.cpp; deltas/ReduceOperandsToArgs.cpp; deltas/ReduceInstructionsMIR.cpp; deltas/ReduceInstructionFlagsMIR.cpp; deltas/ReduceIRReferences.cpp; deltas/ReduceVirtualRegisters.cpp; deltas/ReduceRegisterMasks.cpp; deltas/ReduceRegisterDefs.cpp; deltas/ReduceRegisterUses.cpp; deltas/ReduceUsingSimplifyCFG.cpp; deltas/RunIRPasses.cpp; deltas/SimplifyInstructions.cpp; deltas/StripDebugInfo.cpp; llvm-reduce.cpp. DEPENDS; intrinsics_gen; ); ,MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-reduce/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/CMakeLists.txt:1453,Energy Efficiency,reduce,reduce,1453,set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsInfos; Analysis; BitReader; BitWriter; CodeGen; CodeGenTypes; Core; IPO; IRReader; MC; MIRParser; Passes; Support; Target; TargetParser; TransformUtils; ). add_llvm_tool(llvm-reduce; DeltaManager.cpp; ReducerWorkItem.cpp; TestRunner.cpp; deltas/Delta.cpp; deltas/Utils.cpp; deltas/ReduceAliases.cpp; deltas/ReduceArguments.cpp; deltas/ReduceAttributes.cpp; deltas/ReduceBasicBlocks.cpp; deltas/ReduceDIMetadata.cpp; deltas/ReduceDPValues.cpp; deltas/ReduceFunctionBodies.cpp; deltas/ReduceFunctions.cpp; deltas/ReduceGlobalObjects.cpp; deltas/ReduceGlobalValues.cpp; deltas/ReduceGlobalVarInitializers.cpp; deltas/ReduceGlobalVars.cpp; deltas/ReduceInstructions.cpp; deltas/ReduceInstructionFlags.cpp; deltas/ReduceInvokes.cpp; deltas/ReduceMetadata.cpp; deltas/ReduceModuleData.cpp; deltas/ReduceMemoryOperations.cpp; deltas/ReduceOperandBundles.cpp; deltas/ReduceOpcodes.cpp; deltas/ReduceSpecialGlobals.cpp; deltas/ReduceOperands.cpp; deltas/ReduceOperandsSkip.cpp; deltas/ReduceOperandsToArgs.cpp; deltas/ReduceInstructionsMIR.cpp; deltas/ReduceInstructionFlagsMIR.cpp; deltas/ReduceIRReferences.cpp; deltas/ReduceVirtualRegisters.cpp; deltas/ReduceRegisterMasks.cpp; deltas/ReduceRegisterDefs.cpp; deltas/ReduceRegisterUses.cpp; deltas/ReduceUsingSimplifyCFG.cpp; deltas/RunIRPasses.cpp; deltas/SimplifyInstructions.cpp; deltas/StripDebugInfo.cpp; llvm-reduce.cpp. DEPENDS; intrinsics_gen; ); ,MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-reduce/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:2432,Energy Efficiency,reduce,reduce,2432," OUTPUT_NAME LLVM ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); # Add symlink for backwards compatibility with old library name; llvm_install_library_symlink(LLVM-${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX} $<TARGET_FILE_NAME:LLVM> SHARED FULL_DEST COMPONENT LLVM); endif(). list(REMOVE_DUPLICATES LIB_NAMES); if(""${CMAKE_SYSTEM_NAME}"" STREQUAL ""Darwin""); set(LIB_NAMES -Wl,-all_load ${LIB_NAMES}); else(); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/simple_version_script.map.in; ${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map). # GNU ld doesn't resolve symbols in the version script.; set(LIB_NAMES -Wl,--whole-archive ${LIB_NAMES} -Wl,--no-whole-archive); if (NOT LLVM_LINKER_IS_SOLARISLD AND NOT MINGW); # Solaris ld does not accept global: *; so there is no way to version *all* global symbols; set(LIB_NAMES -Wl,--version-script,${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map ${LIB_NAMES}); endif(); if (NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; # Note: for -fno-pic default, the address of a function may be different from; # inside and outside libLLVM.so.; target_link_options(LLVM PRIVATE LINKER:-Bsymbolic-functions); endif(); endif(). target_link_libraries(LLVM PRIVATE ${LIB_NAMES}). if(LLVM_ENABLE_THREADS AND NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB); target_link_libraries(LLVM PUBLIC atomic); endif(). if (APPLE); set_property(TARGET LLVM APPEND_STRING PROPERTY; LINK_FLAGS; "" -compatibility_version 1 -current_version ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}""); endif(). if(TARGET libLLVMExports); add_dependencies(LLVM libLLVMExports); endif(); endif(). if(LLVM_BUILD_LLVM_C_DYLIB AND NOT MSVC); if(NOT APPLE); message(FATAL_ERROR ""Generating libLLVM-c is only supported on Darwin""); endif(). if(NOT LLVM_BUILD_LLVM_DYLIB); message(FATAL_ERROR ""Generating libLLVM-c requires LLVM_BUILD_LLVM_C_DYLIB on Darwin""); endif",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:316,Integrability,message,message,316,"# This tool creates a shared library from the LLVM libraries. Generating this; # library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake; # commandline. By default the shared library only exports the LLVM C API. set(SOURCES; libllvm.cpp; ). if(LLVM_LINK_LLVM_DYLIB AND LLVM_DYLIB_EXPORTED_SYMBOL_FILE); message(WARNING ""Using LLVM_LINK_LLVM_DYLIB with LLVM_DYLIB_EXPORTED_SYMBOL_FILE may not work. Use at your own risk.""); endif(). if(LLVM_BUILD_LLVM_DYLIB); if(MSVC); message(FATAL_ERROR ""Generating libLLVM is not supported on MSVC""); endif(); if(ZOS); message(FATAL_ERROR ""Generating libLLVM is not supported on z/OS""); endif(). llvm_map_components_to_libnames(LIB_NAMES ${LLVM_DYLIB_COMPONENTS}). # Exclude libLLVMTableGen for the following reasons:; # - it is only used by internal *-tblgen utilities;; # - it pollutes the global options space.; list(REMOVE_ITEM LIB_NAMES ""LLVMTableGen""). if(LLVM_DYLIB_EXPORTED_SYMBOL_FILE); set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_DYLIB_EXPORTED_SYMBOL_FILE}); add_custom_target(libLLVMExports DEPENDS ${LLVM_EXPORTED_SYMBOL_FILE}); endif(). if (LLVM_LINK_LLVM_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(); if (WIN32); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB SONAME ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); else(); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB OUTPUT_NAME LLVM ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); # Add symlink for backwards compatibility with old library name; llvm_install_library_symlink(LLVM-${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX} $<TARGET_FILE_NAME:LLVM> SHARED FULL_DEST COMPONENT LLVM); endif(). list(REMOVE_DUPLICATES LIB_NAMES); if(""${CMAKE_SYSTEM_NAME}"" STREQUAL ""Darwin""); set(LIB_NAMES -Wl,-all_load ${LIB_NAMES}); else(); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/simple_version_script.map.in; ${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map). # GNU ld doesn't resolve symbols in the version script.; set(LIB_NAMES -Wl,--whole-archive ${LIB_NA",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:482,Integrability,message,message,482,"# This tool creates a shared library from the LLVM libraries. Generating this; # library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake; # commandline. By default the shared library only exports the LLVM C API. set(SOURCES; libllvm.cpp; ). if(LLVM_LINK_LLVM_DYLIB AND LLVM_DYLIB_EXPORTED_SYMBOL_FILE); message(WARNING ""Using LLVM_LINK_LLVM_DYLIB with LLVM_DYLIB_EXPORTED_SYMBOL_FILE may not work. Use at your own risk.""); endif(). if(LLVM_BUILD_LLVM_DYLIB); if(MSVC); message(FATAL_ERROR ""Generating libLLVM is not supported on MSVC""); endif(); if(ZOS); message(FATAL_ERROR ""Generating libLLVM is not supported on z/OS""); endif(). llvm_map_components_to_libnames(LIB_NAMES ${LLVM_DYLIB_COMPONENTS}). # Exclude libLLVMTableGen for the following reasons:; # - it is only used by internal *-tblgen utilities;; # - it pollutes the global options space.; list(REMOVE_ITEM LIB_NAMES ""LLVMTableGen""). if(LLVM_DYLIB_EXPORTED_SYMBOL_FILE); set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_DYLIB_EXPORTED_SYMBOL_FILE}); add_custom_target(libLLVMExports DEPENDS ${LLVM_EXPORTED_SYMBOL_FILE}); endif(). if (LLVM_LINK_LLVM_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(); if (WIN32); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB SONAME ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); else(); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB OUTPUT_NAME LLVM ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); # Add symlink for backwards compatibility with old library name; llvm_install_library_symlink(LLVM-${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX} $<TARGET_FILE_NAME:LLVM> SHARED FULL_DEST COMPONENT LLVM); endif(). list(REMOVE_DUPLICATES LIB_NAMES); if(""${CMAKE_SYSTEM_NAME}"" STREQUAL ""Darwin""); set(LIB_NAMES -Wl,-all_load ${LIB_NAMES}); else(); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/simple_version_script.map.in; ${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map). # GNU ld doesn't resolve symbols in the version script.; set(LIB_NAMES -Wl,--whole-archive ${LIB_NA",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:568,Integrability,message,message,568,"# This tool creates a shared library from the LLVM libraries. Generating this; # library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake; # commandline. By default the shared library only exports the LLVM C API. set(SOURCES; libllvm.cpp; ). if(LLVM_LINK_LLVM_DYLIB AND LLVM_DYLIB_EXPORTED_SYMBOL_FILE); message(WARNING ""Using LLVM_LINK_LLVM_DYLIB with LLVM_DYLIB_EXPORTED_SYMBOL_FILE may not work. Use at your own risk.""); endif(). if(LLVM_BUILD_LLVM_DYLIB); if(MSVC); message(FATAL_ERROR ""Generating libLLVM is not supported on MSVC""); endif(); if(ZOS); message(FATAL_ERROR ""Generating libLLVM is not supported on z/OS""); endif(). llvm_map_components_to_libnames(LIB_NAMES ${LLVM_DYLIB_COMPONENTS}). # Exclude libLLVMTableGen for the following reasons:; # - it is only used by internal *-tblgen utilities;; # - it pollutes the global options space.; list(REMOVE_ITEM LIB_NAMES ""LLVMTableGen""). if(LLVM_DYLIB_EXPORTED_SYMBOL_FILE); set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_DYLIB_EXPORTED_SYMBOL_FILE}); add_custom_target(libLLVMExports DEPENDS ${LLVM_EXPORTED_SYMBOL_FILE}); endif(). if (LLVM_LINK_LLVM_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(); if (WIN32); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB SONAME ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); else(); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB OUTPUT_NAME LLVM ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); # Add symlink for backwards compatibility with old library name; llvm_install_library_symlink(LLVM-${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX} $<TARGET_FILE_NAME:LLVM> SHARED FULL_DEST COMPONENT LLVM); endif(). list(REMOVE_DUPLICATES LIB_NAMES); if(""${CMAKE_SYSTEM_NAME}"" STREQUAL ""Darwin""); set(LIB_NAMES -Wl,-all_load ${LIB_NAMES}); else(); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/simple_version_script.map.in; ${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map). # GNU ld doesn't resolve symbols in the version script.; set(LIB_NAMES -Wl,--whole-archive ${LIB_NA",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:3157,Integrability,message,message,3157,"ls; set(LIB_NAMES -Wl,--version-script,${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map ${LIB_NAMES}); endif(); if (NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; # Note: for -fno-pic default, the address of a function may be different from; # inside and outside libLLVM.so.; target_link_options(LLVM PRIVATE LINKER:-Bsymbolic-functions); endif(); endif(). target_link_libraries(LLVM PRIVATE ${LIB_NAMES}). if(LLVM_ENABLE_THREADS AND NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB); target_link_libraries(LLVM PUBLIC atomic); endif(). if (APPLE); set_property(TARGET LLVM APPEND_STRING PROPERTY; LINK_FLAGS; "" -compatibility_version 1 -current_version ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}""); endif(). if(TARGET libLLVMExports); add_dependencies(LLVM libLLVMExports); endif(); endif(). if(LLVM_BUILD_LLVM_C_DYLIB AND NOT MSVC); if(NOT APPLE); message(FATAL_ERROR ""Generating libLLVM-c is only supported on Darwin""); endif(). if(NOT LLVM_BUILD_LLVM_DYLIB); message(FATAL_ERROR ""Generating libLLVM-c requires LLVM_BUILD_LLVM_C_DYLIB on Darwin""); endif(). # To get the export list for a single llvm library:; # nm ${LIB_PATH} | awk ""/T _LLVM/ { print $3 }"" | sort -u | sed -e ""s/^_//g"" > ${LIB_PATH}.exports. set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_BINARY_DIR}/libllvm-c.exports). set(LIB_DIR ${LLVM_LIBRARY_DIR}); set(LIB_NAME ${LIB_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}LLVM); set(LIB_PATH ${LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}); set(LIB_EXPORTS_PATH ${LIB_NAME}.exports); list(APPEND LLVM_DYLIB_REQUIRED_EXPORTS ${LIB_EXPORTS_PATH}). add_custom_command(OUTPUT ${LLVM_EXPORTED_SYMBOL_FILE}; COMMAND nm ${LIB_PATH} | awk ""/T _LLVM/ || /T LLVM/ { print $3 }"" | sort -u | sed -e ""s/^_//g"" > ${LLVM_EXPORTED_SYMBOL_FILE}; WORKING_DIRECTORY ${LIB_DIR}; DEPENDS LLVM; COMMENT ""Generating Export list for LLVM...""; VERBATIM ). add_custom_target(libLLVMCExports DEPE",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:3270,Integrability,message,message,3270,"MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; # Note: for -fno-pic default, the address of a function may be different from; # inside and outside libLLVM.so.; target_link_options(LLVM PRIVATE LINKER:-Bsymbolic-functions); endif(); endif(). target_link_libraries(LLVM PRIVATE ${LIB_NAMES}). if(LLVM_ENABLE_THREADS AND NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB); target_link_libraries(LLVM PUBLIC atomic); endif(). if (APPLE); set_property(TARGET LLVM APPEND_STRING PROPERTY; LINK_FLAGS; "" -compatibility_version 1 -current_version ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}""); endif(). if(TARGET libLLVMExports); add_dependencies(LLVM libLLVMExports); endif(); endif(). if(LLVM_BUILD_LLVM_C_DYLIB AND NOT MSVC); if(NOT APPLE); message(FATAL_ERROR ""Generating libLLVM-c is only supported on Darwin""); endif(). if(NOT LLVM_BUILD_LLVM_DYLIB); message(FATAL_ERROR ""Generating libLLVM-c requires LLVM_BUILD_LLVM_C_DYLIB on Darwin""); endif(). # To get the export list for a single llvm library:; # nm ${LIB_PATH} | awk ""/T _LLVM/ { print $3 }"" | sort -u | sed -e ""s/^_//g"" > ${LIB_PATH}.exports. set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_BINARY_DIR}/libllvm-c.exports). set(LIB_DIR ${LLVM_LIBRARY_DIR}); set(LIB_NAME ${LIB_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}LLVM); set(LIB_PATH ${LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}); set(LIB_EXPORTS_PATH ${LIB_NAME}.exports); list(APPEND LLVM_DYLIB_REQUIRED_EXPORTS ${LIB_EXPORTS_PATH}). add_custom_command(OUTPUT ${LLVM_EXPORTED_SYMBOL_FILE}; COMMAND nm ${LIB_PATH} | awk ""/T _LLVM/ || /T LLVM/ { print $3 }"" | sort -u | sed -e ""s/^_//g"" > ${LLVM_EXPORTED_SYMBOL_FILE}; WORKING_DIRECTORY ${LIB_DIR}; DEPENDS LLVM; COMMENT ""Generating Export list for LLVM...""; VERBATIM ). add_custom_target(libLLVMCExports DEPENDS ${LLVM_EXPORTED_SYMBOL_FILE}). add_llvm_library(LLVM-C SHARED ${SOURCES} INSTALL_WITH_TOOLCHAIN). target_link_libraries(LLVM-C PU",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:5613,Modifiability,config,config,5613," if(LLVM_BUILD_LLVM_C_DYLIB AND MSVC); # Build the LLVM-C.dll library that exports the C API. set(LLVM_LINK_COMPONENTS; ${LLVM_DYLIB_COMPONENTS}; ). llvm_map_components_to_libnames(LIB_NAMES ${LLVM_DYLIB_COMPONENTS}); list(REMOVE_DUPLICATES LIB_NAMES). # The python script needs to know whether symbols are prefixed with underscores or not.; if(LLVM_HOST_TRIPLE MATCHES ""i?86-.*win.*""); set(GEN_UNDERSCORE ""--underscore""); else(); set(GEN_UNDERSCORE """"); endif(). # Set this name here, not used in multi conf loop,; # but add script will pick the right one.; set(LIBSFILE ${LLVM_BINARY_DIR}/${CMAKE_CFG_INTDIR}/libllvm-c.args). # Get the full name to the libs so the python script understands them.; foreach(lib ${LIB_NAMES}); list(APPEND FULL_LIB_NAMES ${LLVM_LIBRARY_DIR}/${lib}.lib); endforeach(). # Need to separate lib names with newlines.; string(REPLACE "";"" ""\n"" FILE_CONTENT ""${FULL_LIB_NAMES}""). if(NOT ""${CMAKE_CFG_INTDIR}"" STREQUAL "".""); foreach(BUILD_MODE ${CMAKE_CONFIGURATION_TYPES}); # Replace the special string with a per config directory.; string(REPLACE ${CMAKE_CFG_INTDIR} ${BUILD_MODE} PER_CONF_CONTENT ""${FILE_CONTENT}""). # Write out the full lib names into file to be read by the python script.; # One libsfile per build, the add_custom_command should expand; # ${CMAKE_CFG_INTDIR} correctly and select the right one.; file(WRITE ${LLVM_BINARY_DIR}/${BUILD_MODE}/libllvm-c.args ""${PER_CONF_CONTENT}""); endforeach(); else(); # Write out the full lib names into file to be read by the python script.; file(WRITE ${LIBSFILE} ""${FILE_CONTENT}""); endif(). # Generate the exports file dynamically.; set(GEN_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/gen-msvc-exports.py). set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_BINARY_DIR}/${CMAKE_CFG_INTDIR}/libllvm-c.exports); get_host_tool_path(llvm-nm LLVM_NM llvm_nm_exe llvm_nm_target). add_custom_command(OUTPUT ${LLVM_EXPORTED_SYMBOL_FILE}; COMMAND ""${Python3_EXECUTABLE}"" ${GEN_SCRIPT} --libsfile ${LIBSFILE} ${GEN_UNDERSCORE} --nm ""${llvm_nm_exe}"" -o",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:427,Safety,risk,risk,427,"# This tool creates a shared library from the LLVM libraries. Generating this; # library is enabled by setting LLVM_BUILD_LLVM_DYLIB=yes on the CMake; # commandline. By default the shared library only exports the LLVM C API. set(SOURCES; libllvm.cpp; ). if(LLVM_LINK_LLVM_DYLIB AND LLVM_DYLIB_EXPORTED_SYMBOL_FILE); message(WARNING ""Using LLVM_LINK_LLVM_DYLIB with LLVM_DYLIB_EXPORTED_SYMBOL_FILE may not work. Use at your own risk.""); endif(). if(LLVM_BUILD_LLVM_DYLIB); if(MSVC); message(FATAL_ERROR ""Generating libLLVM is not supported on MSVC""); endif(); if(ZOS); message(FATAL_ERROR ""Generating libLLVM is not supported on z/OS""); endif(). llvm_map_components_to_libnames(LIB_NAMES ${LLVM_DYLIB_COMPONENTS}). # Exclude libLLVMTableGen for the following reasons:; # - it is only used by internal *-tblgen utilities;; # - it pollutes the global options space.; list(REMOVE_ITEM LIB_NAMES ""LLVMTableGen""). if(LLVM_DYLIB_EXPORTED_SYMBOL_FILE); set(LLVM_EXPORTED_SYMBOL_FILE ${LLVM_DYLIB_EXPORTED_SYMBOL_FILE}); add_custom_target(libLLVMExports DEPENDS ${LLVM_EXPORTED_SYMBOL_FILE}); endif(). if (LLVM_LINK_LLVM_DYLIB); set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN); endif(); if (WIN32); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB SONAME ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); else(); add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB OUTPUT_NAME LLVM ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); # Add symlink for backwards compatibility with old library name; llvm_install_library_symlink(LLVM-${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX} $<TARGET_FILE_NAME:LLVM> SHARED FULL_DEST COMPONENT LLVM); endif(). list(REMOVE_DUPLICATES LIB_NAMES); if(""${CMAKE_SYSTEM_NAME}"" STREQUAL ""Darwin""); set(LIB_NAMES -Wl,-all_load ${LIB_NAMES}); else(); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/simple_version_script.map.in; ${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map). # GNU ld doesn't resolve symbols in the version script.; set(LIB_NAMES -Wl,--whole-archive ${LIB_NA",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt:2415,Safety,avoid,avoid,2415," OUTPUT_NAME LLVM ${INSTALL_WITH_TOOLCHAIN} ${SOURCES}); # Add symlink for backwards compatibility with old library name; llvm_install_library_symlink(LLVM-${LLVM_VERSION_MAJOR}${LLVM_VERSION_SUFFIX} $<TARGET_FILE_NAME:LLVM> SHARED FULL_DEST COMPONENT LLVM); endif(). list(REMOVE_DUPLICATES LIB_NAMES); if(""${CMAKE_SYSTEM_NAME}"" STREQUAL ""Darwin""); set(LIB_NAMES -Wl,-all_load ${LIB_NAMES}); else(); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/simple_version_script.map.in; ${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map). # GNU ld doesn't resolve symbols in the version script.; set(LIB_NAMES -Wl,--whole-archive ${LIB_NAMES} -Wl,--no-whole-archive); if (NOT LLVM_LINKER_IS_SOLARISLD AND NOT MINGW); # Solaris ld does not accept global: *; so there is no way to version *all* global symbols; set(LIB_NAMES -Wl,--version-script,${LLVM_LIBRARY_DIR}/tools/llvm-shlib/simple_version_script.map ${LIB_NAMES}); endif(); if (NOT MINGW AND NOT LLVM_LINKER_IS_SOLARISLD_ILLUMOS); # Optimize function calls for default visibility definitions to avoid PLT and; # reduce dynamic relocations.; # Note: for -fno-pic default, the address of a function may be different from; # inside and outside libLLVM.so.; target_link_options(LLVM PRIVATE LINKER:-Bsymbolic-functions); endif(); endif(). target_link_libraries(LLVM PRIVATE ${LIB_NAMES}). if(LLVM_ENABLE_THREADS AND NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB); target_link_libraries(LLVM PUBLIC atomic); endif(). if (APPLE); set_property(TARGET LLVM APPEND_STRING PROPERTY; LINK_FLAGS; "" -compatibility_version 1 -current_version ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}""); endif(). if(TARGET libLLVMExports); add_dependencies(LLVM libLLVMExports); endif(); endif(). if(LLVM_BUILD_LLVM_C_DYLIB AND NOT MSVC); if(NOT APPLE); message(FATAL_ERROR ""Generating libLLVM-c is only supported on Darwin""); endif(). if(NOT LLVM_BUILD_LLVM_DYLIB); message(FATAL_ERROR ""Generating libLLVM-c requires LLVM_BUILD_LLVM_C_DYLIB on Darwin""); endif",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/CMakeLists.txt:603,Deployability,install,install,603,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; CodeGen; LTO; MC; MCDisassembler; Support; Target; ). set(SOURCES; LTODisassembler.cpp; lto.cpp; ). set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/lto.exports). if(CMAKE_SYSTEM_NAME STREQUAL AIX); set(LTO_LIBRARY_TYPE MODULE); set(LTO_LIBRARY_NAME libLTO); else(); set(LTO_LIBRARY_TYPE SHARED); set(LTO_LIBRARY_NAME LTO); endif(). add_llvm_library(${LTO_LIBRARY_NAME} ${LTO_LIBRARY_TYPE} INSTALL_WITH_TOOLCHAIN; ${SOURCES} DEPENDS intrinsics_gen). install(FILES ${LLVM_MAIN_INCLUDE_DIR}/llvm-c/lto.h; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}/llvm-c""; COMPONENT LTO). if (APPLE); set(LTO_VERSION ${LLVM_VERSION_MAJOR}); if(LLVM_LTO_VERSION_OFFSET); math(EXPR LTO_VERSION ""${LLVM_VERSION_MAJOR} + ${LLVM_LTO_VERSION_OFFSET}""); endif(); set_property(TARGET LTO APPEND_STRING PROPERTY; LINK_FLAGS; "" -compatibility_version 1 -current_version ${LTO_VERSION}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}""); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/lto/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/CMakeLists.txt:129,Deployability,install,install,129,"set (files; ""opt-diff.py""; ""opt-stats.py""; ""opt-viewer.py""; ""optpmap.py""; ""optrecord.py""; ""style.css""). foreach (file ${files}); install(PROGRAMS ${file}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/opt-viewer""; COMPONENT opt-viewer); endforeach (file). add_custom_target(opt-viewer DEPENDS ${files}); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-opt-viewer""; DEPENDS opt-viewer; COMPONENT opt-viewer); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/opt-viewer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/CMakeLists.txt:347,Deployability,install,install-opt-viewer,347,"set (files; ""opt-diff.py""; ""opt-stats.py""; ""opt-viewer.py""; ""optpmap.py""; ""optrecord.py""; ""style.css""). foreach (file ${files}); install(PROGRAMS ${file}; DESTINATION ""${CMAKE_INSTALL_DATADIR}/opt-viewer""; COMPONENT opt-viewer); endforeach (file). add_custom_target(opt-viewer DEPENDS ${files}); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(""install-opt-viewer""; DEPENDS opt-viewer; COMPONENT opt-viewer); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/opt-viewer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/remarks-shlib/CMakeLists.txt:542,Deployability,install,install,542,"# Building shared libraries requires PIC objects.; if(LLVM_ENABLE_PIC). set(LLVM_LINK_COMPONENTS; Remarks; ). set(SOURCES; libremarks.cpp; ). if (NOT (BUILD_SHARED_LIBS OR LLVM_LINK_LLVM_DYLIB)); set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/Remarks.exports); endif(). add_llvm_library(Remarks SHARED INSTALL_WITH_TOOLCHAIN ${SOURCES}). if (LLVM_INTEGRATED_CRT_ALLOC AND MSVC); # Make sure we search LLVMSupport first, before the CRT libs; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -INCLUDE:malloc""); endif(); ; install(FILES ${LLVM_MAIN_INCLUDE_DIR}/llvm-c/Remarks.h; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}/llvm-c""; COMPONENT Remarks). if (APPLE); set(REMARKS_VERSION ${LLVM_VERSION_MAJOR}); set_property(TARGET Remarks APPEND_STRING PROPERTY; LINK_FLAGS; "" -compatibility_version 1 -current_version ${REMARKS_VERSION}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}""); endif(). endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/remarks-shlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/remarks-shlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:1188,Deployability,update,update,1188,"SPIRV_TOOLS_TESTS). if (NOT LLVM_INCLUDE_SPIRV_TOOLS_TESTS); return(); endif (). if (NOT ""SPIRV"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_VAL}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-val""); else (); add_custom_target(spirv-val; COMMAND ${C",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:1287,Deployability,update,update,1287,"RROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_VAL}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-val""); else (); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-val"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-val""; DEPENDS SPIRVTools; ); endif ();",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:1316,Deployability,update,update,1316,"OR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_VAL}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-val""); else (); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-val"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-val""; DEPENDS SPIRVTools; ); endif (); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:240,Integrability,message,message,240,"option(LLVM_INCLUDE_SPIRV_TOOLS_TESTS ""Include tests that use SPIRV-Tools"" Off); mark_as_advanced(LLVM_INCLUDE_SPIRV_TOOLS_TESTS). if (NOT LLVM_INCLUDE_SPIRV_TOOLS_TESTS); return(); endif (). if (NOT ""SPIRV"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:368,Modifiability,variab,variables,368,"option(LLVM_INCLUDE_SPIRV_TOOLS_TESTS ""Include tests that use SPIRV-Tools"" Off); mark_as_advanced(LLVM_INCLUDE_SPIRV_TOOLS_TESTS). if (NOT LLVM_INCLUDE_SPIRV_TOOLS_TESTS); return(); endif (). if (NOT ""SPIRV"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:47,Testability,test,tests,47,"option(LLVM_INCLUDE_SPIRV_TOOLS_TESTS ""Include tests that use SPIRV-Tools"" Off); mark_as_advanced(LLVM_INCLUDE_SPIRV_TOOLS_TESTS). if (NOT LLVM_INCLUDE_SPIRV_TOOLS_TESTS); return(); endif (). if (NOT ""SPIRV"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:282,Testability,test,tests,282,"option(LLVM_INCLUDE_SPIRV_TOOLS_TESTS ""Include tests that use SPIRV-Tools"" Off); mark_as_advanced(LLVM_INCLUDE_SPIRV_TOOLS_TESTS). if (NOT LLVM_INCLUDE_SPIRV_TOOLS_TESTS); return(); endif (). if (NOT ""SPIRV"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:38,Deployability,release,released,38,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:136,Deployability,install,install,136,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:228,Deployability,install,install,228,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:514,Deployability,install,installed,514,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:806,Deployability,install,install,806,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1000,Deployability,install,install-xcode-toolchain,1000,"sed. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OU",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1055,Deployability,install,installs,1055,"sed. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OU",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1390,Deployability,install,install,1390,"ain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1407,Deployability,install,install-xcode-toolchain,1407,"ain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1470,Deployability,install,install,1470,"ain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1569,Deployability,install,installed,1569,"ch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to o",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1722,Deployability,install,install,1722,"l> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xco",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:2487,Deployability,install,installed,2487,"chains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:3929,Deployability,install,install-xcode-toolchain,3929,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4186,Deployability,configurat,configuration,4186,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4271,Deployability,install,install-distribution-toolchain,4271,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4431,Deployability,install,install-distribution,4431,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4554,Deployability,install,install-distribution-toolchain,4554,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4585,Deployability,install,install-distribution,4585,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:2210,Integrability,message,message,2210,"e environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:2435,Integrability,message,message,2435,"chains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:3073,Integrability,message,message,3073,"ull; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_EN",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4105,Integrability,message,message,4105,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:618,Modifiability,variab,variable,618,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:4186,Modifiability,config,configuration,4186,"rsion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E remove ${LLVMToolchainDir}/Info.plist; COMMAND /usr/libexec/PlistBuddy -c ""Add:CFBundleIdentifier string org.llvm.${PACKAGE_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; COMMAND /usr/libexec/PlistBuddy -c ""Add:CompatibilityVersion integer ${COMPAT_VERSION}"" ""${LLVMToolchainDir}/Info.plist""; ). add_custom_target(build-xcode-toolchain; COMMAND ""${CMAKE_COMMAND}"" --build ${CMAKE_BINARY_DIR} --target all); add_llvm_install_targets(install-xcode-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist build-xcode-toolchain; PREFIX ${LLVMToolchainDir}/usr/). if(LLVM_DISTRIBUTION_COMPONENTS); if(LLVM_ENABLE_IDE); message(FATAL_ERROR ""LLVM_DISTRIBUTION_COMPONENTS cannot be specified with multi-configuration generators (i.e. Xcode or Visual Studio)""); endif(). add_custom_target(install-distribution-toolchain; DEPENDS ${LLVMToolchainDir}/Info.plist distribution). foreach(target ${LLVM_DISTRIBUTION_COMPONENTS}); add_llvm_install_targets(install-distribution-${target}; DEPENDS ${target}; COMPONENT ${target}; PREFIX ${LLVMToolchainDir}/usr/); add_dependencies(install-distribution-toolchain install-distribution-${target}); endforeach(); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:1910,Safety,detect,detect,1910,"d set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -fin",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:2322,Safety,detect,detecting,2322,"e environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:2462,Safety,detect,detect,2462,"chains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -version; OUTPUT_VARIABLE xcodebuild_version; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""Xcode ([0-9][0-9]?([.][0-9])+)"" version_match ${xcodebuild_version}); if(version_match); message(STATUS ""Identified Xcode Version: ${CMAKE_MATCH_1}""); set(XCODE_VERSION ${CMAKE_MATCH_1}); else(); # If detecting Xcode version failed, set a crazy high version so we default; # to the newest.; set(XCODE_VERSION 99); message(WARNING ""Failed to detect the version of an installed copy of Xcode, falling back to highest supported version. Set XCODE_VERSION to override.""); endif(); endif(). # Xcode 8 requires CompatibilityVersion 2; set(COMPAT_VERSION 2); if(XCODE_VERSION VERSION_LESS 8.0.0); # Xcode 7.3 (the first version supporting external toolchains) requires; # CompatibilityVersion 1; set(COMPAT_VERSION 1); endif(). execute_process(; COMMAND xcrun -find otool; OUTPUT_VARIABLE clang_path; OUTPUT_STRIP_TRAILING_WHITESPACE; ERROR_FILE /dev/null; ); string(REGEX MATCH ""(.*/Toolchains)/.*"" toolchains_match ${clang_path}); if(NOT toolchains_match); message(FATAL_ERROR ""Could not identify toolchain dir""); endif(); set(toolchains_dir ${CMAKE_MATCH_1}). set(LLVMToolchainDir ""${CMAKE_INSTALL_PREFIX}/Toolchains/LLVM${PACKAGE_VERSION}.xctoolchain/""). add_custom_command(OUTPUT ${LLVMToolchainDir}; COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVMToolchainDir}). add_custom_command(OUTPUT ${LLVMToolchainDir}/Info.plist; DEPENDS ${LLVMToolchainDir}; COMMAND ${",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt:437,Usability,undo,undocumented,437,"# OS X 10.11 El Capitan has just been released. One of the new features, System; # Integrity Protection, prevents modifying the base OS install, even with sudo.; # This prevents LLVM developers on OS X from being able to easily install new; # system compilers. The feature can be disabled, but to make it easier for; # developers to work without disabling SIP, this file can generate an Xcode; # toolchain. Xcode toolchains are a mostly-undocumented feature that allows; # multiple copies of low level tools to be installed to different locations, and; # users can easily switch between them. # Setting an environment variable TOOLCHAINS to the toolchain's identifier will; # result in /usr/bin/<tool> or xcrun <tool> to find the tool in the toolchain. # To make this work with Xcode 7.1 and later you can install the toolchain this; # file generates anywhere on your system and set EXTERNAL_TOOLCHAINS_DIR to the; # path specified by $CMAKE_INSTALL_PREFIX/Toolchains. # This file generates a custom install-xcode-toolchain target which constructs; # and installs a toolchain with the identifier in the pattern:; # org.llvm.${PACKAGE_VERSION}. This toolchain can then be used to override the; # system compiler by setting TOOLCHAINS=org.llvm.${PACKAGE_VERSION} in the; # in the environment. # Example usage:; # cmake -G Ninja -DLLVM_CREATE_XCODE_TOOLCHAIN=On; # -DCMAKE_INSTALL_PREFIX=$PWD/install; # ninja install-xcode-toolchain; # export EXTERNAL_TOOLCHAINS_DIR=$PWD/install/Toolchains; # export TOOLCHAINS=org.llvm.3.8.0svn. # `xcrun -find clang` should return the installed clang, and `clang --version`; # should show 3.8.0svn. if(NOT APPLE); return(); endif(). option(LLVM_CREATE_XCODE_TOOLCHAIN ""Create a target to install LLVM into an Xcode toolchain"" Off). if(NOT LLVM_CREATE_XCODE_TOOLCHAIN); return(); endif(). # XCODE_VERSION is set by CMake when using the Xcode generator, otherwise we need; # to detect it manually here.; if(NOT XCODE_VERSION); execute_process(; COMMAND xcodebuild -vers",MatchSource.DOCS,interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/xcode-toolchain/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/requirements.txt:783,Integrability,wrap,wrapt,783,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --output-file=requirements.txt requirements.txt.in; #; certifi==2023.7.22; # via; # -r requirements.txt.in; # requests; cffi==1.15.1; # via; # cryptography; # pynacl; charset-normalizer==2.1.1; # via requests; cryptography==41.0.3; # via pyjwt; deprecated==1.2.13; # via pygithub; gitdb==4.0.9; # via gitpython; gitpython==3.1.32; # via -r requirements.txt.in; idna==3.4; # via requests; pycparser==2.21; # via cffi; pygithub==1.59.1; # via -r requirements.txt.in; pyjwt[crypto]==2.5.0; # via pygithub; pynacl==1.5.0; # via pygithub; requests==2.28.1; # via pygithub; smmap==5.0.0; # via gitdb; types-cryptography==3.3.23.2; # via pyjwt; urllib3==1.26.12; # via requests; wrapt==1.14.1; # via deprecated; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/git/requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/requirements_formatting.txt:1023,Integrability,wrap,wrapt,1023,#; # This file is autogenerated by pip-compile with Python 3.11; # by the following command:; #; # pip-compile --output-file=llvm/utils/git/requirements_formatting.txt llvm/utils/git/requirements_formatting.txt.in; #; black==23.9.1; # via; # -r llvm/utils/git/requirements_formatting.txt.in; # darker; certifi==2023.7.22; # via requests; cffi==1.15.1; # via; # cryptography; # pynacl; charset-normalizer==3.2.0; # via requests; click==8.1.7; # via black; cryptography==41.0.3; # via pyjwt; darker==1.7.2; # via -r llvm/utils/git/requirements_formatting.txt.in; deprecated==1.2.14; # via pygithub; idna==3.4; # via requests; mypy-extensions==1.0.0; # via black; packaging==23.1; # via black; pathspec==0.11.2; # via black; platformdirs==3.10.0; # via black; pycparser==2.21; # via cffi; pygithub==1.59.1; # via -r llvm/utils/git/requirements_formatting.txt.in; pyjwt[crypto]==2.8.0; # via pygithub; pynacl==1.5.0; # via pygithub; requests==2.31.0; # via pygithub; toml==0.10.2; # via darker; urllib3==2.0.4; # via requests; wrapt==1.15.0; # via deprecated; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/git/requirements_formatting.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/requirements_formatting.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:465,Deployability,configurat,configuration,465,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:6,Modifiability,config,configured,6,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:465,Modifiability,config,configuration,465,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:585,Modifiability,config,configure,585,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:73,Testability,test,tests,73,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:131,Testability,test,tests,131,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:199,Testability,test,tests,199,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:278,Testability,test,test,278,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:451,Testability,test,tests,451,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:553,Testability,test,tests,553,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:660,Testability,test,tests,660,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:789,Testability,test,tests,789,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:869,Testability,test,tests,869,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:905,Testability,test,tests,905,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:1018,Testability,test,tests,1018,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:1049,Testability,test,tests,1049,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:1086,Testability,test,test,1086,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt:1141,Testability,test,tests,1141,"# The configured file is not placed in the correct location; # until the tests are run as we need to copy it into; # a copy of the tests folder; configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). # Lit's test suite creates output files next to the sources which makes the; # source tree dirty. This is undesirable because we do out of source builds.; # To work around this the tests and the configuration file are copied into the; # build directory just before running them. The tests are not copied over at; # configure time (i.e. `file(COPY ...)`) because this could lead to stale; # tests being run.; add_custom_target(prepare-check-lit; COMMAND ${CMAKE_COMMAND} -E remove_directory ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy_directory ""${CMAKE_CURRENT_SOURCE_DIR}/tests"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg"" ""${CMAKE_CURRENT_BINARY_DIR}/tests""; COMMENT ""Preparing lit tests""; ). # Add rules for lit's own test suite; add_lit_testsuite(check-lit ""Running lit's tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""prepare-check-lit""; ). # For IDEs; set_target_properties(check-lit PROPERTIES FOLDER ""Tests""); set_target_properties(prepare-check-lit PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:1691,Availability,avail,available,1691,"t control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:8653,Availability,failure,failure,8653,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:1363,Deployability,configurat,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:867,Energy Efficiency,power,power,867,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:3558,Energy Efficiency,charge,charge,3558," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:3943,Energy Efficiency,charge,charge,3943,"nication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infringement, then any patent licenses; granted to You under this License for that Work shall terminate; as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the; Work or Derivative Works thereof in any medium, with or without; modifications, and in Source or Object form, provided that You; meet the following conditions:. (a) You must give any other recipients of the Work or; Derivative Works a copy of this License; and. (b) You must cause",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:8946,Energy Efficiency,charge,charge,8946," of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright n",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:12650,Energy Efficiency,charge,charge,12650,"ed clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2003-2019 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies; of the Software, and to permit persons to whom the Software is furnished to do; so, subject to the following conditions:. * Redistributions of source code must retain the above copyright notice,; this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice,; this list of conditions and the following disclaimers in the; documentation and/or other materials provided with the distribution. * Neither the names of the LLVM Team, University of Illinois at; Urbana-Champaign, nor the names of its contributors may be used to; endorse or promote products derived from this Software without specific; prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:959,Integrability,contract,contract,959,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:2259,Integrability,interface,interfaces,2259," ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""C",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:8201,Integrability,contract,contract,8201,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:1363,Modifiability,config,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:3682,Performance,perform,perform,3682," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:8022,Safety,risk,risks,8022,"ithout any additional terms or conditions.; Notwithstanding the above, nothing herein shall supersede or modify; the terms of any separate license agreement you may have executed; with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade; names, trademarks, service marks, or product names of the Licensor,; except as required for reasonable and customary use in describing the; origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, in",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:579,Security,authoriz,authorized,579,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:2617,Security,authoriz,authorized,2617," including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:9358,Testability,assert,asserted,9358,"erate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright notice for easier; identification within third-party archives. Copyright [yyyy] [name of copyright owner]. Licensed under the Apache License, Version 2.0 (the ""License"");; you may not use this file except in compliance with the License.; You may obtain a copy of the License at. http://www.apache.org/lice",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT:11834,Usability,clear,clearly,11834,"hout complying; with the conditions of Sections 4(a), 4(b) and 4(d) of the License. In addition, if you combine or link compiled forms of this Software with; software that is licensed under the GPLv2 (""Combined Software"") and if a; court of competent jurisdiction determines that the patent provision (Section; 3), the indemnity provision (Section 9) or other Section of the License; conflicts with the conditions of the GPLv2, you may retroactively and; prospectively choose to deem waived or otherwise exclude such Section(s) of; the License, but only in their entirety and only with respect to the Combined; Software. ==============================================================================; Software from third parties included in the LLVM Project:; ==============================================================================; The LLVM Project contains third party software which is under different license; terms. All such code will be identified clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2003-2019 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, mer",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-lit/CMakeLists.txt:300,Modifiability,config,config,300,"get_property(LLVM_LIT_CONFIG_FILES GLOBAL PROPERTY LLVM_LIT_CONFIG_FILES); list(LENGTH LLVM_LIT_CONFIG_FILES file_len); math(EXPR file_last ""${file_len} - 1""). get_llvm_lit_path(LIT_BASE_DIR LIT_FILE_NAME). set(LLVM_SOURCE_DIR ${LLVM_MAIN_SRC_DIR}). # LLVM_LIT_CONFIG_FILES contains interleaved main config (in the source tree); # and site config (in the build tree) pairs. Make them relative to; # llvm-lit and then convert them to map_config() calls.; if(""${CMAKE_CFG_INTDIR}"" STREQUAL "".""); make_paths_relative(; LLVM_LIT_CONFIG_FILES ""${LIT_BASE_DIR}"" ""${LLVM_LIT_CONFIG_FILES}""); make_paths_relative(; LLVM_SOURCE_DIR ""${LIT_BASE_DIR}"" ""${LLVM_SOURCE_DIR}""); endif(). set(LLVM_LIT_CONFIG_MAP ""${LLVM_LIT_PATH_FUNCTION}\n""); if (${file_last} GREATER -1); foreach(i RANGE 0 ${file_last} 2); list(GET LLVM_LIT_CONFIG_FILES ${i} main_config); math(EXPR i1 ""${i} + 1""); list(GET LLVM_LIT_CONFIG_FILES ${i1} site_out); set(map ""map_config(path(r'${main_config}'), path(r'${site_out}'))""); set(LLVM_LIT_CONFIG_MAP ""${LLVM_LIT_CONFIG_MAP}\n${map}""); endforeach(); endif(). if(NOT ""${CMAKE_CFG_INTDIR}"" STREQUAL "".""); foreach(BUILD_MODE ${CMAKE_CONFIGURATION_TYPES}); string(REPLACE ${CMAKE_CFG_INTDIR} ${BUILD_MODE} bi ${LIT_BASE_DIR}); set(bi ""${bi}/${LIT_FILE_NAME}""); configure_file(; llvm-lit.in; ${bi}; ); endforeach(); else(); set(BUILD_MODE .); configure_file(; llvm-lit.in; ${LIT_BASE_DIR}/${LIT_FILE_NAME}; ); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/llvm-lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-lit/CMakeLists.txt:340,Modifiability,config,config,340,"get_property(LLVM_LIT_CONFIG_FILES GLOBAL PROPERTY LLVM_LIT_CONFIG_FILES); list(LENGTH LLVM_LIT_CONFIG_FILES file_len); math(EXPR file_last ""${file_len} - 1""). get_llvm_lit_path(LIT_BASE_DIR LIT_FILE_NAME). set(LLVM_SOURCE_DIR ${LLVM_MAIN_SRC_DIR}). # LLVM_LIT_CONFIG_FILES contains interleaved main config (in the source tree); # and site config (in the build tree) pairs. Make them relative to; # llvm-lit and then convert them to map_config() calls.; if(""${CMAKE_CFG_INTDIR}"" STREQUAL "".""); make_paths_relative(; LLVM_LIT_CONFIG_FILES ""${LIT_BASE_DIR}"" ""${LLVM_LIT_CONFIG_FILES}""); make_paths_relative(; LLVM_SOURCE_DIR ""${LIT_BASE_DIR}"" ""${LLVM_SOURCE_DIR}""); endif(). set(LLVM_LIT_CONFIG_MAP ""${LLVM_LIT_PATH_FUNCTION}\n""); if (${file_last} GREATER -1); foreach(i RANGE 0 ${file_last} 2); list(GET LLVM_LIT_CONFIG_FILES ${i} main_config); math(EXPR i1 ""${i} + 1""); list(GET LLVM_LIT_CONFIG_FILES ${i1} site_out); set(map ""map_config(path(r'${main_config}'), path(r'${site_out}'))""); set(LLVM_LIT_CONFIG_MAP ""${LLVM_LIT_CONFIG_MAP}\n${map}""); endforeach(); endif(). if(NOT ""${CMAKE_CFG_INTDIR}"" STREQUAL "".""); foreach(BUILD_MODE ${CMAKE_CONFIGURATION_TYPES}); string(REPLACE ${CMAKE_CFG_INTDIR} ${BUILD_MODE} bi ${LIT_BASE_DIR}); set(bi ""${bi}/${LIT_FILE_NAME}""); configure_file(; llvm-lit.in; ${bi}; ); endforeach(); else(); set(BUILD_MODE .); configure_file(; llvm-lit.in; ${LIT_BASE_DIR}/${LIT_FILE_NAME}; ); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/llvm-lit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-lit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt:54,Testability,test,tests,54,"configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). add_lit_testsuite(check-mlgo-utils ""Running mlgo-utils tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""count"" ""split-file"" ""yaml2obj"" ""llvm-objcopy""; ). set_target_properties(check-mlgo-utils PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt:180,Testability,test,tests,180,"configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). add_lit_testsuite(check-mlgo-utils ""Running mlgo-utils tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""count"" ""split-file"" ""yaml2obj"" ""llvm-objcopy""; ). set_target_properties(check-mlgo-utils PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt:99,Deployability,configurat,configurations,99,"==============; lit Examples; ==============. This directory contains examples of 'lit' test suite configurations. The test; suites they define can be run with 'lit examples/example-name', for more details; see the README in each example.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt:99,Modifiability,config,configurations,99,"==============; lit Examples; ==============. This directory contains examples of 'lit' test suite configurations. The test; suites they define can be run with 'lit examples/example-name', for more details; see the README in each example.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt:88,Testability,test,test,88,"==============; lit Examples; ==============. This directory contains examples of 'lit' test suite configurations. The test; suites they define can be run with 'lit examples/example-name', for more details; see the README in each example.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt:119,Testability,test,test,119,"==============; lit Examples; ==============. This directory contains examples of 'lit' test suite configurations. The test; suites they define can be run with 'lit examples/example-name', for more details; see the README in each example.; ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:125,Deployability,configurat,configuration,125,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:125,Modifiability,config,configuration,125,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:338,Performance,perform,performance,338,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:114,Testability,test,test,114,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:162,Testability,test,test,162,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:223,Testability,test,tests,223,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:275,Testability,test,test,275,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:301,Testability,test,test,301,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:326,Testability,test,testing,326,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt:378,Testability,test,tests,378,========================; Many Tests lit Example; ========================. This directory contains a trivial lit test suite configuration that defines a; custom test format which just generates a large (N=10000) number of tests that; do a small amount of work in the Python test execution code. This test suite is useful for testing the performance of lit on large numbers of; tests.; ,MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/examples/many-tests/README.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:579,Integrability,interface,interface,579,"Manual Data Model Evolution Capabilities - the user documentation. 1. Overview. The automatic data model schema evolution implemented in ROOT makes it possible; to read back the serialized data object in the situation when the definition of; the classes those objects represent changed slightly (some of the data members were; removed or some new ones added). It is also possible to manually specify the rules; for more sophisticated data transformations done while reading to load the serialized; objects into data structures that changed quite significantly. ROOT provides two interface enabling users to specify the conversion rules. The; first way is to define a rule in the dictionary file and the second way is to insert; it to the TClass object using the C++ API. There are two types of conversion rules. The first of them, the normal rules, are; the ones that should be used in the most of the cases. They provide a buffered input; data and an address of the in-memory target object and allow user to specify the; conversion function mapping the data being read to the output format. The second type; of the rules, the raw rules, also provide the pointer to the target object but the; input is a raw TBuffer object containing the input data member declared as an input; to the rule. This type of a rule is provided mainly to handle the file format changes; that couldn't have been handled otherwise and in general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfil",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:4904,Integrability,wrap,wrapping,4904,"al to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields hav",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:2819,Modifiability,variab,variables,2819,"7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfile.m_b * onfile.m_c; }"" \. #pragma readraw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:4763,Modifiability,variab,variables,4763," a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule.",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:4959,Modifiability,variab,variables,4959,"al to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields hav",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:5040,Modifiability,variab,variables,5040,"t has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields have exactly the same; meaning as the ones of rules specified in the dictionaries. TSchemaRuleSet objects; m",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:5081,Modifiability,variab,variable,5081,"ber names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields have exactly the same; meaning as the ones of rules specified in the dictionaries. TSchemaRuleSet objects; manage the sets of rules and ensure their consistency. There can be no conflicting; rules in the rule sets. The rule sets are owned by the TClass objects corresponding to the; target classes defined in the rules and can be accessed using TClass::{Get|Adopt}SchemaRules; ",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:5673,Modifiability,variab,variables,5673,"ber names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields have exactly the same; meaning as the ones of rules specified in the dictionaries. TSchemaRuleSet objects; manage the sets of rules and ensure their consistency. There can be no conflicting; rules in the rule sets. The rule sets are owned by the TClass objects corresponding to the; target classes defined in the rules and can be accessed using TClass::{Get|Adopt}SchemaRules; ",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:477,Performance,load,load,477,"Manual Data Model Evolution Capabilities - the user documentation. 1. Overview. The automatic data model schema evolution implemented in ROOT makes it possible; to read back the serialized data object in the situation when the definition of; the classes those objects represent changed slightly (some of the data members were; removed or some new ones added). It is also possible to manually specify the rules; for more sophisticated data transformations done while reading to load the serialized; objects into data structures that changed quite significantly. ROOT provides two interface enabling users to specify the conversion rules. The; first way is to define a rule in the dictionary file and the second way is to insert; it to the TClass object using the C++ API. There are two types of conversion rules. The first of them, the normal rules, are; the ones that should be used in the most of the cases. They provide a buffered input; data and an address of the in-memory target object and allow user to specify the; conversion function mapping the data being read to the output format. The second type; of the rules, the raw rules, also provide the pointer to the target object but the; input is a raw TBuffer object containing the input data member declared as an input; to the rule. This type of a rule is provided mainly to handle the file format changes; that couldn't have been handled otherwise and in general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfil",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3060,Performance,cache,cached,3060,"aw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list h",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:1855,Security,checksum,checksum,1855,"at should be used in the most of the cases. They provide a buffered input; data and an address of the in-memory target object and allow user to specify the; conversion function mapping the data being read to the output format. The second type; of the rules, the raw rules, also provide the pointer to the target object but the; input is a raw TBuffer object containing the input data member declared as an input; to the rule. This type of a rule is provided mainly to handle the file format changes; that couldn't have been handled otherwise and in general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfile.m_b * onfile.m_c; }"" \. #pragma readraw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following mean",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:2400,Security,checksum,checksum,2400,"general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfile.m_b * onfile.m_c; }"" \. #pragma readraw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an inpu",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3071,Security,access,accessible,3071,"aw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list h",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3942,Security,checksum,checksum,3942,"xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defi",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3963,Security,checksum,checksums,3963,"xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defi",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:6259,Security,access,accessed,6259,"ber names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields have exactly the same; meaning as the ones of rules specified in the dictionaries. TSchemaRuleSet objects; manage the sets of rules and ensure their consistency. There can be no conflicting; rules in the rule sets. The rule sets are owned by the TClass objects corresponding to the; target classes defined in the rules and can be accessed using TClass::{Get|Adopt}SchemaRules; ",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:3156,Performance,optimiz,optimizer,3156,"; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFile.h; TFPBlock.h; TGenCollectionStreamer.h; TGenCollectionProxy.h; TKey.h; TKeyMapFile.h; TLockFile.h; TMemFile.h; TMapFile.h; TMakeProject.h; TStreamerInfoActions.h; TVirtualCollectionIterators.h; TStreamerInfo.h; TZIPFile.h; ${RIO_EXTRA_HEADERS}; STAGE1; MODULE; RIO; LINKDEF; LinkDef.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; Thread; ). # TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called; # recursively, quickly exhausting the stack. Prevent that by forcing; # the many scope-local vars to share their stack space / become; # registers, thanks to the optimizer.; if(MSVC); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS $<IF:$<CONFIG:Debug>,""/Od"",""/O2"">); else(); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS ""-O3""); endif(). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:3438,Testability,test,test,3438,"; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFile.h; TFPBlock.h; TGenCollectionStreamer.h; TGenCollectionProxy.h; TKey.h; TKeyMapFile.h; TLockFile.h; TMemFile.h; TMapFile.h; TMakeProject.h; TStreamerInfoActions.h; TVirtualCollectionIterators.h; TStreamerInfo.h; TZIPFile.h; ${RIO_EXTRA_HEADERS}; STAGE1; MODULE; RIO; LINKDEF; LinkDef.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; Thread; ). # TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called; # recursively, quickly exhausting the stack. Prevent that by forcing; # the many scope-local vars to share their stack space / become; # registers, thanks to the optimizer.; if(MSVC); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS $<IF:$<CONFIG:Debug>,""/Od"",""/O2"">); else(); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS ""-O3""); endif(). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/dcache/doc/index.txt:44,Integrability,interface,interface,44,"BEGIN_HTML; This directory contains the I/O interface classes for the <b>Dcache</b> system.; For more information about <b>Dcache</b>, see:; <ul>; <li><a href=""http://www-dcache.desy.de/"">the DESY Dcache site; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,io/dcache/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt:786,Integrability,rout,routinely,786,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(RRawFile RRawFile.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFile TFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferFile TBufferFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferMerger TBufferMerger.cxx LIBRARIES RIO Imt Tree); ROOT_ADD_GTEST(TBufferJSON TBufferJSONTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFileMerger TFileMergerTests.cxx LIBRARIES RIO Tree Hist); ROOT_ADD_GTEST(TROMemFile TROMemFileTests.cxx LIBRARIES RIO Tree); if(uring AND NOT DEFINED ENV{ROOTTEST_IGNORE_URING}); ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO); endif(). # Temporarily disabled. Test routinely fails on MacOS and some Linuxes.; #if(NOT WIN32 AND (NOT MACOS_VERSION OR NOT MACOSX_VERSION VERSION_LESS 13.00)); # ROOT_EXECUTABLE(TMapFileTest TMapFileTest.cxx LIBRARIES RIO Hist New); # ROOT_ADD_TEST(io-io-test-TMapFileTest COMMAND TMapFileTest complete); #endif(); ",MatchSource.DOCS,io/io/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt:1006,Testability,test,test-TMapFileTest,1006,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(RRawFile RRawFile.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFile TFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferFile TBufferFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferMerger TBufferMerger.cxx LIBRARIES RIO Imt Tree); ROOT_ADD_GTEST(TBufferJSON TBufferJSONTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFileMerger TFileMergerTests.cxx LIBRARIES RIO Tree Hist); ROOT_ADD_GTEST(TROMemFile TROMemFileTests.cxx LIBRARIES RIO Tree); if(uring AND NOT DEFINED ENV{ROOTTEST_IGNORE_URING}); ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO); endif(). # Temporarily disabled. Test routinely fails on MacOS and some Linuxes.; #if(NOT WIN32 AND (NOT MACOS_VERSION OR NOT MACOSX_VERSION VERSION_LESS 13.00)); # ROOT_EXECUTABLE(TMapFileTest TMapFileTest.cxx LIBRARIES RIO Hist New); # ROOT_ADD_TEST(io-io-test-TMapFileTest COMMAND TMapFileTest complete); #endif(); ",MatchSource.DOCS,io/io/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt:61,Integrability,interface,interface,61,"BEGIN_HTML; This directory contains classes that provide and interface to the libxml2; XML parser. Both DOM and SAX parser interfaces are provided.; See:; <ul>; <li><a href=""http://www.xmlsoft.org"">For more on libxml2</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,io/xmlparser/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt:123,Integrability,interface,interfaces,123,"BEGIN_HTML; This directory contains classes that provide and interface to the libxml2; XML parser. Both DOM and SAX parser interfaces are provided.; See:; <ul>; <li><a href=""http://www.xmlsoft.org"">For more on libxml2</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,io/xmlparser/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/CMakeLists.txt:726,Testability,test,test,726,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/foam package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Foam; HEADERS; TFoam.h; TFoamCell.h; TFoamIntegrand.h; TFoamMaxwt.h; TFoamSampler.h; TFoamVect.h; SOURCES; src/TFoam.cxx; src/TFoamCell.cxx; src/TFoamIntegrand.cxx; src/TFoamMaxwt.cxx; src/TFoamSampler.cxx; src/TFoamVect.cxx; DEPENDENCIES; Hist; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/foam/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/CMakeLists.txt:654,Testability,test,test,654,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/genetic package; # @author Pere Mato, CERN; ############################################################################; ROOT_STANDARD_LIBRARY_PACKAGE(Genetic; HEADERS; Math/GeneticMinimizer.h; SOURCES; src/GeneticMinimizer.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; TMVA; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/genetic/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt:4212,Testability,test,test,4212,or/LorentzVector.h; Math/GenVector/Plane3D.h; Math/GenVector/Polar2Dfwd.h; Math/GenVector/Polar2D.h; Math/GenVector/Polar3Dfwd.h; Math/GenVector/Polar3D.h; Math/GenVector/PositionVector2Dfwd.h; Math/GenVector/PositionVector2D.h; Math/GenVector/PositionVector3Dfwd.h; Math/GenVector/PositionVector3D.h; Math/GenVector/PtEtaPhiE4Dfwd.h; Math/GenVector/PtEtaPhiE4D.h; Math/GenVector/PtEtaPhiM4Dfwd.h; Math/GenVector/PtEtaPhiM4D.h; Math/GenVector/PxPyPzE4Dfwd.h; Math/GenVector/PxPyPzE4D.h; Math/GenVector/PxPyPzM4Dfwd.h; Math/GenVector/PxPyPzM4D.h; Math/GenVector/Quaternionfwd.h; Math/GenVector/Quaternion.h; Math/GenVector/Rotation3Dfwd.h; Math/GenVector/Rotation3D.h; Math/GenVector/RotationXfwd.h; Math/GenVector/RotationX.h; Math/GenVector/RotationYfwd.h; Math/GenVector/RotationY.h; Math/GenVector/RotationZfwd.h; Math/GenVector/RotationZ.h; Math/GenVector/RotationZYXfwd.h; Math/GenVector/RotationZYX.h; Math/GenVector/Transform3D.h; Math/GenVector/Translation3D.h; Math/GenVector/VectorUtil.h; Math/LorentzRotation.h; Math/LorentzVector.h; Math/Plane3D.h; Math/Point2Dfwd.h; Math/Point2D.h; Math/Point3Dfwd.h; Math/Point3D.h; Math/Polar2D.h; Math/Polar3D.h; Math/PositionVector2D.h; Math/PositionVector3D.h; Math/PtEtaPhiE4D.h; Math/PtEtaPhiM4D.h; Math/PxPyPzE4D.h; Math/PxPyPzM4D.h; Math/Quaternion.h; Math/Rotation3D.h; Math/RotationX.h; Math/RotationY.h; Math/RotationZ.h; Math/RotationZYX.h; Math/Transform3D.h; Math/Translation3D.h; Math/Vector2Dfwd.h; Math/Vector2D.h; Math/Vector3Dfwd.h; Math/Vector3D.h; Math/Vector4Dfwd.h; Math/Vector4D.h; Math/VectorUtil.h; MODULE; GenVector; LINKDEF; Math/LinkDef_GenVector.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__GenVector32; Math/Point2D.h; Math/Point3D.h; Math/Vector2D.h; Math/Vector3D.h; Math/Vector4D.h; MODULE; GenVector; MULTIDICT; LINKDEF; Math/LinkDef_GenVector32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ,MatchSource.DOCS,math/genvector/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:2541,Deployability,upgrade,upgrade,2541,"inimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictionary hand due to a bug in rootcling/clang. The redeclaration chain of; # 'abs' shadow declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cx",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:5502,Testability,test,test,5502,torMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). target_include_directories(MathCore PRIVATE ${Vc_INCLUDE_DIR}); target_include_directories(MathCore PRIVATE ${VecCore_INCLUDE_DIRS}). list(APPEND math_incl ${Vc_INCLUDE_DIR}); list(APPEND math_incl ${VecCore_INCLUDE_DIRS}). foreach(incl ${math_incl}); target_include_directories(MathCore PUBLIC $<BUILD_INTERFACE:${incl}>); endforeach(). target_compile_definitions(MathCore INTERFACE ${VecCore_DEFINITIONS}); target_link_libraries(MathCore PRIVATE ${CMAKE_THREAD_LIBS_INIT}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/CMakeLists.txt:2223,Testability,test,test,2223,#########################################; # CMakeLists.txt file for building ROOT math/mathmore package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(MathMore; HEADERS; Math/ChebyshevApprox.h; Math/Derivator.h; Math/DistFuncMathMore.h; Math/GSLIntegrator.h; Math/GSLMCIntegrator.h; Math/GSLMinimizer.h; Math/GSLMinimizer1D.h; Math/GSLMultiRootFinder.h; Math/GSLNLSMinimizer.h; Math/GSLQuasiRandom.h; Math/GSLRandom.h; Math/GSLRandomFunctions.h; Math/GSLRndmEngines.h; Math/GSLRootFinder.h; Math/GSLRootFinderDeriv.h; Math/GSLSimAnMinimizer.h; Math/InterpolationTypes.h; Math/Interpolator.h; Math/MCParameters.h; Math/PdfFuncMathMore.h; Math/Polynomial.h; Math/ParamFunction.h; Math/QuasiRandom.h; Math/RootFinderAlgorithms.h; Math/SpecFuncMathMore.h; Math/Vavilov.h; Math/VavilovAccurate.h; Math/VavilovAccurateCdf.h; Math/VavilovAccuratePdf.h; Math/VavilovAccurateQuantile.h; Math/VavilovFast.h; SOURCES; src/ChebyshevApprox.cxx; src/Derivator.cxx; src/GSLDerivator.cxx; src/GSLError.cxx; src/GSLIntegrator.cxx; src/GSLInterpolator.cxx; src/GSLMCIntegrator.cxx; src/GSLMinimizer.cxx; src/GSLMinimizer1D.cxx; src/GSLMultiRootFinder.cxx; src/GSLNLSMinimizer.cxx; src/GSLQuasiRandom.cxx; src/GSLRndmEngines.cxx; src/GSLRootFinder.cxx; src/GSLRootFinderDeriv.cxx; src/GSLRootHelper.cxx; src/GSLSimAnMinimizer.cxx; src/GSLSimAnnealing.cxx; src/Interpolator.cxx; src/MCParameters.cxx; src/MultiNumGradFunction.cxx; src/PdfFuncMathMore.cxx; src/Polynomial.cxx; src/QuantFuncMathMore.cxx; src/RootFinderAlgorithms.cxx; src/SpecFuncMathMore.cxx; src/Vavilov.cxx; src/VavilovAccurate.cxx; src/VavilovAccurateCdf.cxx; src/VavilovAccuratePdf.cxx; src/VavilovAccurateQuantile.cxx; src/VavilovFast.cxx; src/cblas.cxx; LINKDEF; Math/LinkDef.h; DEPENDENCIES; MathCore; BUILTINS; GSL; ). target_include_directories(MathMore SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(MathMore PRIVATE ${GSL_LIBRARIES}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathmore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/CMakeLists.txt:1712,Testability,test,test,1712,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/matrix package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Matrix; HEADERS; TDecompBK.h; TDecompBase.h; TDecompChol.h; TDecompLU.h; TDecompQRH.h; TDecompSVD.h; TDecompSparse.h; TMatrix.h; TMatrixD.h; TMatrixDBase.h; TMatrixDBasefwd.h; TMatrixDEigen.h; TMatrixDLazy.h; TMatrixDSparse.h; TMatrixDSparsefwd.h; TMatrixDSym.h; TMatrixDSymEigen.h; TMatrixDSymfwd.h; TMatrixDUtils.h; TMatrixDUtilsfwd.h; TMatrixDfwd.h; TMatrixF.h; TMatrixFBase.h; TMatrixFBasefwd.h; TMatrixFLazy.h; TMatrixFSparse.h; TMatrixFSparsefwd.h; TMatrixFSym.h; TMatrixFSymfwd.h; TMatrixFUtils.h; TMatrixFUtilsfwd.h; TMatrixFfwd.h; TMatrixT.h; TMatrixTBase.h; TMatrixTCramerInv.h; TMatrixTLazy.h; TMatrixTSparse.h; TMatrixTSym.h; TMatrixTSymCramerInv.h; TMatrixTUtils.h; TVector.h; TVectorD.h; TVectorDfwd.h; TVectorF.h; TVectorFfwd.h; TVectorT.h; TVectorfwd.h; SOURCES; src/TDecompBK.cxx; src/TDecompBase.cxx; src/TDecompChol.cxx; src/TDecompLU.cxx; src/TDecompQRH.cxx; src/TDecompSVD.cxx; src/TDecompSparse.cxx; src/TMatrixDEigen.cxx; src/TMatrixDSymEigen.cxx; src/TMatrixT.cxx; src/TMatrixTBase.cxx; src/TMatrixTCramerInv.cxx; src/TMatrixTLazy.cxx; src/TMatrixTSparse.cxx; src/TMatrixTSym.cxx; src/TMatrixTSymCramerInv.cxx; src/TMatrixTUtils.cxx; src/TVectorT.cxx; DEPENDENCIES; MathCore; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ",MatchSource.DOCS,math/matrix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:6898,Testability,test,test,6898,SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET MPI::MPI_CXX); add_library(MPI::MPI_CXX IMPORTED INTERFACE); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS ${MPI_CXX_COMPILE_DEFINITIONS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${MPI_CXX_COMPILE_FLAGS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${MPI_CXX_INCLUDE_DIRS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_compile_definitions(Minuit2 PUBLIC MPIPROC); target_link_libraries(Minuit2 PUBLIC MPI::MPI_CXX); endif(); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); add_definitions(-DUSE_ROOT_ERROR); ROOT_ADD_TEST_SUBDIRECTORY(test); else(); include(StandAlone.cmake); endif(); ,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt:690,Modifiability,plugin,plugins,690,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/rtools package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Rtools; HEADERS; Math/RMinimizer.h; SOURCES; src/RMinimizer.cxx; DEPENDENCIES; Core; MathCore; RInterface; NO_CXXMODULE; ). target_include_directories(Rtools PRIVATE ${R_INCLUDE_DIRS}). file(COPY ""${CMAKE_SOURCE_DIR}/etc/plugins/ROOT@@Math@@Minimizer/P090_RMinimizer.C""; DESTINATION ""${CMAKE_BINARY_DIR}/etc/plugins/ROOT@@Math@@Minimizer/""); ",MatchSource.DOCS,math/rtools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt:777,Modifiability,plugin,plugins,777,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/rtools package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Rtools; HEADERS; Math/RMinimizer.h; SOURCES; src/RMinimizer.cxx; DEPENDENCIES; Core; MathCore; RInterface; NO_CXXMODULE; ). target_include_directories(Rtools PRIVATE ${R_INCLUDE_DIRS}). file(COPY ""${CMAKE_SOURCE_DIR}/etc/plugins/ROOT@@Math@@Minimizer/P090_RMinimizer.C""; DESTINATION ""${CMAKE_BINARY_DIR}/etc/plugins/ROOT@@Math@@Minimizer/""); ",MatchSource.DOCS,math/rtools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:847,Deployability,configurat,configuration,847,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:439,Modifiability,variab,variables,439,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:847,Modifiability,config,configuration,847,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1094,Modifiability,config,config,1094,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1260,Modifiability,config,config,1260,"################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configur",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1305,Modifiability,config,config,1305," file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1431,Modifiability,config,config,1431,"###. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UN",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1463,Modifiability,config,config,1463,"--------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORK",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2216,Modifiability,config,configure,2216,"_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2260,Modifiability,config,config,2260,"_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2357,Modifiability,config,config,2357,"ss; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); s",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2390,Modifiability,config,configure,2390,".in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_P",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:3345,Modifiability,config,config,3345,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:3239,Testability,test,tests,3239,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:4167,Testability,test,test,4167,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/vecops/CMakeLists.txt:935,Testability,test,test,935,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/vecops package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; HEADERS; ROOT/RVec.hxx; SOURCES; src/RVec.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; ). if(builtin_vdt OR vdt); target_link_libraries(ROOTVecOps PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(ROOTVecOps VDT); endif(). include(CheckCXXSymbolExists); check_symbol_exists(m __sqrt_finite HAVE_FINITE_MATH); if(NOT HAVE_FINITE_MATH AND NOT MSVC); target_compile_options(ROOTVecOps PRIVATE -fno-finite-math-only); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/vecops/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt:73,Testability,test,testTFoam,73,"# Testing TFoam; # @author Stephan Hageboeck, CERN, 2020. ROOT_ADD_GTEST(testTFoam testTFoam.cxx; LIBRARIES Tree Foam; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testTFoam_1.root). ",MatchSource.DOCS,math/foam/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt:83,Testability,test,testTFoam,83,"# Testing TFoam; # @author Stephan Hageboeck, CERN, 2020. ROOT_ADD_GTEST(testTFoam testTFoam.cxx; LIBRARIES Tree Foam; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testTFoam_1.root). ",MatchSource.DOCS,math/foam/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt:342,Integrability,interface,interface,342,"This directory contains the ROOT::Math::GeneticMinimizer class; BEGIN_HTML; The GeneticMinimizer class is used to implement a genetic minimizer algorithm.; The algorithm is based on an algorithm implemented in the TMVA package; (TMVA::GeneticAlgorithm class).; <p>; The ROOT::Math:GeneticMinimizer class implements the; ROOT::Math::Minimizer interface, as a new plugin with name ""Genetic"".; The class can be used when fitting histograms or graph by selecting it; as default minimizer. This can be done via:; <pre>; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Genetic"");; </pre>; Via the MinimizerOptions, one can control the possible options for the; class. These are described in the TMVA user guide, Option Table 7.; A list of the default options can be obtained by doing:; <pre>; ROOT::Math::Minimizer * min =ROOT::Math::Factory::CreateMinimizer(""Genetic"");; min->Options().Print();; </pre>; The user can change a default option, like the population size to 500; and the steps to 60 by doing:; <pre>; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""PopSize"",500);; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""Steps"",60);; </pre>. END_HTML. ",MatchSource.DOCS,math/genetic/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt:362,Modifiability,plugin,plugin,362,"This directory contains the ROOT::Math::GeneticMinimizer class; BEGIN_HTML; The GeneticMinimizer class is used to implement a genetic minimizer algorithm.; The algorithm is based on an algorithm implemented in the TMVA package; (TMVA::GeneticAlgorithm class).; <p>; The ROOT::Math:GeneticMinimizer class implements the; ROOT::Math::Minimizer interface, as a new plugin with name ""Genetic"".; The class can be used when fitting histograms or graph by selecting it; as default minimizer. This can be done via:; <pre>; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Genetic"");; </pre>; Via the MinimizerOptions, one can control the possible options for the; class. These are described in the TMVA user guide, Option Table 7.; A list of the default options can be obtained by doing:; <pre>; ROOT::Math::Minimizer * min =ROOT::Math::Factory::CreateMinimizer(""Genetic"");; min->Options().Print();; </pre>; The user can change a default option, like the population size to 500; and the steps to 60 by doing:; <pre>; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""PopSize"",500);; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""Steps"",60);; </pre>. END_HTML. ",MatchSource.DOCS,math/genetic/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt:702,Usability,guid,guide,702,"This directory contains the ROOT::Math::GeneticMinimizer class; BEGIN_HTML; The GeneticMinimizer class is used to implement a genetic minimizer algorithm.; The algorithm is based on an algorithm implemented in the TMVA package; (TMVA::GeneticAlgorithm class).; <p>; The ROOT::Math:GeneticMinimizer class implements the; ROOT::Math::Minimizer interface, as a new plugin with name ""Genetic"".; The class can be used when fitting histograms or graph by selecting it; as default minimizer. This can be done via:; <pre>; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Genetic"");; </pre>; Via the MinimizerOptions, one can control the possible options for the; class. These are described in the TMVA user guide, Option Table 7.; A list of the default options can be obtained by doing:; <pre>; ROOT::Math::Minimizer * min =ROOT::Math::Factory::CreateMinimizer(""Genetic"");; min->Options().Print();; </pre>; The user can change a default option, like the population size to 500; and the steps to 60 by doing:; <pre>; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""PopSize"",500);; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""Steps"",60);; </pre>. END_HTML. ",MatchSource.DOCS,math/genetic/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:282,Testability,test,tests,282,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:490,Testability,test,testGAMinimizer,490,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:565,Testability,test,test,565,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:657,Testability,test,testname,657,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:702,Testability,test,testname,702,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:769,Testability,test,testname,769,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:789,Testability,test,testname,789,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:321,Testability,test,test-genvector-rotationApplication,321,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:408,Testability,test,testBoost,408,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:458,Testability,test,test-genvector-boost,458,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:511,Testability,test,testGenvector,511,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:525,Testability,test,testGenVector,525,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:592,Testability,test,test-genvector-genvector,592,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:625,Testability,test,testGenvector,625,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:657,Testability,test,testVectorIO,657,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:670,Testability,test,testVectorIO,670,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:746,Testability,test,test-genvector-vectorio,746,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:778,Testability,test,testVectorIO,778,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:931,Testability,test,test-genvector-,931,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:1068,Testability,test,test-genvector-,1068,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:212,Testability,test,tests,212,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:348,Testability,test,testMathRandom,348,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:368,Testability,test,testTMath,368,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:383,Testability,test,testBinarySearch,383,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:405,Testability,test,testSortOrder,405,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:475,Testability,test,testIntegration,475,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:496,Testability,test,testSampleQuantiles,496,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:537,Testability,test,testkdTreeBinning,537,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:614,Testability,test,testSpecFuncErf,614,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:635,Testability,test,testSpecFuncGamma,635,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:658,Testability,test,testSpecFuncBeta,658,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:680,Testability,test,testSpecFuncBetaI,680,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:703,Testability,test,testSpecFuncSiCi,703,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:725,Testability,test,testIntegrationMultiDim,725,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:754,Testability,test,testAnalyticalIntegrals,754,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:783,Testability,test,testTStatistic,783,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:875,Testability,test,testBinnedFitExecPolicy,875,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:908,Testability,test,testFit,908,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:925,Testability,test,testGraphFit,925,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:947,Testability,test,testLogLExecPolicy,947,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:975,Testability,test,testMinim,975,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1163,Testability,test,test,1163,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1248,Testability,test,testname,1248,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1293,Testability,test,testname,1293,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1361,Testability,test,testname,1361,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1381,Testability,test,testname,1381,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1402,Testability,test,testname,1402,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1989,Testability,test,testSMatrix,1989,/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivat,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2012,Testability,test,testGenVector,2012,END Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); en,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2038,Testability,test,testStat,2038,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2058,Testability,test,testSVector,2058,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2081,Testability,test,testVector,2081,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2222,Testability,test,testGradient,2222,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2306,Testability,test,testGradientFitting,2306,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2645,Testability,test,testVectorizedTMath,2645,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2720,Testability,test,testRootFinder,2720,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2735,Testability,test,testRootFinder,2735,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2794,Testability,test,testKahan,2794,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2804,Testability,test,testKahan,2804,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:212,Testability,test,tests,212,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:357,Testability,test,testChebyshev,357,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:376,Testability,test,testPermute,376,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:393,Testability,test,testDerivation,393,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:413,Testability,test,testGSLIntegration,413,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:437,Testability,test,testMCIntegration,437,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:460,Testability,test,testGSLRootFinder,460,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:483,Testability,test,testMultiRootFinder,483,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:532,Testability,test,testInterpolation,532,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:555,Testability,test,testRandom,555,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:571,Testability,test,testRandomDist,571,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:591,Testability,test,testQuasiRandom,591,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:612,Testability,test,testSpecFunc,612,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:630,Testability,test,testStatFunc,630,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:648,Testability,test,testFunctor,648,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:665,Testability,test,testVavilov,665,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:928,Testability,test,tests,928,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1066,Testability,test,test,1066,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1159,Testability,test,testname,1159,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1204,Testability,test,testname,1204,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1289,Testability,test,testname,1289,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1309,Testability,test,testname,1309,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1330,Testability,test,testname,1330,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1398,Testability,test,testStress,1398,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1480,Testability,test,testPolynomialRoots,1480,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1500,Testability,test,testPolynomialRoots,1500,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:213,Testability,test,testMatrixTSparse,213,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:231,Testability,test,testMatrixTSparse,231,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:287,Testability,test,testMatrixTDecomp,287,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:305,Testability,test,testMatrixTDecomp,305,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:361,Testability,test,testMatrixT,361,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:373,Testability,test,testMatrixT,373,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/CMakeLists.txt:1213,Integrability,message,message,1213,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set_package_properties(Doxygen PROPERTIES; URL ""http://www.doxygen.org""; DESCRIPTION ""Documentation generator""; TYPE OPTIONAL; PURPOSE ""Requires CMake 3.9, adds docs target""). find_package(Doxygen OPTIONAL_COMPONENTS dot). # Only add docs target if Doxygen present; if(TARGET Doxygen::doxygen AND TARGET Doxygen::dot); # Setting DOXYGEN settings; set(DOXYGEN_GENERATE_LATEX YES); set(DOXYGEN_SOURCE_BROWSER YES); set(DOXYGEN_EXTRACT_ALL YES); set(DOXYGEN EXTRACT_PRIVATE YES); set(DOXYGEN_EXTRACT_STATIC YES). get_target_property(MATH_SOURCES Minuit2Math SOURCES); get_target_property(MINUIT2_SOURCES Minuit2 SOURCES). file(READ Minuit2.md MINUIT2_MAINPAGE); string(REPLACE ""\\page Minuit2Page"" ""\\mainpage"" MINUIT2_MAINPAGE ""${MINUIT2_MAINPAGE}""); file(WRITE ""${CMAKE_CURRENT_BINARY_DIR}/index.md"" ""${MINUIT2_MAINPAGE}""). # Actually add the docs target; doxygen_add_docs(docs; ""${CMAKE_CURRENT_BINARY_DIR}/index.md""; ${MATH_SOURCES}; ${MINUIT2_SOURCES}; WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/..""; ); else(); message(STATUS ""Doxygen and/or Dot not found, not adding docs target""); endif(); ",MatchSource.DOCS,math/minuit2/doc/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1238,Deployability,integrat,integrate,1238,"ctionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/min",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1238,Integrability,integrat,integrate,1238,"ctionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/min",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1408,Integrability,interface,interface,1408,"ty to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/minuit/mnerror.pdf"">pdf</a>); </li>; </ol>; <p>; <hr>; <h3>See also:</h3>; <ul>; <li>Recommended <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">Online doc for all Minuit2 clas",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1566,Modifiability,plug-in,plug-in,1566,"limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/minuit/mnerror.pdf"">pdf</a>); </li>; </ol>; <p>; <hr>; <h3>See also:</h3>; <ul>; <li>Recommended <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">Online doc for all Minuit2 classes</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:315,Performance,perform,performances,315,"; BEGIN_HTML; <h2>Minuit2 Package</h2>. <b>Minuit2</b> is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.<p>; These new version provides basically all the functionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Functio",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:467,Performance,optimiz,optimized,467,"; BEGIN_HTML; <h2>Minuit2 Package</h2>. <b>Minuit2</b> is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.<p>; These new version provides basically all the functionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Functio",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:505,Testability,log,log,505,"; BEGIN_HTML; <h2>Minuit2 Package</h2>. <b>Minuit2</b> is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.<p>; These new version provides basically all the functionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Functio",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:4488,Deployability,install,install,4488,"x; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Common). install(TARGETS Minuit2; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${MINUIT2_HEADERS} DESTINATION include/Minuit2/Minuit2); ",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:4629,Deployability,install,install,4629,"x; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Common). install(TARGETS Minuit2; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${MINUIT2_HEADERS} DESTINATION include/Minuit2/Minuit2); ",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:370,Testability,test,testMinimizer,370,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:424,Testability,test,testADMinim,424,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:873,Testability,test,tests,873,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:980,Testability,test,testname,980,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1025,Testability,test,testname,1025,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1087,Testability,test,testname,1087,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1107,Testability,test,testname,1107,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1534,Testability,test,testname,1534,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1579,Testability,test,testname,1579,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1667,Testability,test,testname,1667,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1687,Testability,test,testname,1687,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1729,Testability,test,tests,1729,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1960,Testability,test,testname,1960,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:2005,Testability,test,testname,2005,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:2085,Testability,test,testname,2085,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:2105,Testability,test,testname,2105,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:858,Usability,simpl,simple,858,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:398,Deployability,install,installed,398,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:245,Testability,test,test,245,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:474,Testability,test,test,474,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:529,Testability,test,test,529,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:567,Testability,test,test,567,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:718,Testability,test,test,718,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:733,Testability,test,test,733,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:488,Usability,simpl,simplicity,488,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:1142,Deployability,install,install,1142,"t(MATH_HEADERS; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/M",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:1979,Deployability,install,install,1979,"; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/Minuit2/Math); ",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:2124,Deployability,install,install,2124,"; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/Minuit2/Math); ",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:2187,Deployability,install,install,2187,"; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/Minuit2/Math); ",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:479,Testability,test,test,479,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:608,Testability,test,test-command,608,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:517,Usability,simpl,simple,517,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:556,Usability,simpl,simple,556,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:457,Testability,test,tests,457,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:584,Testability,test,test,584,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:675,Testability,test,testname,675,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:720,Testability,test,testname,720,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:786,Testability,test,testname,786,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:806,Testability,test,testname,806,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:827,Testability,test,testname,827,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:870,Testability,test,tests,870,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:892,Testability,test,testUnuranSampler,892,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt:1047,Deployability,install,install,1047,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT MSVC AND _BUILD_TYPE_UPPER MATCHES ""DEBUG|RELWITHDEBINFO""); file(GLOB PRETTY_PRINTERS ""*.so-gdb.py""); if(NOT roofit); list(FILTER PRETTY_PRINTERS EXCLUDE REGEX libRooFitCore.so-gdb.py); endif(); set(PRETTY_PRINTER_DESTS); foreach(PRETTY_PRINTER ${PRETTY_PRINTERS}); get_filename_component(PRETTY_PRINTER_DEST ${PRETTY_PRINTER} NAME); if(soversion); string(REPLACE "".so-gdb.py"" "".so.${ROOT_VERSION}-gdb.py""; PRETTY_PRINTER_DEST ${PRETTY_PRINTER_DEST}); endif(soversion); set(PRETTY_PRINTER_DEST ${CMAKE_BINARY_DIR}/lib/${PRETTY_PRINTER_DEST}); add_custom_command(OUTPUT ${PRETTY_PRINTER_DEST}; COMMAND ${CMAKE_COMMAND} -E copy ${PRETTY_PRINTER} ${PRETTY_PRINTER_DEST}; DEPENDS ${PRETTY_PRINTER}); list(APPEND PRETTY_PRINTER_DESTS ${PRETTY_PRINTER_DEST}); endforeach(); add_custom_target(copy_pretty_printers ALL DEPENDS ${PRETTY_PRINTER_DESTS}). install(FILES ${PRETTY_PRINTER_DESTS}; DESTINATION ${CMAKE_INSTALL_LIBDIR}; CONFIGURATIONS Debug RelWithDebInfo); endif(); ",MatchSource.DOCS,misc/gdbPrinters/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/minicern/CMakeLists.txt:618,Performance,optimiz,optimization,618,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT misc/minicern package; ############################################################################. ROOT_LINKER_LIBRARY(minicern *.c *.f TYPE STATIC); set_property(TARGET minicern PROPERTY POSITION_INDEPENDENT_CODE ON); target_link_libraries(minicern ${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}). # Disable optimization since it some cases was causing crashes.; # Disable warnings, since what has worked for 40 years...; # (see https://sft.its.cern.ch/jira/browse/ROOT-9179 for the warnings); set_target_properties(minicern PROPERTIES COMPILE_FLAGS ""-O0 -w""); ",MatchSource.DOCS,misc/minicern/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/minicern/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ChangeLog.txt:16,Deployability,release,release,16,1.0:; * Initial release.; ,MatchSource.DOCS,misc/rootql/ChangeLog.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ChangeLog.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8261,Deployability,install,installation,8261,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:1062,Energy Efficiency,charge,charge,1062," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:4365,Energy Efficiency,charge,charge,4365,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:5068,Energy Efficiency,charge,charge,5068,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:7393,Energy Efficiency,charge,charge,7393,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:3893,Integrability,depend,depends,3893,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8183,Integrability,interface,interface,8183,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:12215,Integrability,interface,interfaces,12215,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:6297,Modifiability,extend,extend,6297,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:7438,Performance,perform,performing,7438,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:2472,Safety,avoid,avoid,2472,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:15361,Safety,safe,safest,15361,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:2417,Security,threat,threatened,2417," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8681,Security,access,access,8681," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8747,Security,access,access,8747," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:11555,Security,integrity,integrity,11555,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:2646,Usability,clear,clear,2646,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:12021,Usability,clear,clear,12021,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:13608,Usability,guid,guided,13608,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:118,Availability,avail,available,118,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:715,Deployability,install,install,715,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:925,Deployability,install,installed,925,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:543,Integrability,depend,depends,543,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:37,Modifiability,plugin,plugin,37,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:665,Modifiability,plugin,plugin,665,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:727,Modifiability,plugin,plugin,727,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:967,Modifiability,plugin,plugin,967,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:1377,Modifiability,plugin,plugin,1377,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:974,Performance,cache,cache,974,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ChangeLog.txt:16,Deployability,release,release,16,1.0:; * Initial release.; ,MatchSource.DOCS,misc/rootsl/ChangeLog.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ChangeLog.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8261,Deployability,install,installation,8261,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:1062,Energy Efficiency,charge,charge,1062," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:4365,Energy Efficiency,charge,charge,4365,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:5068,Energy Efficiency,charge,charge,5068,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:7393,Energy Efficiency,charge,charge,7393,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:3893,Integrability,depend,depends,3893,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8183,Integrability,interface,interface,8183,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:12215,Integrability,interface,interfaces,12215,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:6297,Modifiability,extend,extend,6297,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:7438,Performance,perform,performing,7438,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:2472,Safety,avoid,avoid,2472,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:15361,Safety,safe,safest,15361,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:2417,Security,threat,threatened,2417," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8681,Security,access,access,8681," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8747,Security,access,access,8747," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:11555,Security,integrity,integrity,11555,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:2646,Usability,clear,clear,2646,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:12021,Usability,clear,clear,12021,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:13608,Usability,guid,guided,13608,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:197,Availability,avail,available,197,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:417,Deployability,install,install,417,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:606,Deployability,install,installed,606,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:653,Deployability,install,install,653,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:804,Deployability,install,installed,804,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:36,Modifiability,plugin,plugin,36,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:367,Modifiability,plugin,plugin,367,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:429,Modifiability,plugin,plugin,429,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:591,Modifiability,plugin,plugin,591,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:665,Modifiability,plugin,plugin,665,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:710,Modifiability,plugin,plugin,710,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:1361,Modifiability,plugin,plugin,1361,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:577,Security,password,password,577,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/CMakeLists.txt:934,Testability,test,test,934,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT montecarlo/eg package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(EG; HEADERS; TAttParticle.h; TDatabasePDG.h; TDecayChannel.h; TGenerator.h; TPDGCode.h; TParticleClassPDG.h; TParticle.h; TParticlePDG.h; TPrimary.h; TVirtualMCDecayer.h; SOURCES; src/TAttParticle.cxx; src/TDatabasePDG.cxx; src/TDecayChannel.cxx; src/TGenerator.cxx; src/TParticleClassPDG.cxx; src/TParticle.cxx; src/TParticlePDG.cxx; src/TPrimary.cxx; src/TVirtualMCDecayer.cxx; DEPENDENCIES; Gpad; Graf; Graf3d; MathCore; Physics; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,montecarlo/eg/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/davix/CMakeLists.txt:760,Testability,test,test,760,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/davix package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RDAVIX; HEADERS; ROOT/RRawFileDavix.hxx; TDavixFile.h; TDavixSystem.h; SOURCES; src/RRawFileDavix.cxx; src/TDavixFile.cxx; src/TDavixSystem.cxx; LIBRARIES; Davix::Davix; DEPENDENCIES; Net; RIO; ). target_compile_options(RDAVIX PRIVATE -Wno-deprecated-declarations). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,net/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1875,Availability,error,error,1875,"be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer c",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:896,Deployability,configurat,configuration,896,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:20,Integrability,interface,interface,20,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:671,Integrability,interface,interface,671,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:896,Modifiability,config,configuration,896,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:4892,Modifiability,plugin,plugin,4892,"ootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""fastcgi:9000/none?top=MyApp"");; serv->CreateEngine(""dabc:1237?top=MyApp"");; serv->CreateEngine(""dabc:http:8090?top=MyApp"");; serv->CreateEngine(""dabc:fastcgi:9010?top=MyApp"");; - Many engines can be created at once.; - Provide TDabcEngine (in DABC framework).; - Support additional options for mongoose and fastcgi servers; - Port to ROOT 6 (adjust makefiles), keep Module.mk.ver5. December 2013; - Start of project; - Move ROOT-relevant functionality from DABC plugin; - Introduce THttpServer, THttpEngine and TRootSniffer classes; - Integrate JSRootIO code. ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1695,Performance,cache,cache,1695,"d of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for stream",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:2996,Safety,avoid,avoid,2996,"IT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THtt",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:228,Security,access,access,228,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1155,Security,access,access,1155,"ult, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TB",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1573,Security,access,access,1573,"d of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for stream",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1757,Security,authenticat,authentication,1757,"hen creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1847,Security,access,access,1847,"be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer c",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:4253,Security,access,access,4253,"ootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""fastcgi:9000/none?top=MyApp"");; serv->CreateEngine(""dabc:1237?top=MyApp"");; serv->CreateEngine(""dabc:http:8090?top=MyApp"");; serv->CreateEngine(""dabc:fastcgi:9010?top=MyApp"");; - Many engines can be created at once.; - Provide TDabcEngine (in DABC framework).; - Support additional options for mongoose and fastcgi servers; - Port to ROOT 6 (adjust makefiles), keep Module.mk.ver5. December 2013; - Start of project; - Move ROOT-relevant functionality from DABC plugin; - Introduce THttpServer, THttpEngine and TRootSniffer classes; - Integrate JSRootIO code. ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:2578,Testability,log,logic,2578," Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:2569,Usability,simpl,simplify,2569," Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:3382,Usability,clear,clear,3382,"rocess get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"")",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/netxng/CMakeLists.txt:1066,Testability,test,test,1066,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/netxng package; # @author Lukasz Janyst <ljanyst@cern.ch>; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(NetxNG; HEADERS; TNetXNGFile.h; TNetXNGFileStager.h; TNetXNGSystem.h; ROOT/RRawFileNetXNG.hxx; SOURCES; src/TNetXNGFile.cxx; src/TNetXNGFileStager.cxx; src/TNetXNGSystem.cxx; src/RRawFileNetXNG.cxx; DEPENDENCIES; Net; RIO; Thread; ). target_link_libraries(NetxNG PRIVATE ROOT::XRootD); target_compile_options(NetxNG PRIVATE -Wno-shadow). # When linking against the XRootD target, XRootD includes become ""-isystem"".; # By linking explicitly here, we suppress a warning during dictionary compilation.; target_link_libraries(G__NetxNG PRIVATE ROOT::XRootD). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,net/netxng/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt:772,Availability,error,error,772,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/rpdutils package; # @author Pere Mato, CERN; ############################################################################. include_directories(res ../auth/res). if(MACOSX_SSL_DEPRECATED); set_source_files_properties(src/rpdutils.cxx COMPILE_FLAGS ""-Wno-deprecated-declarations""); endif(). if(shadowpw); add_definitions(-DR__SHADOWPW); endif(). if(ssl); include_directories(${OPENSSL_INCLUDE_DIR}); endif(). add_library(rpdutil STATIC; src/daemon.cxx; src/error.cxx; src/net.cxx; src/netpar.cxx; src/rpdutils.cxx; ). target_include_directories(rpdutil PRIVATE; ${CMAKE_SOURCE_DIR}/core/clib/inc # for snprintf.h; ${CMAKE_SOURCE_DIR}/core/base/inc # for RConfig.hxx; ${CMAKE_SOURCE_DIR}/core/foundation/inc # for TError.hxx; ${CMAKE_SOURCE_DIR}/core/meta/inc # for TGenericClassInfo.h; ${CMAKE_SOURCE_DIR}/net/net/inc # for NetErrors.h; ${CMAKE_SOURCE_DIR}/net/auth/inc # for NetErrors.h; ${CMAKE_BINARY_DIR}/ginclude # for RConfigure.h; ). target_link_libraries(rpdutil INTERFACE $<$<PLATFORM_ID:Linux>:crypt>); set_property(TARGET rpdutil PROPERTY POSITION_INDEPENDENT_CODE ON); add_dependencies(rpdutil move_headers). ROOT_LINKER_LIBRARY(SrvAuth rpdutils.cxx DaemonUtils.h DaemonUtils.cxx; LIBRARIES; ${OPENSSL_LIBRARIES}; rpdutil; rsa; DEPENDENCIES; Net; BUILTINS; OPENSSL; ). target_include_directories(SrvAuth PRIVATE; ${CMAKE_SOURCE_DIR}/net/auth/res; ${CMAKE_SOURCE_DIR}/net/auth/inc; ${CMAKE_SOURCE_DIR}/rpdutils/res; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(SrvAuth PRIVATE crypt); endif(). ",MatchSource.DOCS,net/rpdutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt:85,Availability,avail,available,85,"BEGIN_HTML; This directory contains the classes steering the authentication services available in ROOT.; See <a href=""http://root.cern/root/Auth.html"">the authentication page</a> for more details.; END_HTML; ",MatchSource.DOCS,net/auth/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt:61,Security,authenticat,authentication,61,"BEGIN_HTML; This directory contains the classes steering the authentication services available in ROOT.; See <a href=""http://root.cern/root/Auth.html"">the authentication page</a> for more details.; END_HTML; ",MatchSource.DOCS,net/auth/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt:155,Security,authenticat,authentication,155,"BEGIN_HTML; This directory contains the classes steering the authentication services available in ROOT.; See <a href=""http://root.cern/root/Auth.html"">the authentication page</a> for more details.; END_HTML; ",MatchSource.DOCS,net/auth/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:914,Deployability,install,installation,914,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:1741,Deployability,install,install,1741,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:960,Testability,benchmark,benchmark,960,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:16,Energy Efficiency,power,powers,16,"# Library which powers fast batch computations in Roofit. ROOT_LINKER_LIBRARY(RooBatchCompute; src/Initialisation.cxx; DEPENDENCIES; Core; MathCore; ). target_include_directories(RooBatchCompute PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). if(vdt OR builtin_vdt); target_link_libraries(RooBatchCompute PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(RooBatchCompute VDT); endif(). ############################################################################################################################################; # Instantiations of the shared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFI",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1055,Testability,test,testing,1055,"ROOT_LINKER_LIBRARY(RooBatchCompute; src/Initialisation.cxx; DEPENDENCIES; Core; MathCore; ). target_include_directories(RooBatchCompute PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). if(vdt OR builtin_vdt); target_link_libraries(RooBatchCompute PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(RooBatchCompute VDT); endif(). ############################################################################################################################################; # Instantiations of the shared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math ",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3541,Deployability,install,install,3541,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3457,Modifiability,config,config,3457,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3786,Testability,test,test,3786,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/CMakeLists.txt:870,Testability,test,test,870,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Carsten Burgard, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RooFitHS3; HEADERS; RooFitHS3/JSONIO.h; RooFitHS3/RooJSONFactoryWSTool.h; SOURCES; src/Domains.cxx; src/JSONIO.cxx; src/RooJSONFactoryWSTool.cxx; src/JSONFactories_RooFitCore.cxx; src/JSONFactories_HistFactory.cxx; src/JSONIOUtils.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; RooFitCore; RooFitJSONInterface; LIBRARIES; RooFit; HistFactory; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/hs3/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:725,Integrability,interface,interface,725,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohman",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:923,Integrability,message,message,923,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohman",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:1022,Integrability,message,message,1022,"5-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohmann_json); endif(); ",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:1265,Integrability,message,message,1265,"5-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohmann_json); endif(); ",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:793,Testability,test,tested,793,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohman",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt:1113,Testability,test,test,1113,"############################################################################; # CMakeLists.txt file for building ROOT RooFitMultiProcess package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitMultiProcess; src/worker.cxx; src/Messenger.cxx; src/ProcessManager.cxx; src/util.cxx; src/Queue.cxx; src/FIFOQueue.cxx; src/PriorityQueue.cxx; src/JobManager.cxx; src/Job.cxx; src/Config.cxx; src/ProcessTimer.cxx; src/HeatmapAnalyzer.cxx; LIBRARIES; Core; DEPENDENCIES; RooFitZMQ; ). target_link_libraries(RooFitMultiProcess PUBLIC Hist RooFitZMQ); set(RooFitMultiProcess_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/res""); target_include_directories(RooFitMultiProcess; PRIVATE ${RooFitMultiProcess_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitMultiProcess_INCLUDE_DIR}>). if(builtin_nlohmannjson); target_include_directories(RooFitMultiProcess PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitMultiProcess PRIVATE nlohmann_json::nlohmann_json); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,roofit/multiprocess/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt:3665,Testability,test,test,3665,"iform.h; RooUniform.h; RooVoigtian.h; RooJohnson.h; SOURCES; src/Roo2DKeysPdf.cxx; src/RooArgusBG.cxx; src/RooBCPEffDecay.cxx; src/RooBCPGenDecay.cxx; src/RooBDecay.cxx; src/RooBernstein.cxx; src/RooBifurGauss.cxx; src/RooBlindTools.cxx; src/RooBMixDecay.cxx; src/RooBreitWigner.cxx; src/RooBukinPdf.cxx; src/RooCBShape.cxx; src/RooCrystalBall.cxx; src/RooCFunction1Binding.cxx; src/RooCFunction2Binding.cxx; src/RooCFunction3Binding.cxx; src/RooCFunction4Binding.cxx; src/RooChebychev.cxx; src/RooChi2MCSModule.cxx; src/RooChiSquarePdf.cxx; src/RooDecay.cxx; src/RooDstD0BG.cxx; src/RooExponential.cxx; src/RooLegacyExpPoly.cxx; src/RooPowerSum.cxx; src/RooFunctor1DBinding.cxx; src/RooFunctorBinding.cxx; src/RooGamma.cxx; src/RooGaussian.cxx; src/RooGaussModel.cxx; src/RooGExpModel.cxx; src/RooHistConstraint.cxx; src/RooIntegralMorph.cxx; src/RooJeffreysPrior.cxx; src/RooKeysPdf.cxx; src/RooLagrangianMorphFunc.cxx; src/RooLandau.cxx; src/RooLognormal.cxx; src/RooMathCoreReg.cxx; src/RooMomentMorph.cxx; src/RooMomentMorphFunc.cxx; src/RooMomentMorphFuncND.cxx; src/RooMultiBinomial.cxx; src/RooNDKeysPdf.cxx; src/RooNonCPEigenDecay.cxx; src/RooNovosibirsk.cxx; src/RooParametricStepFunction.cxx; src/RooParamHistFunc.cxx; src/RooPoisson.cxx; src/RooPolynomial.cxx; src/RooSpline.cxx; src/RooStepFunction.cxx; src/RooTFnBinding.cxx; src/RooTFnPdfBinding.cxx; src/RooTMathReg.cxx; src/RooUnblindCPAsymVar.cxx; src/RooUnblindOffset.cxx; src/RooUnblindPrecision.cxx; src/RooUnblindUniform.cxx; src/RooUniform.cxx; src/RooVoigtian.cxx; src/RooJohnson.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef1.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; Core; RooFitCore; Tree; RIO; Matrix; MathCore; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFit PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:11090,Safety,avoid,avoid,11090," src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitCore PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10621,Testability,test,tests,10621,"x; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFit",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:11136,Testability,test,test,11136," src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitCore PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:11649,Testability,test,test,11649," src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitCore PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/CMakeLists.txt:1641,Testability,test,test,1641,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT roofitmore package; # @author Lorenzo Moneta, CERN; ############################################################################. if(mathmore); set(ROOT_MATHMORE_LIBRARY MathMore); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitMore; HEADERS; RooFitMoreLib.h; RooLegendre.h; RooMathMoreReg.h; RooSpHarmonic.h; RooNonCentralChiSquare.h; RooHypatia2.h; SOURCES; src/RooFitMoreLib.cxx; src/RooAdaptiveGaussKronrodIntegrator1D.cxx; src/RooGaussKronrodIntegrator1D.cxx; src/RooLegendre.cxx; src/RooMathMoreReg.cxx; src/RooSpHarmonic.cxx; src/RooNonCentralChiSquare.cxx; src/RooHypatia2.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; ${ROOT_MATHMORE_LIBRARY}; Core; RooFitCore; RooFit; Hist; Matrix; Tree; Minuit; RIO; MathCore; Foam; BUILTINS; GSL; ${EXTRA_DICT_OPTS}; ). target_include_directories(RooFitMore SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(RooFitMore PRIVATE ${GSL_LIBRARIES}). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitMore PUBLIC -fno-math-errno); endif(). #ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitmore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt:762,Safety,avoid,avoid,762,"############################################################################; # CMakeLists.txt file for building ROOT roofitcore/ZMQ package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitZMQ; src/ZeroMQSvc.cpp; src/ZeroMQPoller.cpp; src/functions.cpp; src/ppoll.cpp; ). target_link_libraries(RooFitZMQ PUBLIC libzmq cppzmq); set(RooFitZMQ_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/res); target_include_directories(RooFitZMQ; PRIVATE ${RooFitZMQ_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitZMQ_INCLUDE_DIR}>). # zmq_ppoll is still in the draft API, and RooFitZMQ relies on it; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_BUILD_DRAFT_API); # to avoid leaking symbols; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_NO_EXPORT). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitZMQ/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt:872,Testability,test,test,872,"############################################################################; # CMakeLists.txt file for building ROOT roofitcore/ZMQ package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitZMQ; src/ZeroMQSvc.cpp; src/ZeroMQPoller.cpp; src/functions.cpp; src/ppoll.cpp; ). target_link_libraries(RooFitZMQ PUBLIC libzmq cppzmq); set(RooFitZMQ_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/res); target_include_directories(RooFitZMQ; PRIVATE ${RooFitZMQ_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitZMQ_INCLUDE_DIR}>). # zmq_ppoll is still in the draft API, and RooFitZMQ relies on it; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_BUILD_DRAFT_API); # to avoid leaking symbols; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_NO_EXPORT). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitZMQ/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:3884,Testability,test,test,3884,"ofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/ProfileLikelihoodCalculator.cxx; src/ProfileLikelihoodTestStat.cxx; src/ProposalHelper.cxx; src/RatioOfProfiledLikelihoodsTestStat.cxx; src/RooStatsUtils.cxx; src/SamplingDistPlot.cxx; src/SamplingDistribution.cxx; src/SequentialProposal.cxx; src/SimpleInterval.cxx; src/SimpleLikelihoodRatioTestStat.cxx; src/SPlot.cxx; src/ToyMCImportanceSampler.cxx; src/ToyMCSampler.cxx; src/ToyMCStudy.cxx; src/UniformProposal.cxx; src/UpperLimitMCSModule.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; Core; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Minuit; Foam; Graf; Gpad; ${EXTRA_DICT_OPTS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:514,Testability,test,testHistFactory,514,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:530,Testability,test,testHistFactory,530,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:821,Testability,test,testHistFactory,821,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:890,Testability,test,testParamHistFunc,890,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:908,Testability,test,testParamHistFunc,908,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:980,Testability,test,testHistFactoryPlotting,980,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:1004,Testability,test,testHistFactoryPlotting,1004,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:319,Testability,test,testRooBernstein,319,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:336,Testability,test,testRooBernstein,336,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:391,Testability,test,testRooBifurGauss,391,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:409,Testability,test,testRooBifurGauss,409,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:465,Testability,test,testRooCrystalBall,465,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:484,Testability,test,testRooCrystalBall,484,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:546,Testability,test,testRooExponential,546,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:565,Testability,test,testRooExponential,565,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:694,Testability,test,testRooGaussian,694,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:710,Testability,test,testRooGaussian,710,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:764,Testability,test,testRooJohnson,764,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:779,Testability,test,testRooJohnson,779,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:837,Testability,test,testRooKeysPdf,837,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:852,Testability,test,testRooKeysPdf,852,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:910,Testability,test,testRooLandau,910,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:924,Testability,test,testRooLandau,924,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:976,Testability,test,testRooParamHistFunc,976,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:997,Testability,test,testRooParamHistFunc,997,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1061,Testability,test,testRooPoisson,1061,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1076,Testability,test,testRooPoisson,1076,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1144,Testability,test,testRooFit,1144,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1155,Testability,test,testRooFit,1155,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1212,Testability,test,test-fit-testRooFit,1212,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1240,Testability,test,testRooFit,1240,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1269,Testability,test,testFitPerf,1269,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1281,Testability,test,testFitPerf,1281,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1339,Testability,test,test-fit-testFitPerf,1339,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1368,Testability,test,testFitPerf,1368,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1406,Testability,test,testRooFit,1406,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1417,Testability,test,testRooFit,1417,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1465,Testability,test,test-fit-testRooFit,1465,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1493,Testability,test,testRooFit,1493,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:296,Availability,avail,available,296,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:660,Testability,test,testCompatMode,660,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:675,Testability,test,testCompatMode,675,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:741,Testability,test,testGauss,741,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:751,Testability,test,testGauss,751,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:812,Testability,test,testPoisson,812,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:824,Testability,test,testPoisson,824,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:887,Testability,test,testAddPdf,887,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:898,Testability,test,testAddPdf,898,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:960,Testability,test,testExponential,960,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:976,Testability,test,testExponential,976,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1043,Testability,test,testNestedPDFs,1043,"L Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1058,Testability,test,testNestedPDFs,1058,"L Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1124,Testability,test,testProductPdf,1124,"IFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1139,Testability,test,testProductPdf,1139,"IFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1205,Testability,test,testJohnson,1205,"ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1217,Testability,test,testJohnson,1217,"ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1280,Testability,test,testLandau,1280,"ne profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testD",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1291,Testability,test,testLandau,1291,"ne profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testD",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1353,Testability,test,testBukin,1353,"ctorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1363,Testability,test,testBukin,1363,"ctorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1424,Testability,test,testChebychev,1424,"torisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1438,Testability,test,testChebychev,1438,"torisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1503,Testability,test,testPolynomial,1503,rary(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_G,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1518,Testability,test,testPolynomial,1518,rary(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_G,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1584,Testability,test,testBernstein,1584,ctorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1598,Testability,test,testBernstein,1598,ctorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1663,Testability,test,testArgusBG,1663,_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1675,Testability,test,testArgusBG,1675,_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1738,Testability,test,testBifurGauss,1738,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1753,Testability,test,testBifurGauss,1753,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1819,Testability,test,testBreitWigner,1819,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1835,Testability,test,testBreitWigner,1835,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1902,Testability,test,testCBShape,1902,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1914,Testability,test,testCBShape,1914,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1977,Testability,test,testGamma,1977,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1987,Testability,test,testGamma,1987,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2073,Testability,test,testLegendre,2073,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2086,Testability,test,testLegendre,2086,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2176,Testability,test,testChiSquarePdf,2176,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2193,Testability,test,testChiSquarePdf,2193,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2336,Testability,test,testLognormal,2336,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2350,Testability,test,testLognormal,2350,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2415,Testability,test,testNovosibirsk,2415,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2431,Testability,test,testNovosibirsk,2431,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2498,Testability,test,testVoigtian,2498,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2511,Testability,test,testVoigtian,2511,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2575,Testability,test,testGaussBinned,2575,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2591,Testability,test,testGaussBinned,2591,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2571,Availability,error,error,2571,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2595,Availability,error,error,2595,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2985,Availability,error,error,2985,"llectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc test",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:295,Testability,test,testSimple,295,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:306,Testability,test,testSimple,306,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:359,Testability,test,testRooAddPdf,359,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:373,Testability,test,testRooAddPdf,373,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:438,Testability,test,testRooCacheManager,438,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:458,Testability,test,testRooCacheManager,458,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:520,Testability,test,testRooCategory,520,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:536,Testability,test,testRooCategory,536,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:594,Testability,test,testWorkspace,594,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:608,Testability,test,testWorkspace,608,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:673,Testability,test,testRooDataHist,673,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:689,Testability,test,testRooDataHist,689,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:911,Testability,test,testRooBinSamplingPdf,911,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:933,Testability,test,testRooBinSamplingPdf,933,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:997,Testability,test,testRooWrapperPdf,997,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1015,Testability,test,testRooWrapperPdf,1015,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1080,Testability,test,testGenericPdf,1080," reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1095,Testability,test,testGenericPdf,1095," reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1152,Testability,test,testRooAbsPdf,1152,"list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1166,Testability,test,testRooAbsPdf,1166,"list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1222,Testability,test,testRooAbsCollection,1222,"N, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COP",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1243,Testability,test,testRooAbsCollection,1243,"N, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COP",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1306,Testability,test,testRooDataSet,1306,imple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1321,Testability,test,testRooDataSet,1321,imple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1462,Testability,test,testRooFormula,1462,acheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRoo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1477,Testability,test,testRooFormula,1477,acheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRoo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1552,Testability,test,testRooProdPdf,1552,estRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Window,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1567,Testability,test,testRooProdPdf,1567,estRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Window,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1624,Testability,test,testProxiesAndCategories,1624,BRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0x,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1649,Testability,test,testProxiesAndCategories,1649,BRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0x,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1995,Testability,test,testRooCollectionProxy,1995,"pperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion fa",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2018,Testability,test,testRooCollectionProxy,2018,"pperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion fa",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2163,Testability,test,testRooRealVar,2163,"estRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\inter",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2178,Testability,test,testRooRealVar,2178,"estRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\inter",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2307,Testability,test,testRooAbsReal,2307,"ataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooF",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2322,Testability,test,testRooAbsReal,2322,"ataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooF",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2651,Testability,test,test,2651,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2764,Testability,test,testRooRealIntegral,2764,"T_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL T",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2784,Testability,test,testRooRealIntegral,2784,"T_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL T",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3247,Testability,test,testRooFuncWrapper,3247,"NT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitC",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3266,Testability,test,testRooFuncWrapper,3266,"NT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitC",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3364,Testability,test,testGlobalObservables,3364,"ARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3386,Testability,test,testGlobalObservables,3386,"ARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3450,Testability,test,testInterface,3450,"RCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTrut",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3479,Testability,test,testInterface,3479,"RCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTrut",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3535,Testability,test,testLikelihoodSerial,3535,"ause it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error tes",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3571,Testability,test,testLikelihoodSerial,3571,"ause it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error tes",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3634,Testability,test,testNaNPacker,3634,"xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTe",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3648,Testability,test,testNaNPacker,3648,"xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTe",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3720,Testability,test,testRooAbsL,3720,"h gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinim",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3747,Testability,test,testRooAbsL,3747,"h gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinim",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3801,Testability,test,testRooCurve,3801,"alIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3814,Testability,test,testRooCurve,3814,"alIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3869,Testability,test,testRooHist,3869,"C OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMu",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3881,Testability,test,testRooHist,3881,"C OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMu",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3935,Testability,test,testRooHistPdf,3935,"ual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3950,Testability,test,testRooHistPdf,3950,"ual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4007,Testability,test,testRooPolyFunc,4007,"on failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelih",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4023,Testability,test,testRooPolyFunc,4023,"on failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelih",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4086,Testability,test,testRooRealL,4086,"ontext here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMulti",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4114,Testability,test,testRooRealL,4114,"ontext here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMulti",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4169,Testability,test,testRooRombergIntegrator,4169,"\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradient",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4194,Testability,test,testRooRombergIntegrator,4194,"\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradient",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4270,Testability,test,testRooSTLRefCountList,4270,estRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikeliho,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4293,Testability,test,testRooSTLRefCountList,4293,estRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikeliho,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4358,Testability,test,testRooSimultaneous,4358,_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); ta,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4378,Testability,test,testRooSimultaneous,4378,_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); ta,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4440,Testability,test,testRooTruthModel,4440,OT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_Tes,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4458,Testability,test,testRooTruthModel,4458,OT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_Tes,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4602,Testability,test,testTestStatistics,4602,IBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit-----------------------------------------,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4621,Testability,test,testTestStatistics,4621,IBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit-----------------------------------------,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4682,Testability,test,testRooMinimizer,4682,oFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4699,Testability,test,testRooMinimizer,4699,oFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4791,Testability,test,testTestStatisticsPlot,4791,itCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(s,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4829,Testability,test,testPlot,4829,itCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(s,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4991,Testability,test,testLikelihoodGradientJob,4991,"oPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5032,Testability,test,testLikelihoodGradientJob,5032,"oPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5151,Testability,test,testLikelihoodGradientJob,5151,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5256,Testability,test,testLikelihoodJob,5256,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5289,Testability,test,testLikelihoodJob,5289,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5382,Testability,test,testLikelihoodJob,5382,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5935,Testability,test,test-stressroofit-legacy,5935,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6044,Testability,test,test-stressroofit-cpu,6044,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6148,Testability,test,test-stressroofit-cuda,6148,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6269,Testability,test,testActionHelpers,6269,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6287,Testability,test,testActionHelpers,6287,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:15,Testability,test,testHypoTestInvResult,15,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:37,Testability,test,testHypoTestInvResult,37,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:175,Testability,test,testSPlot,175,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:185,Testability,test,testSPlot,185,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:607,Testability,test,test-stressroostats-legacy,607,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:736,Testability,test,test-stressroostats-cpu,736,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:860,Testability,test,test-stressroostats-cuda,860,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:1017,Testability,test,test-stressroostats-legacy-,1017,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:1169,Testability,test,test-stressroostats-cpu-,1169,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1582,Deployability,install,install,1582,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1670,Deployability,install,install,1670,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1743,Deployability,install,install,1743,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1819,Deployability,install,install,1819,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1892,Deployability,install,install,1892,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/CMakeLists.txt:1076,Testability,test,test,1076,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for PyMVA package; ############################################################################; #Author: Omar Zapata, Lorenzo Moneta, Sergei Glayzer 22/08/2015; #website:http://oproject.org. ROOT_STANDARD_LIBRARY_PACKAGE(PyMVA; HEADERS; TMVA/MethodPyAdaBoost.h; TMVA/MethodPyGTB.h; TMVA/MethodPyKeras.h; TMVA/MethodPyRandomForest.h; TMVA/MethodPyTorch.h; TMVA/RModelParser_Keras.h; TMVA/RModelParser_PyTorch.h; TMVA/PyMethodBase.h; SOURCES; src/MethodPyAdaBoost.cxx; src/MethodPyGTB.cxx; src/MethodPyKeras.cxx; src/MethodPyRandomForest.cxx; src/MethodPyTorch.cxx; src/RModelParser_Keras.cxx; src/RModelParser_PyTorch.cxx; src/PyMethodBase.cxx; LIBRARIES; Python3::NumPy; Python3::Python; DEPENDENCIES; Core; Matrix; Thread; RIO; TMVA; ROOTTMVASofie; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,tmva/pymva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt:2241,Testability,test,tests,2241,"; ############################################################################; #Author: Sitong An, Lorenzo Moneta 10/03/2021. #sofie is built only if protobuf is found. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTMVASofie; HEADERS; TMVA/OperatorList.hxx; TMVA/RModel_Base.hxx; TMVA/RModel.hxx; TMVA/ROperator.hxx; TMVA/ROperator_BasicUnary.hxx; TMVA/ROperator_BasicBinary.hxx; TMVA/ROperator_BasicNary.hxx; TMVA/ROperator_BatchNormalization.hxx; TMVA/ROperator_Conv.hxx; TMVA/ROperator_ConvTranspose.hxx; TMVA/ROperator_Gemm.hxx; TMVA/ROperator_Relu.hxx; TMVA/ROperator_Tanh.hxx; TMVA/ROperator_LeakyRelu.hxx; TMVA/ROperator_Reshape.hxx; TMVA/ROperator_Selu.hxx; TMVA/ROperator_Sigmoid.hxx; TMVA/ROperator_Slice.hxx; TMVA/ROperator_Transpose.hxx; TMVA/ROperator_Pool.hxx; TMVA/ROperator_Concat.hxx; TMVA/ROperator_Identity.hxx; TMVA/ROperator_Constant.hxx; TMVA/ROperator_Softmax.hxx; TMVA/ROperator_Reduce.hxx; TMVA/ROperator_Shape.hxx; TMVA/ROperator_Cast.hxx; TMVA/ROperator_Custom.hxx; TMVA/ROperator_LayerNormalization.hxx; TMVA/ROperator_Expand.hxx; TMVA/ROperator_Erf.hxx; TMVA/ROperator_Swish.hxx; TMVA/ROperator_Elu.hxx; TMVA/ROperator_Comparision.hxx; TMVA/ROperator_EyeLike.hxx; TMVA/ROperator_Range.hxx; TMVA/ROperator_TopK.hxx; TMVA/ROperator_Tile.hxx; TMVA/ROperator_Split.hxx; TMVA/SOFIE_common.hxx; TMVA/SOFIEHelpers.hxx. TMVA/FunctionList.hxx; TMVA/RModel_GNN.hxx; TMVA/RModel_GraphIndependent.hxx; TMVA/RFunction.hxx; TMVA/RFunction_MLP.hxx; TMVA/RFunction_Sum.hxx; TMVA/RFunction_Mean.hxx; SOURCES; src/RModel_Base.cxx; src/RModel.cxx; src/RModel_GNN.cxx; src/RModel_GraphIndependent.cxx; src/RFunction.cxx; src/RFunction_MLP.cxx; src/RFunction_Mean.cxx; src/RFunction_Sum.cxx; src/SOFIE_common.cxx; DEPENDENCIES; TMVA; ). target_include_directories(ROOTTMVASofie PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>); set_target_properties(ROOTTMVASofie PROPERTIES; POSITION_INDEPENDENT_CODE TRUE). # tests requires protobuf; if (tmva-sofie); ROOT_ADD_TEST_SUBDIRECTORY(test); endif(); ",MatchSource.DOCS,tmva/sofie/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt:2310,Testability,test,test,2310,"; ############################################################################; #Author: Sitong An, Lorenzo Moneta 10/03/2021. #sofie is built only if protobuf is found. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTMVASofie; HEADERS; TMVA/OperatorList.hxx; TMVA/RModel_Base.hxx; TMVA/RModel.hxx; TMVA/ROperator.hxx; TMVA/ROperator_BasicUnary.hxx; TMVA/ROperator_BasicBinary.hxx; TMVA/ROperator_BasicNary.hxx; TMVA/ROperator_BatchNormalization.hxx; TMVA/ROperator_Conv.hxx; TMVA/ROperator_ConvTranspose.hxx; TMVA/ROperator_Gemm.hxx; TMVA/ROperator_Relu.hxx; TMVA/ROperator_Tanh.hxx; TMVA/ROperator_LeakyRelu.hxx; TMVA/ROperator_Reshape.hxx; TMVA/ROperator_Selu.hxx; TMVA/ROperator_Sigmoid.hxx; TMVA/ROperator_Slice.hxx; TMVA/ROperator_Transpose.hxx; TMVA/ROperator_Pool.hxx; TMVA/ROperator_Concat.hxx; TMVA/ROperator_Identity.hxx; TMVA/ROperator_Constant.hxx; TMVA/ROperator_Softmax.hxx; TMVA/ROperator_Reduce.hxx; TMVA/ROperator_Shape.hxx; TMVA/ROperator_Cast.hxx; TMVA/ROperator_Custom.hxx; TMVA/ROperator_LayerNormalization.hxx; TMVA/ROperator_Expand.hxx; TMVA/ROperator_Erf.hxx; TMVA/ROperator_Swish.hxx; TMVA/ROperator_Elu.hxx; TMVA/ROperator_Comparision.hxx; TMVA/ROperator_EyeLike.hxx; TMVA/ROperator_Range.hxx; TMVA/ROperator_TopK.hxx; TMVA/ROperator_Tile.hxx; TMVA/ROperator_Split.hxx; TMVA/SOFIE_common.hxx; TMVA/SOFIEHelpers.hxx. TMVA/FunctionList.hxx; TMVA/RModel_GNN.hxx; TMVA/RModel_GraphIndependent.hxx; TMVA/RFunction.hxx; TMVA/RFunction_MLP.hxx; TMVA/RFunction_Sum.hxx; TMVA/RFunction_Mean.hxx; SOURCES; src/RModel_Base.cxx; src/RModel.cxx; src/RModel_GNN.cxx; src/RModel_GraphIndependent.cxx; src/RFunction.cxx; src/RFunction_MLP.cxx; src/RFunction_Mean.cxx; src/RFunction_Sum.cxx; src/SOFIE_common.cxx; DEPENDENCIES; TMVA; ). target_include_directories(ROOTTMVASofie PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>); set_target_properties(ROOTTMVASofie PROPERTIES; POSITION_INDEPENDENT_CODE TRUE). # tests requires protobuf; if (tmva-sofie); ROOT_ADD_TEST_SUBDIRECTORY(test); endif(); ",MatchSource.DOCS,tmva/sofie/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:454,Deployability,install,installoptions,454,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT tmva package; # @author Pere Mato, CERN; ############################################################################. if(NOT tmva-gpu); set(installoptions ${installoptions} FILTER ""Cuda""); endif(). if (imt); list(APPEND TMVA_EXTRA_DEPENDENCIES Imt); endif(imt). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/Me",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:471,Deployability,install,installoptions,471,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT tmva package; # @author Pere Mato, CERN; ############################################################################. if(NOT tmva-gpu); set(installoptions ${installoptions} FILTER ""Cuda""); endif(). if (imt); list(APPEND TMVA_EXTRA_DEPENDENCIES Imt); endif(imt). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/Me",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:9325,Deployability,install,installoptions,9325,"uron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10136,Integrability,message,message,10136,"der.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandard",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10524,Integrability,message,message,10524,"dencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRE",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10759,Integrability,message,message,10759," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11392,Testability,test,test,11392," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11426,Testability,test,test,11426," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11476,Testability,test,test,11476," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11514,Testability,test,test,11514," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11555,Testability,test,test,11555," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11593,Testability,test,test,11593," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11636,Testability,test,test,11636," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11678,Testability,test,test,11678," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11720,Testability,test,test,11720," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11763,Testability,test,test,11763," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:1315,Modifiability,variab,variables,1315,"a package; # @author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_D",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:1333,Modifiability,variab,variablesMultiClass,1333,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:2067,Modifiability,variab,variables,2067,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:2086,Modifiability,variab,variablesMultiClass,2086,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2219,Availability,avail,available,2219,stPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch:,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2724,Integrability,depend,depends,2724,testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LI,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2791,Integrability,depend,depends,2791,testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LI,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3044,Integrability,depend,depends,3044,ECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3472,Integrability,depend,depends,3472,py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classif,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4079,Integrability,depend,depends,4079,ression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRMod,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4143,Integrability,depend,depends,4143,ression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRMod,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4203,Integrability,depend,depends,4203,ression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRMod,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4492,Integrability,depend,depends,4492,hMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (P,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4849,Integrability,depend,depends,4849,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5101,Integrability,depend,depends,5101,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:314,Testability,test,tests,314,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:438,Testability,test,tests,438,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:785,Testability,test,testPyRandomForestClassification,785,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:818,Testability,test,testPyRandomForestClassification,818,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:935,Testability,test,testPyRandomForestClassification,935,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1037,Testability,test,testPyRandomForestMulticlass,1037,Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulti,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1066,Testability,test,testPyRandomForestMulticlass,1066,Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulti,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1175,Testability,test,testPyRandomForestMulticlass,1175,of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1252,Testability,test,testPyGTBClassification,1252,###################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TO,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1276,Testability,test,testPyGTBClassification,1276,###################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TO,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1375,Testability,test,testPyGTBClassification,1375,###################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); conf,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1501,Testability,test,testPyGTBMulticlass,1501,VASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1521,Testability,test,testPyGTBMulticlass,1521,VASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1612,Testability,test,testPyGTBMulticlass,1612,python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyT,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1723,Testability,test,testPyAdaBoostClassification,1723,D); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-de,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1752,Testability,test,testPyAdaBoostClassification,1752,D); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-de,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1861,Testability,test,testPyAdaBoostClassification,1861,; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(t,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1988,Testability,test,testPyAdaBoostMulticlass,1988,ndomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2013,Testability,test,testPyAdaBoostMulticlass,2013,ndomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2114,Testability,test,testPyAdaBoostMulticlass,2114,RIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testP,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2204,Testability,test,tests,2204,stPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch:,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2852,Testability,test,testPyTorchClassification,2852,aBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2878,Testability,test,testPyTorchClassification,2878,aBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2981,Testability,test,testPyTorchClassification,2981,ECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3099,Testability,test,testPyTorchRegression,3099,ticlass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3121,Testability,test,testPyTorchRegression,3121,ticlass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3216,Testability,test,testPyTorchRegression,3216,D). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3300,Testability,test,testPyTorchMulticlass,3300,orchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXE,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3322,Testability,test,testPyTorchMulticlass,3322,orchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXE,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3417,Testability,test,testPyTorchMulticlass,3417,py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classif,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4300,Testability,test,testPyKerasClassification,4300,E(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); targ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4326,Testability,test,testPyKerasClassification,4326,E(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); targ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4429,Testability,test,testPyKerasClassification,4429,hMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (P,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4677,Testability,test,testPyKerasRegression,4677,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4699,Testability,test,testPyKerasRegression,4699,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4794,Testability,test,testPyKerasRegression,4794,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4929,Testability,test,testPyKerasMulticlass,4929,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4951,Testability,test,testPyKerasMulticlass,4951,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5046,Testability,test,testPyKerasMulticlass,5046,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:3530,Integrability,depend,dependency,3530,LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET SofieCompileModels_ROOT POST_BUILD; COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvT,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:752,Safety,avoid,avoid,752,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA SOFIE tests.; # @author Federico Sossai, Sanjiban Sengupta; ############################################################################. set(SOFIE_PARSERS_DIR ${CMAKE_SOURCE_DIR}/tmva/sofie_parsers). if (NOT ONNX_MODELS_DIR); set(ONNX_MODELS_DIR input_models); endif(). #Finding .onnx files to be parsed and creating the appropriate code to; # parse all file. It is much faster to combine all parsing in a single executable; # which will avoid initialization time (especially when using ROOT); set(CAPTURE_STR ""EmitModel( \""@1\"", \""@2\"");""); set(ALL_CAPTURES """"); # Finding .onnx files to be parsed and creating the appropriate command; file(GLOB ONNX_FILES ""${ONNX_MODELS_DIR}/*.onnx""); foreach(onnx_file ${ONNX_FILES}); 	get_filename_component(fname ${onnx_file} NAME_WE); 	get_filename_component(fdir ${onnx_file} DIRECTORY); string(REPLACE ""@1"" ${onnx_file} cap ${CAPTURE_STR}); string(REPLACE ""@2"" ${fname} cap ${cap}); list(APPEND ALL_CAPTURES ${cap}); endforeach(); string(REPLACE "";"" "";\n"" EMIT_CAPTURES ""${ALL_CAPTURES}""); configure_file(EmitFromONNX.cxx.in EmitFromONNX_all.cxx @ONLY); configure_file(EmitFromRoot.cxx.in EmitFromRoot_all.cxx @ONLY). add_executable(emitFromONNX; EmitFromONNX_all.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version",MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:319,Testability,test,tests,319,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA SOFIE tests.; # @author Federico Sossai, Sanjiban Sengupta; ############################################################################. set(SOFIE_PARSERS_DIR ${CMAKE_SOURCE_DIR}/tmva/sofie_parsers). if (NOT ONNX_MODELS_DIR); set(ONNX_MODELS_DIR input_models); endif(). #Finding .onnx files to be parsed and creating the appropriate code to; # parse all file. It is much faster to combine all parsing in a single executable; # which will avoid initialization time (especially when using ROOT); set(CAPTURE_STR ""EmitModel( \""@1\"", \""@2\"");""); set(ALL_CAPTURES """"); # Finding .onnx files to be parsed and creating the appropriate command; file(GLOB ONNX_FILES ""${ONNX_MODELS_DIR}/*.onnx""); foreach(onnx_file ${ONNX_FILES}); 	get_filename_component(fname ${onnx_file} NAME_WE); 	get_filename_component(fdir ${onnx_file} DIRECTORY); string(REPLACE ""@1"" ${onnx_file} cap ${CAPTURE_STR}); string(REPLACE ""@2"" ${fname} cap ${cap}); list(APPEND ALL_CAPTURES ${cap}); endforeach(); string(REPLACE "";"" "";\n"" EMIT_CAPTURES ""${ALL_CAPTURES}""); configure_file(EmitFromONNX.cxx.in EmitFromONNX_all.cxx @ONLY); configure_file(EmitFromRoot.cxx.in EmitFromRoot_all.cxx @ONLY). add_executable(emitFromONNX; EmitFromONNX_all.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version",MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2792,Testability,test,testing,2792,e ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET ,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1123,Integrability,interface,interface,1123,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1199,Integrability,interface,interfaces,1199,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:318,Testability,test,tests,318,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:451,Testability,test,test,451,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1379,Testability,test,tests,1379,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:2005,Testability,test,test-stresstmva,2005,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:318,Testability,test,tests,318,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:476,Testability,test,test,476,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:497,Testability,test,testCrossValidationSplitting,497,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:601,Testability,test,testCrossValidationIntVar,601,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:756,Testability,test,testCrossValidationMultiProc,756,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:879,Testability,test,testCrossValidationSerialise,879,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:1022,Testability,test,testCrossValidationSerialise,1022,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:317,Testability,test,tests,317,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:464,Testability,test,tests,464,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:736,Testability,test,testActivationFunctionsCuda,736,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:820,Testability,test,testActivationFunctionsCuda,820,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:919,Testability,test,testActivationFunctionsCuda,919,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:993,Testability,test,testLossFunctionsCuda,993,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1065,Testability,test,testLossFunctionsCuda,1065,terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1152,Testability,test,testLossFunctionsCuda,1152,terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1217,Testability,test,testDerivativesCuda,1217,#######################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizatio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1285,Testability,test,testDerivativesCuda,1285,; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationC,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1368,Testability,test,testDerivativesCuda,1368,; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationC,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1435,Testability,test,testBackpropagationCuda,1435,(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeti,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1511,Testability,test,testBackpropagationCuda,1511,}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1601,Testability,test,testBackpropagationCuda,1601,}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1675,Testability,test,testBackpropagationDLCuda,1675,:cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1756,Testability,test,testBackpropagationDLCuda,1756,T_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1852,Testability,test,testBackpropagationDLCuda,1852,T_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1929,Testability,test,testBatchNormalizationCuda,1929,onFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2012,Testability,test,testBatchNormalizationCuda,2012,RIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch norma,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2109,Testability,test,testBatchNormalizationCuda,2109,RIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch norma,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2180,Testability,test,testMinimizationCuda,2180,NN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2250,Testability,test,testMinimizationCuda,2250,DerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormal,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2335,Testability,test,testMinimizationCuda,2335,DerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormal,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2398,Testability,test,testArithmeticCuda,2398,ackpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); ,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2470,Testability,test,testArithmeticCuda,2470,RIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2551,Testability,test,testArithmeticCuda,2551,RIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2612,Testability,test,testDataLoaderCuda,2612,ropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn Tes,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2678,Testability,test,testDataLoaderCuda,2678,gationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_L,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2758,Testability,test,testDataLoaderCuda,2758,gationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_L,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2820,Testability,test,testOptimizationCuda,2820,ion-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2890,Testability,test,testOptimizationCuda,2890,estBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Bla,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2976,Testability,test,testOptimizationCuda,2976,estBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Bla,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3005,Testability,test,tests,3005,chNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3091,Testability,test,testBatchNormalizationCudnn,3091,on-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES $,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3176,Testability,test,testBatchNormalizationCudnn,3176,); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(te,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3275,Testability,test,testBatchNormalizationCudnn,3275,); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(te,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3350,Testability,test,testOptimizationCudnn,3350,- Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND t,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3422,Testability,test,testOptimizationCudnn,3422,RARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLos,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3510,Testability,test,testOptimizationCudnn,3510,RARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLos,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3582,Testability,test,testTensorDataLoaderCudnn,3582,aLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DN,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3663,Testability,test,testTensorDataLoaderCudnn,3663,_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivative,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3780,Testability,test,testTensorDataLoaderCudnn,3780,_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivative,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3836,Testability,test,tests,3836,onCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpr,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3897,Testability,test,tests,3897,ET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries},MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4037,Testability,test,testArithmeticCpu,4037,-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4154,Testability,test,testArithmeticCpu,4154,chNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu CO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4224,Testability,test,testActivationFunctionsCpu,4224,DD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4363,Testability,test,testActivationFunctionsCpu,4363, add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMM,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4436,Testability,test,testLossFunctionsCpu,4436,tionCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4557,Testability,test,testLossFunctionsCpu,4557,dnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND tes,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4621,Testability,test,testDerivativesCpu,4621,ataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4735,Testability,test,testDerivativesCpu,4735,_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4801,Testability,test,testBackpropagationCpu,4801,udnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - Metho,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4927,Testability,test,testBackpropagationCpu,4927,sts. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimiz,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4999,Testability,test,testBackpropagationDLCpu,4999,metic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND t,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5132,Testability,test,testBackpropagationDLCpu,5132,s}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5204,Testability,test,testBatchNormalizationCpu,5204, ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5339,Testability,test,testBatchNormalizationCpu,5339,_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5409,Testability,test,testOptimizationCpu,5409,nctions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMeth,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5526,Testability,test,testOptimizationCpu,5526,aries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RM,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5603,Testability,test,testMethodDLSGDOptimizationCpu,5603,OOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5755,Testability,test,testMethodDLSGDOptimizationCpu,5755, COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries});,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5844,Testability,test,testMethodDLAdamOptimizationCpu,5844,cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regressio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5999,Testability,test,testMethodDLAdamOptimizationCpu,5999,L CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6105,Testability,test,testMethodDLAdagradOptimizationCpu,6105,gation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBR,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6269,Testability,test,testMethodDLAdagradOptimizationCpu,6269,ormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6365,Testability,test,testMethodDLRMSPropOptimizationCpu,6365,NN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6529,Testability,test,testMethodDLRMSPropOptimizationCpu,6529,-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivatio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6626,Testability,test,testMethodDLAdadeltaOptimizationCpu,6626,pu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFu,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6793,Testability,test,testMethodDLAdadeltaOptimizationCpu,6793,dDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMV,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6871,Testability,test,testRegressionCpu,6871,nCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6987,Testability,test,testRegressionCpu,6987,-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7018,Testability,test,test,7018,MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.c,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7066,Testability,test,testDataLoaderCpu,7066,MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.c,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7178,Testability,test,testDataLoaderCpu,7178,dDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation).,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7240,Testability,test,testMinimizationCpu,7240,agrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7357,Testability,test,testMinimizationCpu,7357,p Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpro,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7381,Testability,test,tests,7381,dDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7433,Testability,test,tests,7433,dDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7487,Testability,test,testActivationFunctions,7487,MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Bat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7616,Testability,test,testActivationFunctions,7616,lta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader ,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7682,Testability,test,testLossFunctions,7682,ltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7793,Testability,test,testLossFunctions,7793,ta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7850,Testability,test,testDerivatives,7850,on CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in n,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7954,Testability,test,testDerivatives,7954,"${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8013,Testability,test,testBackpropagation,8013,"d-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testM",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8129,Testability,test,testBackpropagation,8129,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8195,Testability,test,testBackpropagationDL,8195,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8318,Testability,test,testBackpropagationDL,8318,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8387,Testability,test,testBatchNormalization,8387,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8512,Testability,test,testBatchNormalization,8512,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8573,Testability,test,testDataLoader,8573,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8675,Testability,test,testDataLoader,8675,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8732,Testability,test,testMinimization,8732,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8804,Testability,test,test,8804,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:9007,Testability,test,testMinimization,9007,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt:317,Testability,test,tests,317,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building Envelope tests.; # @author Omar Zapata; ############################################################################; ROOT_ADD_GTEST(TMVA-Envelope testEnvelope.cxx LIBRARIES Core TMVA RIO); ROOT_ADD_GTEST(TMVA-Classification testClassification.cxx LIBRARIES Core TMVA RIO); ",MatchSource.DOCS,tmva/tmva/test/envelope/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt:455,Testability,test,testEnvelope,455,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building Envelope tests.; # @author Omar Zapata; ############################################################################; ROOT_ADD_GTEST(TMVA-Envelope testEnvelope.cxx LIBRARIES Core TMVA RIO); ROOT_ADD_GTEST(TMVA-Classification testClassification.cxx LIBRARIES Core TMVA RIO); ",MatchSource.DOCS,tmva/tmva/test/envelope/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt:533,Testability,test,testClassification,533,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building Envelope tests.; # @author Omar Zapata; ############################################################################; ROOT_ADD_GTEST(TMVA-Envelope testEnvelope.cxx LIBRARIES Core TMVA RIO); ROOT_ADD_GTEST(TMVA-Classification testClassification.cxx LIBRARIES Core TMVA RIO); ",MatchSource.DOCS,tmva/tmva/test/envelope/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt:320,Testability,test,tests,320,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/Method tests.; # @author Kim Albertsson; ############################################################################. # As the reference implementation is deprecated and; # can't be instantiated, we can only run this test; # if there if we can run CPU or CUDA versions.; #if (defined DNNCPU || defined DNNCUDA); if(tmva-cpu OR tmva-gpu); ROOT_ADD_GTEST(TestMethodDNNValidationSize; TestMethodDNNValidationSize.cxx; LIBRARIES TMVA); endif(); ",MatchSource.DOCS,tmva/tmva/test/Method/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt:531,Testability,test,test,531,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/Method tests.; # @author Kim Albertsson; ############################################################################. # As the reference implementation is deprecated and; # can't be instantiated, we can only run this test; # if there if we can run CPU or CUDA versions.; #if (defined DNNCPU || defined DNNCUDA); if(tmva-cpu OR tmva-gpu); ROOT_ADD_GTEST(TestMethodDNNValidationSize; TestMethodDNNValidationSize.cxx; LIBRARIES TMVA); endif(); ",MatchSource.DOCS,tmva/tmva/test/Method/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt:317,Testability,test,tests,317,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/ROC tests.; # @author Kim Albertsson; ############################################################################. ROOT_ADD_GTEST(testRocWeights; testRocWeights.cxx; LIBRARIES TMVA); ",MatchSource.DOCS,tmva/tmva/test/ROC/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt:444,Testability,test,testRocWeights,444,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/ROC tests.; # @author Kim Albertsson; ############################################################################. ROOT_ADD_GTEST(testRocWeights; testRocWeights.cxx; LIBRARIES TMVA); ",MatchSource.DOCS,tmva/tmva/test/ROC/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt:460,Testability,test,testRocWeights,460,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/ROC tests.; # @author Kim Albertsson; ############################################################################. ROOT_ADD_GTEST(testRocWeights; testRocWeights.cxx; LIBRARIES TMVA); ",MatchSource.DOCS,tmva/tmva/test/ROC/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:321,Testability,test,tests,321,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:467,Testability,test,tests,467,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:827,Testability,test,testPoolingLayerCuda,827,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:897,Testability,test,testPoolingLayerCuda,897,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1007,Testability,test,testPoolingLayerCuda,1007,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1045,Testability,test,testReshapeCuda,1045,ers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Conv,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1105,Testability,test,testReshapeCuda,1105, of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testFor,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1205,Testability,test,testReshapeCuda,1205, of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testFor,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1238,Testability,test,testConvLayerCuda,1238,#######################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} $,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1302,Testability,test,testConvLayerCuda,1302,lievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_exec,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1406,Testability,test,testConvLayerCuda,1406,lievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_exec,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1441,Testability,test,testForwardPassCuda,1441,A). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1509,Testability,test,testForwardPassCuda,1509, CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1613,Testability,test,testForwardPassCuda,1613, CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1650,Testability,test,testRotateWeightsCuda,1650,Cuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); targe,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1722,Testability,test,testRotateWeightsCuda,1722,-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1834,Testability,test,testRotateWeightsCuda,1834,-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1873,Testability,test,testConvBackpropagationCuda,1873,ies(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_librarie,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1957,Testability,test,testConvBackpropagationCuda,1957,ayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2081,Testability,test,testConvBackpropagationCuda,2081,ayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2143,Testability,test,testForwardPassCudnn,2143,; ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2213,Testability,test,testForwardPassCudnn,2213,vLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2319,Testability,test,testForwardPassCudnn,2319,vLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2357,Testability,test,testConvBackpropagationCudnn,2357,N-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of referenc,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2443,Testability,test,testConvBackpropagationCudnn,2443,s(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CN,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2569,Testability,test,testConvBackpropagationCudnn,2569,s(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CN,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2615,Testability,test,testConvLayerCudnn,2615,ssCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_T,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2681,Testability,test,testConvLayerCudnn,2681,teWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIB,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2787,Testability,test,testConvLayerCudnn,2787,teWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIB,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2823,Testability,test,testPoolingLayerCudnn,2823,tRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeigh,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2895,Testability,test,testPoolingLayerCudnn,2895,ibraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights).,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3007,Testability,test,testPoolingLayerCudnn,3007,ibraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights).,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3033,Testability,test,test,3033,D testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #R,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3083,Testability,test,testMixedArchitectures,3083,D testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #R,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3157,Testability,test,testMixedArchitectures,3157,(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Librari,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3271,Testability,test,testMixedArchitectures,3271,(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Librari,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3362,Testability,test,test,3362, TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3553,Testability,test,testPoolingLayer,3553,COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinim,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3664,Testability,test,testPoolingLayer,3664,TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3699,Testability,test,testReshape,3699,Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3795,Testability,test,testReshape,3795,onvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. -------,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3825,Testability,test,testRotWeights,3825,gLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmv,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3933,Testability,test,testRotWeights,3933,ingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Lib,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4017,Testability,test,testForwardPass,4017,COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoo,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4122,Testability,test,testForwardPass,4122,chitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Poolin,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4157,Testability,test,testConvNetLoss,4157,edArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayer,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4259,Testability,test,testConvNetLoss,4259,MVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4294,Testability,test,testConvNetPred,4294, include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRo,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4402,Testability,test,testConvNetPred,4402,ence architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_T,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4437,Testability,test,testDLMinimization,4437,Im2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECU,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4551,Testability,test,testDLMinimization,4551,D testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROO,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4589,Testability,test,testTensorDataLoader,4589,${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABL,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4711,Testability,test,testTensorDataLoader,4711, ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TES,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4752,Testability,test,tests,4752,; ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4992,Testability,test,testPoolingLayerCpu,4992,OT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU C,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5113,Testability,test,testPoolingLayerCpu,5113,_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLo,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5151,Testability,test,testConvLayerCpu,5151,stConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(T,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5263,Testability,test,testConvLayerCpu,5263,TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EX,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5298,Testability,test,testRotWeightsCpu,5298, TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5416,Testability,test,testRotWeightsCpu,5416,NN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCp,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5452,Testability,test,testForwardPassCpu,5452,nimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LI,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5566,Testability,test,testForwardPassCpu,5566,tion COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5603,Testability,test,testConvNetLossCpu,5603,tTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDL,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5714,Testability,test,testConvNetLossCpu,5714,sor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5751,Testability,test,testConvNetPredCpu,5751,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5868,Testability,test,testConvNetPredCpu,5868,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5905,Testability,test,testReshapeCpu,5905,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6011,Testability,test,testReshapeCpu,6011,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6067,Testability,test,testTensorDataLoaderCpu,6067,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6199,Testability,test,testTensorDataLoaderCpu,6199,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6242,Testability,test,testDLMinimizationCpu,6242,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6366,Testability,test,testDLMinimizationCpu,6366,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6406,Testability,test,testConvBackpropagationCpu,6406,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6541,Testability,test,testConvBackpropagationCpu,6541,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6586,Testability,test,testMethodDLCNN,6586,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6691,Testability,test,testMethodDLCNN,6691,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:126,Testability,test,tests,126,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:270,Testability,test,tests,270,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:457,Testability,test,testGRUBackpropagationCudnn,457,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:541,Testability,test,testGRUBackpropagationCudnn,541,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:662,Testability,test,testGRUBackpropagationCudnn,662,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:707,Testability,test,testGRUForwardPassCudnn,707,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:783,Testability,test,testGRUForwardPassCudnn,783,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:893,Testability,test,testGRUForwardPassCudnn,893,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:957,Testability,test,testFullGRUCudnn,957,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1019,Testability,test,testFullGRUCudnn,1019,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1119,Testability,test,testFullGRUCudnn,1119,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1180,Testability,test,tests,1180,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1279,Testability,test,testGRUForwardPassCpu,1279,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1399,Testability,test,testGRUForwardPassCpu,1399,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1461,Testability,test,testGRUBackpropagationCpu,1461,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1590,Testability,test,testGRUBackpropagationCpu,1590,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1657,Testability,test,testFullGRUCpu,1657,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt:1760,Testability,test,testFullGRUCpu,1760,############################################################################; # CMakeLists.txt file for building TMVA/DNN/GRU tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testGRUBackpropagationCudnn TestGRUBackpropagationCudnn.cxx); target_link_libraries(testGRUBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-BackpropagationCudnn COMMAND testGRUBackpropagationCudnn). add_executable(testGRUForwardPassCudnn TestGRUForwardPassCudnn.cxx); target_link_libraries(testGRUForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forwaed-Cudnn COMMAND testGRUForwardPassCudnn). # GRU - Full Test GPU; add_executable(testFullGRUCudnn TestFullGRUCudnn.cxx); target_link_libraries(testFullGRUCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cudnn COMMAND testFullGRUCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # GRU - Forward CPU; ROOT_EXECUTABLE(testGRUForwardPassCpu TestGRUForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Forward-Cpu COMMAND testGRUForwardPassCpu). # GRU - Backward CPU; ROOT_EXECUTABLE(testGRUBackpropagationCpu TestGRUBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Backward-Cpu COMMAND testGRUBackpropagationCpu). # GRU - Full Test CPU; ROOT_EXECUTABLE(testFullGRUCpu TestFullGRUCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-GRU-Full-Cpu COMMAND testFullGRUCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/GRU/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:127,Testability,test,tests,127,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:306,Testability,test,testLSTMForwardPass,306,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:420,Testability,test,testLSTMForwardPass,420,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:495,Testability,test,testLSTMBackpropagation,495,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:625,Testability,test,testLSTMBackpropagation,625,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:698,Testability,test,testFullLSTM,698,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:799,Testability,test,testFullLSTM,799,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:824,Testability,test,tests,824,############################################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTA,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1011,Testability,test,testLSTMForwardPassCudnn,1011,################################################; # CMakeLists.txt file for building TMVA/DNN/LSTM tests.; # @author Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1089,Testability,test,testLSTMForwardPassCudnn,1089, Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardP,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1201,Testability,test,testLSTMForwardPassCudnn,1201, Surya S Dwivedi; ############################################################################. set(Libraries TMVA). # LSTM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardP,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1243,Testability,test,testLSTMBackpropagationCudnn,1243,STM - Forward Reference; #ROOT_EXECUTABLE(testLSTMForwardPass TestLSTMForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Li,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1329,Testability,test,testLSTMBackpropagationCudnn,1329,d COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTM,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1452,Testability,test,testLSTMBackpropagationCudnn,1452,d COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTM,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1677,Testability,test,testFullLSTMCudnn,1677,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1741,Testability,test,testFullLSTMCudnn,1741,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1843,Testability,test,testFullLSTMCudnn,1843,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1905,Testability,test,tests,1905,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:2005,Testability,test,testLSTMForwardPassCpu,2005,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:2128,Testability,test,testLSTMForwardPassCpu,2128,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:2192,Testability,test,testLSTMBackpropagationCpu,2192,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:2324,Testability,test,testLSTMBackpropagationCpu,2324,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:2399,Testability,test,testFullLSTMCpu,2399,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:2505,Testability,test,testFullLSTMCpu,2505,ARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTMCpu TestFullLSTMCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cpu COMMAND testFullLSTMCpu). endif (BLAS_FOUND AND imt); ,MatchSource.DOCS,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:321,Testability,test,tests,321,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/RNN tests.; # @author Saurav Shekhar; ############################################################################. set(Libraries TMVA). if (tmva-gpu); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart); endif(). #---Reference test. if (Test_Reference). # RNN - BackPropagation Reference; ROOT_EXECUTABLE(testRecurrentBackpropagation TestRecurrentBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagatio",MatchSource.DOCS,tmva/tmva/test/DNN/RNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:547,Testability,test,test,547,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/RNN tests.; # @author Saurav Shekhar; ############################################################################. set(Libraries TMVA). if (tmva-gpu); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart); endif(). #---Reference test. if (Test_Reference). # RNN - BackPropagation Reference; ROOT_EXECUTABLE(testRecurrentBackpropagation TestRecurrentBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagatio",MatchSource.DOCS,tmva/tmva/test/DNN/RNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt
