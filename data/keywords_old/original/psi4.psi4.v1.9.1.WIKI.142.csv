id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__cctriples-1.html:788,Deployability,update,updated,788,"﻿. CCTRIPLES — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». CCTRIPLES¶; Computes the triples component of CCSD(T) energies (and gradients, if necessary). (T) CORRECTION ENERGY; AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(T) TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY. Previous topic; CCEOM; Next topic; DCFT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__cctriples-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__cctriples-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__cctriples.html:788,Deployability,update,updated,788,"﻿. CCTRIPLES — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». CCTRIPLES¶; Computes the triples component of CCSD(T) energies (and gradients, if necessary). (T) CORRECTION ENERGY; AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(T) TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY. Previous topic; CCEOM; Next topic; DCFT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__cctriples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__cctriples.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dcft-1.html:648,Deployability,update,updated,648,"﻿. DCFT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DCFT¶; Performs Density Cumulant Functional Theory computations. CURRENT ENERGY; DCFT LAMBDA ENERGY; DCFT SCF ENERGY; DCFT TOTAL ENERGY; MP2 CORRELATION ENERGY; MP2 TOTAL ENERGY. Previous topic; CCTRIPLES; Next topic; DETCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__dcft-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dcft-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dcft.html:648,Deployability,update,updated,648,"﻿. DCFT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DCFT¶; Performs Density Cumulant Functional Theory computations. CURRENT ENERGY; DCFT LAMBDA ENERGY; DCFT SCF ENERGY; DCFT TOTAL ENERGY; MP2 CORRELATION ENERGY; MP2 TOTAL ENERGY. Previous topic; CCTRIPLES; Next topic; DETCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__dcft.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dcft.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html:179,Deployability,configurat,configuration,179,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html:320,Deployability,configurat,configuration,320,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html:2049,Deployability,update,updated,2049,"I4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html:179,Modifiability,config,configuration,179,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html:320,Modifiability,config,configuration,320,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html:179,Deployability,configurat,configuration,179,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html:320,Deployability,configurat,configuration,320,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html:2049,Deployability,update,updated,2049,"I4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html:179,Modifiability,config,configuration,179,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html:320,Modifiability,config,configuration,320,"﻿. DETCI — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DETCI¶; Performs configuration interaction (CI) computations of various types, including restricted-active-space (RAS) CI, full CI, the CI component of multi-configuration self-consistent-field (MCSCF) and complete-active-space self-consistent-field (CASSCF) computations, and arbitrary-order perturbation theory and arbitrary-order coupled-cluster computations for small molecules. CI CORRELATION ENERGY; CI DIPOLE X; CI DIPOLE Y; CI DIPOLE Z; CI QUADRUPOLE XX; CI QUADRUPOLE XY; CI QUADRUPOLE XZ; CI QUADRUPOLE YY; CI QUADRUPOLE YZ; CI QUADRUPOLE ZZ; CI ROOT n -> ROOT m DIPOLE X; CI ROOT n -> ROOT m DIPOLE Y; CI ROOT n -> ROOT m DIPOLE Z; CI ROOT n -> ROOT m QUADRUPOLE XX; CI ROOT n -> ROOT m QUADRUPOLE XY; CI ROOT n -> ROOT m QUADRUPOLE XZ; CI ROOT n -> ROOT m QUADRUPOLE YY; CI ROOT n -> ROOT m QUADRUPOLE YZ; CI ROOT n -> ROOT m QUADRUPOLE ZZ; CI ROOT n CORRELATION ENERGY; CI ROOT n DIPOLE X; CI ROOT n DIPOLE Y; CI ROOT n DIPOLE Z; CI ROOT n QUADRUPOLE XX; CI ROOT n QUADRUPOLE XY; CI ROOT n QUADRUPOLE XZ; CI ROOT n QUADRUPOLE YY; CI ROOT n QUADRUPOLE YZ; CI ROOT n QUADRUPOLE ZZ; CI ROOT n TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY; CI STATE-AVERAGED TOTAL ENERGY; CI TOTAL ENERGY; CISD CORRELATION ENERGY; CISD TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; FCI CORRELATION ENERGY; FCI TOTAL ENERGY; MPn CORRELATION ENERGY; MPn TOTAL ENERGY; ZAPTn CORRELATION ENERGY; ZAPTn TOTAL ENERGY. Previous topic; DCFT; Next topic; DFMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Modu",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__detci.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dfmp2-1.html:763,Deployability,update,updated,763,"﻿. DFMP2 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DFMP2¶; Performs density-fitted MP2 computations for RHF/UHF/ROHF reference wavefunctions. CURRENT CORRELATION ENERGY; CURRENT ENERGY; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN ENERGY; MP2 SAME-SPIN ENERGY; MP2 SINGLES ENERGY; MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY; SCS-MP2 TOTAL ENERGY. Previous topic; DETCI; Next topic; DFTSAPT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dfmp2-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dfmp2.html:763,Deployability,update,updated,763,"﻿. DFMP2 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DFMP2¶; Performs density-fitted MP2 computations for RHF/UHF/ROHF reference wavefunctions. CURRENT CORRELATION ENERGY; CURRENT ENERGY; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN ENERGY; MP2 SAME-SPIN ENERGY; MP2 SINGLES ENERGY; MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY; SCS-MP2 TOTAL ENERGY. Previous topic; DETCI; Next topic; DFTSAPT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__dfmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dfmp2.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dftsapt-1.html:491,Deployability,update,updated,491,"﻿. DFTSAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DFTSAPT¶. SAPT ENERGY. Previous topic; DFMP2; Next topic; FNOCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__dftsapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dftsapt-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dftsapt.html:491,Deployability,update,updated,491,"﻿. DFTSAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». DFTSAPT¶. SAPT ENERGY. Previous topic; DFMP2; Next topic; FNOCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__dftsapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__dftsapt.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__fnocc-1.html:2163,Deployability,update,updated,2163,"PF OPPOSITE-SPIN CORRELATION ENERGY; ACPF SAME-SPIN CORRELATION ENERGY; ACPF TOTAL ENERGY; AQCC CORRELATION ENERGY; AQCC OPPOSITE-SPIN CORRELATION ENERGY; AQCC SAME-SPIN CORRELATION ENERGY; AQCC TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD SAME-SPIN CORRELATION ENERGY; CCSD TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(T) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(0) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(0) SAME-SPIN CORRELATION ENERGY; CEPA(0) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(1) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(1) SAME-SPIN CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(2) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(2) SAME-SPIN CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY; CEPA(3) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(3) SAME-SPIN CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CISD CORRELATION ENERGY; CISD OPPOSITE-SPIN CORRELATION ENERGY; CISD SAME-SPIN CORRELATION ENERGY; CISD TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; DFCC NAUX; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN CORRELATION ENERGY; MP2 SAME-SPIN CORRELATION ENERGY; MP2 TOTAL ENERGY; MP2.5 CORRELATION ENERGY; MP2.5 TOTAL ENERGY; MP3 CORRELATION ENERGY; MP3 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4 TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY; MP4(SDQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(T) CORRECTION ENERGY; QCISD CORRELATION ENERGY; QCISD OPPOSITE-SPIN CORRELATION ENERGY; QCISD SAME-SPIN CORRELATION ENERGY; QCISD TOTAL ENERGY; QCISD(T) CORRELATION ENERGY; QCISD(T) TOTAL ENERGY; SCF TOTAL ENERGY. Previous topic; DFTSAPT; Next topic; LMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__fnocc-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__fnocc.html:2163,Deployability,update,updated,2163,"PF OPPOSITE-SPIN CORRELATION ENERGY; ACPF SAME-SPIN CORRELATION ENERGY; ACPF TOTAL ENERGY; AQCC CORRELATION ENERGY; AQCC OPPOSITE-SPIN CORRELATION ENERGY; AQCC SAME-SPIN CORRELATION ENERGY; AQCC TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD SAME-SPIN CORRELATION ENERGY; CCSD TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(T) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(0) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(0) SAME-SPIN CORRELATION ENERGY; CEPA(0) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(1) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(1) SAME-SPIN CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(2) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(2) SAME-SPIN CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY; CEPA(3) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(3) SAME-SPIN CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CISD CORRELATION ENERGY; CISD OPPOSITE-SPIN CORRELATION ENERGY; CISD SAME-SPIN CORRELATION ENERGY; CISD TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; DFCC NAUX; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN CORRELATION ENERGY; MP2 SAME-SPIN CORRELATION ENERGY; MP2 TOTAL ENERGY; MP2.5 CORRELATION ENERGY; MP2.5 TOTAL ENERGY; MP3 CORRELATION ENERGY; MP3 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4 TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY; MP4(SDQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(T) CORRECTION ENERGY; QCISD CORRELATION ENERGY; QCISD OPPOSITE-SPIN CORRELATION ENERGY; QCISD SAME-SPIN CORRELATION ENERGY; QCISD TOTAL ENERGY; QCISD(T) CORRELATION ENERGY; QCISD(T) TOTAL ENERGY; SCF TOTAL ENERGY. Previous topic; DFTSAPT; Next topic; LMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__fnocc.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__lmp2-1.html:562,Deployability,update,updated,562,"﻿. LMP2 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». LMP2¶; Performs local MP2 computations for RHF reference functions. CURRENT ENERGY; LMP2 ENERGY. Previous topic; FNOCC; Next topic; MCSCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__lmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__lmp2-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__lmp2.html:562,Deployability,update,updated,562,"﻿. LMP2 — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». LMP2¶; Performs local MP2 computations for RHF reference functions. CURRENT ENERGY; LMP2 ENERGY. Previous topic; FNOCC; Next topic; MCSCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__lmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__lmp2.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mcscf-1.html:695,Deployability,update,updated,695,"﻿. MCSCF — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». MCSCF¶; Performs RHF/UHF/ROHF/TCSCF and more general MCSCF computations. Called as the starting point for multireference coupled cluster computations. CURRENT ENERGY; CURRENT REFERENCE ENERGY; MCSCF TOTAL ENERGY; SCF TOTAL ENERGY. Previous topic; LMP2; Next topic; MRCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__mcscf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mcscf-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mcscf.html:695,Deployability,update,updated,695,"﻿. MCSCF — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». MCSCF¶; Performs RHF/UHF/ROHF/TCSCF and more general MCSCF computations. Called as the starting point for multireference coupled cluster computations. CURRENT ENERGY; CURRENT REFERENCE ENERGY; MCSCF TOTAL ENERGY; SCF TOTAL ENERGY. Previous topic; LMP2; Next topic; MRCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__mcscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mcscf.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mrcc-1.html:1698,Deployability,update,updated,1698,"﻿. MRCC — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». MRCC¶; Interface to MRCC program written by Mihály Kállay. CC(n-1)(n) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC2 CORRELATION ENERGY; CC2 TOTAL ENERGY; CC3 CORRELATION ENERGY; CC3 TOTAL ENERGY; CC4 CORRELATION ENERGY; CC4 TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSD TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(T) TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSD(T)_L TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDT-1a TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDT-1b TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDT-3 TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCn CORRELATION ENERGY; CCn TOTAL ENERGY; CCn-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCnn CORRELATION ENERGY; CCnn TOTAL ENERGY; MP2 CORRELATION ENERGY; MP2 TOTAL ENERGY. Previous topic; MCSCF; Next topic; OCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mrcc-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mrcc.html:1698,Deployability,update,updated,1698,"﻿. MRCC — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». MRCC¶; Interface to MRCC program written by Mihály Kállay. CC(n-1)(n) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC2 CORRELATION ENERGY; CC2 TOTAL ENERGY; CC3 CORRELATION ENERGY; CC3 TOTAL ENERGY; CC4 CORRELATION ENERGY; CC4 TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSD TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(T) TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSD(T)_L TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDT-1a TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDT-1b TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDT-3 TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCn CORRELATION ENERGY; CCn TOTAL ENERGY; CCn-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCnn CORRELATION ENERGY; CCnn TOTAL ENERGY; MP2 CORRELATION ENERGY; MP2 TOTAL ENERGY. Previous topic; MCSCF; Next topic; OCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__mrcc.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ-1.html:2219,Deployability,update,updated,2219,"RRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN ENERGY; MP2 SAME-SPIN ENERGY; MP2 TOTAL ENERGY; MP2.5 CORRELATION ENERGY; MP2.5 TOTAL ENERGY; MP3 CORRELATION ENERGY; MP3 TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY; OCEPA(0) TOTAL ENERGY; OMP2 CORRELATION ENERGY; OMP2 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY; OMP2.5 TOTAL ENERGY; OMP3 CORRELATION ENERGY; OMP3 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY; SCS-MP2 TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY; SCS-MP2-VDW TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY; SCS-MP3 TOTAL ENERGY; SCS-MP3-VDW CORRELATION ENERGY; SCS-MP3-VDW TOTAL ENERGY; SCS-OCEPA(0) CORRELATION ENERGY; SCS-OCEPA(0) TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY; SCS-OMP2 TOTAL ENERGY; SCS-OMP2-VDW CORRELATION ENERGY; SCS-OMP2-VDW TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY; SCS-OMP3 TOTAL ENERGY; SCS-OMP3-VDW CORRELATION ENERGY; SCS-OMP3-VDW TOTAL ENERGY; SCSN-MP2 CORRELATION ENERGY; SCSN-MP2 TOTAL ENERGY; SCSN-MP3 CORRELATION ENERGY; SCSN-MP3 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY; SCSN-OMP3 CORRELATION ENERGY; SCSN-OMP3 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY; SOS-MP2 TOTAL ENERGY; SOS-MP3 CORRELATION ENERGY; SOS-MP3 TOTAL ENERGY; SOS-OCEPA(0) CORRELATION ENERGY; SOS-OCEPA(0) TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY; SOS-OMP2 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY; SOS-OMP3 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY; SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP3 CORRELATION ENERGY; SOS-PI-MP3 TOTAL ENERGY; SOS-PI-OMP2 CORRELATION ENERGY; SOS-PI-OMP2 TOTAL ENERGY; SOS-PI-OMP3 CORRELATION ENERGY; SOS-PI-OMP3 TOTAL ENERGY. Previous topic; MRCC; Next topic; OPTKING; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ-1.html:183,Performance,optimiz,optimized,183,﻿. OCC — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OCC¶; Performs orbital-optimized MPn and CC computations and conventional MPn computations. CEPA(0) TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN ENERGY; MP2 SAME-SPIN ENERGY; MP2 TOTAL ENERGY; MP2.5 CORRELATION ENERGY; MP2.5 TOTAL ENERGY; MP3 CORRELATION ENERGY; MP3 TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY; OCEPA(0) TOTAL ENERGY; OMP2 CORRELATION ENERGY; OMP2 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY; OMP2.5 TOTAL ENERGY; OMP3 CORRELATION ENERGY; OMP3 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY; SCS-MP2 TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY; SCS-MP2-VDW TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY; SCS-MP3 TOTAL ENERGY; SCS-MP3-VDW CORRELATION ENERGY; SCS-MP3-VDW TOTAL ENERGY; SCS-OCEPA(0) CORRELATION ENERGY; SCS-OCEPA(0) TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY; SCS-OMP2 TOTAL ENERGY; SCS-OMP2-VDW CORRELATION ENERGY; SCS-OMP2-VDW TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY; SCS-OMP3 TOTAL ENERGY; SCS-OMP3-VDW CORRELATION ENERGY; SCS-OMP3-VDW TOTAL ENERGY; SCSN-MP2 CORRELATION ENERGY; SCSN-MP2 TOTAL ENERGY; SCSN-MP3 CORRELATION ENERGY; SCSN-MP3 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY; SCSN-OMP3 CORRELATION ENERGY; SCSN-OMP3 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY; SOS-MP2 TOTAL ENERGY; SOS-MP3 CORRELATION ENERGY; SOS-MP3 TOTAL ENERGY; SOS-OCEPA(0) CORRELATION ENERGY; SOS-OCEPA(0) TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY; SOS-OMP2 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY; SOS-OMP3 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY; SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP3 CORRELATION ENERGY; SOS-PI-MP3 TOTAL ENERGY; SOS-PI-OMP2 CORRELATION ENERGY; SOS-PI-OMP2 TOTAL ENERGY; SOS-PI-OMP3 CORRELATION ENERGY; SOS-PI-OMP3 TOTAL ENERGY. Previous topic; MRCC; Next topic; OPTKING; This Page. Show Source. Quick search. Enter ,MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__occ-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ.html:2219,Deployability,update,updated,2219,"RRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN ENERGY; MP2 SAME-SPIN ENERGY; MP2 TOTAL ENERGY; MP2.5 CORRELATION ENERGY; MP2.5 TOTAL ENERGY; MP3 CORRELATION ENERGY; MP3 TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY; OCEPA(0) TOTAL ENERGY; OMP2 CORRELATION ENERGY; OMP2 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY; OMP2.5 TOTAL ENERGY; OMP3 CORRELATION ENERGY; OMP3 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY; SCS-MP2 TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY; SCS-MP2-VDW TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY; SCS-MP3 TOTAL ENERGY; SCS-MP3-VDW CORRELATION ENERGY; SCS-MP3-VDW TOTAL ENERGY; SCS-OCEPA(0) CORRELATION ENERGY; SCS-OCEPA(0) TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY; SCS-OMP2 TOTAL ENERGY; SCS-OMP2-VDW CORRELATION ENERGY; SCS-OMP2-VDW TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY; SCS-OMP3 TOTAL ENERGY; SCS-OMP3-VDW CORRELATION ENERGY; SCS-OMP3-VDW TOTAL ENERGY; SCSN-MP2 CORRELATION ENERGY; SCSN-MP2 TOTAL ENERGY; SCSN-MP3 CORRELATION ENERGY; SCSN-MP3 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY; SCSN-OMP3 CORRELATION ENERGY; SCSN-OMP3 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY; SOS-MP2 TOTAL ENERGY; SOS-MP3 CORRELATION ENERGY; SOS-MP3 TOTAL ENERGY; SOS-OCEPA(0) CORRELATION ENERGY; SOS-OCEPA(0) TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY; SOS-OMP2 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY; SOS-OMP3 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY; SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP3 CORRELATION ENERGY; SOS-PI-MP3 TOTAL ENERGY; SOS-PI-OMP2 CORRELATION ENERGY; SOS-PI-OMP2 TOTAL ENERGY; SOS-PI-OMP3 CORRELATION ENERGY; SOS-PI-OMP3 TOTAL ENERGY. Previous topic; MRCC; Next topic; OPTKING; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ.html:183,Performance,optimiz,optimized,183,﻿. OCC — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OCC¶; Performs orbital-optimized MPn and CC computations and conventional MPn computations. CEPA(0) TOTAL ENERGY; CURRENT CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; MP2 CORRELATION ENERGY; MP2 OPPOSITE-SPIN ENERGY; MP2 SAME-SPIN ENERGY; MP2 TOTAL ENERGY; MP2.5 CORRELATION ENERGY; MP2.5 TOTAL ENERGY; MP3 CORRELATION ENERGY; MP3 TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY; OCEPA(0) TOTAL ENERGY; OMP2 CORRELATION ENERGY; OMP2 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY; OMP2.5 TOTAL ENERGY; OMP3 CORRELATION ENERGY; OMP3 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY; SCS-MP2 TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY; SCS-MP2-VDW TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY; SCS-MP3 TOTAL ENERGY; SCS-MP3-VDW CORRELATION ENERGY; SCS-MP3-VDW TOTAL ENERGY; SCS-OCEPA(0) CORRELATION ENERGY; SCS-OCEPA(0) TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY; SCS-OMP2 TOTAL ENERGY; SCS-OMP2-VDW CORRELATION ENERGY; SCS-OMP2-VDW TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY; SCS-OMP3 TOTAL ENERGY; SCS-OMP3-VDW CORRELATION ENERGY; SCS-OMP3-VDW TOTAL ENERGY; SCSN-MP2 CORRELATION ENERGY; SCSN-MP2 TOTAL ENERGY; SCSN-MP3 CORRELATION ENERGY; SCSN-MP3 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY; SCSN-OMP3 CORRELATION ENERGY; SCSN-OMP3 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY; SOS-MP2 TOTAL ENERGY; SOS-MP3 CORRELATION ENERGY; SOS-MP3 TOTAL ENERGY; SOS-OCEPA(0) CORRELATION ENERGY; SOS-OCEPA(0) TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY; SOS-OMP2 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY; SOS-OMP3 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY; SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP3 CORRELATION ENERGY; SOS-PI-MP3 TOTAL ENERGY; SOS-PI-OMP2 CORRELATION ENERGY; SOS-PI-OMP2 TOTAL ENERGY; SOS-PI-OMP3 CORRELATION ENERGY; SOS-PI-OMP3 TOTAL ENERGY. Previous topic; MRCC; Next topic; OPTKING; This Page. Show Source. Quick search. Enter ,MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__occ.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__oeprop-1.html:505,Deployability,update,updated,505,"﻿. OEPROP — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OEPROP¶. 32-POLE XXXXX; 32-POLE XXXXY; DIPOLE X; DIPOLE Y; ESP AT CENTER n. Previous topic; THERMO; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__oeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__oeprop-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__oeprop.html:505,Deployability,update,updated,505,"﻿. OEPROP — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OEPROP¶. 32-POLE XXXXX; 32-POLE XXXXY; DIPOLE X; DIPOLE Y; ESP AT CENTER n. Previous topic; THERMO; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__oeprop.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking-1.html:587,Deployability,update,updated,587,"﻿. OPTKING — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OPTKING¶; Performs geometry optimizations and vibrational frequency analyses. CURRENT ENERGY; OPTIMIZATION ITERATIONS. Previous topic; OCC; Next topic; PSIMRCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking-1.html:192,Performance,optimiz,optimizations,192,"﻿. OPTKING — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OPTKING¶; Performs geometry optimizations and vibrational frequency analyses. CURRENT ENERGY; OPTIMIZATION ITERATIONS. Previous topic; OCC; Next topic; PSIMRCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__optking-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking.html:587,Deployability,update,updated,587,"﻿. OPTKING — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OPTKING¶; Performs geometry optimizations and vibrational frequency analyses. CURRENT ENERGY; OPTIMIZATION ITERATIONS. Previous topic; OCC; Next topic; PSIMRCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking.html:192,Performance,optimiz,optimizations,192,"﻿. OPTKING — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». OPTKING¶; Performs geometry optimizations and vibrational frequency analyses. CURRENT ENERGY; OPTIMIZATION ITERATIONS. Previous topic; OCC; Next topic; PSIMRCC; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__optking.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__optking.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__psimrcc-1.html:697,Deployability,update,updated,697,"﻿. PSIMRCC — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». PSIMRCC¶; Performs multireference coupled cluster computations. This theory should be used only by advanced users with a good working knowledge of multireference techniques. CURRENT ENERGY; MRCC TOTAL ENERGY; MRPT TOTAL ENERGY. Previous topic; OPTKING; Next topic; SAPT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__psimrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__psimrcc-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__psimrcc.html:697,Deployability,update,updated,697,"﻿. PSIMRCC — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». PSIMRCC¶; Performs multireference coupled cluster computations. This theory should be used only by advanced users with a good working knowledge of multireference techniques. CURRENT ENERGY; MRCC TOTAL ENERGY; MRPT TOTAL ENERGY. Previous topic; OPTKING; Next topic; SAPT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__psimrcc.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html:1101,Deployability,update,updated,1101,"﻿. SAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SAPT¶; Performs symmetry adapted perturbation theory (SAPT) analysis to quantitatively analyze noncovalent interactions. CURRENT ENERGY; MP2C DELTA MP2C ENERGY; MP2C DIMER MP2 ENERGY; MP2C MONOMER A MP2 ENERGY; MP2C MONOMER B MP2 ENERGY; MP2C MP2 ENERGY; MP2C MP2C ENERGY; MP2C TDDFT ENERGY; MP2C UCHF ENERGY; SAPT CT ENERGY; SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY; SAPT SAPT0 ENERGY; SAPT SAPT2 ENERGY; SAPT SAPT2+ ENERGY; SAPT SAPT2+(3) ENERGY; SAPT SAPT2+(3)(CCD) ENERGY; SAPT SAPT2+(CCD) ENERGY; SAPT SAPT2+3 ENERGY; SAPT SAPT2+3(CCD) ENERGY; SAPT SCS-DISP ENERGY; SAPT SCS-SAPT0 ENERGY. Previous topic; PSIMRCC; Next topic; SCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html:186,Energy Efficiency,adapt,adapted,186,"﻿. SAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SAPT¶; Performs symmetry adapted perturbation theory (SAPT) analysis to quantitatively analyze noncovalent interactions. CURRENT ENERGY; MP2C DELTA MP2C ENERGY; MP2C DIMER MP2 ENERGY; MP2C MONOMER A MP2 ENERGY; MP2C MONOMER B MP2 ENERGY; MP2C MP2 ENERGY; MP2C MP2C ENERGY; MP2C TDDFT ENERGY; MP2C UCHF ENERGY; SAPT CT ENERGY; SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY; SAPT SAPT0 ENERGY; SAPT SAPT2 ENERGY; SAPT SAPT2+ ENERGY; SAPT SAPT2+(3) ENERGY; SAPT SAPT2+(3)(CCD) ENERGY; SAPT SAPT2+(CCD) ENERGY; SAPT SAPT2+3 ENERGY; SAPT SAPT2+3(CCD) ENERGY; SAPT SCS-DISP ENERGY; SAPT SCS-SAPT0 ENERGY. Previous topic; PSIMRCC; Next topic; SCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html:186,Modifiability,adapt,adapted,186,"﻿. SAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SAPT¶; Performs symmetry adapted perturbation theory (SAPT) analysis to quantitatively analyze noncovalent interactions. CURRENT ENERGY; MP2C DELTA MP2C ENERGY; MP2C DIMER MP2 ENERGY; MP2C MONOMER A MP2 ENERGY; MP2C MONOMER B MP2 ENERGY; MP2C MP2 ENERGY; MP2C MP2C ENERGY; MP2C TDDFT ENERGY; MP2C UCHF ENERGY; SAPT CT ENERGY; SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY; SAPT SAPT0 ENERGY; SAPT SAPT2 ENERGY; SAPT SAPT2+ ENERGY; SAPT SAPT2+(3) ENERGY; SAPT SAPT2+(3)(CCD) ENERGY; SAPT SAPT2+(CCD) ENERGY; SAPT SAPT2+3 ENERGY; SAPT SAPT2+3(CCD) ENERGY; SAPT SCS-DISP ENERGY; SAPT SCS-SAPT0 ENERGY. Previous topic; PSIMRCC; Next topic; SCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt.html:1101,Deployability,update,updated,1101,"﻿. SAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SAPT¶; Performs symmetry adapted perturbation theory (SAPT) analysis to quantitatively analyze noncovalent interactions. CURRENT ENERGY; MP2C DELTA MP2C ENERGY; MP2C DIMER MP2 ENERGY; MP2C MONOMER A MP2 ENERGY; MP2C MONOMER B MP2 ENERGY; MP2C MP2 ENERGY; MP2C MP2C ENERGY; MP2C TDDFT ENERGY; MP2C UCHF ENERGY; SAPT CT ENERGY; SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY; SAPT SAPT0 ENERGY; SAPT SAPT2 ENERGY; SAPT SAPT2+ ENERGY; SAPT SAPT2+(3) ENERGY; SAPT SAPT2+(3)(CCD) ENERGY; SAPT SAPT2+(CCD) ENERGY; SAPT SAPT2+3 ENERGY; SAPT SAPT2+3(CCD) ENERGY; SAPT SCS-DISP ENERGY; SAPT SCS-SAPT0 ENERGY. Previous topic; PSIMRCC; Next topic; SCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt.html:186,Energy Efficiency,adapt,adapted,186,"﻿. SAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SAPT¶; Performs symmetry adapted perturbation theory (SAPT) analysis to quantitatively analyze noncovalent interactions. CURRENT ENERGY; MP2C DELTA MP2C ENERGY; MP2C DIMER MP2 ENERGY; MP2C MONOMER A MP2 ENERGY; MP2C MONOMER B MP2 ENERGY; MP2C MP2 ENERGY; MP2C MP2C ENERGY; MP2C TDDFT ENERGY; MP2C UCHF ENERGY; SAPT CT ENERGY; SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY; SAPT SAPT0 ENERGY; SAPT SAPT2 ENERGY; SAPT SAPT2+ ENERGY; SAPT SAPT2+(3) ENERGY; SAPT SAPT2+(3)(CCD) ENERGY; SAPT SAPT2+(CCD) ENERGY; SAPT SAPT2+3 ENERGY; SAPT SAPT2+3(CCD) ENERGY; SAPT SCS-DISP ENERGY; SAPT SCS-SAPT0 ENERGY. Previous topic; PSIMRCC; Next topic; SCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt.html:186,Modifiability,adapt,adapted,186,"﻿. SAPT — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SAPT¶; Performs symmetry adapted perturbation theory (SAPT) analysis to quantitatively analyze noncovalent interactions. CURRENT ENERGY; MP2C DELTA MP2C ENERGY; MP2C DIMER MP2 ENERGY; MP2C MONOMER A MP2 ENERGY; MP2C MONOMER B MP2 ENERGY; MP2C MP2 ENERGY; MP2C MP2C ENERGY; MP2C TDDFT ENERGY; MP2C UCHF ENERGY; SAPT CT ENERGY; SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY; SAPT SAPT0 ENERGY; SAPT SAPT2 ENERGY; SAPT SAPT2+ ENERGY; SAPT SAPT2+(3) ENERGY; SAPT SAPT2+(3)(CCD) ENERGY; SAPT SAPT2+(CCD) ENERGY; SAPT SAPT2+3 ENERGY; SAPT SAPT2+3(CCD) ENERGY; SAPT SCS-DISP ENERGY; SAPT SCS-SAPT0 ENERGY. Previous topic; PSIMRCC; Next topic; SCF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__sapt.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__scf-1.html:1099,Deployability,update,updated,1099,"﻿. SCF — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SCF¶; Performs self consistent field (Hartree-Fock and Density Functional Theory) computations. These are the starting points for most computations, so this code is called in most cases. CURRENT ENERGY; CURRENT REFERENCE ENERGY; DFT FUNCTIONAL TOTAL ENERGY; DFT TOTAL ENERGY; DFT XC ENERGY; DISPERSION CORRECTION ENERGY; DOUBLE-HYBRID CORRECTION ENERGY; HF TOTAL ENERGY; NUCLEAR REPULSION ENERGY; ONE-ELECTRON ENERGY; SCF DIPOLE X; SCF DIPOLE Y; SCF DIPOLE Z; SCF ITERATION ENERGY; SCF QUADRUPOLE XX; SCF QUADRUPOLE XY; SCF QUADRUPOLE XZ; SCF QUADRUPOLE YY; SCF QUADRUPOLE YZ; SCF QUADRUPOLE ZZ; SCF TOTAL ENERGY; TWO-ELECTRON ENERGY. Previous topic; SAPT; Next topic; THERMO; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__scf-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__scf.html:1099,Deployability,update,updated,1099,"﻿. SCF — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». SCF¶; Performs self consistent field (Hartree-Fock and Density Functional Theory) computations. These are the starting points for most computations, so this code is called in most cases. CURRENT ENERGY; CURRENT REFERENCE ENERGY; DFT FUNCTIONAL TOTAL ENERGY; DFT TOTAL ENERGY; DFT XC ENERGY; DISPERSION CORRECTION ENERGY; DOUBLE-HYBRID CORRECTION ENERGY; HF TOTAL ENERGY; NUCLEAR REPULSION ENERGY; ONE-ELECTRON ENERGY; SCF DIPOLE X; SCF DIPOLE Y; SCF DIPOLE Z; SCF ITERATION ENERGY; SCF QUADRUPOLE XX; SCF QUADRUPOLE XY; SCF QUADRUPOLE XZ; SCF QUADRUPOLE YY; SCF QUADRUPOLE YZ; SCF QUADRUPOLE ZZ; SCF TOTAL ENERGY; TWO-ELECTRON ENERGY. Previous topic; SAPT; Next topic; THERMO; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__scf.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__thermo-1.html:640,Deployability,update,updated,640,"﻿. THERMO — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». THERMO¶. CURRENT ENERGY; ENTHALPY; ENTHALPY CORRECTION; GIBBS FREE ENERGY; GIBBS FREE ENERGY CORRECTION; INTERNAL ENERGY; INTERNAL ENERGY CORRECTION; ZERO K ENTHALPHY; ZPVE. Previous topic; SCF; Next topic; OEPROP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__thermo-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__thermo-1.html
https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__thermo.html:640,Deployability,update,updated,640,"﻿. THERMO — PSI4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». THERMO¶. CURRENT ENERGY; ENTHALPY; ENTHALPY CORRECTION; GIBBS FREE ENERGY; GIBBS FREE ENERGY CORRECTION; INTERNAL ENERGY; INTERNAL ENERGY CORRECTION; ZERO K ENTHALPHY; ZPVE. Previous topic; SCF; Next topic; OEPROP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; PSI Variables by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 29, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/autodir_psivariables/module__thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_psivariables/module__thermo.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:644,Deployability,integrat,integrated,644,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:5858,Deployability,update,updated,5858,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:667,Energy Efficiency,energy,energy,667,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:1032,Energy Efficiency,energy,energy,1032,"tion. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:1319,Energy Efficiency,energy,energy,1319,"hods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). #def run_mp2_5(name, **kwargs):; # r""""""Function that computes MP2.5 energy from results of a FNOCC; # MP3 calculation.; #; # .. math:: E_{total}^{\text{MP2.5}} = E_{total,\; \text{SCF}}",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:1473,Energy Efficiency,energy,energy,1473,"rnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). #def run_mp2_5(name, **kwargs):; # r""""""Function that computes MP2.5 energy from results of a FNOCC; # MP3 calculation.; #; # .. math:: E_{total}^{\text{MP2.5}} = E_{total,\; \text{SCF}} \; + E_{corl,\; \text{MP2}} + E_{corl, \; \text{MP3}}; #; # :PSI variables: ; #; # .. hlist:: ; # :columns: 1 ; #",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:2219,Energy Efficiency,energy,energy,2219,"; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). #def run_mp2_5(name, **kwargs):; # r""""""Function that computes MP2.5 energy from results of a FNOCC; # MP3 calculation.; #; # .. math:: E_{total}^{\text{MP2.5}} = E_{total,\; \text{SCF}} \; + E_{corl,\; \text{MP2}} + E_{corl, \; \text{MP3}}; #; # :PSI variables: ; #; # .. hlist:: ; # :columns: 1 ; # ; # * :psivar:`MP2.5 TOTAL ENERGY <MP2.5TOTALENERGY>` ; # * :psivar:`MP2.5 CORRELATION ENERGY <MP2.5CORRELATIONENERGY>` ; #; # >>> energy('mp2.5'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # # Run detci calculation and collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRE",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:2582,Energy Efficiency,energy,energy,2582,"in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). #def run_mp2_5(name, **kwargs):; # r""""""Function that computes MP2.5 energy from results of a FNOCC; # MP3 calculation.; #; # .. math:: E_{total}^{\text{MP2.5}} = E_{total,\; \text{SCF}} \; + E_{corl,\; \text{MP2}} + E_{corl, \; \text{MP3}}; #; # :PSI variables: ; #; # .. hlist:: ; # :columns: 1 ; # ; # * :psivar:`MP2.5 TOTAL ENERGY <MP2.5TOTALENERGY>` ; # * :psivar:`MP2.5 CORRELATION ENERGY <MP2.5CORRELATIONENERGY>` ; #; # >>> energy('mp2.5'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # # Run detci calculation and collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """"",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:2738,Energy Efficiency,energy,energy,2738,"wargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). #def run_mp2_5(name, **kwargs):; # r""""""Function that computes MP2.5 energy from results of a FNOCC; # MP3 calculation.; #; # .. math:: E_{total}^{\text{MP2.5}} = E_{total,\; \text{SCF}} \; + E_{corl,\; \text{MP2}} + E_{corl, \; \text{MP3}}; #; # :PSI variables: ; #; # .. hlist:: ; # :columns: 1 ; # ; # * :psivar:`MP2.5 TOTAL ENERGY <MP2.5TOTALENERGY>` ; # * :psivar:`MP2.5 CORRELATION ENERGY <MP2.5CORRELATIONENERGY>` ; #; # >>> energy('mp2.5'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # # Run detci calculation and collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total ener",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3584,Energy Efficiency,energy,energy,3584,"P2.5CORRELATIONENERGY>` ; #; # >>> energy('mp2.5'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # # Run detci calculation and collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_o",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3641,Energy Efficiency,energy,energy,3641,"ame.lower(); # kwargs = kwargs_lower(kwargs); #; # # Run detci calculation and collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs);",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3700,Energy Efficiency,energy,energy,3700," collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3758,Energy Efficiency,energy,energy,3758,"rgy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugi",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3823,Energy Efficiency,energy,energy,3823,"L ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASI",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3889,Energy Efficiency,energy,energy,3889,"d.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # P",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:3954,Energy Efficiency,energy,energy,3954,"_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); #",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4531,Energy Efficiency,energy,energy,4531,"= ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['s",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4981,Energy Efficiency,energy,energy,4981,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:5498,Energy Efficiency,energy,energy,5498,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:5541,Energy Efficiency,energy,energy,5541,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:5625,Energy Efficiency,energy,energy,5625,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:244,Integrability,wrap,wrappers,244,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:484,Integrability,wrap,wrappers,484,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:644,Integrability,integrat,integrated,644,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:682,Integrability,rout,routines,682,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:921,Integrability,wrap,wrappers,921,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:1074,Integrability,wrap,wrappers,1074,"tion. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:5475,Integrability,rout,routines,5475,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:2402,Modifiability,variab,variables,2402,"owername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). #def run_mp2_5(name, **kwargs):; # r""""""Function that computes MP2.5 energy from results of a FNOCC; # MP3 calculation.; #; # .. math:: E_{total}^{\text{MP2.5}} = E_{total,\; \text{SCF}} \; + E_{corl,\; \text{MP2}} + E_{corl, \; \text{MP3}}; #; # :PSI variables: ; #; # .. hlist:: ; # :columns: 1 ; # ; # * :psivar:`MP2.5 TOTAL ENERGY <MP2.5TOTALENERGY>` ; # * :psivar:`MP2.5 CORRELATION ENERGY <MP2.5CORRELATIONENERGY>` ; #; # >>> energy('mp2.5'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # # Run detci calculation and collect conventional quantities; # energy('mp3', **kwargs); # e_scf = PsiMod.get_variable('SCF TOTAL ENERGY'); # ce_mp2 = PsiMod.get_variable('MP2 CORRELATION ENERGY'); # ce_mp3 = PsiMod.get_variable('MP3 CORRELATION ENERGY'); # e_mp2 = e_scf + ce_mp2; # e_mp3 = e_scf + ce_mp3; #; # # Compute quantities particular to MP2.5; # ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); # e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4062,Modifiability,plugin,plugin,4062," e_mp25 = e_scf + ce_mp25; # PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # Ps",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4145,Modifiability,plugin,plugins,4145,"_mp25); # PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); # PsiMod.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); # PsiMod.set_variable('CURRENT ENERGY', e_mp25); #; # # build string of title banner and print results; # banners = ''; # banners += """"""PsiMod.print_out('\\n')\n""""""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4438,Modifiability,plugin,plugin,4438,"""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4513,Modifiability,plugin,plugin,4513,"""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:5369,Modifiability,plugin,plugin,5369,"mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:1040,Performance,perform,performed,1040,"tion. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4486,Security,access,access,4486,"""; # banners += """"""banner(' MP2.5 ')\n""""""; # banners += """"""PsiMod.print_out('\\n')\n\n""""""; # exec(banners); #; # tables = ''; # tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); # tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); # tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:4690,Testability,test,tests,4690,"y: %16.8f\n"""""" % (e_mp25); # tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); # tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); # tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); # tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); # PsiMod.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = kwargs_lower(kwargs); #; # plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # PsiMod.plugin_load(""%s"" % (plugfile)); #; # PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); # PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # PsiMod.set_global_option('REFERENCE', 'UHF'); # PsiMod.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # PsiMod.set_global_option('dft_functional', 'wB97'); # PsiMod.set_global_option('dft_order_spherical', 25); # PsiMod.set_global_option('dft_num_radial', 35); # PsiMod.set_global_option('omega_procedure', 'ip'); # PsiMod.set_global_option('maxiter', 50); # PsiMod.set_global_option('d_convergence', 5); # PsiMod.set_global_option('e_convergence', 7); # PsiMod.plugin(""plugin_omega.so""); #; # return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or ",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/aliases.html:343,Usability,simpl,simple,343,"﻿. aliases — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for aliases; """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import PsiMod; import re; import os; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; from text import *; from procutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrillgroup_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> energy('sherrillgroup_gold_standard'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in",MatchSource.WIKI,psi4manual/4.0b4/_modules/aliases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/aliases.html
https://psicode.org/psi4manual/4.0b4/_modules/basislist.html:2469,Deployability,install,installed,2469,"G** for 6-311ppgss.; """"""; return self.ornate. [docs] def add_jkfit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *jkfit* to a BasisFamily object.; """"""; self.jkfit = sanitize_basisname(fit). [docs] def add_rifit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *rifit* to a BasisFamily object.; """"""; self.rifit = sanitize_basisname(fit). [docs] def add_dualfit(self, fit):; """"""Function to add basis *fit* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,`` ; into ``_``.; """"""; temp = PsiMod.BasisSet.make_filename(name); return os.path.splitext(os.path.splitext(temp)[0])[0]. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; PsiMod.print_out('%s' % fam). [docs]def corresponding_jkfit(name):; """"""Function to return an appropriate JK fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.jkfit; return None.",MatchSource.WIKI,psi4manual/4.0b4/_modules/basislist.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislist.html
https://psicode.org/psi4manual/4.0b4/_modules/basislist.html:2873,Deployability,install,installed,2873,"nitize_basisname(fit). [docs] def add_dualfit(self, fit):; """"""Function to add basis *fit* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,`` ; into ``_``.; """"""; temp = PsiMod.BasisSet.make_filename(name); return os.path.splitext(os.path.splitext(temp)[0])[0]. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; PsiMod.print_out('%s' % fam). [docs]def corresponding_jkfit(name):; """"""Function to return an appropriate JK fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.jkfit; return None. [docs]def corresponding_rifit(name):; """"""Function to return an appropriate RI fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):",MatchSource.WIKI,psi4manual/4.0b4/_modules/basislist.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislist.html
https://psicode.org/psi4manual/4.0b4/_modules/basislist.html:4427,Deployability,update,updated,4427,".; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; PsiMod.print_out('%s' % fam). [docs]def corresponding_jkfit(name):; """"""Function to return an appropriate JK fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.jkfit; return None. [docs]def corresponding_rifit(name):; """"""Function to return an appropriate RI fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.rifit; return None. [docs]def corresponding_dualfit(name):; """"""Function to return an appropriate DUAL helper basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.dualfit; return None. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/basislist.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislist.html
https://psicode.org/psi4manual/4.0b4/_modules/basislist.html:2383,Performance,load,load,2383,"G** for 6-311ppgss.; """"""; return self.ornate. [docs] def add_jkfit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *jkfit* to a BasisFamily object.; """"""; self.jkfit = sanitize_basisname(fit). [docs] def add_rifit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *rifit* to a BasisFamily object.; """"""; self.rifit = sanitize_basisname(fit). [docs] def add_dualfit(self, fit):; """"""Function to add basis *fit* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,`` ; into ``_``.; """"""; temp = PsiMod.BasisSet.make_filename(name); return os.path.splitext(os.path.splitext(temp)[0])[0]. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; PsiMod.print_out('%s' % fam). [docs]def corresponding_jkfit(name):; """"""Function to return an appropriate JK fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.jkfit; return None.",MatchSource.WIKI,psi4manual/4.0b4/_modules/basislist.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislist.html
https://psicode.org/psi4manual/4.0b4/_modules/basislistdunning.html:29034,Deployability,update,updated,29034,"Family('mar-cc-pCV(6+d)Z'); basisfamily_list.append(basis_marccpcv_6pd_z); basis_febccpv6z = BasisFamily('feb-cc-pV6Z'); basisfamily_list.append(basis_febccpv6z); basis_febccpv_6pd_z = BasisFamily('feb-cc-pV(6+d)Z'); basisfamily_list.append(basis_febccpv_6pd_z); basis_febccpcv6z = BasisFamily('feb-cc-pCV6Z'); basisfamily_list.append(basis_febccpcv6z); basis_febccpcv_6pd_z = BasisFamily('feb-cc-pCV(6+d)Z'); basisfamily_list.append(basis_febccpcv_6pd_z); basis_daugccpv6z = BasisFamily('d-aug-cc-pV6Z'); basisfamily_list.append(basis_daugccpv6z); basis_daugccpcv6z = BasisFamily('d-aug-cc-pCV6Z'); basisfamily_list.append(basis_daugccpcv6z); basis_ccpv6z.add_rifit('cc-pV6Z-RI'); basis_ccpv_6pd_z.add_rifit('cc-pV6Z-RI'); basis_augccpv6z.add_rifit('aug-cc-pV6Z-RI'); basis_augccpv_6pd_z.add_rifit('aug-cc-pV6Z-RI'); basis_heavyaugccpv6z.add_rifit('heavy-aug-cc-pV6Z-RI'); basis_heavyaugccpv_6pd_z.add_rifit('heavy-aug-cc-pV6Z-RI'); basis_junccpv6z.add_rifit('jun-cc-pV6Z-RI'); basis_junccpv_6pd_z.add_rifit('jun-cc-pV6Z-RI'); basis_mayccpv6z.add_rifit('may-cc-pV6Z-RI'); basis_mayccpv_6pd_z.add_rifit('may-cc-pV6Z-RI'); basis_aprccpv6z.add_rifit('apr-cc-pV6Z-RI'); basis_aprccpv_6pd_z.add_rifit('apr-cc-pV6Z-RI'); basis_marccpv6z.add_rifit('mar-cc-pV6Z-RI'); basis_marccpv_6pd_z.add_rifit('mar-cc-pV6Z-RI'); basis_febccpv6z.add_rifit('feb-cc-pV6Z-RI'); basis_febccpv_6pd_z.add_rifit('feb-cc-pV6Z-RI'); basis_ccpvtz.add_dualfit('cc-pvtz-dual'); basis_ccpvqz.add_dualfit('cc-pvqz-dual'); basis_augccpvdz.add_dualfit('aug-cc-pvdz-dual'); basis_augccpvtz.add_dualfit('aug-cc-pvtz-dual'); basis_augccpvqz.add_dualfit('aug-cc-pvqz-dual'); basis_heavyaugccpvtz.add_dualfit('heavy-aug-cc-pvtz-dual'); basis_heavyaugccpvqz.add_dualfit('heavy-aug-cc-pvqz-dual'). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/basislistdunning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislistdunning.html
https://psicode.org/psi4manual/4.0b4/_modules/basislistother.html:15460,Deployability,update,updated,15460,"_6311pg_3df_3pd_.add_rifit('heavy-aug-cc-pvtz-ri'). basis_6311ppg.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_d_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_d_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppgs.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppgss.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2d_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2d_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2d_2p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_2p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_2df_2pd_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_2p_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_2pd_.add_jkfit('aug-cc-pvtz-jkfit'); basis_6311ppg_3df_3pd_.add_jkfit('aug-cc-pvtz-jkfit'). basis_6311ppg.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_d_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_d_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppgs.add_rifit('aug-cc-pvtz-ri'); basis_6311ppgss.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2d_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2d_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2d_2p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_2p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_2df_2pd_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_2p_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_2pd_.add_rifit('aug-cc-pvtz-ri'); basis_6311ppg_3df_3pd_.add_rifit('aug-cc-pvtz-ri'). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/basislistother.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislistother.html
https://psicode.org/psi4manual/4.0b4/_modules/basislistother.html:8632,Security,validat,validated,8632,d(basis_def2qzvpd); basisfamily_list.append(basis_def2qzvpp); basisfamily_list.append(basis_def2qzvppd). # Others; basis_dz = BasisFamily('DZ'); basis_dzp = BasisFamily('DZP'); basis_dzvp = BasisFamily('DZVP'); basis_psi3dzp = BasisFamily('psi3-DZP'); basis_psi3tz2p = BasisFamily('psi3-TZ2P'); basis_psi3tz2pf = BasisFamily('psi3-TZ2PF'); basis_sadlejlpoldl = BasisFamily('sadlej-lpol-dl'); basis_sadlejlpolds = BasisFamily('sadlej-lpol-ds'); basis_sadlejlpolfl = BasisFamily('sadlej-lpol-fl'); basis_sadlejlpolfs = BasisFamily('sadlej-lpol-fs'). basisfamily_list.append(basis_dz); basisfamily_list.append(basis_dzp); basisfamily_list.append(basis_dzvp); basisfamily_list.append(basis_psi3dzp); basisfamily_list.append(basis_psi3tz2p); basisfamily_list.append(basis_psi3tz2pf); basisfamily_list.append(basis_sadlejlpoldl); basisfamily_list.append(basis_sadlejlpolds); basisfamily_list.append(basis_sadlejlpolfl); basisfamily_list.append(basis_sadlejlpolfs). # Here lie practical (non-validated) fitting bases for; # Pople orbital basis sets. basis_sto3g.add_jkfit('cc-pvdz-ri'); basis_sto3g.add_rifit('cc-pvdz-ri'); basis_321g.add_jkfit('cc-pvdz-ri'); basis_321g.add_rifit('cc-pvdz-ri'). basis_631g.add_jkfit('cc-pvdz-jkfit'); basis_631g_d_.add_jkfit('cc-pvdz-jkfit'); basis_631g_d_p_.add_jkfit('cc-pvdz-jkfit'); basis_631gs.add_jkfit('cc-pvdz-jkfit'); basis_631gss.add_jkfit('cc-pvdz-jkfit'); basis_631g.add_rifit('cc-pvdz-ri'); basis_631g_d_.add_rifit('cc-pvdz-ri'); basis_631g_d_p_.add_rifit('cc-pvdz-ri'); basis_631gs.add_rifit('cc-pvdz-ri'); basis_631gss.add_rifit('cc-pvdz-ri'). basis_631pg.add_jkfit('heavy-aug-cc-pvdz-jkfit'); basis_631pg_d_.add_jkfit('heavy-aug-cc-pvdz-jkfit'); basis_631pg_d_p_.add_jkfit('heavy-aug-cc-pvdz-jkfit'); basis_631pgs.add_jkfit('heavy-aug-cc-pvdz-jkfit'); basis_631pgss.add_jkfit('heavy-aug-cc-pvdz-jkfit'); basis_631pg.add_rifit('heavy-aug-cc-pvdz-ri'); basis_631pg_d_.add_rifit('heavy-aug-cc-pvdz-ri'); basis_631pg_d_p_.add_rifit('heavy-aug-cc-pvdz-ri'); basi,MatchSource.WIKI,psi4manual/4.0b4/_modules/basislistother.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/basislistother.html
https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html:9095,Availability,avail,available,9095," up dispersion correction parameters in whatever form needed.; When *mode* is 'dftd3', returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at *dashlvl* with the default parameters for functional; *func*. When *mode* is 'psi4', returns a tuple of arguments suitable for building; a Dispersion object with *dashlvl* parameters for functional *func*. There are four computational *dashlvl* choices. 'd2p4' calls the -D2 correction; within psi4 (hence, faked for mode='dftd3'). The other three, 'd2gr', 'd3zero',; and 'd3bj' call the three dftd3 modes of operation (corresponding to -old, -zero, -bj).; Additionally, there are three aliased *dashlvl* choices since the aliases in dash_alias; above are imposed. """"""; # Validate input arguments; dashlvl = dashlvl.lower(); dashlvleff = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl. func = func.lower(); if func not in dashcoeff[dashlvleff].keys():; raise ValidationError(""""""Functional %s is not available for -D level %s."""""" % (func, dashlvl)). # Return strings for dftd3 program parameter file; # d2p4: s6 sr6=1.1 s8=0.0 a2=None alpha6=20.0 version=2; # d2gr: s6 sr6=1.1 s8=0.0 a2=None alpha6 version=2; # d3zero: s6 sr6 s8 a2=None alpha6 version=3; # d3bj: s6 a1 s8 a2 alpha6=None version=4; if mode.lower() == 'dftd3':; if dashlvleff.lower() == 'd2p4':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; 1.1, 0.0, 0.0, 20.0, 2); elif dashlvleff.lower() == 'd2gr':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; 1.1, 0.0, 0.0,; dashcoeff[dashlvleff][func]['alpha6'],; 2); elif dashlvleff.lower() == 'd3zero':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['sr6'],; dashcoeff[dashlvleff][func]['s8'],; 1.0,; dashcoeff[dashlvleff][func]['alpha6'],; 3); elif dashlvleff.lower() == 'd3bj':; return",MatchSource.WIKI,psi4manual/4.0b4/_modules/dashparam.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html
https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html:10354,Availability,avail,available,10354," a2=None alpha6 version=3; # d3bj: s6 a1 s8 a2 alpha6=None version=4; if mode.lower() == 'dftd3':; if dashlvleff.lower() == 'd2p4':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; 1.1, 0.0, 0.0, 20.0, 2); elif dashlvleff.lower() == 'd2gr':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; 1.1, 0.0, 0.0,; dashcoeff[dashlvleff][func]['alpha6'],; 2); elif dashlvleff.lower() == 'd3zero':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['sr6'],; dashcoeff[dashlvleff][func]['s8'],; 1.0,; dashcoeff[dashlvleff][func]['alpha6'],; 3); elif dashlvleff.lower() == 'd3bj':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['a1'],; dashcoeff[dashlvleff][func]['s8'],; dashcoeff[dashlvleff][func]['a2'],; 0.0, 4); else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())); return returnstring. # Return parameter list for Dispersion.build function; # d2p4: name=-D2 s6=s6 p1=None p2=None p3=None (damping parameter fixed in Dispersion class); # d2gr: name=-D2GR s6=s6 p1=alpha6 p2=None p3=None; # d3zero: name=-D3ZERO s6=s6 p1=sr6 p2=s8 p3=alpha6; # d3bj: name=-D3BJ s6=s6 p1=a1 p2=s8 p3=a2; elif mode.lower() == 'psi4':; if dashlvleff == 'd2p4':; return '-D2', \; dashcoeff[dashlvleff][func]['s6'], \; 0.0, 0.0, 0.0; elif dashlvleff == 'd2gr':; return '-D2GR', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['alpha6'], \; 0.0, 0.0; elif dashlvleff == 'd3zero':; return '-D3ZERO', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['sr6'], \; dashcoeff[dashlvleff][func]['alpha6']; elif dashlvleff == 'd3bj':; return '-D3BJ', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \",MatchSource.WIKI,psi4manual/4.0b4/_modules/dashparam.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html
https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html:11462,Availability,avail,available,11462,"n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['sr6'],; dashcoeff[dashlvleff][func]['s8'],; 1.0,; dashcoeff[dashlvleff][func]['alpha6'],; 3); elif dashlvleff.lower() == 'd3bj':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['a1'],; dashcoeff[dashlvleff][func]['s8'],; dashcoeff[dashlvleff][func]['a2'],; 0.0, 4); else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())); return returnstring. # Return parameter list for Dispersion.build function; # d2p4: name=-D2 s6=s6 p1=None p2=None p3=None (damping parameter fixed in Dispersion class); # d2gr: name=-D2GR s6=s6 p1=alpha6 p2=None p3=None; # d3zero: name=-D3ZERO s6=s6 p1=sr6 p2=s8 p3=alpha6; # d3bj: name=-D3BJ s6=s6 p1=a1 p2=s8 p3=a2; elif mode.lower() == 'psi4':; if dashlvleff == 'd2p4':; return '-D2', \; dashcoeff[dashlvleff][func]['s6'], \; 0.0, 0.0, 0.0; elif dashlvleff == 'd2gr':; return '-D2GR', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['alpha6'], \; 0.0, 0.0; elif dashlvleff == 'd3zero':; return '-D3ZERO', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['sr6'], \; dashcoeff[dashlvleff][func]['alpha6']; elif dashlvleff == 'd3bj':; return '-D3BJ', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['a1'], \; dashcoeff[dashlvleff][func]['a2']; else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). else:; raise ValidationError(""""""-D return format %s is not available. Choose 'psi4' or 'dftd3'.""""""). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/dashparam.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html
https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html:11584,Availability,avail,available,11584,"n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['sr6'],; dashcoeff[dashlvleff][func]['s8'],; 1.0,; dashcoeff[dashlvleff][func]['alpha6'],; 3); elif dashlvleff.lower() == 'd3bj':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['a1'],; dashcoeff[dashlvleff][func]['s8'],; dashcoeff[dashlvleff][func]['a2'],; 0.0, 4); else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())); return returnstring. # Return parameter list for Dispersion.build function; # d2p4: name=-D2 s6=s6 p1=None p2=None p3=None (damping parameter fixed in Dispersion class); # d2gr: name=-D2GR s6=s6 p1=alpha6 p2=None p3=None; # d3zero: name=-D3ZERO s6=s6 p1=sr6 p2=s8 p3=alpha6; # d3bj: name=-D3BJ s6=s6 p1=a1 p2=s8 p3=a2; elif mode.lower() == 'psi4':; if dashlvleff == 'd2p4':; return '-D2', \; dashcoeff[dashlvleff][func]['s6'], \; 0.0, 0.0, 0.0; elif dashlvleff == 'd2gr':; return '-D2GR', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['alpha6'], \; 0.0, 0.0; elif dashlvleff == 'd3zero':; return '-D3ZERO', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['sr6'], \; dashcoeff[dashlvleff][func]['alpha6']; elif dashlvleff == 'd3bj':; return '-D3BJ', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['a1'], \; dashcoeff[dashlvleff][func]['a2']; else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). else:; raise ValidationError(""""""-D return format %s is not available. Choose 'psi4' or 'dftd3'.""""""). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/dashparam.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html
https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html:11814,Deployability,update,updated,11814,"n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['sr6'],; dashcoeff[dashlvleff][func]['s8'],; 1.0,; dashcoeff[dashlvleff][func]['alpha6'],; 3); elif dashlvleff.lower() == 'd3bj':; returnstring = '%12.6f %12.6f %12.6f %12.6f %12.6f %6d\n' % \; (dashcoeff[dashlvleff][func]['s6'],; dashcoeff[dashlvleff][func]['a1'],; dashcoeff[dashlvleff][func]['s8'],; dashcoeff[dashlvleff][func]['a2'],; 0.0, 4); else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())); return returnstring. # Return parameter list for Dispersion.build function; # d2p4: name=-D2 s6=s6 p1=None p2=None p3=None (damping parameter fixed in Dispersion class); # d2gr: name=-D2GR s6=s6 p1=alpha6 p2=None p3=None; # d3zero: name=-D3ZERO s6=s6 p1=sr6 p2=s8 p3=alpha6; # d3bj: name=-D3BJ s6=s6 p1=a1 p2=s8 p3=a2; elif mode.lower() == 'psi4':; if dashlvleff == 'd2p4':; return '-D2', \; dashcoeff[dashlvleff][func]['s6'], \; 0.0, 0.0, 0.0; elif dashlvleff == 'd2gr':; return '-D2GR', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['alpha6'], \; 0.0, 0.0; elif dashlvleff == 'd3zero':; return '-D3ZERO', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['sr6'], \; dashcoeff[dashlvleff][func]['alpha6']; elif dashlvleff == 'd3bj':; return '-D3BJ', \; dashcoeff[dashlvleff][func]['s6'], \; dashcoeff[dashlvleff][func]['s8'], \; dashcoeff[dashlvleff][func]['a1'], \; dashcoeff[dashlvleff][func]['a2']; else:; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). else:; raise ValidationError(""""""-D return format %s is not available. Choose 'psi4' or 'dftd3'.""""""). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/dashparam.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/dashparam.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:694,Availability,error,error,694,"﻿. diatomic — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for diatomic; import PsiMod; from physconst import psi_bohr2angstroms, psi_hartree2aJ, psi_amu2kg, psi_h, psi_c; from math import sqrt, pi; from diatomic_fits import *. [docs]def diatomic_anharmonicity(rvals, energies):; """"""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; ; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :type rvals: list; :param rvals: The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array. :type energies: list; :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """""". angstrom_to_bohr = 1.0 / psi_bohr2angstroms; angstrom_to_meter = 10e-10;; ; if len(rvals) != len(energies):; raise Exception(""The number of energies must match the number of distances""); ; npoints = len(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:5513,Deployability,update,updated,5513," Hartrees\n"" % energy); PsiMod.print_out(""Gradient %20.14f\n"" % first); PsiMod.print_out(""Quadratic Force Constant %14.7f MDYNE/A\n"" % secd); PsiMod.print_out(""Cubic Force Constant %14.7f MDYNE/A**2\n"" % third); PsiMod.print_out(""Quartic Force Constant %14.7f MDYNE/A**3\n"" % fourth); ; hbar = psi_h / (2.0 * pi); mu = ((m1*m2)/(m1+m2))*psi_amu2kg; we = 5.3088375e-11*sqrt(secd/mu); wexe = (1.2415491e-6)*(we/secd)**2 * ((5.0*third*third)/(3.0*secd)-fourth); ; # Rotational constant: Be; I = ((m1*m2)/(m1+m2)) * psi_amu2kg * (optx * angstrom_to_meter)**2; B = psi_h / (8.0 * pi**2 * psi_c * I); ; # alpha_e and quartic centrifugal distortion constant; ae = -(6.0 * B**2 / we) * ((1.05052209e-3*we*third)/(sqrt(B * secd**3))+1.0); de = 4.0*B**3 / we**2. # B0 and r0 (plus re check using Be); B0 = B - ae / 2.0; r0 = sqrt(psi_h / (8.0 * pi**2 * mu * psi_c * B0)); recheck = sqrt(psi_h / (8.0 * pi**2 * mu * psi_c * B)); r0 /= angstrom_to_meter; ; recheck /= angstrom_to_meter;; ; # Fundamental frequency nu; nu = we - 2.0 * wexe;; zpve_nu = 0.5 * we - 0.25 * wexe;. PsiMod.print_out(""\nre = %10.6f A check: %10.6f\n"" % (optx, recheck)); PsiMod.print_out(""r0 = %10.6f A\n"" % r0); PsiMod.print_out(""we = %10.4f cm-1\n"" % we); PsiMod.print_out(""wexe = %10.4f cm-1\n"" % wexe); PsiMod.print_out(""nu = %10.4f cm-1\n"" % nu); PsiMod.print_out(""ZPVE(nu) = %10.4f cm-1\n"" % zpve_nu); PsiMod.print_out(""Be = %10.4f cm-1\n"" % B); PsiMod.print_out(""B0 = %10.4f cm-1\n"" % B0); PsiMod.print_out(""ae = %10.4f cm-1\n"" % ae); PsiMod.print_out(""De = %10.7f cm-1\n"" % de); results = {; ""re"" : optx,; ""r0"" : r0,; ""we"" : we,; ""wexe"" : wexe,; ""nu"" : nu,; ""ZPVE(harmonic)"" : zpve_nu,; ""ZPVE(anharmonic)"" : zpve_nu,; ""Be"" : B,; ""B0"" : B0,; ""ae"" : ae,; ""De"" : de; }; return results. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:438,Energy Efficiency,energy,energy,438,"﻿. diatomic — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for diatomic; import PsiMod; from physconst import psi_bohr2angstroms, psi_hartree2aJ, psi_amu2kg, psi_h, psi_c; from math import sqrt, pi; from diatomic_fits import *. [docs]def diatomic_anharmonicity(rvals, energies):; """"""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; ; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :type rvals: list; :param rvals: The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array. :type energies: list; :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """""". angstrom_to_bohr = 1.0 / psi_bohr2angstroms; angstrom_to_meter = 10e-10;; ; if len(rvals) != len(energies):; raise Exception(""The number of energies must match the number of distances""); ; npoints = len(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:514,Energy Efficiency,energy,energy,514,"﻿. diatomic — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for diatomic; import PsiMod; from physconst import psi_bohr2angstroms, psi_hartree2aJ, psi_amu2kg, psi_h, psi_c; from math import sqrt, pi; from diatomic_fits import *. [docs]def diatomic_anharmonicity(rvals, energies):; """"""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; ; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :type rvals: list; :param rvals: The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array. :type energies: list; :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """""". angstrom_to_bohr = 1.0 / psi_bohr2angstroms; angstrom_to_meter = 10e-10;; ; if len(rvals) != len(energies):; raise Exception(""The number of energies must match the number of distances""); ; npoints = len(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:674,Energy Efficiency,energy,energy,674,"﻿. diatomic — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for diatomic; import PsiMod; from physconst import psi_bohr2angstroms, psi_hartree2aJ, psi_amu2kg, psi_h, psi_c; from math import sqrt, pi; from diatomic_fits import *. [docs]def diatomic_anharmonicity(rvals, energies):; """"""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using either a 5 or 9 point Legendre fit, locates the minimum; energy point, and then applies second order vibrational perturbation theory to obtain spectroscopic ; constants. The r values provided must bracket the minimum energy point, or an error will result.; ; A dictionary with the following keys, which correspond to spectroscopic constants, is returned:. :type rvals: list; :param rvals: The bond lengths (in Angstrom) for which energies are ; provided of length either 5 or 9 but must be the same length as ; the energies array. :type energies: list; :param energies: The energies (Eh) computed at the bond lengths in the rvals list. :returns: (*dict*) Keys: ""re"", ""r0"", ""we"", ""wexe"", ""nu"", ""ZPVE(harmonic)"", ""ZPVE(anharmonic)"", ""Be"", ""B0"", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """""". angstrom_to_bohr = 1.0 / psi_bohr2angstroms; angstrom_to_meter = 10e-10;; ; if len(rvals) != len(energies):; raise Exception(""The number of energies must match the number of distances""); ; npoints = len(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:2162,Energy Efficiency,energy,energy,2162,", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """""". angstrom_to_bohr = 1.0 / psi_bohr2angstroms; angstrom_to_meter = 10e-10;; ; if len(rvals) != len(energies):; raise Exception(""The number of energies must match the number of distances""); ; npoints = len(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit = 30; thres = 1.0e-9; for i in range(maxit):; if (npoints == 5):; grad= first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx); energy = function_5pt(rvals, energies, optx); elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:2325,Energy Efficiency,energy,energy,2325,", ""ae"", ""De""; corresponding to the spectroscopic constants in cm-1; """""". angstrom_to_bohr = 1.0 / psi_bohr2angstroms; angstrom_to_meter = 10e-10;; ; if len(rvals) != len(energies):; raise Exception(""The number of energies must match the number of distances""); ; npoints = len(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit = 30; thres = 1.0e-9; for i in range(maxit):; if (npoints == 5):; grad= first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx); energy = function_5pt(rvals, energies, optx); elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:2436,Energy Efficiency,energy,energy,2436,"en(rvals). if npoints != 5 and npoints != 9:; raise Exception(""Only 5- or 9-point fits are implemented right now""). PsiMod.print_out(""\n\nPerforming a %d-point fit\n"" % npoints); ; PsiMod.print_out(""\nOptimizing geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit = 30; thres = 1.0e-9; for i in range(maxit):; if (npoints == 5):; grad= first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx); energy = function_5pt(rvals, energies, optx); elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; elif (npoints == 9):; energy = function_9pt(rvals, energies, optx); first = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:2681,Energy Efficiency,energy,energy,2681,"g geometry based on current surface:\n\n"");; if (npoints == 5):; optx = rvals[2]; elif (npoints == 9):; optx = rvals[4]. mol = PsiMod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit = 30; thres = 1.0e-9; for i in range(maxit):; if (npoints == 5):; grad= first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx); energy = function_5pt(rvals, energies, optx); elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; elif (npoints == 9):; energy = function_9pt(rvals, energies, optx); first = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ. PsiMod.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % energy); PsiMod.print_out(""Gradient %20.14f\n"" % first); PsiMod.print_out(""Quadratic Force Const",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:2813,Energy Efficiency,energy,energy,2813,"Mod.get_active_molecule(); natoms = mol.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = mol.mass(0); m2 = mol.mass(1). maxit = 30; thres = 1.0e-9; for i in range(maxit):; if (npoints == 5):; grad= first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx); energy = function_5pt(rvals, energies, optx); elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; elif (npoints == 9):; energy = function_9pt(rvals, energies, optx); first = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ. PsiMod.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % energy); PsiMod.print_out(""Gradient %20.14f\n"" % first); PsiMod.print_out(""Quadratic Force Constant %14.7f MDYNE/A\n"" % secd); PsiMod.print_out(""Cubic Force Constant %14.7f MDYNE/A**2\n"" % third); PsiMod.print_out(""Quartic Forc",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:2920,Energy Efficiency,energy,energy,2920,"elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; elif (npoints == 9):; energy = function_9pt(rvals, energies, optx); first = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ. PsiMod.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % energy); PsiMod.print_out(""Gradient %20.14f\n"" % first); PsiMod.print_out(""Quadratic Force Constant %14.7f MDYNE/A\n"" % secd); PsiMod.print_out(""Cubic Force Constant %14.7f MDYNE/A**2\n"" % third); PsiMod.print_out(""Quartic Force Constant %14.7f MDYNE/A**3\n"" % fourth); ; hbar = psi_h / (2.0 * pi); mu = ((m1*m2)/(m1+m2))*psi_amu2kg; we = 5.3088375e-11*sqrt(secd/mu); wexe = (1.2415491e-6)*(we/secd)**2 * ((5.0*third*third)/(3.0*secd)-fourth); ; # Rotational constant: Be; I = ((m1*m2)/(m1+m2)) * psi_amu2kg * (optx * angstrom_to_meter)**2; B = psi_h / (8.0 * pi**2 * psi_c * I); ; # alpha_e and quartic centrifugal distorti",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:3233,Energy Efficiency,energy,energy,3233,"elif (npoints == 9):; grad = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx); energy = function_9pt(rvals, energies, optx); PsiMod.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (energy, optx, grad)); if abs(grad) < thres:; break; optx -= grad / secd;; PsiMod.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (function_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; elif (npoints == 9):; energy = function_9pt(rvals, energies, optx); first = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ. PsiMod.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % energy); PsiMod.print_out(""Gradient %20.14f\n"" % first); PsiMod.print_out(""Quadratic Force Constant %14.7f MDYNE/A\n"" % secd); PsiMod.print_out(""Cubic Force Constant %14.7f MDYNE/A**2\n"" % third); PsiMod.print_out(""Quartic Force Constant %14.7f MDYNE/A**3\n"" % fourth); ; hbar = psi_h / (2.0 * pi); mu = ((m1*m2)/(m1+m2))*psi_amu2kg; we = 5.3088375e-11*sqrt(secd/mu); wexe = (1.2415491e-6)*(we/secd)**2 * ((5.0*third*third)/(3.0*secd)-fourth); ; # Rotational constant: Be; I = ((m1*m2)/(m1+m2)) * psi_amu2kg * (optx * angstrom_to_meter)**2; B = psi_h / (8.0 * pi**2 * psi_c * I); ; # alpha_e and quartic centrifugal distorti",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html:3585,Energy Efficiency,energy,energy,3585,"ction_5pt(rvals, energies, optx), optx, grad));. if optx < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if optx > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""); ; if (npoints == 5):; energy = function_5pt(rvals, energies, optx); first = first_deriv_5pt(rvals, energies, optx); secd = second_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_5pt(rvals, energies, optx) * psi_hartree2aJ; elif (npoints == 9):; energy = function_9pt(rvals, energies, optx); first = first_deriv_9pt(rvals, energies, optx); secd = second_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; third = third_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ; fourth = fourth_deriv_9pt(rvals, energies, optx) * psi_hartree2aJ. PsiMod.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % energy); PsiMod.print_out(""Gradient %20.14f\n"" % first); PsiMod.print_out(""Quadratic Force Constant %14.7f MDYNE/A\n"" % secd); PsiMod.print_out(""Cubic Force Constant %14.7f MDYNE/A**2\n"" % third); PsiMod.print_out(""Quartic Force Constant %14.7f MDYNE/A**3\n"" % fourth); ; hbar = psi_h / (2.0 * pi); mu = ((m1*m2)/(m1+m2))*psi_amu2kg; we = 5.3088375e-11*sqrt(secd/mu); wexe = (1.2415491e-6)*(we/secd)**2 * ((5.0*third*third)/(3.0*secd)-fourth); ; # Rotational constant: Be; I = ((m1*m2)/(m1+m2)) * psi_amu2kg * (optx * angstrom_to_meter)**2; B = psi_h / (8.0 * pi**2 * psi_c * I); ; # alpha_e and quartic centrifugal distortion constant; ae = -(6.0 * B**2 / we) * ((1.05052209e-3*we*third)/(sqrt(B * secd**3))+1.0); de = 4.0*B**3 / we**2. # B0 and r0 (plus re check using Be); B0 = B - ae / 2.0; r0 = sqrt(psi_h / (8.0 * pi**2 * mu * psi_c * B0)); recheck = sqrt(psi_h / (8.0 * pi**2 * mu * psi_c * B)); r0 /= angstrom_to_meter; ; recheck /= angstrom_to_meter;; ; # Fundamental frequency nu; nu = we ",MatchSource.WIKI,psi4manual/4.0b4/_modules/diatomic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/diatomic.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:228,Availability,avail,available,228,"﻿. driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for driver; from __future__ import print_function; """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; import sys; import PsiMod; from proc import *; from text import *; from procutil import *; from functional import *; from psifiles import *; # never import wrappers or aliases into this file. # Procedure lookup tables; procedures = {; 'energy': {; 'scf' : run_scf,; 'mcscf' : run_mcscf,; 'dcft' : run_dcft,; 'dfmp2' : run_dfmp2,; 'df-mp2' : run_dfmp2,; 'conv-mp2' : run_mp2,; 'mp3' : run_mp3,; 'mp2.5' : run_mp2_5,; 'mp2' : run_mp2_select,; 'omp2' : run_omp2,; 'scs-omp2' : run_scs_omp2,; 'scsn-omp2' : run_scs_omp2,; 'scs-mi-omp2' : run_scs_omp2,; 'scs-omp2-vdw' : run_scs_omp2,; 'sos-omp2' : run_sos_omp2,; 'sos-pi-omp2' : run_sos_omp2,; 'omp3' : run_omp3,; 'scs-omp3' : run_scs_omp3,; 'scsn-omp3' : run_scs_omp3,; 'scs-mi-omp3' : run_scs_omp3,; 'scs-omp3-vdw' : run_scs_omp3,; 'sos-omp3' : run_sos_omp3,; 'sos-pi-omp3' : run_sos_omp3,; 'ocepa' : run_ocepa,; 'cepa0' : run_cepa0,; 'omp2.5' : run_omp2_5,; 'dftsapt' : run_dftsapt,; 'infsapt' : run_infsapt,; 'sapt0' : run_sapt,; 'sapt2' : run_sapt,; 'sapt2+' : run_sapt,; 'sapt2+(3)' : run_sapt,; 'sapt2+3' : run_sapt,; 'sapt2+(ccd)' : run_sapt,; 'sapt2+(3)(ccd)': run_sapt,; 'sapt2+3(ccd)' : run_sapt,; 'sapt0-ct' : run_sapt_ct,; 'sapt2-ct' : run_sapt_ct,; 'sapt2+-ct' : run_sapt_ct,; 'sapt2+(3)-ct' : run_sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : ru",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:27734,Availability,avail,available,27734,"c. The target molecule, if not the last molecule defined. .. comment :type cast_up: :ref:`boolean <op_py_boolean>` or string; .. comment :param cast_up: ``'on'`` || |dl| ``'off'`` |dr| || ``'3-21g'`` || ``'cc-pVDZ'`` || etc. .. comment Indicates whether, to accelerate convergence for the scf portion of; .. comment the *name* calculation, a preliminary scf should be performed with a; .. comment small basis set (3-21G if a basis name is not supplied as keyword; .. comment value) followed by projection into the full target basis. .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__basis_guess| instead. .. comment :type cast_up_df: :ref:`boolean <op_py_boolean>` or string; .. comment :param cast_up_df: ``'on'`` || |dl| ``'off'`` |dr| || ``'cc-pVDZ-RI'`` || ``'aug-cc-pVDZ-JKFIT'`` || etc. .. comment Indicates whether, when *cast_up* is active, to run the preliminary; .. comment scf in density-fitted mode or what fitting basis to employ (when; .. comment available for all elements, cc-pVDZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. :examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3)",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:30299,Availability,avail,available,30299,"e); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:;",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:32126,Availability,avail,available,32126,"order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44878,Availability,avail,available,44878," so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+--------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45281,Availability,avail,available,45281,"run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-Plesset perturbation theory (MP2) :ref:`[manual] <sec:dfmp2>` |; +-------------------------+-----------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50086,Availability,avail,available,50086,"function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sy",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:57903,Availability,avail,available,57903,"nError('MRCC method \'%s\' invalid.' % (namelower)). elif re.match(r'^[a-z]+\d+$', namelower):; decompose = re.compile(r'^([a-z]+)(\d+)$').match(namelower); namestump = decompose.group(1); namelevel = int(decompose.group(2)). if (namestump == 'mp') or (namestump == 'zapt') or (namestump == 'ci'):; # Let 'mp2' and 'mp3' pass through as themselves to occ module; if (namestump == 'mp') and ((namelevel == 2) or (namelevel == 3)):; return namelower, None; # Let 'mp4' be redirected to fnocc module if rhf; elif (namestump == 'mp') and (namelevel == 4):; if PsiMod.get_option('SCF','REFERENCE') == 'RHF':; return 'fnocc-mp', 4; else:; return 'detci-mp', 4; # Otherwise return method and order; else:; return namestump, namelevel; else:; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibra",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:57980,Availability,avail,availability,57980,"]+\d+$', namelower):; decompose = re.compile(r'^([a-z]+)(\d+)$').match(namelower); namestump = decompose.group(1); namelevel = int(decompose.group(2)). if (namestump == 'mp') or (namestump == 'zapt') or (namestump == 'ci'):; # Let 'mp2' and 'mp3' pass through as themselves to occ module; if (namestump == 'mp') and ((namelevel == 2) or (namelevel == 3)):; return namelower, None; # Let 'mp4' be redirected to fnocc module if rhf; elif (namestump == 'mp') and (namelevel == 4):; if PsiMod.get_option('SCF','REFERENCE') == 'RHF':; return 'fnocc-mp', 4; else:; return 'detci-mp', 4; # Otherwise return method and order; else:; return namestump, namelevel; else:; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents;",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:58578,Availability,avail,available,58578,"; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 2. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Defaul",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:58639,Availability,avail,available,58639,"; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 2. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Defaul",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61291,Availability,avail,available,61291,"gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['e",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:14207,Deployability,configurat,configuration,14207,") | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fno-df-ccsd(t) | CCSD(T) with density fitting and frozen natural orbitals :ref:`[manual] <sec:fnocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | bccd(t) | BCCD with perturbative triples :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cc3 | approximate CC singles, doubles, and triples (CC3) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccenergy | **expert** full control over ccenergy module |; +-------------------------+---------------------------------------------------------------------------------------+; | cisd | configuration interaction (CI) singles and doubles (CISD) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdt | CI singles, doubles, and triples (CISDT) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdtq | CI singles, doubles, triples, and quadruples (CISDTQ) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ci\ *n* | *n*\ th-order CI :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fci | full configuration interaction (FCI) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | detci | **expert** full control ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:15003,Deployability,configurat,configuration,15003,"-------+; | ccenergy | **expert** full control over ccenergy module |; +-------------------------+---------------------------------------------------------------------------------------+; | cisd | configuration interaction (CI) singles and doubles (CISD) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdt | CI singles, doubles, and triples (CISDT) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdtq | CI singles, doubles, triples, and quadruples (CISDTQ) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ci\ *n* | *n*\ th-order CI :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fci | full configuration interaction (FCI) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | detci | **expert** full control over detci module |; +-------------------------+---------------------------------------------------------------------------------------+; | gaussian-2 (g2) | gaussian-2 composite method :ref:`[manual] <sec:fnogn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt0 | 0th-order symmetry adapted perturbation theory (SAPT) :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2 | 2nd-order SAPT, traditional definition :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+ | SAPT including all 2nd-order terms :ref:`[ma",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:32551,Deployability,continuous,continuous,32551,"pt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_opti",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:32659,Deployability,continuous,continuous,32659,"if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (glo",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35841,Deployability,continuous,continuous,35841,"ndent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:38109,Deployability,continuous,continuous,38109,"""""# overwritten and so maintains a history of the job. To use the (binary) optimizer\n""""""; instructionsM += """"""# data file to accelerate convergence, the OPT-master jobs must run on the same computer.\n\n"""""". fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write(format_molecule_for_input(molecule)); fmaster.write(format_options_for_input()); format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49560,Deployability,continuous,continuous,49560,"--------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49762,Deployability,continuous,continuous,49762,"Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:69272,Deployability,update,updated,69272,"stash.restore(). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # call thermo module; PsiMod.thermo(). optstash.restore(); return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute force constants. Presently identical to frequency().""""""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); frequencies(name, **kwargs). [docs]def molden(filename):; """"""Function to write wavefunction information in molden; format to *filename*. """"""; m = PsiMod.MoldenWriter(PsiMod.wavefunction()); m.write(filename). [docs]def parse_cotton_irreps(irrep):; r""""""Function to return validated Cotton ordering index from string or integer; irreducible representation *irrep*. """"""; cotton = {; 'c1': {; 'a': 1,; '1': 1; },; 'ci': {; 'ag': 1,; 'au': 2,; '1': 1,; '2': 2; },; 'c2': {; 'a': 1,; 'b': 2,; '1': 1,; '2': 2; },; 'cs': {; 'ap': 1,; 'app': 2,; '1': 1,; '2': 2; },; 'd2': {; 'a': 1,; 'b1': 2,; 'b2': 3,; 'b3': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2v': {; 'a1': 1,; 'a2': 2,; 'b1': 3,; 'b2': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2h': {; 'ag': 1,; 'bg': 2,; 'au': 3,; 'bu': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; },; 'd2h': {; 'ag': 1,; 'b1g': 2,; 'b2g': 3,; 'b3g': 4,; 'au': 5,; 'b1u': 6,; 'b2u': 7,; 'b3u': 8,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; '5': 5,; '6': 6,; '7': 7,; '8': 8; }; }. point_group = PsiMod.get_active_molecule().schoenflies_symbol().lower(); irreducible_representation = str(irrep).lower(). try:; return cotton[point_group][irreducible_representation]; except KeyError:; raise ValidationError(""Irrep \'%s\' not valid for point group \'%s\'."" % (str(irrep), point_group)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:676,Energy Efficiency,energy,energy,676,"﻿. driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for driver; from __future__ import print_function; """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; import sys; import PsiMod; from proc import *; from text import *; from procutil import *; from functional import *; from psifiles import *; # never import wrappers or aliases into this file. # Procedure lookup tables; procedures = {; 'energy': {; 'scf' : run_scf,; 'mcscf' : run_mcscf,; 'dcft' : run_dcft,; 'dfmp2' : run_dfmp2,; 'df-mp2' : run_dfmp2,; 'conv-mp2' : run_mp2,; 'mp3' : run_mp3,; 'mp2.5' : run_mp2_5,; 'mp2' : run_mp2_select,; 'omp2' : run_omp2,; 'scs-omp2' : run_scs_omp2,; 'scsn-omp2' : run_scs_omp2,; 'scs-mi-omp2' : run_scs_omp2,; 'scs-omp2-vdw' : run_scs_omp2,; 'sos-omp2' : run_sos_omp2,; 'sos-pi-omp2' : run_sos_omp2,; 'omp3' : run_omp3,; 'scs-omp3' : run_scs_omp3,; 'scsn-omp3' : run_scs_omp3,; 'scs-mi-omp3' : run_scs_omp3,; 'scs-omp3-vdw' : run_scs_omp3,; 'sos-omp3' : run_sos_omp3,; 'sos-pi-omp3' : run_sos_omp3,; 'ocepa' : run_ocepa,; 'cepa0' : run_cepa0,; 'omp2.5' : run_omp2_5,; 'dftsapt' : run_dftsapt,; 'infsapt' : run_infsapt,; 'sapt0' : run_sapt,; 'sapt2' : run_sapt,; 'sapt2+' : run_sapt,; 'sapt2+(3)' : run_sapt,; 'sapt2+3' : run_sapt,; 'sapt2+(ccd)' : run_sapt,; 'sapt2+(3)(ccd)': run_sapt,; 'sapt2+3(ccd)' : run_sapt,; 'sapt0-ct' : run_sapt_ct,; 'sapt2-ct' : run_sapt_ct,; 'sapt2+-ct' : run_sapt_ct,; 'sapt2+(3)-ct' : run_sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : ru",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:3640,Energy Efficiency,energy,energy,3640,"sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : run_ccenergy,; 'mrcc' : run_mrcc, # interface to Kallay's MRCC program; 'bccd' : run_bccd,; 'bccd(t)' : run_bccd_t,; 'eom-ccsd' : run_eom_cc,; 'eom-cc2' : run_eom_cc,; 'eom-cc3' : run_eom_cc,; 'detci' : run_detci, # full control over detci; 'mp' : run_detci, # arbitrary order mp(n); 'detci-mp' : run_detci, # arbitrary order mp(n); 'zapt' : run_detci, # arbitrary order zapt(n); 'cisd' : run_detci,; 'cisdt' : run_detci,; 'cisdtq' : run_detci,; 'ci' : run_detci, # arbitrary order ci(n); 'fci' : run_detci,; 'adc' : run_adc,; 'cphf' : run_libfock,; 'cis' : run_libfock,; 'tdhf' : run_libfock,; 'cpks' : run_libfock,; 'tda' : run_libfock,; 'tddft' : run_libfock,; 'psimrcc' : run_psimrcc,; 'psimrcc_scf' : run_psimrcc_scf,; 'hf' : run_scf,; 'rhf' : run_scf,; 'uhf' : run_scf,; 'rohf' : run_scf,; 'rscf' : run_scf,; 'uscf' : run_scf,; 'roscf' : run_scf,; 'qcisd' : run_fnocc,; 'qcisd(t)' : run_fnocc,; 'mp4(sdq)' : run_fnocc,; 'fno-ccsd' : run_fnocc,; 'fno-ccsd(t)' : run_fnocc,; 'fno-qcisd' : run_fnocc,; 'fno-qcisd(t)' : run_fnocc,; 'fno-mp3' : run_fnocc,; 'fno-mp4(sdq)' : run_fnocc,; 'fno-mp4' : run_fnocc,; 'fnocc-mp' : run_fnocc,; 'df-ccsd' : run_fnodfcc,; 'df-ccsd(t)' : run_fnodfcc,; 'fno-df-ccsd' : run_fnodfcc,; 'fno-df-ccsd(t)': run_fnodfcc,; 'fno-cepa(0)' : run_cepa,; 'fno-cepa(1)' : run_cepa,; 'fno-cepa(3)' : run_cepa,; 'fno-acpf' : run_cepa,; 'fno-aqcc' : run_cepa,; 'fno-sdci' : run_cepa,; 'fno-dci' : run_cepa,; 'cepa(0)' : run_cepa,; 'cepa(1)' : run_cepa,; 'cepa(3)' : run_cepa,; 'acpf' : run_cepa,; 'aqcc' : run_cepa,; 'sdci' : run_cepa,; 'dci' : run_cepa,; # Upon adding a method to this list, add it to the docstring in energy() below; # If you must add an alias to this list (e.",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:4951,Energy Efficiency,energy,energy,4951," : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:5199,Energy Efficiency,energy,energy,5199,"dient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | name | calls method |; .. comment +=========================+=======================================================================================+; .. comment | mp2c | coupled MP2 (MP2C) |; .. comment +-------------------------+------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:5276,Energy Efficiency,energy,energy,5276,"dient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | name | calls method |; .. comment +=========================+=======================================================================================+; .. comment | mp2c | coupled MP2 (MP2C) |; .. comment +-------------------------+------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:5321,Energy Efficiency,energy,energy,5321,"a0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | name | calls method |; .. comment +=========================+=======================================================================================+; .. comment | mp2c | coupled MP2 (MP2C) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | mp2-drpa | random pha",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:5366,Energy Efficiency,energy,energy,5366,"a_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | name | calls method |; .. comment +=========================+=======================================================================================+; .. comment | mp2c | coupled MP2 (MP2C) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | mp2-drpa | random phase approximation? |; .. comment +------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:15577,Energy Efficiency,adapt,adapted,15577,"----------------------+; | cisdtq | CI singles, doubles, triples, and quadruples (CISDTQ) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ci\ *n* | *n*\ th-order CI :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fci | full configuration interaction (FCI) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | detci | **expert** full control over detci module |; +-------------------------+---------------------------------------------------------------------------------------+; | gaussian-2 (g2) | gaussian-2 composite method :ref:`[manual] <sec:fnogn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt0 | 0th-order symmetry adapted perturbation theory (SAPT) :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2 | 2nd-order SAPT, traditional definition :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+ | SAPT including all 2nd-order terms :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(3) | SAPT including perturbative triples :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+3 | SAPT including all 3rd-order terms :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(ccd) | SAPT2+ with CC-based dispe",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:17165,Energy Efficiency,charge,charge,17165,ncluding perturbative triples :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+3 | SAPT including all 3rd-order terms :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(ccd) | SAPT2+ with CC-based dispersion :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(3)(ccd) | SAPT2+(3) with CC-based dispersion :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+3(ccd) | SAPT2+3 with CC-based dispersion :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt0-ct | 0th-order SAPT plus charge transfer (CT) calculation :ref:`[manual] <sec:saptct>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2-ct | SAPT2 plus CT :ref:`[manual] <sec:saptct>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+-ct | SAPT2+ plus CT :ref:`[manual] <sec:saptct>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(3)-ct | SAPT2+(3) plus CT :ref:`[manual] <sec:saptct>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+3-ct | SAPT2+3 plus CT :ref:`[manual] <sec:saptct>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(ccd)-ct | SAPT2+(CCD) plus CT :ref:`[manual] <sec:saptct>` |; +-------------------------+------,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:28269,Energy Efficiency,energy,energy,28269,") followed by projection into the full target basis. .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__basis_guess| instead. .. comment :type cast_up_df: :ref:`boolean <op_py_boolean>` or string; .. comment :param cast_up_df: ``'on'`` || |dl| ``'off'`` |dr| || ``'cc-pVDZ-RI'`` || ``'aug-cc-pVDZ-JKFIT'`` || etc. .. comment Indicates whether, when *cast_up* is active, to run the preliminary; .. comment scf in density-fitted mode or what fitting basis to employ (when; .. comment available for all elements, cc-pVDZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. :examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, leve",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:28501,Energy Efficiency,energy,energy,28501,"_df: :ref:`boolean <op_py_boolean>` or string; .. comment :param cast_up_df: ``'on'`` || |dl| ``'off'`` |dr| || ``'cc-pVDZ-RI'`` || ``'aug-cc-pVDZ-JKFIT'`` || etc. .. comment Indicates whether, when *cast_up* is active, to run the preliminary; .. comment scf in density-fitted mode or what fitting basis to employ (when; .. comment available for all elements, cc-pVDZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. :examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('S",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:28568,Energy Efficiency,energy,energy,28568,"FIT'`` || etc. .. comment Indicates whether, when *cast_up* is active, to run the preliminary; .. comment scf in density-fitted mode or what fitting basis to employ (when; .. comment available for all elements, cc-pVDZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. :examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:28716,Energy Efficiency,energy,energy,28716,"; .. comment available for all elements, cc-pVDZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. :examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowerna",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:28763,Energy Efficiency,energy,energy,28763,"DZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special steps are taken to get; the scf to converge in an explicit preceeding scf step. :examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowerna",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:29441,Energy Efficiency,energy,energy,29441," >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementa",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:29487,Energy Efficiency,energy,energy,29487," >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementa",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:29705,Energy Efficiency,energy,energy,29705,"ergy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']).",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:29751,Energy Efficiency,energy,energy,29751,"ergy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']).",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:30053,Energy Efficiency,energy,energy,30053,"lecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name;",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:30104,Energy Efficiency,energy,energy,30104,"lecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name;",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:30195,Energy Efficiency,energy,energy,30195,"itrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31152,Energy Efficiency,energy,energy,31152,"nergy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'d",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31183,Energy Efficiency,energy,energy,31183,"nergy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'d",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31363,Energy Efficiency,energy,energy,31363,"urn PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); m",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31915,Energy Efficiency,energy,energy,31915,"order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31953,Energy Efficiency,energy,energy,31953,"order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:32007,Energy Efficiency,energy,energy,32007,"order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33066,Energy Efficiency,energy,energy,33066,"quested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient info",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33175,Energy Efficiency,energy,energy,33175," the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kw",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33221,Energy Efficiency,energy,energy,33221," the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kw",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33440,Energy Efficiency,energy,energy,33440," Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perf",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33486,Energy Efficiency,energy,energy,33486," Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perf",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33789,Energy Efficiency,energy,energy,33789,"s['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33840,Energy Efficiency,energy,energy,33840,"s['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:34356,Energy Efficiency,energy,energy,34356," 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructi",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:38471,Energy Efficiency,energy,energy,38471,"lecule)); fmaster.write(format_options_for_input()); format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from eac",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:38625,Energy Efficiency,energy,energy,38625,"('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners)",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:39157,Energy Efficiency,energy,energy,39157,"ut.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.\n' % (rfile, 'GRADIENT')); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['GRADIENT', 'RESULT:', 'computation']):; if int(s[3]) != opt_linkage:; raise ValidationError('Output file \'%s.out\' has linkage ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:39413,Energy Efficiency,energy,energy,39413,"d.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.\n' % (rfile, 'GRADIENT')); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['GRADIENT', 'RESULT:', 'computation']):; if int(s[3]) != opt_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rfile, str(s[3]), str(opt_linkage))); if s[6] != str(n + 1):; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with item %s.'; % (rfile, s[6], str(n + 1))); if (s[8:10] ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:39494,Energy Efficiency,energy,energy,39494,"name, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.\n' % (rfile, 'GRADIENT')); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['GRADIENT', 'RESULT:', 'computation']):; if int(s[3]) != opt_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rfile, str(s[3]), str(opt_linkage))); if s[6] != str(n + 1):; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with item %s.'; % (rfile, s[6], str(n + 1))); if (s[8:10] == ['electronic', 'energy']):; E = float(s[10]); PsiMod.print_out('%s RESULT: electronic energy = %20.12f\n' % ('GRADIENT', E));",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:40424,Energy Efficiency,energy,energy,40424,"ic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.\n' % (rfile, 'GRADIENT')); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['GRADIENT', 'RESULT:', 'computation']):; if int(s[3]) != opt_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rfile, str(s[3]), str(opt_linkage))); if s[6] != str(n + 1):; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with item %s.'; % (rfile, s[6], str(n + 1))); if (s[8:10] == ['electronic', 'energy']):; E = float(s[10]); PsiMod.print_out('%s RESULT: electronic energy = %20.12f\n' % ('GRADIENT', E)); freagent.close(); energies.append(E). # S/R: Quit sow after writing files; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0. if (opt_mode.lower() == 'reap'):; PsiMod.set_variable('CURRENT ENERGY', energies[-1]). # Obtain the gradient; PsiMod.fd_1_0(energies); ; # The last item in the list is the reference energy, return it; optstash.restore(); return energies[-1]. [docs]def property(name, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:40494,Energy Efficiency,energy,energy,40494,"S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.\n' % (rfile, 'GRADIENT')); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['GRADIENT', 'RESULT:', 'computation']):; if int(s[3]) != opt_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rfile, str(s[3]), str(opt_linkage))); if s[6] != str(n + 1):; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with item %s.'; % (rfile, s[6], str(n + 1))); if (s[8:10] == ['electronic', 'energy']):; E = float(s[10]); PsiMod.print_out('%s RESULT: electronic energy = %20.12f\n' % ('GRADIENT', E)); freagent.close(); energies.append(E). # S/R: Quit sow after writing files; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0. if (opt_mode.lower() == 'reap'):; PsiMod.set_variable('CURRENT ENERGY', energies[-1]). # Obtain the gradient; PsiMod.fd_1_0(energies); ; # The last item in the list is the reference energy, return it; optstash.restore(); return energies[-1]. [docs]def property(name, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+===============================================",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:40856,Energy Efficiency,energy,energy,40856,"t line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.\n' % (rfile, 'GRADIENT')); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['GRADIENT', 'RESULT:', 'computation']):; if int(s[3]) != opt_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rfile, str(s[3]), str(opt_linkage))); if s[6] != str(n + 1):; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with item %s.'; % (rfile, s[6], str(n + 1))); if (s[8:10] == ['electronic', 'energy']):; E = float(s[10]); PsiMod.print_out('%s RESULT: electronic energy = %20.12f\n' % ('GRADIENT', E)); freagent.close(); energies.append(E). # S/R: Quit sow after writing files; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0. if (opt_mode.lower() == 'reap'):; PsiMod.set_variable('CURRENT ENERGY', energies[-1]). # Obtain the gradient; PsiMod.fd_1_0(energies); ; # The last item in the list is the reference energy, return it; optstash.restore(); return energies[-1]. [docs]def property(name, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present handles property functions only for CC methods.; Consult the keywords sections for other modules for further property capabilities. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Self-consistent field method(s) |; +-------------------------+---------------------------------------------------------------------------------------+; | cc2 | 2nd-order approximate CCSD |; +-------------------------+--------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:43778,Energy Efficiency,energy,energy,43778,"`` || etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44000,Energy Efficiency,energy,energy,44000,"ed. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44046,Energy Efficiency,energy,energy,44046,"ed. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44265,Energy Efficiency,energy,energy,44265," Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients ar",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44311,Energy Efficiency,energy,energy,44311," Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients ar",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44614,Energy Efficiency,energy,energy,44614,"vel = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44665,Energy Efficiency,energy,energy,44665,"vel = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45118,Energy Efficiency,energy,energy,45118,"ENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-P",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45368,Energy Efficiency,energy,energy,45368,"SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-Plesset perturbation theory (MP2) :ref:`[manual] <sec:dfmp2>` |; +-------------------------+---------------------------------------------------------------------------------------+; | df-mp2 | MP2 with density fitting :ref:`[manual] <sec:dfmp2>` |; +-",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49075,Energy Efficiency,energy,energy,49075,"ingles and doubles (CCSD) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analyt",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49171,Energy Efficiency,energy,energy,49171,"----------------------+---------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49310,Energy Efficiency,energy,energy,49310,"c>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50044,Energy Efficiency,energy,energy,50044,"ied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_mol",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:57847,Energy Efficiency,energy,energy,57847,"rn 'mrcc', methods[ccfullname]; else:; raise ValidationError('MRCC method \'%s\' invalid.' % (namelower)). elif re.match(r'^[a-z]+\d+$', namelower):; decompose = re.compile(r'^([a-z]+)(\d+)$').match(namelower); namestump = decompose.group(1); namelevel = int(decompose.group(2)). if (namestump == 'mp') or (namestump == 'zapt') or (namestump == 'ci'):; # Let 'mp2' and 'mp3' pass through as themselves to occ module; if (namestump == 'mp') and ((namelevel == 2) or (namelevel == 3)):; return namelower, None; # Let 'mp4' be redirected to fnocc module if rhf; elif (namestump == 'mp') and (namelevel == 4):; if PsiMod.get_option('SCF','REFERENCE') == 'RHF':; return 'fnocc-mp', 4; else:; return 'detci-mp', 4; # Otherwise return method and order; else:; return namestump, namelevel; else:; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:58536,Energy Efficiency,energy,energy,58536,"= 'RHF':; return 'fnocc-mp', 4; else:; return 'detci-mp', 4; # Otherwise return method and order; else:; return namestump, namelevel; else:; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:60095,Energy Efficiency,energy,energy,60095,"etric modes.; ``-1`` indicates a full frequency calculation. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 2. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['hessian']:; dertype = 2; elif lowername in procedures['gradient']:; dertype = 1; func = gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:60126,Energy Efficiency,energy,energy,60126,"etric modes.; ``-1`` indicates a full frequency calculation. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 2. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['hessian']:; dertype = 2; elif lowername in procedures['gradient']:; dertype = 1; func = gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:60308,Energy Efficiency,energy,energy,60308,"] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 2. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['hessian']:; dertype = 2; elif lowername in procedures['gradient']:; dertype = 1; func = gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not avai",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61080,Energy Efficiency,energy,energy,61080,"gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['e",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61118,Energy Efficiency,energy,energy,61118,"gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['e",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61172,Energy Efficiency,energy,energy,61172,"gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['e",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61681,Energy Efficiency,energy,energy,61681,"unc' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61790,Energy Efficiency,energy,energy,61790,"func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; #",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61836,Energy Efficiency,energy,energy,61836,"func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; #",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:62055,Energy Efficiency,energy,energy,62055,"nd (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; # We have the desired method. Do it.; procedures['hessian'][lowername](lowername, **kwargs); optstash.restore(). # call thermo module; PsiMod.thermo(). return PsiMod.wavefunction().energy(). elif (dertype == 1):; # Ok, we're doing frequencies by gradients; info = 'P",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:62101,Energy Efficiency,energy,energy,62101,"nd (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; # We have the desired method. Do it.; procedures['hessian'][lowername](lowername, **kwargs); optstash.restore(). # call thermo module; PsiMod.thermo(). return PsiMod.wavefunction().energy(). elif (dertype == 1):; # Ok, we're doing frequencies by gradients; info = 'P",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:62404,Energy Efficiency,energy,energy,62404,"; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; # We have the desired method. Do it.; procedures['hessian'][lowername](lowername, **kwargs); optstash.restore(). # call thermo module; PsiMod.thermo(). return PsiMod.wavefunction().energy(). elif (dertype == 1):; # Ok, we're doing frequencies by gradients; info = 'Performing finite difference by gradient calculations'; print(info). func = procedures['gradient'][lowername]. # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_1(irrep). molecule.reinterpret_coordentry(False); molecule.fix_orientation(True); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:62455,Energy Efficiency,energy,energy,62455,"; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; # We have the desired method. Do it.; procedures['hessian'][lowername](lowername, **kwargs); optstash.restore(). # call thermo module; PsiMod.thermo(). return PsiMod.wavefunction().energy(). elif (dertype == 1):; # Ok, we're doing frequencies by gradients; info = 'Performing finite difference by gradient calculations'; print(info). func = procedures['gradient'][lowername]. # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_1(irrep). molecule.reinterpret_coordentry(False); molecule.fix_orientation(True); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:62983,Energy Efficiency,energy,energy,62983," PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; # We have the desired method. Do it.; procedures['hessian'][lowername](lowername, **kwargs); optstash.restore(). # call thermo module; PsiMod.thermo(). return PsiMod.wavefunction().energy(). elif (dertype == 1):; # Ok, we're doing frequencies by gradients; info = 'Performing finite difference by gradient calculations'; print(info). func = procedures['gradient'][lowername]. # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_1(irrep). molecule.reinterpret_coordentry(False); molecule.fix_orientation(True); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements); print(' %d displacements needed.' % ndisp). #print displacements to output.dat; #for n, displacement in enumerate(displacements):; # displacement.print_out();. gradients = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecu",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:64730,Energy Efficiency,energy,energy,64730,"' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_optio",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:64940,Energy Efficiency,energy,energy,64940,"stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:65069,Energy Efficiency,energy,energy,65069,"tion; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). nd",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:65115,Energy Efficiency,energy,energy,65115,"tion; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). nd",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:65335,Energy Efficiency,energy,energy,65335,"rent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.p",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:65381,Energy Efficiency,energy,energy,65381,"rent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.p",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:65685,Energy Efficiency,energy,energy,65685,"eturn statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; E = func(lowername, **kwarg",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:65736,Energy Efficiency,energy,energy,65736,"eturn statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; E = func(lowername, **kwarg",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:66652,Energy Efficiency,energy,energy,66652,"not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; E = func(lowername, **kwargs). # Save the energy; energies.append(E). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). # Obtain the gradient. This function stores the gradient in the wavefunction.; PsiMod.fd_freq_0(energies, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # The last item in the list is the reference energy, return it; optstash.restore(). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # call thermo module; PsiMod.thermo(). optstash.restore(); return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute f",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:66714,Energy Efficiency,energy,energy,66714,"and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; E = func(lowername, **kwargs). # Save the energy; energies.append(E). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). # Obtain the gradient. This function stores the gradient in the wavefunction.; PsiMod.fd_freq_0(energies, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # The last item in the list is the reference energy, return it; optstash.restore(). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # call thermo module; PsiMod.thermo(). optstash.restore(); return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute force constants. Presently identical to frequenc",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:67307,Energy Efficiency,energy,energy,67307,"nts):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; E = func(lowername, **kwargs). # Save the energy; energies.append(E). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). # Obtain the gradient. This function stores the gradient in the wavefunction.; PsiMod.fd_freq_0(energies, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # The last item in the list is the reference energy, return it; optstash.restore(). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # call thermo module; PsiMod.thermo(). optstash.restore(); return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute force constants. Presently identical to frequency().""""""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); frequencies(name, **kwargs). [docs]def molden(filename):; """"""Function to write wavefunction information in molden; format to *filename*. """"""; m = PsiMod.MoldenWriter(PsiMod.wavefunction()); m.write(filename). [docs]def parse_cotton_irreps(irrep):; r""""""Function to return validated Cotton ordering index from string or integer; irreducible representation *irrep*. """"""; cotton = {; 'c1': {; 'a': 1,; '1': 1; },; 'ci': {; 'ag': 1,; 'au': 2,; '1': 1,; '2': 2; },; 'c2': {; 'a': 1,; 'b': 2,; '1': 1,; '2': 2; },; 'cs': {",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:596,Integrability,wrap,wrappers,596,"﻿. driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for driver; from __future__ import print_function; """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; import sys; import PsiMod; from proc import *; from text import *; from procutil import *; from functional import *; from psifiles import *; # never import wrappers or aliases into this file. # Procedure lookup tables; procedures = {; 'energy': {; 'scf' : run_scf,; 'mcscf' : run_mcscf,; 'dcft' : run_dcft,; 'dfmp2' : run_dfmp2,; 'df-mp2' : run_dfmp2,; 'conv-mp2' : run_mp2,; 'mp3' : run_mp3,; 'mp2.5' : run_mp2_5,; 'mp2' : run_mp2_select,; 'omp2' : run_omp2,; 'scs-omp2' : run_scs_omp2,; 'scsn-omp2' : run_scs_omp2,; 'scs-mi-omp2' : run_scs_omp2,; 'scs-omp2-vdw' : run_scs_omp2,; 'sos-omp2' : run_sos_omp2,; 'sos-pi-omp2' : run_sos_omp2,; 'omp3' : run_omp3,; 'scs-omp3' : run_scs_omp3,; 'scsn-omp3' : run_scs_omp3,; 'scs-mi-omp3' : run_scs_omp3,; 'scs-omp3-vdw' : run_scs_omp3,; 'sos-omp3' : run_sos_omp3,; 'sos-pi-omp3' : run_sos_omp3,; 'ocepa' : run_ocepa,; 'cepa0' : run_cepa0,; 'omp2.5' : run_omp2_5,; 'dftsapt' : run_dftsapt,; 'infsapt' : run_infsapt,; 'sapt0' : run_sapt,; 'sapt2' : run_sapt,; 'sapt2+' : run_sapt,; 'sapt2+(3)' : run_sapt,; 'sapt2+3' : run_sapt,; 'sapt2+(ccd)' : run_sapt,; 'sapt2+(3)(ccd)': run_sapt,; 'sapt2+3(ccd)' : run_sapt,; 'sapt0-ct' : run_sapt_ct,; 'sapt2-ct' : run_sapt_ct,; 'sapt2+-ct' : run_sapt_ct,; 'sapt2+(3)-ct' : run_sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : ru",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:2035,Integrability,interface,interface,2035,"5' : run_omp2_5,; 'dftsapt' : run_dftsapt,; 'infsapt' : run_infsapt,; 'sapt0' : run_sapt,; 'sapt2' : run_sapt,; 'sapt2+' : run_sapt,; 'sapt2+(3)' : run_sapt,; 'sapt2+3' : run_sapt,; 'sapt2+(ccd)' : run_sapt,; 'sapt2+(3)(ccd)': run_sapt,; 'sapt2+3(ccd)' : run_sapt,; 'sapt0-ct' : run_sapt_ct,; 'sapt2-ct' : run_sapt_ct,; 'sapt2+-ct' : run_sapt_ct,; 'sapt2+(3)-ct' : run_sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : ru",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:4890,Integrability,rout,routines,4890," : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:7199,Integrability,depend,dependent,7199,----------------------------------------------------------------------------+; .. comment | mp2-drpa | random phase approximation? |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | cphf | coupled-perturbed Hartree-Fock? |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | cpks | coupled-perturbed Kohn-Sham? |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | cis | CI singles (CIS) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | tda | Tamm-Dankoff approximation (TDA) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | tdhf | time-dependent HF (TDHF) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | tddft | time-dependent DFT (TDDFT) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+. .. _`table:energy_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+------------------------------------------------------------------------------,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:7376,Integrability,depend,dependent,7376,---------------------------------------------------------------------------------+; .. comment | cphf | coupled-perturbed Hartree-Fock? |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | cpks | coupled-perturbed Kohn-Sham? |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | cis | CI singles (CIS) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | tda | Tamm-Dankoff approximation (TDA) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | tdhf | time-dependent HF (TDHF) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | tddft | time-dependent DFT (TDDFT) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+. .. _`table:energy_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mcscf | multiconfigurational self consistent field (SCF) |; +-------------------------+----------------------------------------------------------------------------,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:29331,Integrability,depend,dependent,29331,"n from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp4'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> molecule H2 {\\n0 1\\nH\\nH 1 0.74\\n}; >>> energy('scf'); >>> H2.set_multiplicity(3); >>> energy('detci', bypass_scf=True). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore();",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33010,Integrability,depend,dependent,33010,"quested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient info",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:34756,Integrability,depend,dependent,34756,"ergy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructi",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35820,Integrability,wrap,wrapper,35820,"ndent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:37450,Integrability,wrap,wrapper,37450,"t files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration, the OPT-master.in file is overwritten so return here\n""""""; instructionsM += """"""# for new instructions. With the use of the psi4 -a flag, OPT-master.out is not\n""""""; instructionsM += """"""# overwritten and so maintains a history of the job. To use the (binary) optimizer\n""""""; instructionsM += """"""# data file to accelerate convergence, the OPT-master jobs must run on the same computer.\n\n"""""". fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write(format_molecule_for_input(molecule)); fmaster.write(format_options_for_input()); format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_m",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:38966,Integrability,wrap,wrapper,38966,"\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:43722,Integrability,depend,dependent,43722,"`` || etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:51468,Integrability,depend,dependent,51468,"ation; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully ""+\; ""making sure all symmetry-dependent information in ""+\; ""the input, such as DOCC, is correct.""); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; if (n > 1) and (not isSowReap):; PsiMod.set_local_option('SCF', 'GUESS', 'READ'). # Compute the gradient; thisenergy = gradient(name, **kwargs). # S/R: Quit after getting new displacements or if forming gradient fails; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; return 0.0; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (thisenergy == 0.0):; return 0.0. # S/R: Move opt data file from last pass into namespace for this pass; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (n != 0):; PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); if 'opt_datafile' in kwargs:; restartfile = kwargs.pop('opt_datafile'); if(PsiMod.me() == 0):; shutil.copy(restartfile, ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:53804,Integrability,wrap,wrapper,53804,"ps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); elif ((full_hess_every == -1) and (PsiMod.get_global_option('CART_HESS_READ')) and (n == 1)):; pass; # Do nothing; user said to read existing hessian once; else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print('Optimizer: Optimization complete!'); PsiMod.print_out('\n Final optimized geometry and variables:\n'); PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy; PsiMod.print_out('\n Structure for next step:\n'); PsiMod.get_active_molecule().print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'). optstash.restore(); return 0.0. ## Aliases ##; opt = optimize. [docs]def parse_arbitrary_order(name):; r""""""Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. """"""; namelower = name.lower(). # matches 'mrccsdt(q)'; if namelower.startswith('mrcc'):; # grabs 'sdt(q)'; ccfullname = namelower[4:]. # A negative order indicates perturbative method; methods = {; 'sd' : { 'method' : 1, 'order' : 2,",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61625,Integrability,depend,dependent,61625,"unc' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:64884,Integrability,depend,dependent,64884,"stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:66133,Integrability,depend,dependent,66133,"tion('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpret_coordentry(False); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; E = func(lowername, **kwargs). # Save the energy; energies.append(E). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). # Obtain the gradient. This function stores the gradient in the wavefunction.; PsiMod.fd_freq_0(energies, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:3798,Modifiability,variab,variables,3798,"f' : run_scf,; 'rscf' : run_scf,; 'uscf' : run_scf,; 'roscf' : run_scf,; 'qcisd' : run_fnocc,; 'qcisd(t)' : run_fnocc,; 'mp4(sdq)' : run_fnocc,; 'fno-ccsd' : run_fnocc,; 'fno-ccsd(t)' : run_fnocc,; 'fno-qcisd' : run_fnocc,; 'fno-qcisd(t)' : run_fnocc,; 'fno-mp3' : run_fnocc,; 'fno-mp4(sdq)' : run_fnocc,; 'fno-mp4' : run_fnocc,; 'fnocc-mp' : run_fnocc,; 'df-ccsd' : run_fnodfcc,; 'df-ccsd(t)' : run_fnodfcc,; 'fno-df-ccsd' : run_fnodfcc,; 'fno-df-ccsd(t)': run_fnodfcc,; 'fno-cepa(0)' : run_cepa,; 'fno-cepa(1)' : run_cepa,; 'fno-cepa(3)' : run_cepa,; 'fno-acpf' : run_cepa,; 'fno-aqcc' : run_cepa,; 'fno-sdci' : run_cepa,; 'fno-dci' : run_cepa,; 'cepa(0)' : run_cepa,; 'cepa(1)' : run_cepa,; 'cepa(3)' : run_cepa,; 'acpf' : run_cepa,; 'aqcc' : run_cepa,; 'sdci' : run_cepa,; 'dci' : run_cepa,; # Upon adding a method to this list, add it to the docstring in energy() below; # If you must add an alias to this list (e.g., dfmp2/df-mp2), please search the; # whole driver to find uses of name in return values and psi variables and; # extend the logic to encompass the new alias.; },; 'gradient' : {; 'scf' : run_scf_gradient,; 'ccsd' : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Up",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:3815,Modifiability,extend,extend,3815,"f' : run_scf,; 'rscf' : run_scf,; 'uscf' : run_scf,; 'roscf' : run_scf,; 'qcisd' : run_fnocc,; 'qcisd(t)' : run_fnocc,; 'mp4(sdq)' : run_fnocc,; 'fno-ccsd' : run_fnocc,; 'fno-ccsd(t)' : run_fnocc,; 'fno-qcisd' : run_fnocc,; 'fno-qcisd(t)' : run_fnocc,; 'fno-mp3' : run_fnocc,; 'fno-mp4(sdq)' : run_fnocc,; 'fno-mp4' : run_fnocc,; 'fnocc-mp' : run_fnocc,; 'df-ccsd' : run_fnodfcc,; 'df-ccsd(t)' : run_fnodfcc,; 'fno-df-ccsd' : run_fnodfcc,; 'fno-df-ccsd(t)': run_fnodfcc,; 'fno-cepa(0)' : run_cepa,; 'fno-cepa(1)' : run_cepa,; 'fno-cepa(3)' : run_cepa,; 'fno-acpf' : run_cepa,; 'fno-aqcc' : run_cepa,; 'fno-sdci' : run_cepa,; 'fno-dci' : run_cepa,; 'cepa(0)' : run_cepa,; 'cepa(1)' : run_cepa,; 'cepa(3)' : run_cepa,; 'acpf' : run_cepa,; 'aqcc' : run_cepa,; 'sdci' : run_cepa,; 'dci' : run_cepa,; # Upon adding a method to this list, add it to the docstring in energy() below; # If you must add an alias to this list (e.g., dfmp2/df-mp2), please search the; # whole driver to find uses of name in return values and psi variables and; # extend the logic to encompass the new alias.; },; 'gradient' : {; 'scf' : run_scf_gradient,; 'ccsd' : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Up",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:5379,Modifiability,variab,variables,5379," a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. comment In this table immediately below, place methods that should only be called by; .. comment developers at present. This table won't show up in the manual.; .. comment; .. comment .. _`table:energy_devel`:; .. comment; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | name | calls method |; .. comment +=========================+=======================================================================================+; .. comment | mp2c | coupled MP2 (MP2C) |; .. comment +-------------------------+---------------------------------------------------------------------------------------+; .. comment | mp2-drpa | random phase approximation? |; .. comment +-------------------------+-----------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:14207,Modifiability,config,configuration,14207,") | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fno-df-ccsd(t) | CCSD(T) with density fitting and frozen natural orbitals :ref:`[manual] <sec:fnocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | bccd(t) | BCCD with perturbative triples :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cc3 | approximate CC singles, doubles, and triples (CC3) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccenergy | **expert** full control over ccenergy module |; +-------------------------+---------------------------------------------------------------------------------------+; | cisd | configuration interaction (CI) singles and doubles (CISD) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdt | CI singles, doubles, and triples (CISDT) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdtq | CI singles, doubles, triples, and quadruples (CISDTQ) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ci\ *n* | *n*\ th-order CI :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fci | full configuration interaction (FCI) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | detci | **expert** full control ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:15003,Modifiability,config,configuration,15003,"-------+; | ccenergy | **expert** full control over ccenergy module |; +-------------------------+---------------------------------------------------------------------------------------+; | cisd | configuration interaction (CI) singles and doubles (CISD) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdt | CI singles, doubles, and triples (CISDT) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cisdtq | CI singles, doubles, triples, and quadruples (CISDTQ) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ci\ *n* | *n*\ th-order CI :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fci | full configuration interaction (FCI) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | detci | **expert** full control over detci module |; +-------------------------+---------------------------------------------------------------------------------------+; | gaussian-2 (g2) | gaussian-2 composite method :ref:`[manual] <sec:fnogn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt0 | 0th-order symmetry adapted perturbation theory (SAPT) :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2 | 2nd-order SAPT, traditional definition :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+ | SAPT including all 2nd-order terms :ref:`[ma",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:15577,Modifiability,adapt,adapted,15577,"----------------------+; | cisdtq | CI singles, doubles, triples, and quadruples (CISDTQ) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ci\ *n* | *n*\ th-order CI :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | fci | full configuration interaction (FCI) :ref:`[manual] <sec:ci>` |; +-------------------------+---------------------------------------------------------------------------------------+; | detci | **expert** full control over detci module |; +-------------------------+---------------------------------------------------------------------------------------+; | gaussian-2 (g2) | gaussian-2 composite method :ref:`[manual] <sec:fnogn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt0 | 0th-order symmetry adapted perturbation theory (SAPT) :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2 | 2nd-order SAPT, traditional definition :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+ | SAPT including all 2nd-order terms :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(3) | SAPT including perturbative triples :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+3 | SAPT including all 3rd-order terms :ref:`[manual] <sec:sapt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | sapt2+(ccd) | SAPT2+ with CC-based dispe",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45166,Modifiability,variab,variables,45166," 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-Plesset perturbation theory (MP2) :ref:`[manual] <",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:53350,Modifiability,variab,variables,53350,"datafile'); if(PsiMod.me() == 0):; shutil.copy(restartfile, get_psifile(1)). # compute Hessian as requested; frequency wipes out gradient so stash it; if ((full_hess_every > -1) and (n == 1)) or (steps_since_last_hessian + 1 == full_hess_every):; G = PsiMod.get_gradient(); PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); frequencies(name, **kwargs); steps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); elif ((full_hess_every == -1) and (PsiMod.get_global_option('CART_HESS_READ')) and (n == 1)):; pass; # Do nothing; user said to read existing hessian once; else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print('Optimizer: Optimization complete!'); PsiMod.print_out('\n Final optimized geometry and variables:\n'); PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy; PsiMod.print_out('\n Structure for next step:\n'); PsiMod.get_active_molecule().print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'). optstash.restore(); return 0.0. ## Al",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:367,Performance,optimiz,optimizations,367,"﻿. driver — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for driver; from __future__ import print_function; """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; import sys; import PsiMod; from proc import *; from text import *; from procutil import *; from functional import *; from psifiles import *; # never import wrappers or aliases into this file. # Procedure lookup tables; procedures = {; 'energy': {; 'scf' : run_scf,; 'mcscf' : run_mcscf,; 'dcft' : run_dcft,; 'dfmp2' : run_dfmp2,; 'df-mp2' : run_dfmp2,; 'conv-mp2' : run_mp2,; 'mp3' : run_mp3,; 'mp2.5' : run_mp2_5,; 'mp2' : run_mp2_select,; 'omp2' : run_omp2,; 'scs-omp2' : run_scs_omp2,; 'scsn-omp2' : run_scs_omp2,; 'scs-mi-omp2' : run_scs_omp2,; 'scs-omp2-vdw' : run_scs_omp2,; 'sos-omp2' : run_sos_omp2,; 'sos-pi-omp2' : run_sos_omp2,; 'omp3' : run_omp3,; 'scs-omp3' : run_scs_omp3,; 'scsn-omp3' : run_scs_omp3,; 'scs-mi-omp3' : run_scs_omp3,; 'scs-omp3-vdw' : run_scs_omp3,; 'sos-omp3' : run_sos_omp3,; 'sos-pi-omp3' : run_sos_omp3,; 'ocepa' : run_ocepa,; 'cepa0' : run_cepa0,; 'omp2.5' : run_omp2_5,; 'dftsapt' : run_dftsapt,; 'infsapt' : run_infsapt,; 'sapt0' : run_sapt,; 'sapt2' : run_sapt,; 'sapt2+' : run_sapt,; 'sapt2+(3)' : run_sapt,; 'sapt2+3' : run_sapt,; 'sapt2+(ccd)' : run_sapt,; 'sapt2+(3)(ccd)': run_sapt,; 'sapt2+3(ccd)' : run_sapt,; 'sapt0-ct' : run_sapt_ct,; 'sapt2-ct' : run_sapt_ct,; 'sapt2+-ct' : run_sapt_ct,; 'sapt2+(3)-ct' : run_sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : ru",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:4432,Performance,optimiz,optimize,4432,"epa,; # Upon adding a method to this list, add it to the docstring in energy() below; # If you must add an alias to this list (e.g., dfmp2/df-mp2), please search the; # whole driver to find uses of name in return values and psi variables and; # extend the logic to encompass the new alias.; },; 'gradient' : {; 'scf' : run_scf_gradient,; 'ccsd' : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Upon adding a method to this list, add it to the docstring in property() below; }}. # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: (*float*) Total electronic energy in Hartrees. SAPT returns interaction energy. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCO",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:10202,Performance,optimiz,optimized,10202,-----------------------------------------------------------------------------+; | mp3 | 3rd-order Moller-Plesset perturbation theory (MP3) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2.5 | average of MP2 and MP3 :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp4(sdq) | 4th-order MP perturbation theory (MP4) less triples :ref:`[manual] <sec:fnompn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp4 | full MP4 :ref:`[manual] <sec:fnompn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp\ *n* | *n*\ th-order Moller--Plesset (MP) perturbation theory :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | zapt\ *n* | *n*\ th-order z-averaged perturbation theory (ZAPT) :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+-,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:10411,Performance,optimiz,optimized,10411,-----------------------------------------------------------------------------+; | mp3 | 3rd-order Moller-Plesset perturbation theory (MP3) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2.5 | average of MP2 and MP3 :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp4(sdq) | 4th-order MP perturbation theory (MP4) less triples :ref:`[manual] <sec:fnompn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp4 | full MP4 :ref:`[manual] <sec:fnompn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp\ *n* | *n*\ th-order Moller--Plesset (MP) perturbation theory :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | zapt\ *n* | *n*\ th-order z-averaged perturbation theory (ZAPT) :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+-,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:10621,Performance,optimiz,optimized,10621,"<sec:fnompn>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp\ *n* | *n*\ th-order Moller--Plesset (MP) perturbation theory :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | zapt\ *n* | *n*\ th-order z-averaged perturbation theory (ZAPT) :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa0 | coupled electron pair approximation, equiv. linear. CCD :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa(0) | coupled electron pair approximation variant 0 :ref:`[manual] <sec:fnocepa>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa(1) | coupled electron pair approximation variant 1 :ref:`[manual] <sec:fnocepa>` |; +-------------------------+---------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:10801,Performance,optimiz,optimized,10801,"ec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | zapt\ *n* | *n*\ th-order z-averaged perturbation theory (ZAPT) :ref:`[manual] <sec:arbpt>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa0 | coupled electron pair approximation, equiv. linear. CCD :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa(0) | coupled electron pair approximation variant 0 :ref:`[manual] <sec:fnocepa>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa(1) | coupled electron pair approximation variant 1 :ref:`[manual] <sec:fnocepa>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa(3) | coupled electron pair approximation variant 3 :ref:`[manual] <sec:fnocepa>` |; +-------------------------+---------------------------------------------------------------------------------------+; | acpf |",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:27125,Performance,perform,performed,27125,"erative quintuples (all but the most expensive terms) |; +-------------------------+---------------------------------------------------------------------------------------+; | mrccsdtqph-3 | CC through quintuples with iterative sextuples (all but the most expensive terms) |; +-------------------------+---------------------------------------------------------------------------------------+. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. .. comment :type cast_up: :ref:`boolean <op_py_boolean>` or string; .. comment :param cast_up: ``'on'`` || |dl| ``'off'`` |dr| || ``'3-21g'`` || ``'cc-pVDZ'`` || etc. .. comment Indicates whether, to accelerate convergence for the scf portion of; .. comment the *name* calculation, a preliminary scf should be performed with a; .. comment small basis set (3-21G if a basis name is not supplied as keyword; .. comment value) followed by projection into the full target basis. .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__basis_guess| instead. .. comment :type cast_up_df: :ref:`boolean <op_py_boolean>` or string; .. comment :param cast_up_df: ``'on'`` || |dl| ``'off'`` |dr| || ``'cc-pVDZ-RI'`` || ``'aug-cc-pVDZ-JKFIT'`` || etc. .. comment Indicates whether, when *cast_up* is active, to run the preliminary; .. comment scf in density-fitted mode or what fitting basis to employ (when; .. comment available for all elements, cc-pVDZ-RI is the default). .. comment .. deprecated:: Sept-2012; .. comment Use option |scf__df_basis_guess| instead. :type bypass_scf: :ref:`boolean <op_py_boolean>`; :param bypass_scf: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether, for *name* values built atop of scf calculations,; the scf step is skipped. Suitable when special step",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:30460,Performance,optimiz,optimize,30460,"ocedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; rai",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31524,Performance,optimiz,optimize,31524,"o optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:34449,Performance,perform,perform,34449," == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; i",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35035,Performance,optimiz,optimization,35035,"dient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35421,Performance,optimiz,optimize,35421,". else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35807,Performance,optimiz,optimization,35807,"ndent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35966,Performance,optimiz,optimization,35966," to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:36918,Performance,optimiz,optimization,36918," Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration, the OPT-master.in file is overwritten so return here\n""""""; instructionsM += """"""# for new instructions. With the use of the psi4 -a flag, OPT-master.out is not\n""""""; instructionsM += """"""# overwritten and so maintains a history of the job. To use the (binary) optimizer\n""""""; instructionsM += """"""# data file to accelerate convergence, the OPT-master jobs must run on the same computer.\n\n"""""". fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write(format_molecule_for_input(molecule)); fmaster.write(format_options_for_input()); format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""Ps",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:37200,Performance,optimiz,optimizer,37200,"ter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration, the OPT-master.in file is overwritten so return here\n""""""; instructionsM += """"""# for new instructions. With the use of the psi4 -a flag, OPT-master.out is not\n""""""; instructionsM += """"""# overwritten and so maintains a history of the job. To use the (binary) optimizer\n""""""; instructionsM += """"""# data file to accelerate convergence, the OPT-master jobs must run on the same computer.\n\n"""""". fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write(format_molecule_for_input(molecule)); fmaster.write(format_options_for_input()); format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print inf",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:37654,Performance,optimiz,optimize,37654,"tep in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration, the OPT-master.in file is overwritten so return here\n""""""; instructionsM += """"""# for new instructions. With the use of the psi4 -a flag, OPT-master.out is not\n""""""; instructionsM += """"""# overwritten and so maintains a history of the job. To use the (binary) optimizer\n""""""; instructionsM += """"""# data file to accelerate convergence, the OPT-master jobs must run on the same computer.\n\n"""""". fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write(format_molecule_for_input(molecule)); fmaster.write(format_options_for_input()); format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energie",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:44988,Performance,optimiz,optimize,44988,"== run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+----------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45031,Performance,perform,perform,45031,"== run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+----------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45050,Performance,optimiz,optimization,45050,"== run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+----------------",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45128,Performance,optimiz,optimized,45128,"ENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-P",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:47063,Performance,optimiz,optimized,47063,----------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-Plesset perturbation theory (MP2) :ref:`[manual] <sec:dfmp2>` |; +-------------------------+---------------------------------------------------------------------------------------+; | df-mp2 | MP2 with density fitting :ref:`[manual] <sec:dfmp2>` |; +-------------------------+---------------------------------------------------------------------------------------+; | conv-mp2 | conventional MP2 (non-density-fitting) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2.5 | MP2.5 :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp3 | third-order MP perturbation theory :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa0 | coupled electron pair approximation(0) :ref:`[manual] <sec:convocc>` |; +-------------------------+-------------------,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:47274,Performance,optimiz,optimized,47274,-----------------------+; | df-mp2 | MP2 with density fitting :ref:`[manual] <sec:dfmp2>` |; +-------------------------+---------------------------------------------------------------------------------------+; | conv-mp2 | conventional MP2 (non-density-fitting) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2.5 | MP2.5 :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp3 | third-order MP perturbation theory :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa0 | coupled electron pair approximation(0) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with per,MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:47453,Performance,optimiz,optimized,47453,"--------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa0 | coupled electron pair approximation(0) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Ind",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:47662,Performance,optimiz,optimized,47662,"--------------------------------------------------------------------------------+; | omp2 | orbital-optimized second-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | omp3 | orbital-optimized third-order MP perturbation theory :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ocepa | orbital-optimized coupled electron pair approximation :ref:`[manual] <sec:occ>` |; +-------------------------+---------------------------------------------------------------------------------------+; | cepa0 | coupled electron pair approximation(0) :ref:`[manual] <sec:convocc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Ind",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49232,Performance,perform,performed,49232,"-----------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49338,Performance,perform,performs,49338,"c>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49643,Performance,optimiz,optimization,49643,"Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49719,Performance,optimiz,optimization,49719,"Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50119,Performance,optimiz,optimization,50119,"function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sy",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50141,Performance,perform,performed,50141,"function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sy",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50325,Performance,optimiz,optimization,50325,"'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Except",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50343,Performance,optimiz,optimize,50343,"'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Except",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50392,Performance,optimiz,optimization,50392,"; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""th",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50462,Performance,optimiz,optimization,50462,"alls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully ""+\; ""making sure all symmet",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50480,Performance,optimiz,optimize,50480,"alls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully ""+\; ""making sure all symmet",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:53327,Performance,optimiz,optimized,53327,"datafile'); if(PsiMod.me() == 0):; shutil.copy(restartfile, get_psifile(1)). # compute Hessian as requested; frequency wipes out gradient so stash it; if ((full_hess_every > -1) and (n == 1)) or (steps_since_last_hessian + 1 == full_hess_every):; G = PsiMod.get_gradient(); PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); frequencies(name, **kwargs); steps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); elif ((full_hess_every == -1) and (PsiMod.get_global_option('CART_HESS_READ')) and (n == 1)):; pass; # Do nothing; user said to read existing hessian once; else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print('Optimizer: Optimization complete!'); PsiMod.print_out('\n Final optimized geometry and variables:\n'); PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy; PsiMod.print_out('\n Structure for next step:\n'); PsiMod.get_active_molecule().print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'). optstash.restore(); return 0.0. ## Al",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:54356,Performance,optimiz,optimize,54356," variables:\n'); PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy; PsiMod.print_out('\n Structure for next step:\n'); PsiMod.get_active_molecule().print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'). optstash.restore(); return 0.0. ## Aliases ##; opt = optimize. [docs]def parse_arbitrary_order(name):; r""""""Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. """"""; namelower = name.lower(). # matches 'mrccsdt(q)'; if namelower.startswith('mrcc'):; # grabs 'sdt(q)'; ccfullname = namelower[4:]. # A negative order indicates perturbative method; methods = {; 'sd' : { 'method' : 1, 'order' : 2, 'fullname' : 'CCSD' },; 'sdt' : { 'method' : 1, 'order' : 3, 'fullname' : 'CCSDT' },; 'sdtq' : { 'method' : 1, 'order' : 4, 'fullname' : 'CCSDTQ' },; 'sdtqp' : { 'method' : 1, 'order' : 5, 'fullname' : 'CCSDTQP' },; 'sdtqph' : { 'method' : 1, 'order' : 6, 'fullname' : 'CCSDTQPH' },; 'sd(t)' : { 'method' : 3, 'order' : -3, 'fullname' : 'CCSD(T)' },; 'sdt(q)' : { 'method' : 3, 'order' : -4, 'fullname' : 'CCSDT(Q)' },; 'sdtq(p)' : { 'method' : 3, 'order' : -5, 'fullname' : 'CCSDTQ(P)' },; 'sdtqp(h)' : { 'method' : 3, 'order' : -6, 'fullname' : 'CCSDTQP(H)' },; 'sd(t)_l' : ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:58693,Performance,perform,performed,58693,"; return namelower, None; else:; return namelower, None. [docs]def frequency(name, **kwargs):; r""""""Function to compute harmonic vibrational frequencies. :aliases: frequencies(), freq(). :returns: (*float*) Total electronic energy in Hartrees. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Make frequency look analogous to gradient, especially in matching derivative levels. Make dertype actually a dertype type. .. _`table:freq_gen`:. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] <example description>; >>> <example python command>. >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> frequencies('scf', dertype=1, irrep=4). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 2. optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Defaul",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:64755,Performance,perform,perform,64755,"' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_optio",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:31802,Security,validat,validation,31802,"order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:35759,Security,access,accessed,35759,"ndent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49280,Security,access,accesses,49280,"c>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:60821,Security,validat,validation,60821,"gradient; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; freq_dertype = kwargs['dertype']. if der0th.match(str(freq_dertype)):; dertype = 0; func = energy; elif der1st.match(str(freq_dertype)):; dertype = 1; func = gradient; elif der2nd.match(str(freq_dertype)):; dertype = 2; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function frequency.' % (freq_dertype)). # 3. if the user provides a custom function THAT takes precedence; if ('freq_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['e",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:68054,Security,validat,validated,68054,"d to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # The last item in the list is the reference energy, return it; optstash.restore(). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # call thermo module; PsiMod.thermo(). optstash.restore(); return energies[-1]. ## Aliases ##; frequencies = frequency; freq = frequency. # hessian to be changed later to compute force constants; [docs]def hessian(name, **kwargs):; r""""""Function to compute force constants. Presently identical to frequency().""""""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); frequencies(name, **kwargs). [docs]def molden(filename):; """"""Function to write wavefunction information in molden; format to *filename*. """"""; m = PsiMod.MoldenWriter(PsiMod.wavefunction()); m.write(filename). [docs]def parse_cotton_irreps(irrep):; r""""""Function to return validated Cotton ordering index from string or integer; irreducible representation *irrep*. """"""; cotton = {; 'c1': {; 'a': 1,; '1': 1; },; 'ci': {; 'ag': 1,; 'au': 2,; '1': 1,; '2': 2; },; 'c2': {; 'a': 1,; 'b': 2,; '1': 1,; '2': 2; },; 'cs': {; 'ap': 1,; 'app': 2,; '1': 1,; '2': 2; },; 'd2': {; 'a': 1,; 'b1': 2,; 'b2': 3,; 'b3': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2v': {; 'a1': 1,; 'a2': 2,; 'b1': 3,; 'b2': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4; },; 'c2h': {; 'ag': 1,; 'bg': 2,; 'au': 3,; 'bu': 4,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; },; 'd2h': {; 'ag': 1,; 'b1g': 2,; 'b2g': 3,; 'b3g': 4,; 'au': 5,; 'b1u': 6,; 'b2u': 7,; 'b3u': 8,; '1': 1,; '2': 2,; '3': 3,; '4': 4,; '5': 5,; '6': 6,; '7': 7,; '8': 8; }; }. point_group = PsiMod.get_active_molecule().schoenflies_symbol().lower(); irreducible_representation = str(irrep).lower(). try:; return cotton[point_group][irreducible_representation]; except KeyError:; raise ValidationError(""Irrep \'%s\' not valid for point group \'%s\'."" % (str(irrep),",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:3826,Testability,log,logic,3826,"f' : run_scf,; 'rscf' : run_scf,; 'uscf' : run_scf,; 'roscf' : run_scf,; 'qcisd' : run_fnocc,; 'qcisd(t)' : run_fnocc,; 'mp4(sdq)' : run_fnocc,; 'fno-ccsd' : run_fnocc,; 'fno-ccsd(t)' : run_fnocc,; 'fno-qcisd' : run_fnocc,; 'fno-qcisd(t)' : run_fnocc,; 'fno-mp3' : run_fnocc,; 'fno-mp4(sdq)' : run_fnocc,; 'fno-mp4' : run_fnocc,; 'fnocc-mp' : run_fnocc,; 'df-ccsd' : run_fnodfcc,; 'df-ccsd(t)' : run_fnodfcc,; 'fno-df-ccsd' : run_fnodfcc,; 'fno-df-ccsd(t)': run_fnodfcc,; 'fno-cepa(0)' : run_cepa,; 'fno-cepa(1)' : run_cepa,; 'fno-cepa(3)' : run_cepa,; 'fno-acpf' : run_cepa,; 'fno-aqcc' : run_cepa,; 'fno-sdci' : run_cepa,; 'fno-dci' : run_cepa,; 'cepa(0)' : run_cepa,; 'cepa(1)' : run_cepa,; 'cepa(3)' : run_cepa,; 'acpf' : run_cepa,; 'aqcc' : run_cepa,; 'sdci' : run_cepa,; 'dci' : run_cepa,; # Upon adding a method to this list, add it to the docstring in energy() below; # If you must add an alias to this list (e.g., dfmp2/df-mp2), please search the; # whole driver to find uses of name in return values and psi variables and; # extend the logic to encompass the new alias.; },; 'gradient' : {; 'scf' : run_scf_gradient,; 'ccsd' : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Up",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:33046,Testability,test,test,33046,"quested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode of operation- whether finite difference opt run in one job or files farmed out; opt_mode = 'continuous'; if ('mode' in kwargs) and (dertype == 0):; opt_mode = kwargs['mode']. if (opt_mode.lower() == 'continuous'):; pass; elif (opt_mode.lower() == 'sow'):; pass; elif (opt_mode.lower() == 'reap'):; if('linkage' in kwargs):; opt_linkage = kwargs['linkage']; else:; raise ValidationError('Optimize execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient info",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:43758,Testability,test,test,43758,"`` || etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:61661,Testability,test,test,61661,"unc' in kwargs):; if ('func' in kwargs):; kwargs['freq_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['freq_func']. # Summary validation; if (dertype == 2) and (lowername in procedures['hessian']):; pass; elif (dertype == 1) and (func is gradient) and (lowername in procedures['gradient']):; pass; elif (dertype == 1) and not(func is gradient):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/driver.html:64920,Testability,test,test,64920,"stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = PsiMod.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; PsiMod.clean(). PsiMod.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; PsiMod.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; PsiMod.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; PsiMod.get_active_molecule().reinterpret_coordentry(True). # call thermo module; PsiMod.thermo(). optstash.restore(); # TODO: add return statement. else: # Assume energy points; # If not, perform finite difference of energies; info = 'Performing finite difference calculations by energies'; print(info). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 11); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); ",MatchSource.WIKI,psi4manual/4.0b4/_modules/driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:10307,Availability,down,down,10307,"ilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1; ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Nuke Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); E[Ns[k]] = energies[k]. PsiMod.print_out('\n'); PsiMod.print_out('\t%6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); for line in stats: ; PsiMod.print_out(line). PsiMod.print_out('\n\t""You shoot a nuke down a bug hole, you got a lot of dead bugs""\n'); PsiMod.print_out('\t\t\t-Starship Troopers\n'). # Drop the files out; fh = open(traverse_filename, 'w'); fh.write('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; fh.write('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); fh.close(). fh = open(stats_filename, 'w'); fh.write('\t%6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); for line in stats: ; fh.write(line); fh.close(). return E . [docs]def ip_fitting(mol, omega_l, omega_r, **kwargs):; kwargs = kwargs_lower(kwargs). # By default, zero the omega to 3 digits; omega_tol = 1.0E-3;; if (kwargs.has_key('omega_tolerance')): ; omega_tol = kwargs['omega_tolerance']. # By default, do up to twenty iterations; maxiter = 20;; if (kwargs.has_key('maxiter')): ; maxiter = kwargs['maxiter']. # By default, do not read previous 180 orbitals file; read = False;; read180 = ''; if (kwargs.has_key('read')):;",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:18192,Deployability,update,updated,18192," energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IP = E1 - E0;; kIP = -E_HOMO;; delta = IP - kIP;. if (kIP > IP):; omega_r = omega; E0r = E0; E1r = E1; IPr = IP; kIPr = kIP; delta_r = delta; repeat_r = 0;; repeat_l = repeat_l + 1;; else:; omega_l = omega; E0l = E0; E1l = E1; IPl = IP; kIPl = kIP; delta_l = delta; repeat_l = 0;; repeat_r = repeat_r + 1;; ; omegas.append(omega); types.append('Regula-Falsi'); E0s.append(E0); E1s.append(E1); IPs.append(IP); kIPs.append(kIP); ; # Termination; if (abs(omega_l - omega_r) < omega_tol or step > maxiter):; converged = True;; break. PsiMod.IO.set_default_namespace(""""). PsiMod.print_out('\n\t==> IP Fitting Results <==\n\n'). PsiMod.print_out('\t => Occupation Determination <= \n\n'); PsiMod.print_out('\t %6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); PsiMod.print_out('\t Neutral: %6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge0, mult0, HOMO)); PsiMod.print_out('\t Cation: %6d %6d %6d %6d %6d\n\n' %(N-1, Na1, Nb1, charge1, mult1)). PsiMod.print_out('\t => Regula Falsi Iterations <=\n\n'); PsiMod.print_out('\t%3s %11s %14s %14s %14s %s\n' % ('N','Omega','IP','kIP','Delta','Type')); for k in range(len(omegas)):; PsiMod.print_out('\t%3d %11.3E %14.6E %14.6E %14.6E %s\n' % (k+1,omegas[k],IPs[k],kIPs[k],IPs[k] - kIPs[k], types[k])); if (converged):; PsiMod.print_out('\n\tIP Fitting Converged\n'); PsiMod.print_out('\tFinal omega = %14.6E\n' % ((omega_l + omega_r) / 2)); PsiMod.print_out('\n\t""M,I. does the dying. Fleet just does the flying.""\n'); PsiMod.print_out('\t\t\t-Starship Troopers\n'). else:; PsiMod.print_out('\n\tIP Fitting did not converge!\n'); ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""); PsiMod.set_global_option(""GUESS"", old_guess). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:539,Energy Efficiency,charge,chargep,539,"﻿. frac — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for frac; import PsiMod; import os; import math; from molutil import * ; from driver import * ; from procutil import *; from util import *. # Scan from +1 electron to -1 electron; [docs]def frac_traverse(mol, **kwargs):; kwargs = kwargs_lower(kwargs). # The molecule is required, and should be the neutral species; mol.update_geometry(); activate(mol); charge0 = mol.molecular_charge(); mult0 = mol.multiplicity() . chargep = charge0 + 1; chargem = charge0 - 1; ; # By default, the multiplicity of the cation/anion are mult0 + 1; # These are overridden with the cation_mult and anion_mult kwargs; multp = mult0 + 1; multm = mult0 + 1; if kwargs.has_key('cation_mult'):; multp = kwargs['cation_mult'] ; if kwargs.has_key('anion_mult'):; multm = kwargs['anion_mult'] ; ; # By default, we start the frac procedure on the 25th iteration ; # when not reading a previous guess; frac_start = 25; if kwargs.has_key('frac_start'):; frac_start = kwargs['frac_start']. # By default, we occupy by tenths of electrons; LUMO_occs = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]; HOMO_occs = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]; if kwargs.has_key('HOMO_occs'):; HOMO_occs = kwargs['HOMO_occs'] ; if kwargs.has_key('LUMO_occs'):; LUMO_occs = kwargs['LUMO_occs'] . # By default, HOMO and LUMO are both in alpha; Z = 0;; for A in range(mol.natom()):; Z += mol.Z(A); Z -= charge0; if (Z%2):; HOMO = Z/2+1; else:; HOMO = Z/2; LUMO = HOMO+1; if kwargs.has_key('HOMO'):; HOMO = kwargs['HOMO']; if kwargs.has_key('LUMO'):; LUMO = kwargs['LUMO']. # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, use the neutral orbitals as a guess for the anion; neutral_guess = True; if kwargs.has_key('neutral_guess'):; neutral_guess = kwargs['neutral_guess']. # By default, ",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:562,Energy Efficiency,charge,chargem,562,"﻿. frac — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for frac; import PsiMod; import os; import math; from molutil import * ; from driver import * ; from procutil import *; from util import *. # Scan from +1 electron to -1 electron; [docs]def frac_traverse(mol, **kwargs):; kwargs = kwargs_lower(kwargs). # The molecule is required, and should be the neutral species; mol.update_geometry(); activate(mol); charge0 = mol.molecular_charge(); mult0 = mol.multiplicity() . chargep = charge0 + 1; chargem = charge0 - 1; ; # By default, the multiplicity of the cation/anion are mult0 + 1; # These are overridden with the cation_mult and anion_mult kwargs; multp = mult0 + 1; multm = mult0 + 1; if kwargs.has_key('cation_mult'):; multp = kwargs['cation_mult'] ; if kwargs.has_key('anion_mult'):; multm = kwargs['anion_mult'] ; ; # By default, we start the frac procedure on the 25th iteration ; # when not reading a previous guess; frac_start = 25; if kwargs.has_key('frac_start'):; frac_start = kwargs['frac_start']. # By default, we occupy by tenths of electrons; LUMO_occs = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]; HOMO_occs = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]; if kwargs.has_key('HOMO_occs'):; HOMO_occs = kwargs['HOMO_occs'] ; if kwargs.has_key('LUMO_occs'):; LUMO_occs = kwargs['LUMO_occs'] . # By default, HOMO and LUMO are both in alpha; Z = 0;; for A in range(mol.natom()):; Z += mol.Z(A); Z -= charge0; if (Z%2):; HOMO = Z/2+1; else:; HOMO = Z/2; LUMO = HOMO+1; if kwargs.has_key('HOMO'):; HOMO = kwargs['HOMO']; if kwargs.has_key('LUMO'):; LUMO = kwargs['LUMO']. # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, use the neutral orbitals as a guess for the anion; neutral_guess = True; if kwargs.has_key('neutral_guess'):; neutral_guess = kwargs['neutral_guess']. # By default, ",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:2873,Energy Efficiency,energy,energy,2873," guess for the anion; neutral_guess = True; if kwargs.has_key('neutral_guess'):; neutral_guess = kwargs['neutral_guess']. # By default, burn-in with UHF first, if UKS; hf_guess = False; if PsiMod.get_global_option('REFERENCE') == 'UKS':; hf_guess = True; if kwargs.has_key('hf_guess'):; hf_guess = kwargs['hf_guess']. # By default, re-guess at each N ; continuous_guess = False; if kwargs.has_key('continuous_guess'):; continuous_guess = kwargs['continuous_guess']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; # => Traverse <= #; occs = []; energies = []; potentials = []; convs = []. # => Run the neutral for its orbitals, if requested <= #. old_df_ints_io = PsiMod.get_global_option(""DF_INTS_IO""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). old_guess = PsiMod.get_global_option(""GUESS""); if (neutral_guess):; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the anion first <= #. mol.set_molecular_charge(chargem); mol.set_multiplicity(multm); ; # => Burn the anion in with hf, if requested <= #; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True); PsiMod.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [LUMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(LUMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:3035,Energy Efficiency,charge,chargem,3035,"; hf_guess = False; if PsiMod.get_global_option('REFERENCE') == 'UKS':; hf_guess = True; if kwargs.has_key('hf_guess'):; hf_guess = kwargs['hf_guess']. # By default, re-guess at each N ; continuous_guess = False; if kwargs.has_key('continuous_guess'):; continuous_guess = kwargs['continuous_guess']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; # => Traverse <= #; occs = []; energies = []; potentials = []; convs = []. # => Run the neutral for its orbitals, if requested <= #. old_df_ints_io = PsiMod.get_global_option(""DF_INTS_IO""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). old_guess = PsiMod.get_global_option(""GUESS""); if (neutral_guess):; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the anion first <= #. mol.set_molecular_charge(chargem); mol.set_multiplicity(multm); ; # => Burn the anion in with hf, if requested <= #; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True); PsiMod.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [LUMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(LUMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(LUMO)-1]). occs.append(occ); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FR",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:3188,Energy Efficiency,energy,energy,3188,"]. # By default, re-guess at each N ; continuous_guess = False; if kwargs.has_key('continuous_guess'):; continuous_guess = kwargs['continuous_guess']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; # => Traverse <= #; occs = []; energies = []; potentials = []; convs = []. # => Run the neutral for its orbitals, if requested <= #. old_df_ints_io = PsiMod.get_global_option(""DF_INTS_IO""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). old_guess = PsiMod.get_global_option(""GUESS""); if (neutral_guess):; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the anion first <= #. mol.set_molecular_charge(chargem); mol.set_multiplicity(multm); ; # => Burn the anion in with hf, if requested <= #; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True); PsiMod.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [LUMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(LUMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(LUMO)-1]). occs.append(occ); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"",",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:3610,Energy Efficiency,energy,energy,3610,"equested <= #. old_df_ints_io = PsiMod.get_global_option(""DF_INTS_IO""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). old_guess = PsiMod.get_global_option(""GUESS""); if (neutral_guess):; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the anion first <= #. mol.set_molecular_charge(chargem); mol.set_multiplicity(multm); ; # => Burn the anion in with hf, if requested <= #; if (hf_guess):; PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True); PsiMod.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [LUMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(LUMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(LUMO)-1]). occs.append(occ); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the neutral next <= #. mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0). # Burn the neutral in with hf, if requested <= #. if (not continuous_guess):; PsiMod.set_global_option(""GUESS"", old_guess); if (hf_guess):; PsiMod.set_global_option(""FRAC_START"", 0); PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:4514,Energy Efficiency,energy,energy,4514,"ccs:; ; PsiMod.set_global_option(""FRAC_OCC"", [LUMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(LUMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(LUMO)-1]). occs.append(occ); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the neutral next <= #. mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0). # Burn the neutral in with hf, if requested <= #. if (not continuous_guess):; PsiMod.set_global_option(""GUESS"", old_guess); if (hf_guess):; PsiMod.set_global_option(""FRAC_START"", 0); PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_LOAD"", False). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(HOMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(HOMO)-1]). occs.append(occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). PsiMod.set_global_option(""DF_INT",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:4888,Energy Efficiency,energy,energy,4888,"]). occs.append(occ); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the neutral next <= #. mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0). # Burn the neutral in with hf, if requested <= #. if (not continuous_guess):; PsiMod.set_global_option(""GUESS"", old_guess); if (hf_guess):; PsiMod.set_global_option(""FRAC_START"", 0); PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_LOAD"", False). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(HOMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(HOMO)-1]). occs.append(occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). PsiMod.set_global_option(""DF_INTS_IO"", old_df_ints_io). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Traverse Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(occs)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (occs[k], energies[k], potentials[k], convs[k])); E[occs[k]] = energies[k]. PsiMod",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:7164,Energy Efficiency,charge,charge,7164,"for k in range(len(occs)):; fh.write('\t%11.3E %24.16E %24.16E %11d\n' % (occs[k], energies[k], potentials[k], convs[k])); fh.close(). return E . # Pull all the electrons out, one at a time ; [docs]def frac_nuke(mol, **kwargs):; kwargs = kwargs_lower(kwargs). # The molecule is required, and should be the neutral species; mol.update_geometry(); activate(mol); charge0 = mol.molecular_charge(); mult0 = mol.multiplicity() . # By default, we start the frac procedure on the 25th iteration ; # when not reading a previous guess; frac_start = 25; if kwargs.has_key('frac_start'):; frac_start = kwargs['frac_start']. # By default, we occupy by tenths of electrons; foccs = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]; if kwargs.has_key('foccs'):; foccs = kwargs['foccs'] . # By default, HOMO and LUMO are both in alpha; N = 0;; for A in range(mol.natom()):; N += mol.Z(A); N -= charge0; N = int(N); Nb = int((N - mult0 + 1)/2); Na = int(N - Nb). charge = charge0; mult = mult0; ; # By default, nuke all the electrons; Nmin = 0;; if (kwargs.has_key('nmax')):; Nmin = N - int(kwargs['nmax']). # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; stats_filename = root + '.stats.dat' . # => Traverse <= #; PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; energy('scf'). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na =",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:7835,Energy Efficiency,energy,energy,7835,"By default, we occupy by tenths of electrons; foccs = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]; if kwargs.has_key('foccs'):; foccs = kwargs['foccs'] . # By default, HOMO and LUMO are both in alpha; N = 0;; for A in range(mol.natom()):; N += mol.Z(A); N -= charge0; N = int(N); Nb = int((N - mult0 + 1)/2); Na = int(N - Nb). charge = charge0; mult = mult0; ; # By default, nuke all the electrons; Nmin = 0;; if (kwargs.has_key('nmax')):; Nmin = N - int(kwargs['nmax']). # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; stats_filename = root + '.stats.dat' . # => Traverse <= #; PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; energy('scf'). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); els",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:8169,Energy Efficiency,charge,charge,8169,"(N - Nb). charge = charge0; mult = mult0; ; # By default, nuke all the electrons; Nmin = 0;; if (kwargs.has_key('nmax')):; Nmin = N - int(kwargs['nmax']). # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; stats_filename = root + '.stats.dat' . # => Traverse <= #; PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; energy('scf'). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS""",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:8240,Energy Efficiency,charge,charge,8240," Nmin = 0;; if (kwargs.has_key('nmax')):; Nmin = N - int(kwargs['nmax']). # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; stats_filename = root + '.stats.dat' . # => Traverse <= #; PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; energy('scf'). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.se",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:8249,Energy Efficiency,charge,charge,8249," Nmin = 0;; if (kwargs.has_key('nmax')):; Nmin = N - int(kwargs['nmax']). # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = True; if kwargs.has_key('frac_diis'):; frac_diis = kwargs['frac_diis']. # By default, drop the files to the molecule's name; root = mol.name(); if kwargs.has_key('filename'):; root = kwargs['filename']; traverse_filename = root + '.traverse.dat'; stats_filename = root + '.stats.dat' . # => Traverse <= #; PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; energy('scf'). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.se",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:8628,Energy Efficiency,energy,energy,8628,"me = root + '.stats.dat' . # => Traverse <= #; PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; energy('scf'). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.set_multiplicity(mult). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:9181,Energy Efficiency,charge,charge,9181,", HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.set_multiplicity(mult). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1; ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Nuke Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); E[Ns[k]] = energies[k]. PsiMod.print_out('\n'); PsiMod.print_out('\t%6s %6s %6s %6s %6s %6s\n' %('N', ",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:9219,Energy Efficiency,charge,charge,9219,"- 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1. PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""); PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). # Nuke 'em Rico! ; for Nintegral in range(N,Nmin,-1):. # Nuke the current HOMO; for occ in foccs:. PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.set_multiplicity(mult). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1; ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Nuke Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); E[Ns[k]] = energies[k]. PsiMod.print_out('\n'); PsiMod.print_out('\t%6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOM",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:9586,Energy Efficiency,charge,charge,9586,""", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.set_multiplicity(mult). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1; ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Nuke Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); E[Ns[k]] = energies[k]. PsiMod.print_out('\n'); PsiMod.print_out('\t%6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); for line in stats: ; PsiMod.print_out(line). PsiMod.print_out('\n\t""You shoot a nuke down a bug hole, you got a lot of dead bugs""\n'); PsiMod.print_out('\t\t\t-Starship Troopers\n'). # Drop the files out; fh = open(traverse_filename, 'w'); fh.write('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(N",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:9657,Energy Efficiency,charge,charge,9657,"= 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.set_multiplicity(mult). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1; ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Nuke Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); E[Ns[k]] = energies[k]. PsiMod.print_out('\n'); PsiMod.print_out('\t%6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); for line in stats: ; PsiMod.print_out(line). PsiMod.print_out('\n\t""You shoot a nuke down a bug hole, you got a lot of dead bugs""\n'); PsiMod.print_out('\t\t\t-Starship Troopers\n'). # Drop the files out; fh = open(traverse_filename, 'w'); fh.write('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; fh.write('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], con",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:9666,Energy Efficiency,charge,charge,9666,"= 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (HOMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[HOMO-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-HOMO-1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""GUESS"", ""READ""). # Set the next charge/mult; mol.set_molecular_charge(charge) ; mol.set_multiplicity(mult). # Determine HOMO; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. stats.append('\t%6d %6d %6d %6d %6d %6d\n' %(Nintegral-1, Na, Nb, charge, mult, HOMO)). if (HOMO > 0):; Na = Na - 1; else:; Nb = Nb - 1; charge = charge + 1; mult = Na - Nb + 1; ; PsiMod.set_global_option(""DF_INTS_IO"", ""NONE""). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Nuke Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], convs[k])); E[Ns[k]] = energies[k]. PsiMod.print_out('\n'); PsiMod.print_out('\t%6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); for line in stats: ; PsiMod.print_out(line). PsiMod.print_out('\n\t""You shoot a nuke down a bug hole, you got a lot of dead bugs""\n'); PsiMod.print_out('\t\t\t-Starship Troopers\n'). # Drop the files out; fh = open(traverse_filename, 'w'); fh.write('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(Ns)):; fh.write('\t%11.3E %24.16E %24.16E %11d\n' % (Ns[k], energies[k], potentials[k], con",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:12071,Energy Efficiency,energy,energy,12071,"l = kwargs['omega_tolerance']. # By default, do up to twenty iterations; maxiter = 20;; if (kwargs.has_key('maxiter')): ; maxiter = kwargs['maxiter']. # By default, do not read previous 180 orbitals file; read = False;; read180 = ''; if (kwargs.has_key('read')):; read = True;; read180 = kwargs['read']. # The molecule is required, and should be the neutral species; mol.update_geometry(); activate(mol); charge0 = mol.molecular_charge(); mult0 = mol.multiplicity() . # How many electrons are there?; N = 0;; for A in range(mol.natom()):; N += mol.Z(A); N -= charge0; N = int(N); Nb = int((N - mult0 + 1)/2); Na = int(N - Nb). # Work in the ot namespace for this procedure; PsiMod.IO.set_default_namespace(""ot""). # Burn in to determine orbital eigenvalues; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180); old_guess = PsiMod.get_global_option(""GUESS""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""); PsiMod.print_out('\n\t==> IP Fitting SCF: Burn-in <==\n'); energy('scf'); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # Determine HOMO, to determine mult1; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. Na1 = Na;; Nb1 = Nb;; if (HOMO > 0):; Na1 = Na1-1;; else:; Nb1 = Nb1-1;; ; charge1 = charge0 + 1; ; mult1 = Na1 - Nb1 + 1. omegas = [];; E0s = [];; E1s = [];; kIPs = [];; IPs = [];; types = [];; ; # Right endpoint; PsiMod.set_global_option('DFT_OMEGA',omega_r). # Neutral; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180). mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Right Endpoint <==\n'); E0r = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb =",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:12939,Energy Efficiency,energy,energy,12939," old_guess = PsiMod.get_global_option(""GUESS""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""); PsiMod.print_out('\n\t==> IP Fitting SCF: Burn-in <==\n'); energy('scf'); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # Determine HOMO, to determine mult1; ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); if (Na == Nb):; HOMO = -Nb; elif (Nb == 0):; HOMO = Na; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; HOMO = Na; else: ; HOMO = -Nb. Na1 = Na;; Nb1 = Nb;; if (HOMO > 0):; Na1 = Na1-1;; else:; Nb1 = Nb1-1;; ; charge1 = charge0 + 1; ; mult1 = Na1 - Nb1 + 1. omegas = [];; E0s = [];; E1s = [];; kIPs = [];; IPs = [];; types = [];; ; # Right endpoint; PsiMod.set_global_option('DFT_OMEGA',omega_r). # Neutral; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180). mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Right Endpoint <==\n'); E0r = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HOMO = E_b;; E_HOMOr = E_HOMO;; PsiMod.IO.change_file_namespace(180,""ot"",""neutral""); ; # Cation; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180). mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Right Endpoint <==\n'); E1r = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IPr = E1r - E0r;; kIPr = -E_HOMOr;; delta_r = IPr - kIPr;. if (IPr > kIPr):; PsiMod.print_out('\n***IP Fitting Error: Right Omega limit should have kIP > IP'); sys.exit(1). omegas.append(omega_r); types.append('Right Limit'); E0s.append(E0r); E1s.append(E1r); IPs.append(IPr); kIPs.append(kIPr). # Use previous",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:13539,Energy Efficiency,energy,energy,13539,"; ; mult1 = Na1 - Nb1 + 1. omegas = [];; E0s = [];; E1s = [];; kIPs = [];; IPs = [];; types = [];; ; # Right endpoint; PsiMod.set_global_option('DFT_OMEGA',omega_r). # Neutral; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180). mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Right Endpoint <==\n'); E0r = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HOMO = E_b;; E_HOMOr = E_HOMO;; PsiMod.IO.change_file_namespace(180,""ot"",""neutral""); ; # Cation; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180). mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Right Endpoint <==\n'); E1r = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IPr = E1r - E0r;; kIPr = -E_HOMOr;; delta_r = IPr - kIPr;. if (IPr > kIPr):; PsiMod.print_out('\n***IP Fitting Error: Right Omega limit should have kIP > IP'); sys.exit(1). omegas.append(omega_r); types.append('Right Limit'); E0s.append(E0r); E1s.append(E1r); IPs.append(IPr); kIPs.append(kIPr). # Use previous orbitals from here out; PsiMod.set_global_option(""GUESS"",""READ""); ; # Left endpoint; PsiMod.set_global_option('DFT_OMEGA',omega_l). # Neutral; PsiMod.IO.change_file_namespace(180,""neutral"",""ot""); mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Left Endpoint <==\n'); E0l = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HO",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:14257,Energy Efficiency,energy,energy,14257,"O.change_file_namespace(180,""ot"",""neutral""); ; # Cation; if (read):; PsiMod.set_global_option(""GUESS"", ""READ""); copy_file_to_scratch(read180, 'psi', 'ot', 180). mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Right Endpoint <==\n'); E1r = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IPr = E1r - E0r;; kIPr = -E_HOMOr;; delta_r = IPr - kIPr;. if (IPr > kIPr):; PsiMod.print_out('\n***IP Fitting Error: Right Omega limit should have kIP > IP'); sys.exit(1). omegas.append(omega_r); types.append('Right Limit'); E0s.append(E0r); E1s.append(E1r); IPs.append(IPr); kIPs.append(kIPr). # Use previous orbitals from here out; PsiMod.set_global_option(""GUESS"",""READ""); ; # Left endpoint; PsiMod.set_global_option('DFT_OMEGA',omega_l). # Neutral; PsiMod.IO.change_file_namespace(180,""neutral"",""ot""); mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Left Endpoint <==\n'); E0l = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HOMO = E_b;; E_HOMOl = E_HOMO;; PsiMod.IO.change_file_namespace(180,""ot"",""neutral""); ; # Cation; PsiMod.IO.change_file_namespace(180,""cation"",""ot""); mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Left Endpoint <==\n'); E1l = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IPl = E1l - E0l;; kIPl = -E_HOMOl;; delta_l = IPl - kIPl;. if (IPl < kIPl):; PsiMod.print_out('\n***IP Fitting Error: Left Omega limit should have kIP < IP'); sys.exit(1). omegas.append(omega_l); types.append('Left Limit'); E0s.append(E0l); E1s.append(E1l); IPs.append(IPl); kIPs.append(kIPl); ; converged = False; repeat_l = 0;; repeat_r = 0;; step = 0;; while Tr",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:14804,Energy Efficiency,energy,energy,14804,"omegas.append(omega_r); types.append('Right Limit'); E0s.append(E0r); E1s.append(E1r); IPs.append(IPr); kIPs.append(kIPr). # Use previous orbitals from here out; PsiMod.set_global_option(""GUESS"",""READ""); ; # Left endpoint; PsiMod.set_global_option('DFT_OMEGA',omega_l). # Neutral; PsiMod.IO.change_file_namespace(180,""neutral"",""ot""); mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Left Endpoint <==\n'); E0l = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HOMO = E_b;; E_HOMOl = E_HOMO;; PsiMod.IO.change_file_namespace(180,""ot"",""neutral""); ; # Cation; PsiMod.IO.change_file_namespace(180,""cation"",""ot""); mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Left Endpoint <==\n'); E1l = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IPl = E1l - E0l;; kIPl = -E_HOMOl;; delta_l = IPl - kIPl;. if (IPl < kIPl):; PsiMod.print_out('\n***IP Fitting Error: Left Omega limit should have kIP < IP'); sys.exit(1). omegas.append(omega_l); types.append('Left Limit'); E0s.append(E0l); E1s.append(E1l); IPs.append(IPl); kIPs.append(kIPl); ; converged = False; repeat_l = 0;; repeat_r = 0;; step = 0;; while True:. step = step + 1;; ; # Regula Falsi (modified); if (repeat_l > 1):; delta_l = delta_l / 2.0;; if (repeat_r > 1):; delta_r = delta_r / 2.0;; omega = - (omega_r - omega_l) / (delta_r - delta_l) * delta_l + omega_l;; PsiMod.set_global_option('DFT_OMEGA',omega). # Neutral; PsiMod.IO.change_file_namespace(180,""neutral"",""ot""); mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Omega = %11.3E <==\n' % omega); E0 = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:15714,Energy Efficiency,energy,energy,15714,"y(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Left Endpoint <==\n'); E1l = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IPl = E1l - E0l;; kIPl = -E_HOMOl;; delta_l = IPl - kIPl;. if (IPl < kIPl):; PsiMod.print_out('\n***IP Fitting Error: Left Omega limit should have kIP < IP'); sys.exit(1). omegas.append(omega_l); types.append('Left Limit'); E0s.append(E0l); E1s.append(E1l); IPs.append(IPl); kIPs.append(kIPl); ; converged = False; repeat_l = 0;; repeat_r = 0;; step = 0;; while True:. step = step + 1;; ; # Regula Falsi (modified); if (repeat_l > 1):; delta_l = delta_l / 2.0;; if (repeat_r > 1):; delta_r = delta_r / 2.0;; omega = - (omega_r - omega_l) / (delta_r - delta_l) * delta_l + omega_l;; PsiMod.set_global_option('DFT_OMEGA',omega). # Neutral; PsiMod.IO.change_file_namespace(180,""neutral"",""ot""); mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Omega = %11.3E <==\n' % omega); E0 = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HOMO = E_b;; PsiMod.IO.change_file_namespace(180,""ot"",""neutral""); ; # Cation; PsiMod.IO.change_file_namespace(180,""cation"",""ot""); mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Omega = %11.3E <==\n' % omega); E1 = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IP = E1 - E0;; kIP = -E_HOMO;; delta = IP - kIP;. if (kIP > IP):; omega_r = omega; E0r = E0; E1r = E1; IPr = IP; kIPr = kIP; delta_r = delta; repeat_r = 0;; repeat_l = repeat_l + 1;; else:; omega_l = omega; E0l = E0; E1l = E1; IPl = IP; kIPl = kIP; delta_l = delta; repeat_l = 0;; repeat_r = repeat_r + 1;; ; omegas.append(omega); types.append('Regula-Falsi'); E0s.append(E0); E1s.append(E1); IPs.ap",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/frac.html:16250,Energy Efficiency,energy,energy,16250,"tep + 1;; ; # Regula Falsi (modified); if (repeat_l > 1):; delta_l = delta_l / 2.0;; if (repeat_r > 1):; delta_r = delta_r / 2.0;; omega = - (omega_r - omega_l) / (delta_r - delta_l) * delta_l + omega_l;; PsiMod.set_global_option('DFT_OMEGA',omega). # Neutral; PsiMod.IO.change_file_namespace(180,""neutral"",""ot""); mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0); PsiMod.print_out('\n\t==> IP Fitting SCF: Neutral, Omega = %11.3E <==\n' % omega); E0 = energy('scf'); ref = PsiMod.wavefunction(); eps_a = ref.epsilon_a(); eps_b = ref.epsilon_b(); E_HOMO = 0.0;; if (Nb == 0):; E_HOMO = eps_a[int(Na-1)]; else:; E_a = eps_a[int(Na - 1)] ; E_b = eps_b[int(Nb - 1)] ; if (E_a >= E_b):; E_HOMO = E_a;; else: ; E_HOMO = E_b;; PsiMod.IO.change_file_namespace(180,""ot"",""neutral""); ; # Cation; PsiMod.IO.change_file_namespace(180,""cation"",""ot""); mol.set_molecular_charge(charge1); mol.set_multiplicity(mult1); PsiMod.print_out('\n\t==> IP Fitting SCF: Cation, Omega = %11.3E <==\n' % omega); E1 = energy('scf'); PsiMod.IO.change_file_namespace(180,""ot"",""cation""). IP = E1 - E0;; kIP = -E_HOMO;; delta = IP - kIP;. if (kIP > IP):; omega_r = omega; E0r = E0; E1r = E1; IPr = IP; kIPr = kIP; delta_r = delta; repeat_r = 0;; repeat_l = repeat_l + 1;; else:; omega_l = omega; E0l = E0; E1l = E1; IPl = IP; kIPl = kIP; delta_l = delta; repeat_l = 0;; repeat_r = repeat_r + 1;; ; omegas.append(omega); types.append('Regula-Falsi'); E0s.append(E0); E1s.append(E1); IPs.append(IP); kIPs.append(kIP); ; # Termination; if (abs(omega_l - omega_r) < omega_tol or step > maxiter):; converged = True;; break. PsiMod.IO.set_default_namespace(""""). PsiMod.print_out('\n\t==> IP Fitting Results <==\n\n'). PsiMod.print_out('\t => Occupation Determination <= \n\n'); PsiMod.print_out('\t %6s %6s %6s %6s %6s %6s\n' %('N', 'Na', 'Nb', 'Charge', 'Mult', 'HOMO')); PsiMod.print_out('\t Neutral: %6d %6d %6d %6d %6d %6d\n' %(N, Na, Nb, charge0, mult0, HOMO)); PsiMod.print_out('\t Cation: %6d %6d %6d %6d %6d\n\n' %(N-1,",MatchSource.WIKI,psi4manual/4.0b4/_modules/frac.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:88705,Deployability,update,updated,88705,"(point). N = len(points); rho_a = PsiMod.Vector(N); rho_b = PsiMod.Vector(N); gamma_aa = PsiMod.Vector(N); gamma_ab = PsiMod.Vector(N); gamma_bb = PsiMod.Vector(N); tau_a = PsiMod.Vector(N); tau_b = PsiMod.Vector(N). index = 0; for point in points:; rho_a[index] = point['rho_a']; rho_b[index] = point['rho_b']; gamma_aa[index] = point['gamma_aa']; gamma_ab[index] = point['gamma_ab']; gamma_bb[index] = point['gamma_bb']; index = index + 1. super = build_superfunctional(functional, N, 1); super.test_functional(rho_a, rho_b, gamma_aa, gamma_ab, gamma_bb, tau_a, tau_b). v = super.value('V'); v_rho_a = super.value('V_RHO_A'); v_rho_b = super.value('V_RHO_B'); v_gamma_aa = super.value('V_GAMMA_AA'); v_gamma_ab = super.value('V_GAMMA_AB'); v_gamma_bb = super.value('V_GAMMA_BB'). if not v_gamma_aa:; v_gamma_aa = tau_a; v_gamma_ab = tau_a; v_gamma_bb = tau_a. tasks = ['v', 'v_rho_a', 'v_rho_b', 'v_gamma_aa', 'v_gamma_ab', 'v_gamma_bb']; mapping = {; 'v': v,; 'v_rho_a': v_rho_a,; 'v_rho_b': v_rho_b,; 'v_gamma_aa': v_gamma_aa,; 'v_gamma_ab': v_gamma_ab,; 'v_gamma_bb': v_gamma_bb,; }. super.print_detail(3); index = 0; for point in points:; PsiMod.print_out('rho_a= %11.3E, rho_b= %11.3E, gamma_aa= %11.3E, gamma_ab= %11.3E, gamma_bb= %11.3E\n' % (rho_a[index], rho_b[index], gamma_aa[index], gamma_ab[index], gamma_bb[index])). for task in tasks:; v_ref = point[task]; v_obs = mapping[task][index]; delta = v_obs - v_ref; if (v_ref == 0.0):; epsilon = 0.0; else:; epsilon = abs(delta / v_ref); if (epsilon < 1.0E-11):; passed = 'PASSED'; else:; passed = 'FAILED'; check = False. PsiMod.print_out('\t%-15s %24.16E %24.16E %24.16E %24.16E %6s\n' % (task, v_ref, v_obs, delta, epsilon, passed)). index = index + 1. PsiMod.print_out('\n'); return check. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:19643,Energy Efficiency,allocate,allocate,19643,"functional,; }. [docs]def build_functional(alias):; name = alias.lower(); return functionals[name](name). [docs]def functional_list():; val = []; for key in functionals.keys():; val.append(functionals[key](key)); return val. ## ==> SuperFunctionals <== ##. [docs]def build_ws_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wS_X'); # Tab in, trailing newlines; sup.set_description(' Slater Short-Range LSDA Exchange\n'); # Tab in, trailing newlines; sup.set_citation(' Adamson et. al., J. Comput. Chem., 20(9), 921-927, 1999\n'). # Add member functionals; sup.add_x_functional(build_functional('wS_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbe_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBE_X'); # Tab in, trailing newlines; sup.set_description(' PBE Short-Range GGA Exchange (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBE_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbesol_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(n",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:20488,Energy Efficiency,allocate,allocate,20488,"sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbe_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBE_X'); # Tab in, trailing newlines; sup.set_description(' PBE Short-Range GGA Exchange (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBE_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbesol_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBEsol_X'); # Tab in, trailing newlines; sup.set_description(' PBEsol Short-Range GGA Exchange (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBEsol_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb88_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:21345,Energy Efficiency,allocate,allocate,21345,"ega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbesol_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBEsol_X'); # Tab in, trailing newlines; sup.set_description(' PBEsol Short-Range GGA Exchange (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBEsol_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb88_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB88_X'); # Tab in, trailing newlines; sup.set_description(' B88 Short-Range GGA Exchange (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wB88_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_svwn_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoint",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:22190,Energy Efficiency,allocate,allocate,22190,"sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb88_x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB88_X'); # Tab in, trailing newlines; sup.set_description(' B88 Short-Range GGA Exchange (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wB88_X')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_svwn_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('SVWN'); # Tab in, trailing newlines; sup.set_description(' SVWN3 (RPA) LSDA Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Adamson et. al., J. Comput. Chem., 20(9), 921-927, 1999\n'). # Add member functionals; sup.add_x_functional(build_functional('S_X')); sup.add_c_functional(build_functional('VWN3RPA_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_blyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Custom",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:22993,Energy Efficiency,allocate,allocate,22993,"). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_svwn_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('SVWN'); # Tab in, trailing newlines; sup.set_description(' SVWN3 (RPA) LSDA Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Adamson et. al., J. Comput. Chem., 20(9), 921-927, 1999\n'). # Add member functionals; sup.add_x_functional(build_functional('S_X')); sup.add_c_functional(build_functional('VWN3RPA_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_blyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('BLYP'); # Tab in, trailing newlines; sup.set_description(' BLYP GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994\n B. Miehlich et. al., Chem. Phys. Lett., 157(3), 200-206 1989\n'). # Add member functionals; sup.add_x_functional(build_functional('B88_X')); sup.add_c_functional(build_functional('LYP_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pw91_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunction",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:23875,Energy Efficiency,allocate,allocate,23875,"(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_blyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('BLYP'); # Tab in, trailing newlines; sup.set_description(' BLYP GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994\n B. Miehlich et. al., Chem. Phys. Lett., 157(3), 200-206 1989\n'). # Add member functionals; sup.add_x_functional(build_functional('B88_X')); sup.add_c_functional(build_functional('LYP_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pw91_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('PW91'); # Tab in, trailing newlines; sup.set_description(' PW91 GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J.P. Perdew et. al., Phys. Rev. B., 46(11), 6671-6687, 1992\n'). # Add member functionals; sup.add_x_functional(build_functional('PW91_X')); sup.add_c_functional(build_functional('PW91_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_bp86_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv).",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:24695,Energy Efficiency,allocate,allocate,24695,"fter adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pw91_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('PW91'); # Tab in, trailing newlines; sup.set_description(' PW91 GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J.P. Perdew et. al., Phys. Rev. B., 46(11), 6671-6687, 1992\n'). # Add member functionals; sup.add_x_functional(build_functional('PW91_X')); sup.add_c_functional(build_functional('PW91_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_bp86_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('BP86'); # Tab in, trailing newlines; sup.set_description(' BP86 GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Null\n'). # Add member functionals; sup.add_x_functional(build_functional('B88_X')); sup.add_c_functional(build_functional('P86_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_ft97_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:25458,Energy Efficiency,allocate,allocate,25458,"_c_functional(build_functional('PW91_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_bp86_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('BP86'); # Tab in, trailing newlines; sup.set_description(' BP86 GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Null\n'). # Add member functionals; sup.add_x_functional(build_functional('B88_X')); sup.add_c_functional(build_functional('P86_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_ft97_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('FT97'); # Tab in, trailing newlines; sup.set_description(' FT97 GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997\n'). # Add member functionals; sup.add_x_functional(build_functional('FT97B_X')); sup.add_c_functional(build_functional('FT97_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(de",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:26284,Energy Efficiency,allocate,allocate,26284,"dding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_ft97_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('FT97'); # Tab in, trailing newlines; sup.set_description(' FT97 GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997\n'). # Add member functionals; sup.add_x_functional(build_functional('FT97B_X')); sup.add_c_functional(build_functional('FT97_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('PBE'); # Tab in, trailing newlines; sup.set_description(' PBE GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J.P. Perdew et. al., Phys. Rev. Lett., 77(18), 3865-3868, 1996\n'). # Add member functionals; sup.add_x_functional(build_functional('PBE_X')); sup.add_c_functional(build_functional('PBE_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe0_superfunctional(name, npoints, deriv):. sup = build_pbe_superfunctional(name, npoints, deriv); sup.set_name('PBE0'); sup.set_description(' PBE0 Hybri",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:27102,Energy Efficiency,allocate,allocate,27102," after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('PBE'); # Tab in, trailing newlines; sup.set_description(' PBE GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J.P. Perdew et. al., Phys. Rev. Lett., 77(18), 3865-3868, 1996\n'). # Add member functionals; sup.add_x_functional(build_functional('PBE_X')); sup.add_c_functional(build_functional('PBE_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe0_superfunctional(name, npoints, deriv):. sup = build_pbe_superfunctional(name, npoints, deriv); sup.set_name('PBE0'); sup.set_description(' PBE0 Hybrid GGA Exchange-Correlation Functional\n'); sup.set_citation(' Adamo et. al., J. Chem. Phys., 110(13), 6158, 1999\n'); sup.set_x_alpha(0.25); return sup. [docs]def build_sogga_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('SOGGA'); # Tab in, trailing newlines; sup.set_description(' Second Order GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Zhao et. al., J. Chem. Phys., 128(18), 184109, 2008\n'). # Add member functionals; sup.add_x_functional(build_functional('SOGGA_X')). C = build_functional('PBE_C'); C.set_parameter('bet', 0.037526); sup.add_c_functional(C). # Set GKS",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:28288,Energy Efficiency,allocate,allocate,28288,"GA Exchange-Correlation Functional\n'); sup.set_citation(' Adamo et. al., J. Chem. Phys., 110(13), 6158, 1999\n'); sup.set_x_alpha(0.25); return sup. [docs]def build_sogga_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('SOGGA'); # Tab in, trailing newlines; sup.set_description(' Second Order GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Zhao et. al., J. Chem. Phys., 128(18), 184109, 2008\n'). # Add member functionals; sup.add_x_functional(build_functional('SOGGA_X')). C = build_functional('PBE_C'); C.set_parameter('bet', 0.037526); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b3lyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B3LYP'); # Tab in, trailing newlines; sup.set_description(' B3LYP Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994\n'). # Add member functionals; b3 = build_functional('B3_X'); b3.set_alpha(1.0); sup.add_x_functional(b3); lyp = build_functional('LYP_C'); lyp.set_alpha(0.81); vwn = build_functional('VWN3RPA_C'); vwn.set_alpha(0.19); sup.add_c_functional(vwn); sup.add_c_functional(lyp). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.2); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:29261,Energy Efficiency,allocate,allocate,29261," this last; sup.allocate(); return sup. [docs]def build_b3lyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B3LYP'); # Tab in, trailing newlines; sup.set_description(' B3LYP Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994\n'). # Add member functionals; b3 = build_functional('B3_X'); b3.set_alpha(1.0); sup.add_x_functional(b3); lyp = build_functional('LYP_C'); lyp.set_alpha(0.81); vwn = build_functional('VWN3RPA_C'); vwn.set_alpha(0.19); sup.add_c_functional(vwn); sup.add_c_functional(lyp). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.2); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b3lyp5_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B3LYP5'); # Tab in, trailing newlines; sup.set_description(' B3LYP5 Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994\n'). # Add member functionals; b3 = build_functional('B3_X'); b3.set_alpha(1.0); sup.add_x_functional(b3); lyp = build_functional('LYP_C'); lyp.set_alpha(0.81); vwn = build_functional('VWN5RPA_C'); vwn.set_alpha(0.19); sup.add_c_functional(lyp); sup.add_c_functional(vwn). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.2); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def bu",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:30237,Energy Efficiency,allocate,allocate,30237,"is last; sup.allocate(); return sup. [docs]def build_b3lyp5_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B3LYP5'); # Tab in, trailing newlines; sup.set_description(' B3LYP5 Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994\n'). # Add member functionals; b3 = build_functional('B3_X'); b3.set_alpha(1.0); sup.add_x_functional(b3); lyp = build_functional('LYP_C'); lyp.set_alpha(0.81); vwn = build_functional('VWN5RPA_C'); vwn.set_alpha(0.19); sup.add_c_functional(lyp); sup.add_c_functional(vwn). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.2); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b970_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B97-0'); # Tab in, trailing newlines; sup.set_description(' B97-0 Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' A.D. Becke, J. Chem. Phys., 107(20), 8554-8560, 1997\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-0_X'); X.set_alpha(1.0 / 0.8057). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 0.8094); X.set_parameter('B97_a1', 0.5073); X.set_parameter('B97_a2', 0.7481). C = build_functional('B_C'); C.set_name('B97-0_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.9454); C.set_parameter('B97_os_a1', 0.7471); C.set_parameter('B97_os_a2', -4.5961). C.set_parameter('B97_ss_gamma', 0.2); C.set",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:31595,Energy Efficiency,allocate,allocate,31595," Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' A.D. Becke, J. Chem. Phys., 107(20), 8554-8560, 1997\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-0_X'); X.set_alpha(1.0 / 0.8057). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 0.8094); X.set_parameter('B97_a1', 0.5073); X.set_parameter('B97_a2', 0.7481). C = build_functional('B_C'); C.set_name('B97-0_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.9454); C.set_parameter('B97_os_a1', 0.7471); C.set_parameter('B97_os_a2', -4.5961). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.1737); C.set_parameter('B97_ss_a1', 2.3487); C.set_parameter('B97_ss_a2', -2.4868). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.1943); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b971_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B97-1'); # Tab in, trailing newlines; sup.set_description(' B97-1 Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' F.A. Hamprecht et. al., J. Chem. Phys., 109(15), 6264-6271, 1998\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-1_X'); X.set_alpha(1.0 / 0.79). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 0.789518); X.set_parameter('B97_a1', 0.573805); X.set_parameter('B97_a2', 0.660975). C = build_functional('B_C'); C.set_name('B97-1_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.955689); C.set_parameter('B97_os_a1', 0.788552); C.set_parameter('B97_os_a2', -5.47869). C.set_parameter('B97_s",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:32977,Energy Efficiency,allocate,allocate,32977,"nctional\n'); # Tab in, trailing newlines; sup.set_citation(' F.A. Hamprecht et. al., J. Chem. Phys., 109(15), 6264-6271, 1998\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-1_X'); X.set_alpha(1.0 / 0.79). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 0.789518); X.set_parameter('B97_a1', 0.573805); X.set_parameter('B97_a2', 0.660975). C = build_functional('B_C'); C.set_name('B97-1_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.955689); C.set_parameter('B97_os_a1', 0.788552); C.set_parameter('B97_os_a2', -5.47869). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.0820011); C.set_parameter('B97_ss_a1', 2.71681); C.set_parameter('B97_ss_a2', -2.87103). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.21); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b972_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B97-2'); # Tab in, trailing newlines; sup.set_description(' B97-2 Hybrid-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Wilson et. al., J. Chem. Phys., 115(20), 9233-9242, 2001\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-2_X'); X.set_alpha(1.0 / 0.79). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 0.827642); X.set_parameter('B97_a1', 0.047840); X.set_parameter('B97_a2', 1.761250). C = build_functional('B_C'); C.set_name('B97-2_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.999849); C.set_parameter('B97_os_a1', 1.40626); C.set_parameter('B97_os_a2', -7.44060). C.set_parameter('B97_ss_ga",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:34356,Energy Efficiency,allocate,allocate,34356," Functional\n'); # Tab in, trailing newlines; sup.set_citation(' P.J. Wilson et. al., J. Chem. Phys., 115(20), 9233-9242, 2001\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-2_X'); X.set_alpha(1.0 / 0.79). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 0.827642); X.set_parameter('B97_a1', 0.047840); X.set_parameter('B97_a2', 1.761250). C = build_functional('B_C'); C.set_name('B97-2_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.999849); C.set_parameter('B97_os_a1', 1.40626); C.set_parameter('B97_os_a2', -7.44060). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.585808); C.set_parameter('B97_ss_a1', -0.691682); C.set_parameter('B97_ss_a2', 0.394796). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.21); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b97d2p4_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B97-D2P4'); # Tab in, trailing newlines; sup.set_description(' B97-D Pure-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Grimme, J. Comput. Chem., 27, 1787-1799, 2006\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-D_X'); X.set_alpha(1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.08662); X.set_parameter('B97_a1', -0.52127); X.set_parameter('B97_a2', 3.25429). C = build_functional('B_C'); C.set_name('B97-D_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.69041); C.set_parameter('B97_os_a1', 6.30270); C.set_parameter('B97_os_a2', -14.9712). C.set_parameter('B97_ss_gamma', 0.2); C.set_p",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:35814,Energy Efficiency,allocate,allocate,35814," J. Comput. Chem., 27, 1787-1799, 2006\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('B97-D_X'); X.set_alpha(1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.08662); X.set_parameter('B97_a1', -0.52127); X.set_parameter('B97_a2', 3.25429). C = build_functional('B_C'); C.set_name('B97-D_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.69041); C.set_parameter('B97_os_a1', 6.30270); C.set_parameter('B97_os_a2', -14.9712). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.22340); C.set_parameter('B97_ss_a1', -1.56208); C.set_parameter('B97_ss_a2', 1.94293). sup.add_x_functional(X); sup.add_c_functional(C). # => -D2 (s = 1.25) <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b97-d', 'd2p4'))). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b97d2gr_superfunctional(name, npoints, deriv):. sup = build_b97d2p4_superfunctional(name, npoints, deriv); sup.set_name('B97-D2GR'). # => -D2 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b97-d', 'd2gr'))). return sup. [docs]def build_b97d3zero_superfunctional(name, npoints, deriv):. sup = build_b97d2p4_superfunctional(name, npoints, deriv); sup.set_name('B97-D3ZERO'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b97-d', 'd3zero'))). return sup. [docs]def build_b97d3bj_superfunctional(name, npoints, deriv):. sup = build_b97d2p4_superfunctional(name, npoints, deriv); sup.set_name('B97-D3BJ'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b97-d', 'd3bj'))). return sup. [docs]def build_hcth_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short ",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:38172,Energy Efficiency,allocate,allocate,38172,".0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.09320); X.set_parameter('B97_a1', -0.744056); X.set_parameter('B97_a2', 5.59920); X.set_parameter('B97_a3', -6.78549); X.set_parameter('B97_a4', 4.49357). C = build_functional('B_C'); C.set_name('HCTH_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.729974); C.set_parameter('B97_os_a1', 3.35287); C.set_parameter('B97_os_a2', -11.5430); C.set_parameter('B97_os_a3', 8.08564); C.set_parameter('B97_os_a4', -4.47857). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.222601); C.set_parameter('B97_ss_a1', -0.0338622); C.set_parameter('B97_ss_a2', -0.0125170); C.set_parameter('B97_ss_a3', -0.802496); C.set_parameter('B97_ss_a4', 1.55396). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_hcth120_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('HCTH120'); # Tab in, trailing newlines; sup.set_description(' HCTH120 Pure-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' A.D. Boese, et. al., J. Chem. Phys., 112(4), 1670-1678, 2000\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('HCTH120_X'); X.set_alpha(1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.09163); X.set_parameter('B97_a1', -0.747215); X.set_parameter('B97_a2', 5.07833); X.set_parameter('B97_a3', -4.10746); X.set_parameter('B97_a4', 1.17173). C = build_functional('B_C'); C.set_name('HCTH120_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.514730); C.set_parameter('B97_os_a1', 6.9",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:39781,Energy Efficiency,allocate,allocate,39781,"1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.09163); X.set_parameter('B97_a1', -0.747215); X.set_parameter('B97_a2', 5.07833); X.set_parameter('B97_a3', -4.10746); X.set_parameter('B97_a4', 1.17173). C = build_functional('B_C'); C.set_name('HCTH120_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.514730); C.set_parameter('B97_os_a1', 6.92982); C.set_parameter('B97_os_a2', -24.7073); C.set_parameter('B97_os_a3', 23.1098); C.set_parameter('B97_os_a4', -11.3234). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.489508); C.set_parameter('B97_ss_a1', -0.260699); C.set_parameter('B97_ss_a2', 0.432917); C.set_parameter('B97_ss_a3', -1.99247); C.set_parameter('B97_ss_a4', 2.48531). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_hcth120d3zero_superfunctional(name, npoints, deriv):. sup = build_hcth120_superfunctional(name, npoints, deriv); sup.set_name('HCTH120-D3ZERO'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('hcth120', 'd3zero'))). return sup. [docs]def build_hcth120d3bj_superfunctional(name, npoints, deriv):. sup = build_hcth120_superfunctional(name, npoints, deriv); sup.set_name('HCTH120-D3BJ'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('hcth120', 'd3bj'))). return sup. [docs]def build_hcth147_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('HCTH147'); # Tab in, trailing newlines; sup.set_description(' HCTH147 Pure-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' A.D. Boese, et. al., J",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:41920,Energy Efficiency,allocate,allocate,41920,"1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.09025); X.set_parameter('B97_a1', -0.799194); X.set_parameter('B97_a2', 5.57212); X.set_parameter('B97_a3', -5.86760); X.set_parameter('B97_a4', 3.04544). C = build_functional('B_C'); C.set_name('HCTH147_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.542352); C.set_parameter('B97_os_a1', 7.01464); C.set_parameter('B97_os_a2', -28.3822); C.set_parameter('B97_os_a3', 35.0329); C.set_parameter('B97_os_a4', -20.4284). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 0.562576); C.set_parameter('B97_ss_a1', 0.0171436); C.set_parameter('B97_ss_a2', -1.30636); C.set_parameter('B97_ss_a3', 1.05747); C.set_parameter('B97_ss_a4', 0.885429). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_hcth407_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('HCTH407'); # Tab in, trailing newlines; sup.set_description(' HCTH407 Pure-GGA Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' A.D. Boese and N.C. Handy, J. Chem. Phys., 114(13), 5497-5503, 2001\n'). # Add member functionals; X = build_functional('B97_X'); X.set_name('HCTH407_X'); X.set_alpha(1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.08184); X.set_parameter('B97_a1', -0.518339); X.set_parameter('B97_a2', 3.42562); X.set_parameter('B97_a3', -2.62901); X.set_parameter('B97_a4', 2.28855). C = build_functional('B_C'); C.set_name('HCTH407_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.589076); C.set_parameter('B97_os_a",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:43533,Energy Efficiency,allocate,allocate,43533,"ha(1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.08184); X.set_parameter('B97_a1', -0.518339); X.set_parameter('B97_a2', 3.42562); X.set_parameter('B97_a3', -2.62901); X.set_parameter('B97_a4', 2.28855). C = build_functional('B_C'); C.set_name('HCTH407_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 0.589076); C.set_parameter('B97_os_a1', 4.42374); C.set_parameter('B97_os_a2', -19.2218); C.set_parameter('B97_os_a3', 42.5721); C.set_parameter('B97_os_a4', -42.0052). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 1.18777); C.set_parameter('B97_ss_a1', -2.40292); C.set_parameter('B97_ss_a2', 5.61741); C.set_parameter('B97_ss_a3', -9.17923); C.set_parameter('B97_ss_a4', 6.24798). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_blypd2p4_superfunctional(name, npoints, deriv):. sup = build_blyp_superfunctional(name, npoints, deriv); sup.set_name('BLYP-D2P4'). # => -D2 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('blyp', 'd2p4'))). return sup. [docs]def build_blypd2gr_superfunctional(name, npoints, deriv):. sup = build_blyp_superfunctional(name, npoints, deriv); sup.set_name('BLYP-D2GR'). # => -D2 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('blyp', 'd2gr'))). return sup. [docs]def build_blypd3zero_superfunctional(name, npoints, deriv):. sup = build_blyp_superfunctional(name, npoints, deriv); sup.set_name('BLYP-D3ZERO'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('blyp', 'd3zero'))). return sup. [docs]def build_blypd3bj_superfunctional(name, npoints, deriv):. sup = build_blyp_superfunctional(name, npoints, deriv); sup.set_name('BLYP-D3BJ'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('blyp', 'd3bj",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:52188,Energy Efficiency,allocate,allocate,52188,"nal(name, npoints, deriv):. sup = build_pbe0_superfunctional(name, npoints, deriv); sup.set_name('PBE0-D3BJ'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('pbe0', 'd3bj'))). return sup. [docs]def build_wsvwn_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wSVWN'); # Tab in, trailing newlines; sup.set_description(' LSDA SR-XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Adamson et. al., J. Comput. Chem., 20(9), 921-927, 1999\n'). # Add member functionals; sup.add_x_functional(build_functional('wS_X')); sup.add_c_functional(build_functional('VWN3RPA_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbe_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBE'); # Tab in, trailing newlines; sup.set_description(' PBE SR-XC Functional (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBE_X')); sup.add_c_functional(build_functional('PBE_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.4); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbe0_superfunctional(name, npoints, deriv):. sup = build_wpbe_superfunctional(name, npoin",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:53070,Energy Efficiency,allocate,allocate,53070,"(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbe_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBE'); # Tab in, trailing newlines; sup.set_description(' PBE SR-XC Functional (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBE_X')); sup.add_c_functional(build_functional('PBE_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.4); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbe0_superfunctional(name, npoints, deriv):. sup = build_wpbe_superfunctional(name, npoints, deriv); sup.set_name('wPBE0'); sup.set_description(' PBE0 SR-XC Functional (HJS Model)\n'); sup.set_x_omega(0.3); sup.set_x_alpha(0.25); return sup. [docs]def build_wpbesol_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBEsol'); # Tab in, trailing newlines; sup.set_description(' PBEsol SR-XC Functional (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBEsol_X')); sup.add_c_functional(build_functional('PBE_C')). # Set GKS up after adding functionals; sup",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:54223,Energy Efficiency,allocate,allocate,54223," sup.set_description(' PBE0 SR-XC Functional (HJS Model)\n'); sup.set_x_omega(0.3); sup.set_x_alpha(0.25); return sup. [docs]def build_wpbesol_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wPBEsol'); # Tab in, trailing newlines; sup.set_description(' PBEsol SR-XC Functional (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wPBEsol_X')); sup.add_c_functional(build_functional('PBE_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.4); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wpbesol0_superfunctional(name, npoints, deriv):. sup = build_wpbesol_superfunctional(name, npoints, deriv); sup.set_name('wPBEsol0'); sup.set_description(' PBEsol0 SR-XC Functional (HJS Model)\n'); sup.set_x_omega(0.3); sup.set_x_alpha(0.25); return sup. [docs]def build_wblyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wBLYP'); # Tab in, trailing newlines; sup.set_description(' BLYP SR-XC Functional (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wB88_X')); sup.add_c_functional(build_functional('LYP_C')). # Set GKS up after adding functionals; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:55379,Energy Efficiency,allocate,allocate,55379,"ol0'); sup.set_description(' PBEsol0 SR-XC Functional (HJS Model)\n'); sup.set_x_omega(0.3); sup.set_x_alpha(0.25); return sup. [docs]def build_wblyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wBLYP'); # Tab in, trailing newlines; sup.set_description(' BLYP SR-XC Functional (HJS Model)\n'); # Tab in, trailing newlines; sup.set_citation(' Henderson et. al., J. Chem. Phys., 128, 194105, 2008\n Weintraub, Henderson, and Scuseria, J. Chem. Theory. Comput., 5, 754 (2009)\n'). # Add member functionals; sup.add_x_functional(build_functional('wB88_X')); sup.add_c_functional(build_functional('LYP_C')). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb97_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB97'); # Tab in, trailing newlines; sup.set_description(' Parameterized LRC B97 GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J.-D. Chai and M. Head-Gordon, J. Chem. Phys., 128, 084106, 2008\n'). # Add member functionals; X = build_functional('wB97_X'); X.set_name('wB97_X'); X.set_alpha(1.0). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.0); X.set_parameter('B97_a1', 1.13116E0); X.set_parameter('B97_a2', -2.74915E0); X.set_parameter('B97_a3', 1.20900E1); X.set_parameter('B97_a4', -5.71642E0). C = build_functional('B_C'); C.set_name('wB97_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 1.0); C.set_parameter('B97_os_a1', 3.99051E0); C.set_par",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:56978,Energy Efficiency,allocate,allocate,56978,"). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 1.0); X.set_parameter('B97_a1', 1.13116E0); X.set_parameter('B97_a2', -2.74915E0); X.set_parameter('B97_a3', 1.20900E1); X.set_parameter('B97_a4', -5.71642E0). C = build_functional('B_C'); C.set_name('wB97_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 1.0); C.set_parameter('B97_os_a1', 3.99051E0); C.set_parameter('B97_os_a2', -1.70066E1); C.set_parameter('B97_os_a3', 1.07292E0); C.set_parameter('B97_os_a4', 8.88211E0). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 1.0); C.set_parameter('B97_ss_a1', -2.55352E0); C.set_parameter('B97_ss_a2', 1.18926E1); C.set_parameter('B97_ss_a3', -2.69452E1); C.set_parameter('B97_ss_a4', 1.70927E1). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.4); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb97x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB97X'); # Tab in, trailing newlines; sup.set_description(' Parameterized Hybrid LRC B97 GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J.-D. Chai and M. Head-Gordon, J. Chem. Phys., 128, 084106, 2008\n'). # Add member functionals; X = build_functional('wB97_X'); X.set_name('wB97X_X'); X.set_alpha(1.0 / (1.0 - 0.157706)). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 8.42294E-1); X.set_parameter('B97_a1', 7.26479E-1); X.set_parameter('B97_a2', 1.04760E0); X.set_parameter('B97_a3', -5.70635E0); X.set_parameter('B97_a4', 1.32794E1). C = build_functional('B_C'); C.set_name('wB97X_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 1.0); C.set_paramet",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:58620,Energy Efficiency,allocate,allocate,58620,"eter('B97_gamma', 0.004); X.set_parameter('B97_a0', 8.42294E-1); X.set_parameter('B97_a1', 7.26479E-1); X.set_parameter('B97_a2', 1.04760E0); X.set_parameter('B97_a3', -5.70635E0); X.set_parameter('B97_a4', 1.32794E1). C = build_functional('B_C'); C.set_name('wB97X_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 1.0); C.set_parameter('B97_os_a1', 2.37031E0); C.set_parameter('B97_os_a2', -1.13995E1); C.set_parameter('B97_os_a3', 6.58405E0); C.set_parameter('B97_os_a4', -3.78132E0). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 1.0); C.set_parameter('B97_ss_a1', -4.33879E0); C.set_parameter('B97_ss_a2', 1.82308E1); C.set_parameter('B97_ss_a3', -3.17430E1); C.set_parameter('B97_ss_a4', 1.72901E1). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.4); sup.set_c_omega(0.0); sup.set_x_alpha(0.157706); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb97xd_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB97X-D'); # Tab in, trailing newlines; sup.set_description(' Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion\n'); # Tab in, trailing newlines; sup.set_citation(' J.-D. Chai and M. Head-Gordon, Phys. Chem. Chem. Phys., 10, 6615-6620, 2008\n'). # Add member functionals; alpha = 2.22036E-1; omega = 0.2; X = build_functional('wB97_X'); X.set_name('wB97X_X'); X.set_alpha(1.0 / (1.0 - alpha)). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 7.77964E-1) # Table 1: c_{x\sigma,0}; X.set_parameter('B97_a1', 6.61160E-1) # Table 1: c_{x\sigma,1}; X.set_parameter('B97_a2', 5.74541E-1) # Table 1: c_{x\sigma,2}; X.set_parameter('B97_a3', -5.25671E0) # Table 1: c_{x\sigma,3}; X.set_parameter('",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:60895,Energy Efficiency,allocate,allocate,60895,"C.set_parameter('B97_os_a2', -1.20477E1) # Table 1: c_{c\alpha\beta,2}; C.set_parameter('B97_os_a3', 1.40847E1) # Table 1: c_{c\alpha\beta,3}; C.set_parameter('B97_os_a4', -8.50809E0) # Table 1: c_{c\alpha\beta,4}. C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 1.0) # Table 1: c_{c\sigma\sigma,0}; C.set_parameter('B97_ss_a1', -6.90539E0) # Table 1: c_{c\sigma\sigma,1}; C.set_parameter('B97_ss_a2', 3.13343E1) # Table 1: c_{c\sigma\sigma,2}; C.set_parameter('B97_ss_a3', -5.10533E1) # Table 1: c_{c\sigma\sigma,3}; C.set_parameter('B97_ss_a4', 2.64423E1) # Table 1: c_{c\sigma\sigma,4}. sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(omega) # Table 1: omega; sup.set_c_omega(0.0); sup.set_x_alpha(alpha) # Table 1: c_x; sup.set_c_alpha(0.0). # => -D2 (CHG Damping Function) <= #; sup.set_dispersion(PsiMod.Dispersion.build('-CHG', 1.0, 0.0, 0.0, 0.0)). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_m05_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('M05'); # Tab in, trailing newlines; sup.set_description(' Heavily Parameterized Hybrid Meta-GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Zhao et. al., J. Chem. Phys., 123, 161103, 2005\n'). # Add member functionals; X = build_functional('M_X'); X.set_name('M05_X'); X.set_alpha(1.0). # LSDA Exchange type is Slater, no parameters. # GGA Exchange type is PBE, special parameters because Truhlar is lazy; C1 = 3.36116E-3; C2 = 4.49267E-3; K0 = 3.0 / 2.0 * math.pow(3.0 / (math.pi * 4.0), 1.0 / 3.0); k0 = math.pow(6.0 * math.pi * math.pi, 1.0 / 3.0); kp = C1 / (C2 * K0); mu = 4.0 * k0 * k0 * kp * C2; X.set_parameter('PBE_kp', kp) # Different effective kp; X.set_parameter('PBE_mu', mu) # Differ",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:61966,Energy Efficiency,power,power,61966,"e, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('M05'); # Tab in, trailing newlines; sup.set_description(' Heavily Parameterized Hybrid Meta-GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Zhao et. al., J. Chem. Phys., 123, 161103, 2005\n'). # Add member functionals; X = build_functional('M_X'); X.set_name('M05_X'); X.set_alpha(1.0). # LSDA Exchange type is Slater, no parameters. # GGA Exchange type is PBE, special parameters because Truhlar is lazy; C1 = 3.36116E-3; C2 = 4.49267E-3; K0 = 3.0 / 2.0 * math.pow(3.0 / (math.pi * 4.0), 1.0 / 3.0); k0 = math.pow(6.0 * math.pi * math.pi, 1.0 / 3.0); kp = C1 / (C2 * K0); mu = 4.0 * k0 * k0 * kp * C2; X.set_parameter('PBE_kp', kp) # Different effective kp; X.set_parameter('PBE_mu', mu) # Different effective mu. # Meta Exchange type is insane mess of w power series expansion; X.set_parameter('Meta_a0', 1.0); X.set_parameter('Meta_a1', 0.08151); X.set_parameter('Meta_a2', -0.43956); X.set_parameter('Meta_a3', -3.22422); X.set_parameter('Meta_a4', 2.01819); X.set_parameter('Meta_a5', 8.79431); X.set_parameter('Meta_a6', -0.00295); X.set_parameter('Meta_a7', 9.82029); X.set_parameter('Meta_a8', -4.82351); X.set_parameter('Meta_a9', -48.17574); X.set_parameter('Meta_a10', 3.64802); X.set_parameter('Meta_a11', 34.02248). C = build_functional('M_C'); C.set_name('M05_C'). # LSDA Correlation type is PW92, no parameters. # GGA Correlation type is B97; C.set_parameter('B97_os_gamma', 0.0031 * 2.0); C.set_parameter('B97_os_a0', 1.0); C.set_parameter('B97_os_a1', 3.78569); C.set_parameter('B97_os_a2', -14.15261); C.set_parameter('B97_os_a3', -7.46589); C.set_parameter('B97_os_a4', 17.94491). C.set_parameter('B97_ss_gamma', 0.06); C.set_parameter('B97_ss_a0', 1.0); C.set_parameter('B97_ss_a1', 3.77344); C.set_parameter('B97_ss_a2', -26.04",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:63390,Energy Efficiency,allocate,allocate,63390,".set_parameter('Meta_a11', 34.02248). C = build_functional('M_C'); C.set_name('M05_C'). # LSDA Correlation type is PW92, no parameters. # GGA Correlation type is B97; C.set_parameter('B97_os_gamma', 0.0031 * 2.0); C.set_parameter('B97_os_a0', 1.0); C.set_parameter('B97_os_a1', 3.78569); C.set_parameter('B97_os_a2', -14.15261); C.set_parameter('B97_os_a3', -7.46589); C.set_parameter('B97_os_a4', 17.94491). C.set_parameter('B97_ss_gamma', 0.06); C.set_parameter('B97_ss_a0', 1.0); C.set_parameter('B97_ss_a1', 3.77344); C.set_parameter('B97_ss_a2', -26.04463); C.set_parameter('B97_ss_a3', 30.69913); C.set_parameter('B97_ss_a4', -9.22695). # Meta Correlation type is Becke metric, no parameters. # Add the functionals in; sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.28) # Hartree-Fock exact exchange; sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_m05_2x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('M05-2X'); # Tab in, trailing newlines; sup.set_description(' Heavily Parameterized Hybrid Meta-GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Zhao et. al., J. Chem. Theory Comput., 2, 364, 2006\n'). # Add member functionals; X = build_functional('M_X'); X.set_name('M05_2X_X'); X.set_alpha(1.0). # LSDA Exchange type is Slater, no parameters. # GGA Exchange type is PBE, special parameters because Truhlar is lazy; C1 = 3.36116E-3; C2 = 4.49267E-3; K0 = 3.0 / 2.0 * math.pow(3.0 / (math.pi * 4.0), 1.0 / 3.0); k0 = math.pow(6.0 * math.pi * math.pi, 1.0 / 3.0); kp = C1 / (C2 * K0); mu = 4.0 * k0 * k0 * kp * C2; X.set_parameter('PBE_kp', kp); X.set_parameter('PBE_mu', mu). # Meta Exchange typ",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:64424,Energy Efficiency,power,power,64424,"ocs]def build_m05_2x_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('M05-2X'); # Tab in, trailing newlines; sup.set_description(' Heavily Parameterized Hybrid Meta-GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Zhao et. al., J. Chem. Theory Comput., 2, 364, 2006\n'). # Add member functionals; X = build_functional('M_X'); X.set_name('M05_2X_X'); X.set_alpha(1.0). # LSDA Exchange type is Slater, no parameters. # GGA Exchange type is PBE, special parameters because Truhlar is lazy; C1 = 3.36116E-3; C2 = 4.49267E-3; K0 = 3.0 / 2.0 * math.pow(3.0 / (math.pi * 4.0), 1.0 / 3.0); k0 = math.pow(6.0 * math.pi * math.pi, 1.0 / 3.0); kp = C1 / (C2 * K0); mu = 4.0 * k0 * k0 * kp * C2; X.set_parameter('PBE_kp', kp); X.set_parameter('PBE_mu', mu). # Meta Exchange type is insane mess of w power series expansion; X.set_parameter('Meta_a0', 1.0); X.set_parameter('Meta_a1', -0.56833); X.set_parameter('Meta_a2', -1.30057); X.set_parameter('Meta_a3', 5.50070); X.set_parameter('Meta_a4', 9.06402); X.set_parameter('Meta_a5', -32.21075); X.set_parameter('Meta_a6', -23.73298); X.set_parameter('Meta_a7', 70.22996); X.set_parameter('Meta_a8', 29.88614); X.set_parameter('Meta_a9', -60.25778); X.set_parameter('Meta_a10', -13.22205); X.set_parameter('Meta_a11', 15.23694). C = build_functional('M_C'); C.set_name('M05_2X_C'). # LSDA Correlation type is PW92, no parameters. # GGA Correlation type is B97; C.set_parameter('B97_os_gamma', 0.0031 * 2.0); C.set_parameter('B97_os_a0', 1.00000); C.set_parameter('B97_os_a1', 1.09297); C.set_parameter('B97_os_a2', -3.79171); C.set_parameter('B97_os_a3', 2.82810); C.set_parameter('B97_os_a4', -10.58909). C.set_parameter('B97_ss_gamma', 0.06); C.set_parameter('B97_ss_a0', 1.00000); C.set_parameter('B97_ss_a1', -3.05430); C.set_parameter('B",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:65863,Energy Efficiency,allocate,allocate,65863,"meter('Meta_a11', 15.23694). C = build_functional('M_C'); C.set_name('M05_2X_C'). # LSDA Correlation type is PW92, no parameters. # GGA Correlation type is B97; C.set_parameter('B97_os_gamma', 0.0031 * 2.0); C.set_parameter('B97_os_a0', 1.00000); C.set_parameter('B97_os_a1', 1.09297); C.set_parameter('B97_os_a2', -3.79171); C.set_parameter('B97_os_a3', 2.82810); C.set_parameter('B97_os_a4', -10.58909). C.set_parameter('B97_ss_gamma', 0.06); C.set_parameter('B97_ss_a0', 1.00000); C.set_parameter('B97_ss_a1', -3.05430); C.set_parameter('B97_ss_a2', 7.61854); C.set_parameter('B97_ss_a3', 1.47665); C.set_parameter('B97_ss_a4', -11.92365). # Meta Correlation type is Becke metric, no parameters. # Add the functionals in; sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.56) # Hartree-Fock exact exchange; sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_m05d3zero_superfunctional(name, npoints, deriv):. sup = build_m05_superfunctional(name, npoints, deriv); sup.set_name('M05-D3ZERO'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('m05', 'd3zero'))). return sup. [docs]def build_m05_2xd3zero_superfunctional(name, npoints, deriv):. sup = build_m05_2x_superfunctional(name, npoints, deriv); sup.set_name('M05-2X-D3ZERO'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('m05-2x', 'd3zero'))). return sup. [docs]def build_dldf_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('dlDF'); # Tab in, trailing newlines; sup.set_description(' Dispersionless Hybrid Meta-GGA XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' Pernal et. al., Phys. Rev. Lett., 103, 263201,",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:68227,Energy Efficiency,allocate,allocate,68227,"'Meta_a0', 1.0); X.set_parameter('Meta_a1', -0.1637571); X.set_parameter('Meta_a2', -0.1880028); X.set_parameter('Meta_a3', -0.4490609); X.set_parameter('Meta_a4', -0.0082359). C = build_functional('M_C'); C.set_name('dlDF_C'). # LSDA Correlation type is PW92, no parameters. # GGA Correlation type is B97; C.set_parameter('B97_os_gamma', 0.0031 * 2.0); C.set_parameter('B97_os_a0', 1.00000); C.set_parameter('B97_os_a1', 5.9515308); C.set_parameter('B97_os_a2', -11.1602877). C.set_parameter('B97_ss_gamma', 0.06); C.set_parameter('B97_ss_a0', 1.00000); C.set_parameter('B97_ss_a1', -2.5960897); C.set_parameter('B97_ss_a2', 2.2233793). # Meta Correlation type is Becke metric, no parameters. # Add the functionals in; sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.6144129) # Hartree-Fock exact exchange; sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_dldfd09_superfunctional(name, npoints, deriv):. sup = build_dldf_superfunctional(name, npoints, deriv); sup.set_name('dlDF+D09'). # => +D <= #; sup.set_dispersion(PsiMod.Dispersion.build('-DAS2009', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. return sup. [docs]def build_dldfd_superfunctional(name, npoints, deriv):. sup = build_dldf_superfunctional(name, npoints, deriv); sup.set_name('dlDF+D'). # => +D <= #; sup.set_dispersion(PsiMod.Dispersion.build('-DAS2010', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. return sup. [docs]def build_hfd_superfunctional(name, npoints, deriv):. sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv); sup.set_name('HF+D'); sup.set_x_alpha(1.0). # => +D <= #; sup.set_dispersion(PsiMod.Dispersion.build('-DAS2010', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. sup.allocate(); return sup. [docs]def build_b2plyp_superfunctional(name, npoints, deriv):. # Call t",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:69144,Energy Efficiency,allocate,allocate,69144,"t_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_dldfd09_superfunctional(name, npoints, deriv):. sup = build_dldf_superfunctional(name, npoints, deriv); sup.set_name('dlDF+D09'). # => +D <= #; sup.set_dispersion(PsiMod.Dispersion.build('-DAS2009', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. return sup. [docs]def build_dldfd_superfunctional(name, npoints, deriv):. sup = build_dldf_superfunctional(name, npoints, deriv); sup.set_name('dlDF+D'). # => +D <= #; sup.set_dispersion(PsiMod.Dispersion.build('-DAS2010', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. return sup. [docs]def build_hfd_superfunctional(name, npoints, deriv):. sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv); sup.set_name('HF+D'); sup.set_x_alpha(1.0). # => +D <= #; sup.set_dispersion(PsiMod.Dispersion.build('-DAS2010', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. sup.allocate(); return sup. [docs]def build_b2plyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B2PLYP'); # Tab in, trailing newlines; sup.set_description(' B2PLYP Double Hybrid Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Grimme, J. Chem. Phys., 124, 034108, 2006\n'). # Add member functionals; becke = build_functional('B88_X'); becke.set_alpha(1.0); sup.add_x_functional(becke); lyp = build_functional('LYP_C'); lyp.set_alpha(0.73); sup.add_c_functional(lyp). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.53); sup.set_c_alpha(0.27). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb97x_2tqz_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:70034,Energy Efficiency,allocate,allocate,70034,"PsiMod.Dispersion.build('-DAS2010', 1.0, 0.0, 0.0, 0.0)) # Does not have an s6, so set to 1.0. sup.allocate(); return sup. [docs]def build_b2plyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('B2PLYP'); # Tab in, trailing newlines; sup.set_description(' B2PLYP Double Hybrid Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Grimme, J. Chem. Phys., 124, 034108, 2006\n'). # Add member functionals; becke = build_functional('B88_X'); becke.set_alpha(1.0); sup.add_x_functional(becke); lyp = build_functional('LYP_C'); lyp.set_alpha(0.73); sup.add_c_functional(lyp). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.53); sup.set_c_alpha(0.27). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb97x_2tqz_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB97X-2(TQZ)'); # Tab in, trailing newlines; sup.set_description(' Double Hybrid LRC B97 GGA XC Functional (TQZ parametrization)\n'); # Tab in, trailing newlines; sup.set_citation(' J.-D. Chai and M. Head-Gordon, J. Chem. Phys., 131, 174105, 2009\n'). # Add member functionals; X = build_functional('wB97_X'); X.set_name('wB97X_X'); X.set_alpha(1.0 / (1.0 - 0.636158)). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 3.15503E-1); X.set_parameter('B97_a1', 1.04772E0); X.set_parameter('B97_a2', -2.33506E0); X.set_parameter('B97_a3', 3.19909E0). C = build_functional('B_C'); C.set_name('wB97X_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 5.18198E-1); C.set_parameter('B",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:71657,Energy Efficiency,allocate,allocate,71657,"set_alpha(1.0 / (1.0 - 0.636158)). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 3.15503E-1); X.set_parameter('B97_a1', 1.04772E0); X.set_parameter('B97_a2', -2.33506E0); X.set_parameter('B97_a3', 3.19909E0). C = build_functional('B_C'); C.set_name('wB97X_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 5.18198E-1); C.set_parameter('B97_os_a1', -5.85956E-1); C.set_parameter('B97_os_a2', 4.27080E0); C.set_parameter('B97_os_a3', -6.48897E0). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 9.08460E-1); C.set_parameter('B97_ss_a1', -2.80936E0); C.set_parameter('B97_ss_a2', 6.02676E0); C.set_parameter('B97_ss_a3', -4.56981E0). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.636158); sup.set_c_alpha(1.0); sup.set_c_os_alpha(0.447105); sup.set_c_ss_alpha(0.529319). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_wb97x_2lp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('wB97X-2(LP)'); # Tab in, trailing newlines; sup.set_description(' Double Hybrid LRC B97 GGA XC Functional (Large Pople parametrization)\n'); # Tab in, trailing newlines; sup.set_citation(' J.-D. Chai and M. Head-Gordon, J. Chem. Phys., 131, 174105, 2009\n'). # Add member functionals; X = build_functional('wB97_X'); X.set_name('wB97X_X'); X.set_alpha(1.0 / (1.0 - 0.678792)). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 2.51767E-1); X.set_parameter('B97_a1', 1.57375E0); X.set_parameter('B97_a2', -5.26624E0); X.set_parameter('B97_a3', 6.74313E0). C = build_functional('B_C'); C.set_name('wB97X_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 5.53261E-1); C.set_parame",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:73284,Energy Efficiency,allocate,allocate,73284,"X.set_alpha(1.0 / (1.0 - 0.678792)). X.set_parameter('B97_gamma', 0.004); X.set_parameter('B97_a0', 2.51767E-1); X.set_parameter('B97_a1', 1.57375E0); X.set_parameter('B97_a2', -5.26624E0); X.set_parameter('B97_a3', 6.74313E0). C = build_functional('B_C'); C.set_name('wB97X_C'). C.set_parameter('B97_os_gamma', 0.006); C.set_parameter('B97_os_a0', 5.53261E-1); C.set_parameter('B97_os_a1', -1.16626E0); C.set_parameter('B97_os_a2', 6.84409E0); C.set_parameter('B97_os_a3', -8.90640E0). C.set_parameter('B97_ss_gamma', 0.2); C.set_parameter('B97_ss_a0', 1.15698E0); C.set_parameter('B97_ss_a1', -3.31669E0); C.set_parameter('B97_ss_a2', 6.27265E0); C.set_parameter('B97_ss_a3', -4.51464E0). sup.add_x_functional(X); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.3); sup.set_c_omega(0.0); sup.set_x_alpha(0.678792); sup.set_c_alpha(1.0); sup.set_c_os_alpha(0.477992); sup.set_c_ss_alpha(0.581569). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe0_2_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('PBE0-2'); # Tab in, trailing newlines; sup.set_description(' PBE0-2 Double Hydrid Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J. Chai, Chem. Phys. Lett., 538, 121-125, 2012\n'). # Add member functionals; X = build_functional('PBE_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('PBE_C'); C.set_alpha(0.5); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.793701); sup.set_c_alpha(0.5). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_dsd_blyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:74160,Energy Efficiency,allocate,allocate,74160,".set_c_os_alpha(0.477992); sup.set_c_ss_alpha(0.581569). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_pbe0_2_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('PBE0-2'); # Tab in, trailing newlines; sup.set_description(' PBE0-2 Double Hydrid Exchange-Correlation Functional\n'); # Tab in, trailing newlines; sup.set_citation(' J. Chai, Chem. Phys. Lett., 538, 121-125, 2012\n'). # Add member functionals; X = build_functional('PBE_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('PBE_C'); C.set_alpha(0.5); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.793701); sup.set_c_alpha(0.5). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_dsd_blyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('DSD-BLYP'); # Tab in, trailing newlines; sup.set_description(' DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Kozuch, Phys. Chem. Chem. Phys., 13, 20104, 2011\n'). # Add member functionals; X = build_functional('B88_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('LYP_C'); C.set_alpha(0.55); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.71); sup.set_c_alpha(1.0); sup.set_c_os_alpha(0.46); sup.set_c_ss_alpha(0.43). # => -D2 <=. sup.set_dispersion(PsiMod.Dispersion.build('-D2', 0.35, 0.0, 0.0, 0.0)). # => End User-Customization <= #. # Cal",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:75189,Energy Efficiency,allocate,allocate,75189,"dsd_blyp_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('DSD-BLYP'); # Tab in, trailing newlines; sup.set_description(' DSD-BLYP Dispersion-corrected SCS Double Hybrid XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Kozuch, Phys. Chem. Chem. Phys., 13, 20104, 2011\n'). # Add member functionals; X = build_functional('B88_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('LYP_C'); C.set_alpha(0.55); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.71); sup.set_c_alpha(1.0); sup.set_c_os_alpha(0.46); sup.set_c_ss_alpha(0.43). # => -D2 <=. sup.set_dispersion(PsiMod.Dispersion.build('-D2', 0.35, 0.0, 0.0, 0.0)). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_dsd_pbep86_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('DSD-PBEP86'); # Tab in, trailing newlines; sup.set_description(' DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2)\n'); # Tab in, trailing newlines; sup.set_citation(' S. Kozuch, Phys. Chem. Chem. Phys., 13, 20104, 2011\n'). # Add member functionals; X = build_functional('PBE_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('P86_C'); C.set_alpha(0.45); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.68); sup.set_c_alpha(1.0); sup.set_c_ss_alpha(0.23); sup.set_c_os_alpha(0.51). # => -D2 <=. sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('dsd-pbep86', 'd2p4'))). # => End U",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:76247,Energy Efficiency,allocate,allocate,76247,"me, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('DSD-PBEP86'); # Tab in, trailing newlines; sup.set_description(' DSD-PBEP86 Dispersion-corrected SCS Double Hybrid XC Functional (opt. for -D2)\n'); # Tab in, trailing newlines; sup.set_citation(' S. Kozuch, Phys. Chem. Chem. Phys., 13, 20104, 2011\n'). # Add member functionals; X = build_functional('PBE_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('P86_C'); C.set_alpha(0.45); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.68); sup.set_c_alpha(1.0); sup.set_c_ss_alpha(0.23); sup.set_c_os_alpha(0.51). # => -D2 <=. sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('dsd-pbep86', 'd2p4'))). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_dsd_pbepbe_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('DSD-PBEPBE'); # Tab in, trailing newlines; sup.set_description(' DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Kozuch, Phys. Chem. Chem. Phys., 13, 20104, 2011\n'). # Add member functionals; X = build_functional('PBE_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('PBE_C'); C.set_alpha(0.51); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.66); sup.set_c_alpha(1.0); sup.set_c_ss_alpha(0.12); sup.set_c_os_alpha(0.53). # => -D2 <=. sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('dsd-pbepbe', 'd2p4'))). # => End User-Customizati",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:77290,Energy Efficiency,allocate,allocate,77290,"erfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. # No spaces, keep it short and according to convention; sup.set_name('DSD-PBEPBE'); # Tab in, trailing newlines; sup.set_description(' DSD-PBEPBE Dispersion-corrected SCS Double Hybrid XC Functional\n'); # Tab in, trailing newlines; sup.set_citation(' S. Kozuch, Phys. Chem. Chem. Phys., 13, 20104, 2011\n'). # Add member functionals; X = build_functional('PBE_X'); X.set_alpha(1.0); sup.add_x_functional(X); C = build_functional('PBE_C'); C.set_alpha(0.51); sup.add_c_functional(C). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.66); sup.set_c_alpha(1.0); sup.set_c_ss_alpha(0.12); sup.set_c_os_alpha(0.53). # => -D2 <=. sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('dsd-pbepbe', 'd2p4'))). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. [docs]def build_b2plypd2p4_superfunctional(name, npoints, deriv):. sup = build_b2plyp_superfunctional(name, npoints, deriv); sup.set_name('B2PLYP-D2P4'). # => -D2 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b2plyp', 'd2p4'))). return sup. [docs]def build_b2plypd2gr_superfunctional(name, npoints, deriv):. sup = build_b2plyp_superfunctional(name, npoints, deriv); sup.set_name('B2PLYP-D2GR'). # => -D2 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b2plyp', 'd2gr'))). return sup. [docs]def build_b2plypd3zero_superfunctional(name, npoints, deriv):. sup = build_b2plyp_superfunctional(name, npoints, deriv); sup.set_name('B2PLYP-D3ZERO'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b2plyp', 'd3zero'))). return sup. [docs]def build_b2plypd3bj_superfunctional(name, npoints, deriv):. sup = build_b2plyp_superfunctional(name, npoints, deriv); sup.set_name('B2PLYP-D3BJ'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.bu",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/functional.html:79104,Energy Efficiency,allocate,allocate,79104,"pd3bj_superfunctional(name, npoints, deriv):. sup = build_b2plyp_superfunctional(name, npoints, deriv); sup.set_name('B2PLYP-D3BJ'). # => -D3 <= #; sup.set_dispersion(PsiMod.Dispersion.build(*dash_server('b2plyp', 'd3bj'))). return sup. [docs]def build_primitive_superfunctional(name, npoints, deriv):. # Call this first; sup = PsiMod.SuperFunctional.blank(); sup.set_max_points(npoints); sup.set_deriv(deriv). # => User-Customization <= #. key = name.upper(); fun = build_functional(key). # No spaces, keep it short and according to convention; sup.set_name(key); # Tab in, trailing newlines; sup.set_description(fun.description()); # Tab in, trailing newlines; sup.set_citation(fun.citation()). # Add member functionals. if (key[-1] == 'X'):; sup.add_x_functional(fun); else:; sup.add_c_functional(fun). # Set GKS up after adding functionals; sup.set_x_omega(0.0); sup.set_c_omega(0.0); sup.set_x_alpha(0.0); sup.set_c_alpha(0.0). # => End User-Customization <= #. # Call this last; sup.allocate(); return sup. # Superfunctional lookup table; superfunctionals = {; 's_x' : build_primitive_superfunctional,; 'b88_x' : build_primitive_superfunctional,; 'b3_x' : build_primitive_superfunctional,; 'pbe_x' : build_primitive_superfunctional,; 'rpbe_x' : build_primitive_superfunctional,; 'sogga_x' : build_primitive_superfunctional,; 'pbesol_x' : build_primitive_superfunctional,; 'pw91_x' : build_primitive_superfunctional,; 'ws_x' : build_ws_x_superfunctional,; 'wpbe_x' : build_wpbe_x_superfunctional,; 'wpbesol_x' : build_wpbesol_x_superfunctional,; 'wb88_x' : build_wb88_x_superfunctional,; 'lyp_c' : build_primitive_superfunctional,; 'ft97b_x' : build_primitive_superfunctional,; 'pz81_c' : build_primitive_superfunctional,; 'p86_c' : build_primitive_superfunctional,; 'pw91_c' : build_primitive_superfunctional,; 'pw92_c' : build_primitive_superfunctional,; 'pbe_c' : build_primitive_superfunctional,; 'ft97_c' : build_primitive_superfunctional,; 'vwn5rpa_c' : build_primitive_superfunctional,; 'v",MatchSource.WIKI,psi4manual/4.0b4/_modules/functional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/functional.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:5711,Deployability,update,updated,5711,"lts <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; procedures['energy']['g2'] = run_gaussian_2. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:2432,Energy Efficiency,energy,energy,2432,"p2 (no frozen core) level; # note: freeze_core isn't an option in MP2; PsiMod.set_global_option('FREEZE_CORE',""FALSE""); optimize('conv-mp2'); PsiMod.clean(). # qcisd(t); PsiMod.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); PsiMod.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = ref.nalpha() - nfzc; nbeta = ref.nbeta() - nfzc; # hlc of gaussian-2; hlc = -0.00481 * nalpha -0.00019 * nbeta; # hlc of gaussian-1; hlc1 = -0.00614 * nalpha. eqci_6311gdp = PsiMod.get_variable(""QCISD(T) TOTAL ENERGY""); emp4_6311gd = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311gd = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for diffuse functions; PsiMod.set_global_option('BASIS',""6-311+G(D_P)""); energy('mp4'); emp4_6311pg_dp = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311pg_dp = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for polarization functions; PsiMod.set_global_option('BASIS',""6-311G(2DF_P)""); energy('mp4'); emp4_6311g2dfp = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311g2dfp = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # big basis mp2; PsiMod.set_global_option('BASIS',""6-311+G(3DF_2P)""); run_fnocc('_mp2',**kwargs); emp2_big = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). eqci = eqci_6311gdp; e_delta_g2 = emp2_big + emp2_6311gd - emp2_6311g2dfp - emp2_6311pg_dp; e_plus = emp4_6311pg_dp - emp4_6311gd; e_2df = emp4_6311g2dfp - emp4_6311gd. eg2 = eqci + e_delta_g2 + e_plus + e_2df; eg2_mp2_0k = eqci + (emp2_big - emp2_6311gd) + hlc + zpe. PsiMod.print_out('\n'); PsiMod.print_out(' ==> G1/G2 Energy Components <==\n'); PsiMod.print_out('\n'); PsiMod.print_out(' QCISD(T): %20.12lf\n' % eqci); PsiMod.print_out(' E(De",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:2671,Energy Efficiency,energy,energy,2671,"d.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = ref.nalpha() - nfzc; nbeta = ref.nbeta() - nfzc; # hlc of gaussian-2; hlc = -0.00481 * nalpha -0.00019 * nbeta; # hlc of gaussian-1; hlc1 = -0.00614 * nalpha. eqci_6311gdp = PsiMod.get_variable(""QCISD(T) TOTAL ENERGY""); emp4_6311gd = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311gd = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for diffuse functions; PsiMod.set_global_option('BASIS',""6-311+G(D_P)""); energy('mp4'); emp4_6311pg_dp = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311pg_dp = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for polarization functions; PsiMod.set_global_option('BASIS',""6-311G(2DF_P)""); energy('mp4'); emp4_6311g2dfp = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311g2dfp = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # big basis mp2; PsiMod.set_global_option('BASIS',""6-311+G(3DF_2P)""); run_fnocc('_mp2',**kwargs); emp2_big = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). eqci = eqci_6311gdp; e_delta_g2 = emp2_big + emp2_6311gd - emp2_6311g2dfp - emp2_6311pg_dp; e_plus = emp4_6311pg_dp - emp4_6311gd; e_2df = emp4_6311g2dfp - emp4_6311gd. eg2 = eqci + e_delta_g2 + e_plus + e_2df; eg2_mp2_0k = eqci + (emp2_big - emp2_6311gd) + hlc + zpe. PsiMod.print_out('\n'); PsiMod.print_out(' ==> G1/G2 Energy Components <==\n'); PsiMod.print_out('\n'); PsiMod.print_out(' QCISD(T): %20.12lf\n' % eqci); PsiMod.print_out(' E(Delta): %20.12lf\n' % e_delta_g2); PsiMod.print_out(' E(2DF): %20.12lf\n' % e_2df); PsiMod.print_out(' E(+): %20.12lf\n' % e_plus); PsiMod.print_out(' E(G1 HLC): %20.12lf\n' % hlc1); PsiMod.print_out(' E(G2 HLC): %20.12lf\n' % hlc); PsiMod.p",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:4486,Energy Efficiency,energy,energy,4486,"E(2DF): %20.12lf\n' % e_2df); PsiMod.print_out(' E(+): %20.12lf\n' % e_plus); PsiMod.print_out(' E(G1 HLC): %20.12lf\n' % hlc1); PsiMod.print_out(' E(G2 HLC): %20.12lf\n' % hlc); PsiMod.print_out(' E(ZPE): %20.12lf\n' % zpe); PsiMod.print_out('\n'); PsiMod.print_out(' ==> 0 Kelvin Results <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; proc",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:4621,Energy Efficiency,energy,energy,4621,"Mod.print_out(' E(G2 HLC): %20.12lf\n' % hlc); PsiMod.print_out(' E(ZPE): %20.12lf\n' % zpe); PsiMod.print_out('\n'); PsiMod.print_out(' ==> 0 Kelvin Results <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; procedures['energy']['g2'] = run_gaussian_2. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. ",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:4982,Energy Efficiency,energy,energy,4982,"lts <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; procedures['energy']['g2'] = run_gaussian_2. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:5107,Energy Efficiency,energy,energy,5107,"lts <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; procedures['energy']['g2'] = run_gaussian_2. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:5437,Energy Efficiency,energy,energy,5437,"lts <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; procedures['energy']['g2'] = run_gaussian_2. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:5490,Energy Efficiency,energy,energy,5490,"lts <==\n'); PsiMod.print_out('\n'); eg2_0k = eg2 + zpe + hlc; PsiMod.print_out(' G1: %20.12lf\n' % (eqci + e_plus + e_2df + hlc1 + zpe)); PsiMod.print_out(' G2(MP2): %20.12lf\n' % eg2_mp2_0k); PsiMod.print_out(' G2: %20.12lf\n' % eg2_0k). PsiMod.set_variable(""G1 TOTAL ENERGY"",eqci + e_plus + e_2df + hlc1 + zpe); PsiMod.set_variable(""G2 TOTAL ENERGY"",eg2_0k); PsiMod.set_variable(""G2(MP2) TOTAL ENERGY"",eg2_mp2_0k). PsiMod.print_out('\n'); T = PsiMod.get_global_option('T'); PsiMod.print_out(' ==> %3.0lf Kelvin Results <==\n'% T); PsiMod.print_out('\n'). internal_energy = eg2_mp2_0k + du - zpe / 0.8929; enthalpy = eg2_mp2_0k + dh - zpe / 0.8929; gibbs = eg2_mp2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2(MP2) energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2(MP2) enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2(MP2) free energy: %20.12lf\n' % gibbs); PsiMod.print_out('\n'). PsiMod.set_variable(""G2(MP2) INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2(MP2) ENTHALPY"",enthalpy); PsiMod.set_variable(""G2(MP2) FREE ENERGY"",gibbs). internal_energy = eg2_0k + du - zpe / 0.8929; enthalpy = eg2_0k + dh - zpe / 0.8929; gibbs = eg2_0k + dg - zpe / 0.8929. PsiMod.print_out(' G2 energy: %20.12lf\n' % internal_energy ); PsiMod.print_out(' G2 enthalpy: %20.12lf\n' % enthalpy); PsiMod.print_out(' G2 free energy: %20.12lf\n' % gibbs). PsiMod.set_variable(""CURRENT ENERGY"",eg2_0k). PsiMod.set_variable(""G2 INTERNAL ENERGY"",internal_energy); PsiMod.set_variable(""G2 ENTHALPY"",enthalpy); PsiMod.set_variable(""G2 FREE ENERGY"",gibbs). PsiMod.clean(). optstash.restore(). # return 0K g2 results; return eg2_0k. # aliases for g2; procedures['energy']['gaussian-2'] = run_gaussian_2; procedures['energy']['g2'] = run_gaussian_2. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:826,Performance,optimiz,optimize,826,"﻿. gaussian_n — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for gaussian_n; # Gn theory. . import PsiMod; import re; import os; import math; import warnings; from driver import *; from molutil import *; from text import *; from procutil import *; from physconst import *; # never import aliases into this file. [docs]def run_gaussian_2(name, **kwargs):. # throw an exception for open-shells; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""""""g2 computations require ""reference rhf"".""""""). # stash user options:; optstash = OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FREEZE_CORE'],; ['SCF','SCF_TYPE']). # override default scf_type; PsiMod.set_local_option('SCF','SCF_TYPE','OUT_OF_CORE'). # optimize geometry at scf level; PsiMod.clean(); PsiMod.set_global_option('BASIS',""6-31G(D)""); optimize('scf'); PsiMod.clean(). # scf frequencies for zpe; frequency('scf'). # thermodynamic properties; du = PsiMod.get_variable('INTERNAL ENERGY CORRECTION'); dh = PsiMod.get_variable('ENTHALPY CORRECTION'); dg = PsiMod.get_variable('GIBBS FREE ENERGY CORRECTION'). ref = PsiMod.wavefunction(); freqs = ref.frequencies(); nfreq = freqs.dim(0); freqsum = 0.0; for i in range (0,nfreq):; freqsum += freqs.get(i); zpe = freqsum / psi_hartree2wavenumbers * 0.8929 * 0.5; PsiMod.clean(). # optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2; PsiMod.set_global_option('FREEZE_CORE',""FALSE""); optimize('conv-mp2'); PsiMod.clean(). # qcisd(t); PsiMod.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); PsiMod.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = r",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:920,Performance,optimiz,optimize,920,"﻿. gaussian_n — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for gaussian_n; # Gn theory. . import PsiMod; import re; import os; import math; import warnings; from driver import *; from molutil import *; from text import *; from procutil import *; from physconst import *; # never import aliases into this file. [docs]def run_gaussian_2(name, **kwargs):. # throw an exception for open-shells; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""""""g2 computations require ""reference rhf"".""""""). # stash user options:; optstash = OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FREEZE_CORE'],; ['SCF','SCF_TYPE']). # override default scf_type; PsiMod.set_local_option('SCF','SCF_TYPE','OUT_OF_CORE'). # optimize geometry at scf level; PsiMod.clean(); PsiMod.set_global_option('BASIS',""6-31G(D)""); optimize('scf'); PsiMod.clean(). # scf frequencies for zpe; frequency('scf'). # thermodynamic properties; du = PsiMod.get_variable('INTERNAL ENERGY CORRECTION'); dh = PsiMod.get_variable('ENTHALPY CORRECTION'); dg = PsiMod.get_variable('GIBBS FREE ENERGY CORRECTION'). ref = PsiMod.wavefunction(); freqs = ref.frequencies(); nfreq = freqs.dim(0); freqsum = 0.0; for i in range (0,nfreq):; freqsum += freqs.get(i); zpe = freqsum / psi_hartree2wavenumbers * 0.8929 * 0.5; PsiMod.clean(). # optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2; PsiMod.set_global_option('FREEZE_CORE',""FALSE""); optimize('conv-mp2'); PsiMod.clean(). # qcisd(t); PsiMod.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); PsiMod.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = r",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:1408,Performance,optimiz,optimize,1408,"lls; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""""""g2 computations require ""reference rhf"".""""""). # stash user options:; optstash = OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FREEZE_CORE'],; ['SCF','SCF_TYPE']). # override default scf_type; PsiMod.set_local_option('SCF','SCF_TYPE','OUT_OF_CORE'). # optimize geometry at scf level; PsiMod.clean(); PsiMod.set_global_option('BASIS',""6-31G(D)""); optimize('scf'); PsiMod.clean(). # scf frequencies for zpe; frequency('scf'). # thermodynamic properties; du = PsiMod.get_variable('INTERNAL ENERGY CORRECTION'); dh = PsiMod.get_variable('ENTHALPY CORRECTION'); dg = PsiMod.get_variable('GIBBS FREE ENERGY CORRECTION'). ref = PsiMod.wavefunction(); freqs = ref.frequencies(); nfreq = freqs.dim(0); freqsum = 0.0; for i in range (0,nfreq):; freqsum += freqs.get(i); zpe = freqsum / psi_hartree2wavenumbers * 0.8929 * 0.5; PsiMod.clean(). # optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2; PsiMod.set_global_option('FREEZE_CORE',""FALSE""); optimize('conv-mp2'); PsiMod.clean(). # qcisd(t); PsiMod.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); PsiMod.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = ref.nalpha() - nfzc; nbeta = ref.nbeta() - nfzc; # hlc of gaussian-2; hlc = -0.00481 * nalpha -0.00019 * nbeta; # hlc of gaussian-1; hlc1 = -0.00614 * nalpha. eqci_6311gdp = PsiMod.get_variable(""QCISD(T) TOTAL ENERGY""); emp4_6311gd = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311gd = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for diffuse functions; PsiMod.set_global_option('BASIS',""6-311+G(D_P)""); energy('mp4'); emp4_6311p",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:1550,Performance,optimiz,optimize,1550,"computations require ""reference rhf"".""""""). # stash user options:; optstash = OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FREEZE_CORE'],; ['SCF','SCF_TYPE']). # override default scf_type; PsiMod.set_local_option('SCF','SCF_TYPE','OUT_OF_CORE'). # optimize geometry at scf level; PsiMod.clean(); PsiMod.set_global_option('BASIS',""6-31G(D)""); optimize('scf'); PsiMod.clean(). # scf frequencies for zpe; frequency('scf'). # thermodynamic properties; du = PsiMod.get_variable('INTERNAL ENERGY CORRECTION'); dh = PsiMod.get_variable('ENTHALPY CORRECTION'); dg = PsiMod.get_variable('GIBBS FREE ENERGY CORRECTION'). ref = PsiMod.wavefunction(); freqs = ref.frequencies(); nfreq = freqs.dim(0); freqsum = 0.0; for i in range (0,nfreq):; freqsum += freqs.get(i); zpe = freqsum / psi_hartree2wavenumbers * 0.8929 * 0.5; PsiMod.clean(). # optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2; PsiMod.set_global_option('FREEZE_CORE',""FALSE""); optimize('conv-mp2'); PsiMod.clean(). # qcisd(t); PsiMod.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); PsiMod.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = ref.nalpha() - nfzc; nbeta = ref.nbeta() - nfzc; # hlc of gaussian-2; hlc = -0.00481 * nalpha -0.00019 * nbeta; # hlc of gaussian-1; hlc1 = -0.00614 * nalpha. eqci_6311gdp = PsiMod.get_variable(""QCISD(T) TOTAL ENERGY""); emp4_6311gd = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311gd = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for diffuse functions; PsiMod.set_global_option('BASIS',""6-311+G(D_P)""); energy('mp4'); emp4_6311pg_dp = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311pg_dp = PsiMod.get_variable(""M",MatchSource.WIKI,psi4manual/4.0b4/_modules/gaussian_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html
https://psicode.org/psi4manual/4.0b4/_modules/index.html:143,Availability,avail,available,143,"﻿. Overview: module code — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . All modules for which code is available; aliases; basislist; basislistdunning; basislistother; dashparam; diatomic; driver; frac; functional; gaussian_n; input; molutil; optproc; proc; procutil; psiexceptions; pubchem; qcdb.dbproc; qcdb.exceptions; qcdb.libmintscoordentry; qcdb.libmintsmolecule; qcdb.molecule; qcdb.psiutil; qcdb.vecutil; qmmm; text; util; wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/index.html
https://psicode.org/psi4manual/4.0b4/_modules/index.html:654,Deployability,update,updated,654,"﻿. Overview: module code — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . All modules for which code is available; aliases; basislist; basislistdunning; basislistother; dashparam; diatomic; driver; frac; functional; gaussian_n; input; molutil; optproc; proc; procutil; psiexceptions; pubchem; qcdb.dbproc; qcdb.exceptions; qcdb.libmintscoordentry; qcdb.libmintsmolecule; qcdb.molecule; qcdb.psiutil; qcdb.vecutil; qmmm; text; util; wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/index.html
https://psicode.org/psi4manual/4.0b4/_modules/index.html:471,Integrability,wrap,wrappers,471,"﻿. Overview: module code — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » . All modules for which code is available; aliases; basislist; basislistdunning; basislistother; dashparam; diatomic; driver; frac; functional; gaussian_n; input; molutil; optproc; proc; procutil; psiexceptions; pubchem; qcdb.dbproc; qcdb.exceptions; qcdb.libmintscoordentry; qcdb.libmintsmolecule; qcdb.molecule; qcdb.psiutil; qcdb.vecutil; qmmm; text; util; wrappers. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/index.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:14964,Availability,error,error,14964,"ine); sys.exit(1). # Return is actually an ExternalPotential, not a QMMM; extern += '%sqmmm.populateExtern()\n' % (spacing); extern += '%s%s = qmmm.extern\n' % (spacing, name). extern += '%sPsiMod.set_global_option_python(""EXTERN"", extern)\n' % (spacing). return extern. [docs]def check_parentheses_and_brackets(input_string, exit_on_error):; """"""Function to check that all parenthesis and brackets; in *input_string* are paired. On that condition, *exit_on_error* =1,; otherwise 0. """"""; # This returns 1 if the string's all matched up, 0 otherwise; import collections. # create left to right parenthesis mappings; lrmap = {""("":"")"", ""["":""]"", ""{"":""}""}. # derive sets of left and right parentheses; lparens = set(lrmap.keys()); rparens = set(lrmap.values()). parenstack = collections.deque(); all_matched = 1; for ch in input_string:; if ch in lparens:; parenstack.append(ch); elif ch in rparens:; opench = """"; try:; opench = parenstack.pop(); except IndexError:; # Run out of opening parens; all_matched = 0; if exit_on_error:; print(""Input error: extra %s"" % ch); sys.exit(1); if lrmap[opench] != ch:; # wrong type of parenthesis popped from stack; all_matched = 0; if exit_on_error:; print(""Input error: %s closed with a %s"" % (opench, ch)); sys.exit(1); if(len(parenstack) != 0):; all_matched = 0; if exit_on_error:; print(""Input error: Unmatched %s"" % parenstack.pop()); sys.exit(1). return all_matched. [docs]def parse_multiline_array(input_list):; """"""Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. """"""; line = input_list.pop(0); # Keep adding lines to the current one, until all parens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % line. [docs]def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, an",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:15122,Availability,error,error,15122,"' % (spacing, name). extern += '%sPsiMod.set_global_option_python(""EXTERN"", extern)\n' % (spacing). return extern. [docs]def check_parentheses_and_brackets(input_string, exit_on_error):; """"""Function to check that all parenthesis and brackets; in *input_string* are paired. On that condition, *exit_on_error* =1,; otherwise 0. """"""; # This returns 1 if the string's all matched up, 0 otherwise; import collections. # create left to right parenthesis mappings; lrmap = {""("":"")"", ""["":""]"", ""{"":""}""}. # derive sets of left and right parentheses; lparens = set(lrmap.keys()); rparens = set(lrmap.values()). parenstack = collections.deque(); all_matched = 1; for ch in input_string:; if ch in lparens:; parenstack.append(ch); elif ch in rparens:; opench = """"; try:; opench = parenstack.pop(); except IndexError:; # Run out of opening parens; all_matched = 0; if exit_on_error:; print(""Input error: extra %s"" % ch); sys.exit(1); if lrmap[opench] != ch:; # wrong type of parenthesis popped from stack; all_matched = 0; if exit_on_error:; print(""Input error: %s closed with a %s"" % (opench, ch)); sys.exit(1); if(len(parenstack) != 0):; all_matched = 0; if exit_on_error:; print(""Input error: Unmatched %s"" % parenstack.pop()); sys.exit(1). return all_matched. [docs]def parse_multiline_array(input_list):; """"""Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. """"""; line = input_list.pop(0); # Keep adding lines to the current one, until all parens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % line. [docs]def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, and puts them on a single line; # Start by converting the input to a list, splitting at newlines; input_list = inputfile.split(""\n""); set_re = re.compile(r'^(",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:15256,Availability,error,error,15256,"ackets(input_string, exit_on_error):; """"""Function to check that all parenthesis and brackets; in *input_string* are paired. On that condition, *exit_on_error* =1,; otherwise 0. """"""; # This returns 1 if the string's all matched up, 0 otherwise; import collections. # create left to right parenthesis mappings; lrmap = {""("":"")"", ""["":""]"", ""{"":""}""}. # derive sets of left and right parentheses; lparens = set(lrmap.keys()); rparens = set(lrmap.values()). parenstack = collections.deque(); all_matched = 1; for ch in input_string:; if ch in lparens:; parenstack.append(ch); elif ch in rparens:; opench = """"; try:; opench = parenstack.pop(); except IndexError:; # Run out of opening parens; all_matched = 0; if exit_on_error:; print(""Input error: extra %s"" % ch); sys.exit(1); if lrmap[opench] != ch:; # wrong type of parenthesis popped from stack; all_matched = 0; if exit_on_error:; print(""Input error: %s closed with a %s"" % (opench, ch)); sys.exit(1); if(len(parenstack) != 0):; all_matched = 0; if exit_on_error:; print(""Input error: Unmatched %s"" % parenstack.pop()); sys.exit(1). return all_matched. [docs]def parse_multiline_array(input_list):; """"""Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. """"""; line = input_list.pop(0); # Keep adding lines to the current one, until all parens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % line. [docs]def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, and puts them on a single line; # Start by converting the input to a list, splitting at newlines; input_list = inputfile.split(""\n""); set_re = re.compile(r'^(\s*?)set\s+(?:([-,\w]+)\s+)?(\w+)[\s=]+\[.*', re.IGNORECASE); newinput = """"; while len(input_list):; line = input_list[0]; if set_re.match(line):; # ",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:23315,Deployability,update,updated,23315,"is_block, process_basis_block, temp). # Process ""basis file ... ""; file_pid = re.compile(r'(\s*?)filename\s*(\b.*\b)\s*$',; re.MULTILINE | re.IGNORECASE); temp = re.sub(file_pid, process_filename, temp). # imports; imports = 'from PsiMod import *\n'; imports += 'from physconst import *\n'; imports += 'from molutil import *\n'; imports += 'from driver import *\n'; imports += 'from text import *\n'; imports += 'from inpsight import *\n'; imports += 'from wrappers import *\n'; imports += 'from gaussian_n import *\n'; imports += 'from aliases import *\n'; imports += 'from psiexceptions import *\n'; imports += 'from util import *\n'; imports += 'from qmmm import *\n'; imports += 'from frac import *\n'; imports += 'from diatomic import *\n'; imports += 'from functional import *\n'; imports += 'from pubchem import *\n'; imports += 'from psifiles import *\n'; imports += 'import pickle\n'; imports += 'psi4_io = PsiMod.IOManager.shared_object()\n'. # psirc (a baby PSIthon script that might live in ~/.psi4rc); psirc = ''; homedir = os.path.expanduser('~'); psirc_file = homedir + '/.psi4rc'; if os.path.isfile(psirc_file):; fh = open(psirc_file); psirc = fh.read(); fh.close(). # Override scratch directory if user specified via env_var; scratch = ''; scratch_env = PsiMod.Process.environment['PSI_SCRATCH']; if len(scratch_env):; scratch += 'psi4_io.set_default_path(""%s"")\n' % (scratch_env). blank_mol = 'geometry(""""""\n'; blank_mol += '0 1\nH\nH 1 0.74\n'; blank_mol += '"""""",""blank_molecule_psi4_yo"")\n'. temp = imports + psirc + scratch + blank_mol + temp. return temp. if __name__ == ""__main__"":; result = process_input(""""""; molecule h2 {; H; H 1 R. R = .9; }. set basis 6-31G**. """"""). print(""Result\n==========================""); print(result). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:11959,Energy Efficiency,charge,charge,11959,"ines = lines2. # 1. Look for units [ang|bohr|au|a.u.] defaults to ang; re_units = re.compile(r'^\s*units?[\s=]+((ang)|(angstrom)|(bohr)|(au)|(a\.u\.))$\s*', re.IGNORECASE); units = 'ang'; lines2 = []; for line in lines:; mobj = re_units.match(line); if (mobj):; unit = mobj.group(1); if (unit == 'bohr' or unit == 'au' or unit == 'a.u.'):; units = 'bohr'; else:; units = 'ang'; else:; lines2.append(line); lines = lines2. # 2. Look for basis basisname, defaults to cc-pvdz; # 3. Look for df_basis_scf basisname, defaults to cc-pvdz-jkfit; re_basis = re.compile(r'\s*basis[\s=]+(\S+)\s*$', re.IGNORECASE); re_df_basis = re.compile(r'\s*df_basis_scf[\s=]+(\S+)\s*$', re.IGNORECASE); basis = 'cc-pvdz'; df_basis_scf = 'cc-pvdz-jkfit'; lines2 = []; for line in lines:; mobj = re_basis.match(line); if (mobj):; basis = mobj.group(1); else:; mobj = re_df_basis.match(line); if (mobj):; df_basis_scf = mobj.group(1); else:; lines2.append(line); lines = lines2. # 4. Look for charge lines Z x y z, convert according to unit convention; charge_re = re.compile(r'^\s*' + NUMBER + r'\s+' + NUMBER + r'\s+' + NUMBER + r'\s+' + NUMBER + r'\s*$'); lines2 = []; for line in lines:; mobj = charge_re.match(line); if (mobj):; if (units == 'ang'):; extern += '%sqmmm.addChargeAngstrom(%s,%s,%s,%s)\n' % (spacing, mobj.group(1), mobj.group(2), mobj.group(3), mobj.group(4)); if (units == 'bohr'):; extern += '%sqmmm.addChargeBohr(%s,%s,%s,%s)\n' % (spacing, mobj.group(1), mobj.group(2), mobj.group(3), mobj.group(4)); else:; lines2.append(line); lines = lines2. # 5. Look for diffuse regions, which are XYZ molecules seperated by the usual -- lines; spacer_re = re.compile(r'^\s*--\s*$'); frags = []; frags.append([]); for line in lines:; mobj = spacer_re.match(line); if (mobj):; if (len(frags[len(frags) - 1])):; frags.append([]); else:; frags[len(frags) - 1].append(line). extern += '%sextern_mol_temp = PsiMod.get_active_molecule()\n' % (spacing). mol_re = re.compile(r'\s*\S+\s+' + NUMBER + r'\s+' + NUMBER + r'\s+",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:814,Integrability,wrap,wrapping,814,"﻿. input — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for input; ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1183,Integrability,wrap,wrap,1183,"is is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1297,Integrability,wrap,wrapped,1297,"hon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; # If it's really a global, we need slightly different syntax; return spaces + ""PsiMod.set_global_option(\""%s\"", %s)\n"" % (key, value); else:; # It's a local ",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1438,Integrability,wrap,wrap,1438," getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; # If it's really a global, we need slightly different syntax; return spaces + ""PsiMod.set_global_option(\""%s\"", %s)\n"" % (key, value); else:; # It's a local option, so we need the module name in there too; return spaces + ""PsiMod.set_local_option(\""%s\"", \""%s\"", %s)\n"" % (module, key, value). [doc",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1558,Integrability,wrap,wraps,1558,"to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; # If it's really a global, we need slightly different syntax; return spaces + ""PsiMod.set_global_option(\""%s\"", %s)\n"" % (key, value); else:; # It's a local option, so we need the module name in there too; return spaces + ""PsiMod.set_local_option(\""%s\"", \""%s\"", %s)\n"" % (module, key, value). [docs]def process_set_command(matchobj):; """"""Function to process match of all individual ``set (module_list); key {[value_list] or $value or value}",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:4338,Integrability,message,message,4338,"mmand + line; if not check_parentheses_and_brackets(command, 0):; # If the brackets don't match up, we need to move on to the next line; # and keep going, until they do match. Only then do we process the command; continue; # Ignore blank/empty lines; if (not line or line.isspace()):; continue; matchobj = re.match(r'^\s*(\w+)[\s=]+(.*?)$', command); # Is the syntax correct? If so, process the line; if matchobj:; result = result + process_option(spaces, module, matchobj.group(1), matchobj.group(2), command); # Reset the string; command = """"; else:; bad_option_syntax(command); return result. [docs]def process_pubchem_command(matchobj):; """"""Function to process match of ``pubchem`` in molecule block.""""""; string = matchobj.group(2); if re.match(r'^\s*[0-9]+\s*$', string):; # This is just a number - must be a CID; pcobj = PubChemObj(int(string), '', ''); try:; return pcobj.getMoleculeString(); except Exception as e:; return e.message; else:; # Search pubchem for the provided string; try:; results = getPubChemResults(string); except Exception as e:; return e.message. # N.B. Anything starting with PubchemError will be handled correctly by the molecule parser; # in libmints, which will just print the rest of the string and exit gracefully.; if(not results):; # Nothing!; return ""PubchemError\n\tNo results were found when searching PubChem for %s.\n"" % string; elif(len(results) == 1):; # There's only 1 result - use it; return results[0].getMoleculeString(); else:; # There are multiple results. Print and exit; msg = ""\tPubchemError\n""; msg += ""\tMultiple pubchem results were found. Replace\n\n\t\tpubchem:%s\n\n"" % string; msg += ""\twith the Chemical ID number or exact name from one of the following and re-run.\n\n""; msg += ""\t Chemical ID IUPAC Name\n\n""; for result in results:; msg += ""%s"" % result; if result.name().lower() == string.lower():; #We've found an exact match!; return result.getMoleculeString(); return msg. [docs]def process_molecule_command(matchobj):; """"""Function ",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:4472,Integrability,message,message,4472,"the brackets don't match up, we need to move on to the next line; # and keep going, until they do match. Only then do we process the command; continue; # Ignore blank/empty lines; if (not line or line.isspace()):; continue; matchobj = re.match(r'^\s*(\w+)[\s=]+(.*?)$', command); # Is the syntax correct? If so, process the line; if matchobj:; result = result + process_option(spaces, module, matchobj.group(1), matchobj.group(2), command); # Reset the string; command = """"; else:; bad_option_syntax(command); return result. [docs]def process_pubchem_command(matchobj):; """"""Function to process match of ``pubchem`` in molecule block.""""""; string = matchobj.group(2); if re.match(r'^\s*[0-9]+\s*$', string):; # This is just a number - must be a CID; pcobj = PubChemObj(int(string), '', ''); try:; return pcobj.getMoleculeString(); except Exception as e:; return e.message; else:; # Search pubchem for the provided string; try:; results = getPubChemResults(string); except Exception as e:; return e.message. # N.B. Anything starting with PubchemError will be handled correctly by the molecule parser; # in libmints, which will just print the rest of the string and exit gracefully.; if(not results):; # Nothing!; return ""PubchemError\n\tNo results were found when searching PubChem for %s.\n"" % string; elif(len(results) == 1):; # There's only 1 result - use it; return results[0].getMoleculeString(); else:; # There are multiple results. Print and exit; msg = ""\tPubchemError\n""; msg += ""\tMultiple pubchem results were found. Replace\n\n\t\tpubchem:%s\n\n"" % string; msg += ""\twith the Chemical ID number or exact name from one of the following and re-run.\n\n""; msg += ""\t Chemical ID IUPAC Name\n\n""; for result in results:; msg += ""%s"" % result; if result.name().lower() == string.lower():; #We've found an exact match!; return result.getMoleculeString(); return msg. [docs]def process_molecule_command(matchobj):; """"""Function to process match of ``molecule name? { ... }``.""""""; spaces = matchobj.g",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:21829,Integrability,wrap,wrappers,21829,"\s+([+-]?\d*\.?\d+)\s+([KMG]i?B)',; re.IGNORECASE); temp = re.sub(memory_string, process_memory_command, temp). # Process ""basis file ... ""; basis_file = re.compile(r'(\s*?)basis\s+file\s*(\b.*\b)\s*$',; re.MULTILINE | re.IGNORECASE); temp = re.sub(basis_file, process_basis_file, temp). # Process ""basis name { ... }""; basis_block = re.compile(r'(\s*?)basis[=\s]*\{(.*?)\}',; re.MULTILINE | re.DOTALL | re.IGNORECASE); temp = re.sub(basis_block, process_basis_block, temp). # Process ""basis file ... ""; file_pid = re.compile(r'(\s*?)filename\s*(\b.*\b)\s*$',; re.MULTILINE | re.IGNORECASE); temp = re.sub(file_pid, process_filename, temp). # imports; imports = 'from PsiMod import *\n'; imports += 'from physconst import *\n'; imports += 'from molutil import *\n'; imports += 'from driver import *\n'; imports += 'from text import *\n'; imports += 'from inpsight import *\n'; imports += 'from wrappers import *\n'; imports += 'from gaussian_n import *\n'; imports += 'from aliases import *\n'; imports += 'from psiexceptions import *\n'; imports += 'from util import *\n'; imports += 'from qmmm import *\n'; imports += 'from frac import *\n'; imports += 'from diatomic import *\n'; imports += 'from functional import *\n'; imports += 'from pubchem import *\n'; imports += 'from psifiles import *\n'; imports += 'import pickle\n'; imports += 'psi4_io = PsiMod.IOManager.shared_object()\n'. # psirc (a baby PSIthon script that might live in ~/.psi4rc); psirc = ''; homedir = os.path.expanduser('~'); psirc_file = homedir + '/.psi4rc'; if os.path.isfile(psirc_file):; fh = open(psirc_file); psirc = fh.read(); fh.close(). # Override scratch directory if user specified via env_var; scratch = ''; scratch_env = PsiMod.Process.environment['PSI_SCRATCH']; if len(scratch_env):; scratch += 'psi4_io.set_default_path(""%s"")\n' % (scratch_env). blank_mol = 'geometry(""""""\n'; blank_mol += '0 1\nH\nH 1 0.74\n'; blank_mol += '"""""",""blank_molecule_psi4_yo"")\n'. temp = imports + psirc + scratch + blank_mol + temp",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:933,Modifiability,variab,variable,933,"﻿. input — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for input; ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1063,Modifiability,variab,variable,1063,"Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for input; ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.uppe",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1535,Modifiability,variab,variables,1535," getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; # If it's really a global, we need slightly different syntax; return spaces + ""PsiMod.set_global_option(\""%s\"", %s)\n"" % (key, value); else:; # It's a local option, so we need the module name in there too; return spaces + ""PsiMod.set_local_option(\""%s\"", \""%s\"", %s)\n"" % (module, key, value). [doc",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:1657,Modifiability,variab,variables,1657,"to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; # If it's really a global, we need slightly different syntax; return spaces + ""PsiMod.set_global_option(\""%s\"", %s)\n"" % (key, value); else:; # It's a local option, so we need the module name in there too; return spaces + ""PsiMod.set_local_option(\""%s\"", \""%s\"", %s)\n"" % (module, key, value). [docs]def process_set_command(matchobj):; """"""Function to process match of all individual ``set (module_list); key {[value_list] or $value or value}",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:401,Security,access,access,401,"﻿. input — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for input; ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/input.html:16609,Security,validat,validate,16609,"rens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % line. [docs]def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, and puts them on a single line; # Start by converting the input to a list, splitting at newlines; input_list = inputfile.split(""\n""); set_re = re.compile(r'^(\s*?)set\s+(?:([-,\w]+)\s+)?(\w+)[\s=]+\[.*', re.IGNORECASE); newinput = """"; while len(input_list):; line = input_list[0]; if set_re.match(line):; # We've found the start of a set matrix [ .... line - hand it off for more checks; newinput += parse_multiline_array(input_list); else:; # Nothing to do - just add the line to the string; newinput += ""%s\n"" % input_list.pop(0); return newinput. [docs]def process_input(raw_input, print_level=1):; """"""Function to preprocess *raw input*, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; *raw_input* is printed to the output file unless *print_level* =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user's .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed *raw_input*. """"""; # Check if the infile is actually an outfile (yeah we did); psi4_id = re.compile(r'PSI4: An Open-Source Ab Initio Electronic Structure Package'); if (re.search(psi4_id, raw_input)):; input_lines = raw_input.split(""\n""); input_re = re.compile(r'^\s*?\=\=> Input File <\=\='); input_start = -1; for line_count in range(len(input_lines)):; line = input_lines[line_count]; if re.match(input_re, line):; input_start = line_count + 3; break. stop_re = re.compile(r'^-{74}'); input_stop = -1;",MatchSource.WIKI,psi4manual/4.0b4/_modules/input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:4555,Availability,fault,faulty,4555,"right portion of the register; val = 1; for k in range(nreal - 1, rank, -1):; reals[k] = val; val = val + 1. # boundary condition is promotion into; # [nfrag+1 nfrag-1 ...]; if (reals[0] > nfrag):; break. return clusters. [docs]def new_set_attr(self, name, value):; """"""Function to redefine set_attr method of molecule class.""""""; fxn = object.__getattribute__(self, ""is_variable""); isvar = fxn(name); if isvar:; fxn = object.__getattribute__(self, ""set_variable""); fxn(name, value); return. object.__setattr__(self, name, value). [docs]def new_get_attr(self, name):; """"""Function to redefine get_attr method of molecule class.""""""; fxn = object.__getattribute__(self, ""is_variable""); isvar = fxn(name). if isvar:; fxn = object.__getattribute__(self, ""get_variable""); return fxn(name). return object.__getattribute__(self, name). [docs]def BFS(self):; """"""Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment;",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:7195,Availability,avail,available,7195,"ite -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be independently compiled and found in ; :envvar:`PATH`. """"""; # Validate arguments; if self is None:; self = PsiMod.get_active_molecule(). dashlvl = dashlvl.lower(); dashlvl = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl; if dashlvl not in dashcoeff.keys():; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). if dertype is None:; dertype = -1; elif der0th.match(str(dertype)):; dertype = 0; elif der1st.match(str(dertype)):; dertype = 1; elif der2nd.match(str(dertype)):; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)); else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)). if func is None:; if dashparam is None:; # defunct case; raise ValidationError(""""""Parameters for -D correction missing. Provide a func or a dashparam kwarg.""""""); else:; # case where all param read from dashparam dict (which must have all correct keys); func = 'custom'; dashcoeff[dashlvl][func] = {}; dashparam = dict((k.lower(), v) for k, v in dashparam.iteritems()); for key in dashcoeff[dashlvl]['b3lyp'].keys():; if key in dashparam.keys():; dashcoeff[dashlvl][func][key] = dashparam[key]; else:; raise ValidationError(""""""Para",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:8353,Availability,avail,available,8353,"; elif der1st.match(str(dertype)):; dertype = 1; elif der2nd.match(str(dertype)):; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)); else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)). if func is None:; if dashparam is None:; # defunct case; raise ValidationError(""""""Parameters for -D correction missing. Provide a func or a dashparam kwarg.""""""); else:; # case where all param read from dashparam dict (which must have all correct keys); func = 'custom'; dashcoeff[dashlvl][func] = {}; dashparam = dict((k.lower(), v) for k, v in dashparam.iteritems()); for key in dashcoeff[dashlvl]['b3lyp'].keys():; if key in dashparam.keys():; dashcoeff[dashlvl][func][key] = dashparam[key]; else:; raise ValidationError(""""""Parameter %s is missing from dashparam dict %s."""""" % (key, dashparam)); else:; func = func.lower(); if func not in dashcoeff[dashlvl].keys():; raise ValidationError(""""""Functional %s is not available for -D level %s."""""" % (func, dashlvl)); if dashparam is None:; # (normal) case where all param taken from dashcoeff above; pass; else:; # case where items in dashparam dict can override param taken from dashcoeff above; dashparam = dict((k.lower(), v) for k, v in dashparam.iteritems()); for key in dashcoeff[dashlvl]['b3lyp'].keys():; if key in dashparam.keys():; dashcoeff[dashlvl][func][key] = dashparam[key]. # Move ~/.dftd3par.<hostname> out of the way so it won't interfere; defaultfile = os.path.expanduser('~') + '/.dftd3par.' + socket.gethostname(); defmoved = False; if os.path.isfile(defaultfile):; os.rename(defaultfile, defaultfile + '_hide'); defmoved = True. # Setup unique scratch directory and move in; current_directory = os.getcwd(); psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); os.chdir(psioh.get_default_path()); dftd3_tmpdir = 'psi.' + str(os.getpid()) + '.' + psio.get_default_namespace() + \; '.dftd3.' + str(random.randi",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:13194,Deployability,update,updated,13194,"se; verbose = PsiMod.get_option('SCF', 'PRINT'); if verbose >= 3:; PsiMod.print_out('\n ==> DFTD3 Output <==\n'); PsiMod.print_out(out); dfile = open(derivfile, 'r'); PsiMod.print_out(dfile.read().replace('D', 'E')); dfile.close(); PsiMod.print_out('\n'). # Clean up files and remove scratch directory; os.unlink(paramfile); os.unlink(geomfile); os.unlink(derivfile); if defmoved is True:; os.rename(defaultfile + '_hide', defaultfile). os.chdir('..'); try:; shutil.rmtree(dftd3_tmpdir); except OSError as e:; ValidationError('Unable to remove dftd3 temporary directory %s' % e, file=sys.stderr); os.chdir(current_directory). # return -D & d(-D)/dx; PsiMod.set_variable('DISPERSION CORRECTION ENERGY', dashd); if dertype == -1:; return dashd, dashdderiv; elif dertype == 0:; return dashd; elif dertype == 1:; return psi_dashdderiv. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the PsiMod.Molecule class. """"""; cls.__setattr__ = new_set_attr; cls.__getattr__ = new_get_attr; cls.BFS = BFS; cls.run_dftd3 = run_dftd3. dynamic_variable_bind(PsiMod.Molecule) # pass class type, not class instance. #; # Define geometry to be used by PSI4.; # The molecule created by this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name*; from the geometry in string *geom*. """"""; molecule = PsiMod.Molecule.create_molecule_from_string(geom); molecule.set_name(name). activate(molecule). return molecule. [docs]def activate(mol):; """"""Function to set molecule object *mol* as the current active molecule.""""""; PsiMod.set_active_molecule(mol); #PsiMod.IO.set_default_namespace(mol.get_name()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:6701,Energy Efficiency,energy,energy,6701,".z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be independently compiled and found in ; :envvar:`PATH`. """"""; # Validate arguments; if self is None:; self = PsiMod.get_active_molecule(). dashlvl = dashlvl.lower(); dashlvl = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl; if dashlvl not in dashcoeff.keys():; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). if dertype is None:; dertype = -1; elif der0th.match(str(dertype)):; dertype = 0; elif der1st.match(str(dertype)):; dertype = 1; elif der2nd.match(str(dertype)):; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)); else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)). if func is None:; if dashparam is None:; # defunct case; raise ValidationError(""""""Parameters for -D correction missi",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:6770,Energy Efficiency,energy,energy,6770,".z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be independently compiled and found in ; :envvar:`PATH`. """"""; # Validate arguments; if self is None:; self = PsiMod.get_active_molecule(). dashlvl = dashlvl.lower(); dashlvl = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl; if dashlvl not in dashcoeff.keys():; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). if dertype is None:; dertype = -1; elif der0th.match(str(dertype)):; dertype = 0; elif der1st.match(str(dertype)):; dertype = 1; elif der2nd.match(str(dertype)):; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)); else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for run_dftd3.' % (dertype)). if func is None:; if dashparam is None:; # defunct case; raise ValidationError(""""""Parameters for -D correction missi",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:5898,Performance,queue,queue,5898," 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment; for u in Queue: # find all (still white) nearest neighbors to vertex u; for i in White:; dist = physconst.psi_bohr2angstroms * math.sqrt((self.x(i) - self.x(u)) ** 2 + \; (self.y(i) - self.y(u)) ** 2 + (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be independently compiled and found in ; :",MatchSource.WIKI,psi4manual/4.0b4/_modules/molutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html
https://psicode.org/psi4manual/4.0b4/_modules/optproc.html:3550,Deployability,update,updated,3550,"ed?) value: %7s %s\n"""""" % ('(' + str(self.haschanged_local) + ')', self.value_local); text += """""" Used (has changed?) value: %7s %s\n"""""" % ('(' + str(self.haschanged_used) + ')', self.value_used); else:; text += """""" ==> %s Option in Global Scope <==\n\n"""""" % (self.option); text += """""" Global (has changed?) value: %7s %s\n"""""" % ('(' + str(self.haschanged_global) + ')', self.value_global); text += """"""\n""""""; return text. [docs] def restore(self):; PsiMod.set_global_option(self.option, self.value_global); if not self.haschanged_global:; PsiMod.revoke_global_option_changed(self.option); if self.module:; PsiMod.set_local_option(self.module, self.option, self.value_local); if not self.haschanged_local:; PsiMod.revoke_local_option_changed(self.module, self.option). [docs]class OptionsState(object):; """"""Class to contain multiple :py:func:`~optproc.OptionsState` objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return. ::. >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). """"""; def __init__(self, *largs):; self.data = []; for item in largs:; if len(item) == 2:; self.data.append(OptionState(item[1], item[0])); elif len(item) == 1:; self.data.append(OptionState(item[0])); else:; print('ERROR: Each argument to OptionsState should be an array, the first element'); print(' of which is the module scope and the second element of which is the'); print(' module name. Bad argument: %s' % (item)); sys.exit(). def __str__(self):; text = ''; for item in self.data:; text += str(item); return text. [docs] def restore(self):; for item in self.data:; item.restore(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/optproc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/optproc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:12345,Availability,avail,available,12345,"ERENCE') == 'UKS':; PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); else:; pass; elif lowername == 'rhf':; PsiMod.set_local_option('SCF', 'REFERENCE', 'RHF'); elif lowername == 'uhf':; PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); elif lowername == 'rohf':; PsiMod.set_local_option('SCF', 'REFERENCE', 'ROHF'); elif lowername == 'rscf':; if (len(PsiMod.get_option('SCF', 'DFT_FUNCTIONAL')) > 0) or PsiMod.get_option('SCF', 'DFT_CUSTOM_FUNCTIONAL') is not None:; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); else:; PsiMod.set_local_option('SCF', 'REFERENCE', 'RHF'); elif lowername == 'uscf':; if (len(PsiMod.get_option('SCF', 'DFT_FUNCTIONAL')) > 0) or PsiMod.get_option('SCF', 'DFT_CUSTOM_FUNCTIONAL') is not None:; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); else:; PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); elif lowername == 'roscf':; if (len(PsiMod.get_option('SCF', 'DFT_FUNCTIONAL')) > 0) or PsiMod.get_option('SCF', 'DFT_CUSTOM_FUNCTIONAL') is not None:; raise ValidationError('ROHF reference for DFT is not available.'); else:; PsiMod.set_local_option('SCF', 'REFERENCE', 'ROHF'). scf_helper(name, **kwargs). optstash.restore(). [docs]def run_scf_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a SCF gradient calculation. """"""; optstash = OptionsState(; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). run_scf(name, **kwargs). if (PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF' or PsiMod.get_option('SCF', 'SCF_TYPE') == 'DIRECT'):. # if the df_basis_scf basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_SCF') == '':; jkbasis = corresponding_jkfit(PsiMod.get_global_option('BASIS')); if jkbasis:; PsiMod.set_global_option('DF_BASIS_SCF', jkbasis); PsiMod.print_out('\n No DF_BASIS_SCF auxiliary basis selected, defaulting to %s\n\n' % (jkbasis)); else:; raise ValidationEr",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:19853,Availability,checkpoint,checkpoint,19853,"):; """"""Function selecting the algorithm for a MP2 gradient call; and directing toward the OCC (conv MP2) or the DFMP2 modules. """"""; if (PsiMod.get_option(""DFMP2"", ""MP2_TYPE"") == ""CONV"") or (PsiMod.get_option(""OCC"", ""MP2_TYPE"") == ""CONV""):; return run_mp2_gradient(name, **kwargs); else:; return run_dfmp2_gradient(name, **kwargs). [docs]def run_dfmp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. """"""; optstash = OptionsState(; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; #PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF') # insufficient b/c SCF option read in DFMP2; PsiMod.set_global_option('SCF_TYPE', 'DF'). if not PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; raise ValidationError('DF-MP2 gradients need DF-SCF reference, for now.'). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(32); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; targetfile = filepath + prefix + '.' + pid + '.' + namespace + '.32'; if(PsiMod.me() == 0):; shutil.copy(restartfile, targetfile); else:; # if the df_basis_scf basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_SCF') == '':; jkbasis = corresponding_jkfit(PsiMod.get_global_option('BASIS')); if jkbasis:; PsiMod.set_global_option('DF_BASIS_SCF', jkbasis); PsiMod.print_out('\n No DF_BASIS_SCF auxiliary basis selected, defaulting to %s\n\n' % (jkbasis)); else:; raise ValidationError('Keyword DF_BASIS_SCF is required.'). scf_helper(name, **kwargs). PsiMod.print_out('\n'); banner('DFMP2'); PsiMod.print_out('\n'). # if the df_basis_mp2 basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_MP2') == '':; ribasis = cor",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:30527,Availability,checkpoint,checkpoint,30527,"UE'); PsiMod.cceom(); PsiMod.cclambda(); PsiMod.ccdensity(). PsiMod.set_global_option('WFN', 'SCF'); PsiMod.revoke_global_option_changed('WFN'); PsiMod.set_global_option('DERTYPE', 'NONE'); PsiMod.revoke_global_option_changed('DERTYPE'). [docs]def run_dfmp2_property(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a DFMP2 property calculation. """"""; optstash = OptionsState(; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['SCF_TYPE']). PsiMod.set_global_option('ONEPDM', 'TRUE'); PsiMod.set_global_option('OPDM_RELAX', 'TRUE'). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; #PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF') # insufficient b/c SCF option read in DFMP2; PsiMod.set_global_option('SCF_TYPE', 'DF'). if not PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; raise ValidationError('DF-MP2 properties need DF-SCF reference, for now.'). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(32); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; targetfile = filepath + prefix + '.' + pid + '.' + namespace + '.32'; if(PsiMod.me() == 0):; shutil.copy(restartfile, targetfile); else:; # if the df_basis_scf basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_SCF') == '':; jkbasis = corresponding_jkfit(PsiMod.get_global_option('BASIS')); if jkbasis:; PsiMod.set_global_option('DF_BASIS_SCF', jkbasis); PsiMod.print_out('\nNo DF_BASIS_SCF auxiliary basis selected, defaulting to %s\n\n' % (jkbasis)); else:; raise ValidationError('Keyword DF_BASIS_SCF is required.'). scf_helper(name, **kwargs). PsiMod.print_out('\n'); banner('DFMP2'); PsiMod.print_out('\n'). # if the df_basis_mp2 basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_MP2') == '':; ribasis = corr",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:35787,Availability,avail,available,35787,"RENCE') != 'RHF'):; raise ValidationError('ADC requires reference RHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.adc(). [docs]def run_dft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE'],; ['DF_BASIS_MP2'],; ['DFMP2', 'MP2_OS_SCALE'],; ['DFMP2', 'MP2_SS_SCALE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf(name, **kwargs); returnvalue = PsiMod.get_variable('CURRENT ENERGY'). for ssuper in superfunctional_list():; if ssuper.name().lower() == name.lower():; dfun = ssuper. if dfun.is_c_hybrid():. # if the df_basis_mp2 basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_MP2') == '':; ribasis = corresponding_rifit(PsiMod.get_global_option('BASIS')); if ribasis:; PsiMod.set_global_option('DF_BASIS_MP2', ribasis); PsiMod.print_out(' No DF_BASIS_MP2 auxiliary basis selected, defaulting to %s\n' % (ribasis)); else:; raise ValidationError('Keyword DF_BASIS_MP2 is required.'). if dfun.is_c_scs_hybrid():; PsiMod.set_local_option('DFMP2', 'MP2_OS_SCALE', dfun.c_os_alpha()); PsiMod.set_local_option('DFMP2', 'MP2_SS_SCALE', dfun.c_ss_alpha()); PsiMod.dfmp2(); vdh = dfun.c_alpha() * PsiMod.get_variable('SC",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:35882,Availability,avail,available,35882," special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.adc(). [docs]def run_dft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE'],; ['DF_BASIS_MP2'],; ['DFMP2', 'MP2_OS_SCALE'],; ['DFMP2', 'MP2_SS_SCALE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf(name, **kwargs); returnvalue = PsiMod.get_variable('CURRENT ENERGY'). for ssuper in superfunctional_list():; if ssuper.name().lower() == name.lower():; dfun = ssuper. if dfun.is_c_hybrid():. # if the df_basis_mp2 basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_MP2') == '':; ribasis = corresponding_rifit(PsiMod.get_global_option('BASIS')); if ribasis:; PsiMod.set_global_option('DF_BASIS_MP2', ribasis); PsiMod.print_out(' No DF_BASIS_MP2 auxiliary basis selected, defaulting to %s\n' % (ribasis)); else:; raise ValidationError('Keyword DF_BASIS_MP2 is required.'). if dfun.is_c_scs_hybrid():; PsiMod.set_local_option('DFMP2', 'MP2_OS_SCALE', dfun.c_os_alpha()); PsiMod.set_local_option('DFMP2', 'MP2_SS_SCALE', dfun.c_ss_alpha()); PsiMod.dfmp2(); vdh = dfun.c_alpha() * PsiMod.get_variable('SCS-MP2 CORRELATION ENERGY'). else:; PsiMod.dfmp2(); vdh = dfun.c_alpha() * PsiMod.get_variable('MP2 CORRELATION ENERG",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:37785,Availability,avail,available,37785,"SCS-MP2 CORRELATION ENERGY'). else:; PsiMod.dfmp2(); vdh = dfun.c_alpha() * PsiMod.get_variable('MP2 CORRELATION ENERGY'). PsiMod.set_variable('DOUBLE-HYBRID CORRECTION ENERGY', vdh); returnvalue += vdh; PsiMod.set_variable('DFT TOTAL ENERGY', returnvalue); PsiMod.set_variable('CURRENT ENERGY', returnvalue). optstash.restore(). [docs]def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf_gradient(name, **kwargs). optstash.restore(). [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). user_ref = PsiMod.get_option('DETCI', 'REFERENCE'); if (user_ref != 'RHF') or (user_ref != 'ROHF'):; raise ValidationError('Reference %s for DETCI is not available.' % user_ref). if (name.lower() == 'zapt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'ZAPTN'); PsiMod.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_local_option('DETCI', 'MA",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:37880,Availability,avail,available,37880,"ERGY'). PsiMod.set_variable('DOUBLE-HYBRID CORRECTION ENERGY', vdh); returnvalue += vdh; PsiMod.set_variable('DFT TOTAL ENERGY', returnvalue); PsiMod.set_variable('CURRENT ENERGY', returnvalue). optstash.restore(). [docs]def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf_gradient(name, **kwargs). optstash.restore(). [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). user_ref = PsiMod.get_option('DETCI', 'REFERENCE'); if (user_ref != 'RHF') or (user_ref != 'ROHF'):; raise ValidationError('Reference %s for DETCI is not available.' % user_ref). if (name.lower() == 'zapt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'ZAPTN'); PsiMod.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; PsiMod.",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:38462,Availability,avail,available,38462,"set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf_gradient(name, **kwargs). optstash.restore(). [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). user_ref = PsiMod.get_option('DETCI', 'REFERENCE'); if (user_ref != 'RHF') or (user_ref != 'ROHF'):; raise ValidationError('Reference %s for DETCI is not available.' % user_ref). if (name.lower() == 'zapt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'ZAPTN'); PsiMod.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif (name.lower() == 'detci-mp') or (name.lower() == 'mp'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'MPN', 'TRUE'). level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif (name.lower() == '",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:41232,Availability,checkpoint,checkpoint,41232,"l = kwargs['level']; PsiMod.set_local_option('DETCI', 'EX_LEVEL', level); # Call a plain energy('detci') and have full control over options; elif(name.lower() == 'detci'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; PsiMod.MintsHelper().integrals(). PsiMod.transqt2(); PsiMod.detci(). optstash.restore(). [docs]def run_dfmp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. """"""; optstash = OptionsState(; ['DF_BASIS_MP2'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(32); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; targetfile = filepath + prefix + '.' + pid + '.' + namespace + '.32'; if(PsiMod.me() == 0):; shutil.copy(restartfile, targetfile); else:; scf_helper(name, **kwargs). PsiMod.print_out('\n'); banner('DFMP2'); PsiMod.print_out('\n'). # if the df_basis_mp2 basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_MP2') == '':; ribasis = corresponding_rifit(PsiMod.get_global_option('BASIS')); if ribasis:; PsiMod.set_global_option('DF_BASIS_MP2', ribasis); PsiMod.print_out(' No DF_BASIS_MP2 auxiliary basis selected, defaulting to %s\n' % (ribasis)); else:; raise ValidationError('Keyword DF_BASIS_MP2 is required.'). e_dfmp2 = PsiMod.dfmp2(); e_scs_dfmp2 = PsiMod.get_variable('SCS-MP2 TOTAL ENERGY'). optstash.restore(). if (name.upper() == 'SCS-D",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:66299,Availability,error,errored,66299,"MRCC ======\n'). # Close output file; PsiMod.close_outfile(). # Modify the environment:; # PGI Fortan prints warning to screen if STOP is used; os.environ['NO_STOP_MESSAGE'] = '1'. # Obtain user's OMP_NUM_THREADS so that we don't blow it away.; omp_num_threads_found = 'OMP_NUM_THREADS' in os.environ; if omp_num_threads_found == True:; omp_num_threads_user = os.environ['OMP_NUM_THREADS']. # If the user provided MRCC_OMP_NUM_THREADS set the environ to it; if PsiMod.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; os.environ['OMP_NUM_THREADS'] = str(PsiMod.get_option('MRCC', 'MRCC_OMP_NUM_THREADS')). # Call dmrcc, directing all screen output to the output file; try:; if PsiMod.outfile_name() == 'stdout':; retcode = subprocess.call('dmrcc', shell=True); else:; retcode = subprocess.call('dmrcc >> ' + current_directory + '/' + PsiMod.outfile_name(), shell=True). if retcode < 0:; print('MRCC was terminated by signal %d' % -retcode, file=sys.stderr); exit(1); elif retcode > 0:; print('MRCC errored %d' % retcode, file=sys.stderr); exit(1). except OSError as e:; print('Execution failed: %s' % e, file=sys.stderr); exit(1). # Restore the OMP_NUM_THREADS that the user set.; if omp_num_threads_found == True:; if PsiMod.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; os.environ['OMP_NUM_THREADS'] = omp_num_threads_user. # Scan iface file and grab the file energy.; e = 0.0; for line in file('iface'):; fields = line.split(); m = fields[1]; try:; e = float(fields[5]); if m == ""MP(2)"":; m = ""MP2""; PsiMod.set_variable(m + ' TOTAL ENERGY', e); PsiMod.set_variable(m + ' CORRELATION ENERGY', e - vscf); except ValueError:; continue. # The last 'e' in iface is the one the user requested.; PsiMod.set_variable('CURRENT ENERGY', e); PsiMod.set_variable('CURRENT CORRELATION ENERGY', e - vscf). # Load the iface file; iface = open('iface', 'r'); iface_contents = iface.read(). # Delete mrcc tempdir; os.chdir('..'); try:; # Delete unless we're told not to; if (keep == False ",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:38043,Deployability,configurat,configuration,38043,"lue). optstash.restore(). [docs]def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf_gradient(name, **kwargs). optstash.restore(). [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). user_ref = PsiMod.get_option('DETCI', 'REFERENCE'); if (user_ref != 'RHF') or (user_ref != 'ROHF'):; raise ValidationError('Reference %s for DETCI is not available.' % user_ref). if (name.lower() == 'zapt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'ZAPTN'); PsiMod.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif (name.lower() == 'detci-mp') or (name.lower() == 'mp'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:79451,Deployability,update,updated,79451,"SD'. PsiMod.set_local_option('FNOCC', 'CEPA_LEVEL', cepa_level). # override symmetry for fno-cepa; if (PsiMod.get_option('FNOCC','NAT_ORBS')):; molecule = PsiMod.get_active_molecule(); user_pg = molecule.schoenflies_symbol(); molecule.reset_point_group('c1'); molecule.update_geometry(); if user_pg != 'c1':; PsiMod.print_out(' FNOCC does not make use of molecular symmetry, further calculations in C1 point group.\n'). # throw an exception for open-shells; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). PsiMod.set_local_option('TRANSQT2', 'WFN', 'CCSD'); scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). if PsiMod.get_option('FNOCC','NAT_ORBS') == False:; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CCSD'); PsiMod.transqt2(). # run cepa; PsiMod.fnocc(). # one-electron properties; if PsiMod.get_option('FNOCC', 'DIPMOM'):; if cepa_level == ""CEPA(1)"" or cepa_level == ""CEPA(3)"":; PsiMod.print_out(""\n""); PsiMod.print_out("" Error: one-electron properties not implemented for %s\n"" % lowername); PsiMod.print_out(""\n""); elif PsiMod.get_option('FNOCC','NAT_ORBS'):; PsiMod.print_out(""\n""); PsiMod.print_out("" Error: one-electron properties not implemented for %s\n"" % lowername); PsiMod.print_out(""\n""); else:; oeprop('DIPOLE','QUADRUPOLE','MULLIKEN_CHARGES','NO_OCCUPATIONS',title = cepa_level). # restore symmetry for fno-cepa; if (PsiMod.get_option('FNOCC','NAT_ORBS')):; molecule.reset_point_group(user_pg); molecule.update_geometry(). # restore options ; optstash.restore(). return PsiMod.get_variable(""CURRENT ENERGY""). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:280,Energy Efficiency,energy,energy,280,"﻿. proc — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for proc; from __future__ import print_function; """"""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. """"""; from psifiles import *; import PsiMod; import shutil; import os; import subprocess; import re; import physconst; from molutil import *; from text import *; from procutil import *; from basislist import *; from functional import *; from optproc import *; from util import *; # never import driver, wrappers, or aliases into this file. # ATTN NEW ADDITIONS!; # consult http://sirius.chem.vt.edu/psi4manual/master/proc_py.html. [docs]def run_dcft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encodi",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:18563,Energy Efficiency,energy,energy,18563,"nner('Guess SCF, %s Basis' % (guessbasis)); PsiMod.print_out('\n'). # the FIRST scf call; if cast or do_broken:; # Perform the guess scf; PsiMod.scf(). # broken clean-up; if do_broken:; molecule.set_multiplicity(1); PsiMod.set_local_option('SCF', 'GUESS', 'READ'); PsiMod.print_out('\n'); banner(' Computing broken symmetry solution from high-spin triplet guess '); PsiMod.print_out('\n'). # cast clean-up; if (cast):. # Move files to proper namespace; PsiMod.IO.change_file_namespace(180, (namespace + '.guess'), namespace); PsiMod.IO.set_default_namespace(namespace). # Set to read and project, and reset bases to final ones; optstash2.restore(); PsiMod.set_local_option('SCF', 'GUESS', 'READ'). # Print the banner for the standard operation; PsiMod.print_out('\n'); banner(name.upper()); PsiMod.print_out('\n'). # the SECOND scf call; e_scf = PsiMod.scf(precallback, postcallback). optstash.restore(); return e_scf. [docs]def run_mp2_select(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing toward the OCC (conv MP2) or the DFMP2 modules. """"""; if (PsiMod.get_option(""DFMP2"", ""MP2_TYPE"") == ""CONV"") or (PsiMod.get_option(""OCC"", ""MP2_TYPE"") == ""CONV""):; return run_mp2(name, **kwargs); else:; return run_dfmp2(name, **kwargs). [docs]def run_mp2_select_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP2 gradient call; and directing toward the OCC (conv MP2) or the DFMP2 modules. """"""; if (PsiMod.get_option(""DFMP2"", ""MP2_TYPE"") == ""CONV"") or (PsiMod.get_option(""OCC"", ""MP2_TYPE"") == ""CONV""):; return run_mp2_gradient(name, **kwargs); else:; return run_dfmp2_gradient(name, **kwargs). [docs]def run_dfmp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. """"""; optstash = OptionsState(; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; #PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF') # ins",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:22888,Energy Efficiency,energy,energy,22888,"t_local_option('CCENERGY', 'WFN', 'CCSD'); elif (lowername == 'ccsd(t)'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CCSD_T'); PsiMod.set_local_option('CCSORT', 'WFN', 'CCSD_T'); PsiMod.set_local_option('CCENERGY', 'WFN', 'CCSD_T'); elif (lowername == 'cc2'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CC2'); PsiMod.set_local_option('CCSORT', 'WFN', 'CC2'); PsiMod.set_local_option('CCENERGY', 'WFN', 'CC2'); elif (lowername == 'cc3'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CC3'); PsiMod.set_local_option('CCSORT', 'WFN', 'CC3'); PsiMod.set_local_option('CCENERGY', 'WFN', 'CC3'); elif (lowername == 'eom-cc2'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'EOM_CC2'); PsiMod.set_local_option('CCSORT', 'WFN', 'EOM_CC2'); PsiMod.set_local_option('CCENERGY', 'WFN', 'EOM_CC2'); elif (lowername == 'eom-ccsd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'EOM_CCSD'); PsiMod.set_local_option('CCSORT', 'WFN', 'EOM_CCSD'); PsiMod.set_local_option('CCENERGY', 'WFN', 'EOM_CCSD'); # Call a plain energy('ccenergy') and have full control over options, incl. wfn; elif(lowername == 'ccenergy'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.ccenergy(). optstash.restore(). [docs]def run_cc_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['CCLAMBDA', 'WFN'],; ['CCDENSITY', 'WFN']). PsiMod.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD'); elif (name.lower() =",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:34682,Energy Efficiency,energy,energy,34682,"on. """"""; optstash = OptionsState(; ['CCDENSITY', 'XI'],; ['CCDENSITY', 'ZETA'],; ['CCLAMBDA', 'ZETA'],; ['DERTYPE'],; ['CCDENSITY', 'WFN'],; ['CCLAMBDA', 'WFN']). PsiMod.set_global_option('DERTYPE', 'FIRST'). if (name.lower() == 'eom-ccsd'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'EOM_CCSD'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'EOM_CCSD'); run_eom_cc(name, **kwargs). PsiMod.set_local_option('CCLAMBDA', 'ZETA', 'FALSE'); PsiMod.set_local_option('CCDENSITY', 'ZETA', 'FALSE'); PsiMod.set_local_option('CCDENSITY', 'XI', 'TRUE'); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.set_local_option('CCLAMBDA', 'ZETA', 'TRUE'); PsiMod.set_local_option('CCDENSITY', 'ZETA', 'TRUE'); PsiMod.set_local_option('CCDENSITY', 'XI', 'FALSE'); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.deriv(). optstash.restore(). [docs]def run_adc(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. .. caution:: Get rid of active molecule lines- should be handled in energy. """"""; if (PsiMod.get_option('ADC', 'REFERENCE') != 'RHF'):; raise ValidationError('ADC requires reference RHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.adc(). [docs]def run_dft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE'],; ['DF_BASIS_MP2'],; ['DFMP2', 'MP2_OS_SCALE'],; ['DFMP2', 'MP2_SS_SCALE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):;",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:40340,Energy Efficiency,energy,energy,40340,"tion('DETCI', 'MPN_ORDER_SAVE', 1); elif (name.lower() == 'fci'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'FCI', 'TRUE'); elif (name.lower() == 'cisd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 2); elif (name.lower() == 'cisdt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 3); elif (name.lower() == 'cisdtq'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 4); elif (name.lower() == 'ci'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); level = kwargs['level']; PsiMod.set_local_option('DETCI', 'EX_LEVEL', level); # Call a plain energy('detci') and have full control over options; elif(name.lower() == 'detci'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; PsiMod.MintsHelper().integrals(). PsiMod.transqt2(); PsiMod.detci(). optstash.restore(). [docs]def run_dfmp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. """"""; optstash = OptionsState(; ['DF_BASIS_MP2'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = Ps",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:57591,Energy Efficiency,charge,charge-transfer,57591,"B = scf_helper('RHF', **kwargs); wfn_monomerB = PsiMod.wavefunction(). if (ri == 'DF' and sapt_basis == 'dimer'):; PsiMod.IO.change_file_namespace(97, 'monomerB', 'dimer'). activate(molecule); PsiMod.IO.set_default_namespace('dimer'). # if the df_basis_sapt basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_SAPT') == '':; ribasis = corresponding_rifit(PsiMod.get_global_option('BASIS')); if ribasis:; PsiMod.set_global_option('DF_BASIS_SAPT', ribasis); PsiMod.print_out(' No DF_BASIS_SAPT auxiliary basis selected, defaulting to %s\n' % (ribasis)); else:; raise ValidationError('Keyword DF_BASIS_SAPT is required.'). PsiMod.print_out('\n'); banner(name.upper()); PsiMod.print_out('\n'). e_sapt = PsiMod.infsapt(wfn_dimer,wfn_monomerA,wfn_monomerB). molecule.reset_point_group(user_pg); molecule.update_geometry(). PsiMod.set_global_option('DF_INTS_IO', df_ints_io). optstash.restore(); return e_sapt. [docs]def run_sapt_ct(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. """"""; optstash = OptionsState(; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). molecule = PsiMod.get_active_molecule(); user_pg = molecule.schoenflies_symbol(); molecule.reset_point_group('c1'); molecule.fix_orientation(True); molecule.update_geometry(); if user_pg != 'c1':; PsiMod.print_out(' SAPT does not make use of molecular symmetry, further calculations in C1 point group.\n'). if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError('SAPT requires requires \""reference rhf\"".'). nfrag = molecule.nfragments(); if nfrag != 2:; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). monomerA = molecule.extract_subsets(1, 2); monomerA.set_name('monomerA'); monomerB = molecule.extract_subsets(2, 1); monomerB.set_name('monomerB'); molecule.update_geometry(",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:66678,Energy Efficiency,energy,energy,66678,"MP_NUM_THREADS']. # If the user provided MRCC_OMP_NUM_THREADS set the environ to it; if PsiMod.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; os.environ['OMP_NUM_THREADS'] = str(PsiMod.get_option('MRCC', 'MRCC_OMP_NUM_THREADS')). # Call dmrcc, directing all screen output to the output file; try:; if PsiMod.outfile_name() == 'stdout':; retcode = subprocess.call('dmrcc', shell=True); else:; retcode = subprocess.call('dmrcc >> ' + current_directory + '/' + PsiMod.outfile_name(), shell=True). if retcode < 0:; print('MRCC was terminated by signal %d' % -retcode, file=sys.stderr); exit(1); elif retcode > 0:; print('MRCC errored %d' % retcode, file=sys.stderr); exit(1). except OSError as e:; print('Execution failed: %s' % e, file=sys.stderr); exit(1). # Restore the OMP_NUM_THREADS that the user set.; if omp_num_threads_found == True:; if PsiMod.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; os.environ['OMP_NUM_THREADS'] = omp_num_threads_user. # Scan iface file and grab the file energy.; e = 0.0; for line in file('iface'):; fields = line.split(); m = fields[1]; try:; e = float(fields[5]); if m == ""MP(2)"":; m = ""MP2""; PsiMod.set_variable(m + ' TOTAL ENERGY', e); PsiMod.set_variable(m + ' CORRELATION ENERGY', e - vscf); except ValueError:; continue. # The last 'e' in iface is the one the user requested.; PsiMod.set_variable('CURRENT ENERGY', e); PsiMod.set_variable('CURRENT CORRELATION ENERGY', e - vscf). # Load the iface file; iface = open('iface', 'r'); iface_contents = iface.read(). # Delete mrcc tempdir; os.chdir('..'); try:; # Delete unless we're told not to; if (keep == False and not('path' in kwargs)):; shutil.rmtree(mrcc_tmpdir); except OSError as e:; print('Unable to remove MRCC temporary directory %s' % e, file=sys.stderr); exit(1). # Revert to previous current directory location; os.chdir(current_directory). # Reopen output file; PsiMod.reopen_outfile(). # If we're told to keep the files or the user provided a path, do nothing.; if (kee",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:68100,Energy Efficiency,energy,energy,68100,"). # Load the iface file; iface = open('iface', 'r'); iface_contents = iface.read(). # Delete mrcc tempdir; os.chdir('..'); try:; # Delete unless we're told not to; if (keep == False and not('path' in kwargs)):; shutil.rmtree(mrcc_tmpdir); except OSError as e:; print('Unable to remove MRCC temporary directory %s' % e, file=sys.stderr); exit(1). # Revert to previous current directory location; os.chdir(current_directory). # Reopen output file; PsiMod.reopen_outfile(). # If we're told to keep the files or the user provided a path, do nothing.; if (keep != False or ('path' in kwargs)):; PsiMod.print_out('\nMRCC scratch files have been kept.\n'); PsiMod.print_out('They can be found in ' + mrcc_tmpdir). # Dump iface contents to output; PsiMod.print_out('\n'); banner('Full results from MRCC'); PsiMod.print_out('\n'); PsiMod.print_out(iface_contents). return e. [docs]def run_fnodfcc(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a DF-CCSD(T) computation. >>> energy('df-ccsd(t)'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # stash user options; optstash = OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','DFCC'],; ['FNOCC','NAT_ORBS'],; ['FNOCC','RUN_CEPA'],; ['SCF','SCF_TYPE']). PsiMod.set_local_option('FNOCC', 'DFCC', True); PsiMod.set_local_option('FNOCC', 'RUN_CEPA', False). # throw an exception for open-shells; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). # override symmetry:; molecule = PsiMod.get_active_molecule(); user_pg = molecule.schoenflies_symbol(); molecule.reset_point_group('c1'); molecule.fix_orientation(1); molecule.update_geometry(); if user_pg != 'c1':; PsiMod.print_out(' FNOCC does not make use of molecular symmetry, further calculations in C1 point group.\n'). # triples?; if (lowername == 'df-ccsd'):; PsiMod.set_local_option('FNOCC', 'COMPUTE_TRIPLES', False); if (lowername == 'df-ccsd(t)'):; PsiMod.set_local_option('FNOC",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:70131,Energy Efficiency,energy,energy,70131,"f (lowername == 'fno-df-ccsd'):; PsiMod.set_local_option('FNOCC', 'COMPUTE_TRIPLES', False); PsiMod.set_local_option('FNOCC', 'NAT_ORBS', True); if (lowername == 'fno-df-ccsd(t)'):; PsiMod.set_local_option('FNOCC', 'COMPUTE_TRIPLES', True); PsiMod.set_local_option('FNOCC', 'NAT_ORBS', True). # set scf-type to df unless the user wants something else; if PsiMod.has_option_changed('SCF','SCF_TYPE') == False:; PsiMod.set_local_option('SCF','SCF_TYPE', 'DF'). if PsiMod.get_option('FNOCC','DF_BASIS_CC') == '':; basis = PsiMod.get_global_option('BASIS'); dfbasis = corresponding_rifit(basis); PsiMod.set_local_option('FNOCC','DF_BASIS_CC',dfbasis). scf_helper(name,**kwargs); PsiMod.fnocc(). molecule.reset_point_group(user_pg); molecule.update_geometry(). # restore options; optstash.restore(). return PsiMod.get_variable(""CURRENT ENERGY""). [docs]def run_fnocc(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation. >>> energy('fno-ccsd(t)'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); if 'level' in kwargs:; level = kwargs['level']; else:; level = 0; . # stash user options:; optstash = OptionsState(; ['TRANSQT2','WFN'],; ['FNOCC','RUN_MP2'],; ['FNOCC','RUN_MP3'],; ['FNOCC','RUN_MP4'],; ['FNOCC','RUN_CCSD'],; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FNOCC','DFCC'],; ['FNOCC','RUN_CEPA'],; ['FNOCC','NAT_ORBS']). PsiMod.set_local_option('FNOCC','DFCC', False); PsiMod.set_local_option('FNOCC','RUN_CEPA', False). # which method?; if (lowername == '_ccsd'):; PsiMod.set_local_option('FNOCC','COMPUTE_TRIPLES', False); PsiMod.set_local_option('FNOCC','RUN_CCSD', True); elif (lowername == '_ccsd(t)'):; PsiMod.set_local_option('FNOCC','COMPUTE_TRIPLES', True); PsiMod.set_local_option('FNOCC','RUN_CCSD', True); elif (lowername == 'fno-ccsd'):; PsiMod.set_local_option('FNOCC','COMPUTE_TRIPLES', False); PsiMod.set_local_option('FNOCC','RUN_CCSD', True); PsiMod.set_local_option('FNO",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:74318,Energy Efficiency,energy,energy,74318,"c; if (PsiMod.get_option('FNOCC','NAT_ORBS')):; molecule = PsiMod.get_active_molecule(); user_pg = molecule.schoenflies_symbol(); molecule.reset_point_group('c1'); molecule.update_geometry(); if user_pg != 'c1':; PsiMod.print_out(' FNOCC does not make use of molecular symmetry, further calculations in C1 point group.\n'). # throw an exception for open-shells; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). # scf; scf_helper(name,**kwargs). # if the scf type is df, then the ao integrals were never generated.; if PsiMod.get_option('SCF','SCF_TYPE') == 'DF' :; mints = PsiMod.MintsHelper(); mints.integrals(). # if this is not cim or FNO-CC, run transqt2. otherwise, libtrans will be used; if PsiMod.get_option('FNOCC','NAT_ORBS') == False and PsiMod.get_option('FNOCC','RUN_MP2') == False:; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CCSD'); PsiMod.transqt2(). # run ccsd; PsiMod.fnocc(). # set current correlation energy and total energy. only need to treat mpn here.; if (lowername == 'fnocc-mp') and (level == 3):; emp3 = PsiMod.get_variable(""MP3 TOTAL ENERGY""); cemp3 = PsiMod.get_variable(""MP3 CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp3); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp3); elif ( lowername == 'fno-mp3' ):; emp3 = PsiMod.get_variable(""MP3 TOTAL ENERGY""); cemp3 = PsiMod.get_variable(""MP3 CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp3); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp3); elif ( lowername == 'mp4(sdq)'):; emp4sdq = PsiMod.get_variable(""MP4(SDQ) TOTAL ENERGY""); cemp4sdq = PsiMod.get_variable(""MP4(SDQ) CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp4sdq); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp4sdq); elif ( lowername == 'fno-mp4(sdq)'):; emp4sdq = PsiMod.get_variable(""MP4(SDQ) TOTAL ENERGY""); cemp4sdq = PsiMod.get_variable(""MP4(SDQ) CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:74335,Energy Efficiency,energy,energy,74335,"c; if (PsiMod.get_option('FNOCC','NAT_ORBS')):; molecule = PsiMod.get_active_molecule(); user_pg = molecule.schoenflies_symbol(); molecule.reset_point_group('c1'); molecule.update_geometry(); if user_pg != 'c1':; PsiMod.print_out(' FNOCC does not make use of molecular symmetry, further calculations in C1 point group.\n'). # throw an exception for open-shells; if (PsiMod.get_option('SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). # scf; scf_helper(name,**kwargs). # if the scf type is df, then the ao integrals were never generated.; if PsiMod.get_option('SCF','SCF_TYPE') == 'DF' :; mints = PsiMod.MintsHelper(); mints.integrals(). # if this is not cim or FNO-CC, run transqt2. otherwise, libtrans will be used; if PsiMod.get_option('FNOCC','NAT_ORBS') == False and PsiMod.get_option('FNOCC','RUN_MP2') == False:; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CCSD'); PsiMod.transqt2(). # run ccsd; PsiMod.fnocc(). # set current correlation energy and total energy. only need to treat mpn here.; if (lowername == 'fnocc-mp') and (level == 3):; emp3 = PsiMod.get_variable(""MP3 TOTAL ENERGY""); cemp3 = PsiMod.get_variable(""MP3 CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp3); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp3); elif ( lowername == 'fno-mp3' ):; emp3 = PsiMod.get_variable(""MP3 TOTAL ENERGY""); cemp3 = PsiMod.get_variable(""MP3 CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp3); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp3); elif ( lowername == 'mp4(sdq)'):; emp4sdq = PsiMod.get_variable(""MP4(SDQ) TOTAL ENERGY""); cemp4sdq = PsiMod.get_variable(""MP4(SDQ) CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp4sdq); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp4sdq); elif ( lowername == 'fno-mp4(sdq)'):; emp4sdq = PsiMod.get_variable(""MP4(SDQ) TOTAL ENERGY""); cemp4sdq = PsiMod.get_variable(""MP4(SDQ) CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:76225,Energy Efficiency,energy,energy,76225,"Mod.get_variable(""MP4(SDQ) CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp4sdq); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp4sdq); elif ( lowername == 'fno-mp4'):; emp4 = PsiMod.get_variable(""MP4 TOTAL ENERGY""); cemp4 = PsiMod.get_variable(""MP4 CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp4); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp4); elif (lowername == 'fnocc-mp') and (level == 4):; emp4 = PsiMod.get_variable(""MP4 TOTAL ENERGY""); cemp4 = PsiMod.get_variable(""MP4 CORRELATION ENERGY""); PsiMod.set_variable(""CURRENT ENERGY"",emp4); PsiMod.set_variable(""CURRENT CORRELATION ENERGY"",cemp4). # restore symmetry for fno-cc; if (PsiMod.get_option('FNOCC','NAT_ORBS')):; molecule.reset_point_group(user_pg); molecule.update_geometry(). # restore options; optstash.restore(). return PsiMod.get_variable(""CURRENT ENERGY""). [docs]def run_cepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a cepa-like calculation. >>> energy('cepa(1)'). """"""; lowername = name.lower(); uppername = name.upper(); kwargs = kwargs_lower(kwargs). # save user options; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['FNOCC', 'NAT_ORBS'],; ['FNOCC', 'RUN_CEPA'],; ['FNOCC', 'CEPA_NO_SINGLES']). PsiMod.set_local_option('FNOCC','RUN_CEPA', True). # what type of cepa?; cepa_level = uppername; if (lowername == 'cepa(2)'):; raise ValidationError(""Error: %s not implemented\n"" % lowername); if (lowername == 'dci'):; cepa_level = 'CISD'; if (lowername == 'sdci'):; cepa_level = 'CISD'. if (lowername == 'fno-cepa(0)'):; cepa_level = 'CEPA(0)'; PsiMod.set_local_option('FNOCC', 'NAT_ORBS', True); if (lowername == 'fno-cepa(1)'):; PsiMod.set_local_option('FNOCC', 'NAT_ORBS', True); cepa_level = 'CEPA(1)'; if (lowername == 'fno-cepa(3)'):; PsiMod.set_local_option('FNOCC', 'NAT_ORBS', True); cepa_level = 'CEPA(3)'; if (lowername == 'fno-acpf'):; PsiMod.set_local_option('FNOCC', 'NAT_ORBS', True); cepa_level = 'ACPF'; if (lowername == 'fno-aqcc'):;",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:643,Integrability,wrap,wrappers,643,"﻿. proc — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for proc; from __future__ import print_function; """"""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. """"""; from psifiles import *; import PsiMod; import shutil; import os; import subprocess; import re; import physconst; from molutil import *; from text import *; from procutil import *; from basislist import *; from functional import *; from optproc import *; from util import *; # never import driver, wrappers, or aliases into this file. # ATTN NEW ADDITIONS!; # consult http://sirius.chem.vt.edu/psi4manual/master/proc_py.html. [docs]def run_dcft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encodi",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:1105,Integrability,rout,routine,1105,"rt print_function; """"""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. """"""; from psifiles import *; import PsiMod; import shutil; import os; import subprocess; import re; import physconst; from molutil import *; from text import *; from procutil import *; from basislist import *; from functional import *; from optproc import *; from util import *; # never import driver, wrappers, or aliases into this file. # ATTN NEW ADDITIONS!; # consult http://sirius.chem.vt.edu/psi4manual/master/proc_py.html. [docs]def run_dcft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_globa",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:1746,Integrability,rout,routine,1746,"ame, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_omp2(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs). optstash.restore(). [docs]def run_mp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'ORB_OPT',",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:3480,Integrability,rout,routine,3480,"ent(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_scs_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-component scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SCS_TYPE'],; ['OCC', 'DO_SCS']). # what type of scs?; if (lowername == 'scs-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCS'); elif (lowername == 'scsn-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSN'); elif (lowername == 'scs-mi-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp2-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:4171,Integrability,rout,routine,4171,"e == 'scsn-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSN'); elif (lowername == 'scs-mi-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp2-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP3 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP3 gradient calculation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); run_omp3(name, **kwargs); PsiMod.deriv(). ",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:4617,Integrability,rout,routine,4617,"l_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP3 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP3 gradient calculation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); run_omp3(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP3 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp3(name, **kwargs). optstash.restore(). [docs]def run_mp3_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP3 gradient calculation. """"""; optstash = OptionsState(; ['GLOBA",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:6575,Integrability,rout,routine,6575,"on. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp3(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_scs_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-component scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SCS_TYPE'],; ['OCC', 'DO_SCS'],; ['OCC', 'WFN_TYPE']). # what type of scs?; if (lowername == 'scs-omp3'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCS'); elif (lowername == 'scsn-omp3'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSN'); elif (lowername == 'scs-mi-omp3'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp3-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:7340,Integrability,rout,routine,7340,"if (lowername == 'scs-mi-omp3'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp3-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.resto",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:7841,Integrability,rout,routine,7841,"f run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_cepa0(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **kwargs). optstash.restore(). [docs]def run_cepa0_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA(0) gradient calculation. """"""; optstash =",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:9383,Integrability,rout,routine,9383," """"""Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **kwargs). optstash.restore(). [docs]def run_cepa0_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA(0) gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2_5(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2.5 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP2.5'); PsiMod.occ(). optstash.restore(). [docs]def run_omp2_5_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP2.5 gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['OCC', 'WFN_TYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP2.5'); run_omp2_5(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp2_5(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2.5 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2_5(name, **kwargs). optstash.restore(). [docs]def run_mp2_5_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP3 gradient calculation. """"""; optstash = Opt",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:23001,Integrability,rout,routine,23001,"'WFN', 'CCSD_T'); PsiMod.set_local_option('CCENERGY', 'WFN', 'CCSD_T'); elif (lowername == 'cc2'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CC2'); PsiMod.set_local_option('CCSORT', 'WFN', 'CC2'); PsiMod.set_local_option('CCENERGY', 'WFN', 'CC2'); elif (lowername == 'cc3'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'CC3'); PsiMod.set_local_option('CCSORT', 'WFN', 'CC3'); PsiMod.set_local_option('CCENERGY', 'WFN', 'CC3'); elif (lowername == 'eom-cc2'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'EOM_CC2'); PsiMod.set_local_option('CCSORT', 'WFN', 'EOM_CC2'); PsiMod.set_local_option('CCENERGY', 'WFN', 'EOM_CC2'); elif (lowername == 'eom-ccsd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'EOM_CCSD'); PsiMod.set_local_option('CCSORT', 'WFN', 'EOM_CCSD'); PsiMod.set_local_option('CCENERGY', 'WFN', 'EOM_CCSD'); # Call a plain energy('ccenergy') and have full control over options, incl. wfn; elif(lowername == 'ccenergy'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.ccenergy(). optstash.restore(). [docs]def run_cc_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['CCLAMBDA', 'WFN'],; ['CCDENSITY', 'WFN']). PsiMod.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD_T'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD_T'). PsiMod.cchbar(); PsiMod.cclambda(); Psi",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:24542,Integrability,rout,routine,24542,"BALS', 'DERTYPE'],; ['CCLAMBDA', 'WFN'],; ['CCDENSITY', 'WFN']). PsiMod.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD_T'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD_T'). PsiMod.cchbar(); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.deriv(). optstash.restore(). [docs]def run_bccd(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'DELETE_TEI'],; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN']); ; if (name.lower() == 'bccd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'BCCD'); PsiMod.set_local_option('CCSORT', 'WFN', 'BCCD'); PsiMod.set_local_option('CCENERGY', 'WFN', 'BCCD'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.set_local_option('TRANSQT2', 'DELETE_TEI', 'false'). while True:; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.ccenergy(); PsiMod.print_out('Brueckner convergence check: %d\n' % PsiMod.get_variable('BRUECKNER CONVERGED')); if (PsiMod.get_variable('BRUECKNER CONVERGED') == True):; break. optstash.restore(). [docs]def run_bccd_t(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN'],; ['CCTRIPLES', 'WFN']). PsiMod.set_local_option('TRANSQT2', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCSORT', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCENERGY', 'WFN', 'BCC",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:34811,Integrability,rout,routine,34811,". if (name.lower() == 'eom-ccsd'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'EOM_CCSD'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'EOM_CCSD'); run_eom_cc(name, **kwargs). PsiMod.set_local_option('CCLAMBDA', 'ZETA', 'FALSE'); PsiMod.set_local_option('CCDENSITY', 'ZETA', 'FALSE'); PsiMod.set_local_option('CCDENSITY', 'XI', 'TRUE'); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.set_local_option('CCLAMBDA', 'ZETA', 'TRUE'); PsiMod.set_local_option('CCDENSITY', 'ZETA', 'TRUE'); PsiMod.set_local_option('CCDENSITY', 'XI', 'FALSE'); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.deriv(). optstash.restore(). [docs]def run_adc(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. .. caution:: Get rid of active molecule lines- should be handled in energy. """"""; if (PsiMod.get_option('ADC', 'REFERENCE') != 'RHF'):; raise ValidationError('ADC requires reference RHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.adc(). [docs]def run_dft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE'],; ['DF_BASIS_MP2'],; ['DFMP2', 'MP2_OS_SCALE'],; ['DFMP2', 'MP2_SS_SCALE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF re",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:40439,Integrability,rout,routine,40439,"TCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'FCI', 'TRUE'); elif (name.lower() == 'cisd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 2); elif (name.lower() == 'cisdt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 3); elif (name.lower() == 'cisdtq'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 4); elif (name.lower() == 'ci'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); level = kwargs['level']; PsiMod.set_local_option('DETCI', 'EX_LEVEL', level); # Call a plain energy('detci') and have full control over options; elif(name.lower() == 'detci'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; PsiMod.MintsHelper().integrals(). PsiMod.transqt2(); PsiMod.detci(). optstash.restore(). [docs]def run_dfmp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. """"""; optstash = OptionsState(; ['DF_BASIS_MP2'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(32); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; tar",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:42849,Integrability,rout,routine,42849," if ribasis:; PsiMod.set_global_option('DF_BASIS_MP2', ribasis); PsiMod.print_out(' No DF_BASIS_MP2 auxiliary basis selected, defaulting to %s\n' % (ribasis)); else:; raise ValidationError('Keyword DF_BASIS_MP2 is required.'). e_dfmp2 = PsiMod.dfmp2(); e_scs_dfmp2 = PsiMod.get_variable('SCS-MP2 TOTAL ENERGY'). optstash.restore(). if (name.upper() == 'SCS-DFMP2') or (name.upper() == 'SCS-DF-MP2'):; return e_scs_dfmp2; elif (name.upper() == 'DF-MP2') or (name.upper() == 'DFMP2') or (name.upper() == 'MP2'):; return e_dfmp2. [docs]def run_psimrcc(name, **kwargs):; """"""Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. """"""; run_mcscf(name, **kwargs); PsiMod.psimrcc(); return PsiMod.get_variable(""CURRENT ENERGY""). [docs]def run_psimrcc_scf(name, **kwargs):; """"""Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.psimrcc(); return PsiMod.get_variable(""CURRENT ENERGY""). [docs]def run_mp2c(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a coupled MP2 calculation. """"""; optstash = OptionsState(; ['DF_BASIS_MP2']). molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); monomerA = molecule.extract_subsets(1, 2); monomerA.set_name('monomerA'); monomerB = molecule.extract_subsets(2, 1); monomerB.set_name('monomerB'). # if the df_basis_mp2 basis is not set, pick a sensible one.; if PsiMod.get_global_option('DF_BASIS_MP2') == '':; ribasis = corresponding_rifit(PsiMod.get_global_option('BASIS')); if ribasis:; PsiMod.set_global_option('DF_BASIS_MP2', ribasis); PsiMod.print_out(' No DF_BASIS_MP2 auxiliary basis selected, defaulting to %s\n' % (ribasis)); else:; raise ValidationError('Keyword DF_BASIS_MP2 is required.'). ri = PsiMod.get_opti",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:38043,Modifiability,config,configuration,38043,"lue). optstash.restore(). [docs]def run_dft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. """"""; optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['SCF', 'REFERENCE'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). PsiMod.set_local_option('SCF', 'DFT_FUNCTIONAL', name). user_ref = PsiMod.get_option('SCF', 'REFERENCE'); if (user_ref == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'); elif (user_ref == 'UHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'UKS'); elif (user_ref == 'ROHF'):; raise ValidationError('ROHF reference for DFT is not available.'); elif (user_ref == 'CUHF'):; raise ValidationError('CUHF reference for DFT is not available.'). run_scf_gradient(name, **kwargs). optstash.restore(). [docs]def run_detci(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['DETCI', 'WFN'],; ['DETCI', 'MAX_NUM_VECS'],; ['DETCI', 'MPN_ORDER_SAVE'],; ['DETCI', 'MPN'],; ['DETCI', 'FCI'],; ['DETCI', 'EX_LEVEL']). user_ref = PsiMod.get_option('DETCI', 'REFERENCE'); if (user_ref != 'RHF') or (user_ref != 'ROHF'):; raise ValidationError('Reference %s for DETCI is not available.' % user_ref). if (name.lower() == 'zapt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'ZAPTN'); PsiMod.set_local_option('DETCI', 'WFN', 'ZAPTN'); level = kwargs['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_local_option('DETCI', 'MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 2); else:; PsiMod.set_local_option('DETCI', 'MPN_ORDER_SAVE', 1); elif (name.lower() == 'detci-mp') or (name.lower() == 'mp'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:290,Performance,optimiz,optimize,290,"﻿. proc — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for proc; from __future__ import print_function; """"""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. """"""; from psifiles import *; import PsiMod; import shutil; import os; import subprocess; import re; import physconst; from molutil import *; from text import *; from procutil import *; from basislist import *; from functional import *; from optproc import *; from util import *; # never import driver, wrappers, or aliases into this file. # ATTN NEW ADDITIONS!; # consult http://sirius.chem.vt.edu/psi4manual/master/proc_py.html. [docs]def run_dcft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encodi",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:1705,Performance,optimiz,optimized,1705,"to this file. # ATTN NEW ADDITIONS!; # consult http://sirius.chem.vt.edu/psi4manual/master/proc_py.html. [docs]def run_dcft(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_omp2(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs). optstash.restore(). [docs]def run_mp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = OptionsState(; ['",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:4528,Performance,optimiz,optimized,4528,"cf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP3 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP3 gradient calculation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); run_omp3(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP3 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp3(name, **kwargs). optstash.r",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:7751,Performance,optimiz,optimized,7751,")):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_cepa0(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **k",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:9292,Performance,optimiz,optimized,9292,"ptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_cepa0(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **kwargs). optstash.restore(). [docs]def run_cepa0_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA(0) gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2_5(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2.5 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP2.5'); PsiMod.occ(). optstash.restore(). [docs]def run_omp2_5_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP2.5 gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE'],; ['OCC', 'WFN_TYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP2.5'); run_omp2_5(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp2_5(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2.5 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2_5(n",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:16526,Performance,load,load,16526,"YPE') == 'DF':; castdf = True; else:; castdf = False. if PsiMod.has_option_changed('SCF', 'DF_BASIS_GUESS'):; castdf = PsiMod.get_option('SCF', 'DF_BASIS_GUESS'); if yes.match(str(castdf)):; castdf = True; elif no.match(str(castdf)):; castdf = False. # sort out broken_symmetry settings.; if 'brokensymmetry' in kwargs:; molecule = PsiMod.get_active_molecule(); multp = molecule.multiplicity(); if multp != 1:; raise ValidationError('Broken symmetry is only for singlets.'); if PsiMod.get_option('SCF','REFERENCE') != 'UHF' and PsiMod.get_option('SCF','REFERENCE') != 'UKS':; raise ValidationError('You must specify ""set reference uhf"" to use broken symmetry.'); do_broken = True; else:; do_broken = False. precallback = None; if 'precallback' in kwargs:; precallback = kwargs.pop('precallback'). postcallback = None; if 'postcallback' in kwargs:; postcallback = kwargs.pop('postcallback'). # Hack to ensure cartesian or pure are used throughout; # Note that can't query PUREAM option directly, as it only; # reflects user changes to value, so load basis and; # read effective PUREAM setting off of it; PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')); PsiMod.set_global_option('PUREAM', PsiMod.MintsHelper().basisset().has_puream()). # broken set-up; if do_broken:; molecule.set_multiplicity(3); PsiMod.print_out('\n'); banner(' Computing high-spin triplet guess '); PsiMod.print_out('\n'). # cast set-up; if (cast):. if yes.match(str(cast)):; guessbasis = '3-21G'; else:; guessbasis = cast. if (castdf):; if yes.match(str(castdf)):; guessbasisdf = corresponding_jkfit(guessbasis); else:; guessbasisdf = castdf. # Switch to the guess namespace; namespace = PsiMod.IO.get_default_namespace(); PsiMod.IO.set_default_namespace((namespace + '.guess')). # Setup initial SCF; PsiMod.set_global_option('BASIS', guessbasis); if (castdf):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'); PsiMod.set_local_option('SCF', 'DF_INTS_IO', 'none'); PsiMod.set_global_option('DF_BASIS_SCF', gue",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/proc.html:25846,Usability,simpl,simple,25846,"r(); mints.integrals(). PsiMod.set_local_option('TRANSQT2', 'DELETE_TEI', 'false'). while True:; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.ccenergy(); PsiMod.print_out('Brueckner convergence check: %d\n' % PsiMod.get_variable('BRUECKNER CONVERGED')); if (PsiMod.get_variable('BRUECKNER CONVERGED') == True):; break. optstash.restore(). [docs]def run_bccd_t(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN'],; ['CCTRIPLES', 'WFN']). PsiMod.set_local_option('TRANSQT2', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCSORT', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCENERGY', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCTRIPLES', 'WFN', 'BCCD_T'); run_bccd(name, **kwargs); PsiMod.cctriples(). optstash.restore(). [docs]def run_scf_property(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to :py:func:`~proc.run_scf`; since SCF properties all handled through oeprop. """"""; optstash = OptionsState(; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). run_scf(name, **kwargs). optstash.restore(). [docs]def run_cc_property(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; all CC property calculations. """"""; oneel_properties = ['dipole', 'quadrupole']; twoel_properties = []; response_properties = ['polarizability', 'rotation', 'roa']; excited_properties = ['oscillator_strength', 'rotational_strength']. one = []; two = []; response = []; excited = []; invalid = []. if 'properties' in kwargs:; properties = kwargs.pop('properties'); properties = drop_duplicates(properties). for prop in properties:; if prop in oneel_properties:; one.append(prop); elif prop in twoel_properties:; two.append(prop); elif prop in response_properties:; response.append(prop); elif p",MatchSource.WIKI,psi4manual/4.0b4/_modules/proc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html
https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:1980,Availability,avail,available,1980,"ent namespace *pidspace*. """"""; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(fileno); namespace = psio.get_default_namespace(); targetfile = filepath + 'psi' + '.' + pidspace + '.' + namespace + '.' + str(fileno); return targetfile. [docs]def format_molecule_for_input(mol):; """"""Function to return a string of the output of; :py:func:`input.process_input` applied to the XYZ; format of molecule, passed as either fragmented; geometry string *mol* or molecule instance *mol*. ; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see :py:func:`molutil.geometry`. """"""; # when mol is already a string; if isinstance(mol, basestring):; mol_string = mol; mol_name = ''; # when mol is PsiMod.Molecule or qcdb.Molecule object; else:; # save_string_for_psi4 is the more detailed choice as it includes fragment; # (and possibly no_com/no_reorient) info. but this is only available; # for qcdb Molecules. Since save_string_xyz was added to libmints just; # for the sow/reap purpose, may want to unify these fns sometime.; try:; mol_string = mol.save_string_for_psi4(); except AttributeError:; mol_string = mol.save_string_xyz(). mol_name = mol.name(). commands = 'input.process_input(""""""\nmolecule %s {\n%s\n}\n"""""", 0)\n' % (mol_name, mol_string); return eval(commands). [docs]def format_options_for_input():; """"""Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Does not cover local (as opposed to global) options. - Does not work with array-type options. """"""; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (PsiMod.get_memory()); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_global_option_changed(chgdopt):; chgdoptval = PsiMod.get_gl",MatchSource.WIKI,psi4manual/4.0b4/_modules/procutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html
https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:4831,Availability,avail,available,4831,"ormation for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all_casings(attr)):; try:; getattr(module, per); except AttributeError:; pass; else:; array = getattr(module, per); break. return array. [docs]def import_ignorecase(module):; """"""Function to import *module* in any possible lettercase ; permutation. Returns module object if available, None if not.; ; """"""; modobj = None; for per in list(all_casings(module)):; try:; modobj = __import__(per); except ImportError:; pass; else:; break. return modobj. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/procutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html
https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:4903,Availability,avail,available,4903,"ormation for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all_casings(attr)):; try:; getattr(module, per); except AttributeError:; pass; else:; array = getattr(module, per); break. return array. [docs]def import_ignorecase(module):; """"""Function to import *module* in any possible lettercase ; permutation. Returns module object if available, None if not.; ; """"""; modobj = None; for per in list(all_casings(module)):; try:; modobj = __import__(per); except ImportError:; pass; else:; break. return modobj. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/procutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html
https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:5238,Availability,avail,available,5238,"ormation for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all_casings(attr)):; try:; getattr(module, per); except AttributeError:; pass; else:; array = getattr(module, per); break. return array. [docs]def import_ignorecase(module):; """"""Function to import *module* in any possible lettercase ; permutation. Returns module object if available, None if not.; ; """"""; modobj = None; for per in list(all_casings(module)):; try:; modobj = __import__(per); except ImportError:; pass; else:; break. return modobj. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/procutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html
https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:5600,Deployability,update,updated,5600,"ormation for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all_casings(attr)):; try:; getattr(module, per); except AttributeError:; pass; else:; array = getattr(module, per); break. return array. [docs]def import_ignorecase(module):; """"""Function to import *module* in any possible lettercase ; permutation. Returns module object if available, None if not.; ; """"""; modobj = None; for per in list(all_casings(module)):; try:; modobj = __import__(per); except ImportError:; pass; else:; break. return modobj. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/procutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html
https://psicode.org/psi4manual/4.0b4/_modules/procutil.html:3925,Performance,load,loads,3925,"val = PsiMod.get_global_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""PsiMod.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""PsiMod.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed.' % (chgdopt)); return commands. [docs]def format_kwargs_for_input(filename, lmode=1, **kwargs):; """"""Function to pickle to file *filename* the options dictionary; *kwargs*. Mode *lmode* =2 pickles appropriate settings for; reap mode. Used to capture Python options information for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. [docs]def all_casings(input_string):; """"""Function to return a generator of all lettercase permutations; of *input_string*.; ; """"""; if not input_string:; yield """"; else:; first = input_string[:1]; if first.lower() == first.upper():; for sub_casing in all_casings(input_string[1:]):; yield first + sub_casing; else:; for sub_casing in all_casings(input_string[1:]):; yield first.lower() + sub_casing; yield first.upper() + sub_casing. [docs]def getattr_ignorecase(module, attr):; """"""Function to extract attribute *attr* from *module* if *attr*; is available in any possible lettercase permutation. Returns; attribute if available, None if not.; ; """"""; array = None; for per in list(all",MatchSource.WIKI,psi4manual/4.0b4/_modules/procutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/procutil.html
https://psicode.org/psi4manual/4.0b4/_modules/psiexceptions.html:391,Availability,error,error,391,"﻿. psiexceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for psiexceptions; """"""Module with non-generic exceptions classes.""""""; import PsiMod. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.msg = msg; PsiMod.print_out('\nPsiException: %s\n\n' % (msg)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/psiexceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/psiexceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/psiexceptions.html:775,Deployability,update,updated,775,"﻿. psiexceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for psiexceptions; """"""Module with non-generic exceptions classes.""""""; import PsiMod. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.msg = msg; PsiMod.print_out('\nPsiException: %s\n\n' % (msg)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/psiexceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/psiexceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/psiexceptions.html:397,Integrability,message,message,397,"﻿. psiexceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for psiexceptions; """"""Module with non-generic exceptions classes.""""""; import PsiMod. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.msg = msg; PsiMod.print_out('\nPsiException: %s\n\n' % (msg)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/psiexceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/psiexceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html:962,Availability,error,error,962,"﻿. pubchem — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for pubchem; from __future__ import print_function; """"""Queries the PubChem database using a compound name (i.e. 1,3,5-hexatriene); to obtain a molecule string that can be passed to Molecule. ::. results = getPubChemObj(""1,3,5-hexatriene""). Results is an array of results from PubChem matches to your query.; for entry in results:; entry[""CID""] => PubChem compound identifer; entry[""IUPAC""] => IUPAC name for the resulting compound; entry[""PubChemObj""] => instance of PubChemObj for this compound. entry[""PubChemObj""].getMoleculeString() => returns a string compatible; with PSI4's Molecule creation. """"""; try:; # Python 2 syntax; from urllib2 import urlopen; from urllib2 import quote; from urllib2 import URLError; except ImportError:; # Python 3 syntax; from urllib.request import urlopen; from urllib.parse import quote; from urllib.error import URLError; import re; import sys. [docs]class PubChemObj(object):. def __init__(self, cid, mf, iupac):; self.url = 'http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi'; self.cid = cid; self.mf = mf; self.iupac = iupac; self.natom = 0; self.dataSDF = ''. def __str__(self):; return ""%17d %s\n"" % (self.cid, self.iupac). [docs] def getSDF(self):; """"""Function to return the SDF (structure-data file) of the PubChem object.""""""; if (len(self.dataSDF) == 0):; # When completed uncomment the following:; url = self.url + '?cid=' + quote(str(self.cid)) + '&disopt=3DDisplaySDF'; try:; location = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); print(""\tRetrieved entry for chemical ID %d\n"" % self.cid); self.dataSDF = location.read().decode(sys.getdefaultencoding()); #f = open(""TEST"", ""w""); #f.write(self.dataSDF); return self.dataSDF. [docs] def name(self)",MatchSource.WIKI,psi4manual/4.0b4/_modules/pubchem.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html
https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html:2593,Availability,avail,available,2593," URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); print(""\tRetrieved entry for chemical ID %d\n"" % self.cid); self.dataSDF = location.read().decode(sys.getdefaultencoding()); #f = open(""TEST"", ""w""); #f.write(self.dataSDF); return self.dataSDF. [docs] def name(self):; """"""Function to return the IUPAC name of the PubChem object.""""""; return self.iupac. [docs] def getCartesian(self):; """"""Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. """"""; try:; sdfText = self.getSDF(); except Exception as e:; raise e. # Find; # NA NB CONSTANT; # 14 13 0 0 0 0 0 0 0999 V2000; m = re.search(r'^\s*(\d+)\s+(?:\d+\s+){8}V2000$', sdfText, re.MULTILINE); self.natom = 0; if (m):; self.natom = int(m.group(1)). if (self.natom == 0):; raise Exception(""PubchemError\n Cannot find the number of atoms. 3D data doesn't appear\n"" +; ""to be available for %s.\n"" % self.iupac). lines = re.split('\n', sdfText). # 3.7320 -0.2500 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0; NUMBER = ""((?:[-+]?\\d*\\.\\d+(?:[DdEe][-+]?\\d+)?)|(?:[-+]?\\d+\\.\\d*(?:[DdEe][-+]?\\d+)?))""; atom_re = re.compile(r'^\s*' + NUMBER + r'\s+' + NUMBER + r'\s+' + NUMBER + r'\s*(\w+)(?:\s+\d+){12}'). molecule_string = ""PubchemInput\n"". atom_count = 0; for line in lines:; if (not line or line.isspace()):; continue. atom_match = atom_re.match(line); if atom_match:; x = float(atom_match.group(1)); y = float(atom_match.group(2)); z = float(atom_match.group(3)); sym = atom_match.group(4). atom_count = atom_count + 1. molecule_string += ""%s %10.6f %10.6f %10.6f\n"" % (sym, x, y, z). if (atom_count == self.natom):; break. return molecule_string. [docs] def getXYZFile(self):; """"""Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. """"""; try:; temp = self.getCartesian(); except Exception as e:; raise; molstr = ""%d\n%s",MatchSource.WIKI,psi4manual/4.0b4/_modules/pubchem.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html
https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html:5504,Deployability,update,updated,5504,"aise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % quote(name); print(""\tSearching PubChem database for %s"" % (name)); try:; loc = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(b""<pre>""); l = data.find(b""\n"", l); i = 1; while(True):; l = data.find(str(""%d. "" % i).encode(sys.getdefaultencoding()), l); if l == -1:; break; tag = b""MF: ""; l = data.find(tag, l) + len(tag); mf = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""IUPAC name: ""; l = data.find(tag, l) + len(tag); iupac = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""CID:""; l = data.find(tag, l) + len(tag); #if l == 4:; # break; cid = int(data[l:data.find(b""\n"", l)]); l = data.find(b'\t', l) + 1. pubobj = PubChemObj(cid, mf, iupac); ans.append(pubobj); i += 1. print(""\tFound %d results"" % (len(ans))); return ans. if __name__ == ""__main__"":; try:; obj = getPubChemResults(""1-methoxy-4-[(E)-prop-1-enyl]benzene""); #obj = getPubChemResults(""sodium benzenesulfonate""); except Exception as e:; print(e.message). for r in obj:; print(r); print(r.getMoleculeString()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/pubchem.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html
https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html:3821,Integrability,message,message,3821,"pile(r'^\s*' + NUMBER + r'\s+' + NUMBER + r'\s+' + NUMBER + r'\s*(\w+)(?:\s+\d+){12}'). molecule_string = ""PubchemInput\n"". atom_count = 0; for line in lines:; if (not line or line.isspace()):; continue. atom_match = atom_re.match(line); if atom_match:; x = float(atom_match.group(1)); y = float(atom_match.group(2)); z = float(atom_match.group(3)); sym = atom_match.group(4). atom_count = atom_count + 1. molecule_string += ""%s %10.6f %10.6f %10.6f\n"" % (sym, x, y, z). if (atom_count == self.natom):; break. return molecule_string. [docs] def getXYZFile(self):; """"""Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. """"""; try:; temp = self.getCartesian(); except Exception as e:; raise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % quote(name); print(""\tSearching PubChem database for %s"" % (name)); try:; loc = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(b""<pre>""); l = data.find(b""\n"", l); i = 1; while(True):; l = data.find(str(""%d. "" % i).encode(sys.getdefaultencoding()), l); if l == -1:; break; tag = b""MF: ""; l = data.find(tag, l) + len(tag); mf = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""IUPAC name: ""; l = data.find(tag, l) + len(tag); iupac = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""CID:""; l ",MatchSource.WIKI,psi4manual/4.0b4/_modules/pubchem.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html
https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html:5251,Integrability,message,message,5251,"aise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % quote(name); print(""\tSearching PubChem database for %s"" % (name)); try:; loc = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(b""<pre>""); l = data.find(b""\n"", l); i = 1; while(True):; l = data.find(str(""%d. "" % i).encode(sys.getdefaultencoding()), l); if l == -1:; break; tag = b""MF: ""; l = data.find(tag, l) + len(tag); mf = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""IUPAC name: ""; l = data.find(tag, l) + len(tag); iupac = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""CID:""; l = data.find(tag, l) + len(tag); #if l == 4:; # break; cid = int(data[l:data.find(b""\n"", l)]); l = data.find(b'\t', l) + 1. pubobj = PubChemObj(cid, mf, iupac); ans.append(pubobj); i += 1. print(""\tFound %d results"" % (len(ans))); return ans. if __name__ == ""__main__"":; try:; obj = getPubChemResults(""1-methoxy-4-[(E)-prop-1-enyl]benzene""); #obj = getPubChemResults(""sodium benzenesulfonate""); except Exception as e:; print(e.message). for r in obj:; print(r); print(r.getMoleculeString()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/pubchem.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:159,Deployability,integrat,integrate,159,"﻿. qmmm — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qmmm; """"""Module with classes to integrate MM charges into; a QM calculation. """"""; import PsiMod; import re; import os; import math; import physconst; from molutil import *; from driver import *. [docs]class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. [docs] def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:4293,Deployability,update,updated,4293,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:172,Energy Efficiency,charge,charges,172,"﻿. qmmm — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qmmm; """"""Module with classes to integrate MM charges into; a QM calculation. """"""; import PsiMod; import re; import os; import math; import physconst; from molutil import *; from driver import *. [docs]class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. [docs] def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:846,Energy Efficiency,charge,charges,846,"﻿. qmmm — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qmmm; """"""Module with classes to integrate MM charges into; a QM calculation. """"""; import PsiMod; import re; import os; import math; import physconst; from molutil import *; from driver import *. [docs]class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. [docs] def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:1411,Energy Efficiency,energy,energy,1411,"):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. [docs] def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <=\n\n""); self.wfn = PsiMod.wavefunction(); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:1900,Energy Efficiency,charge,charges,1900,"""""""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <=\n\n""); self.wfn = PsiMod.wavefunction(); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:2705,Energy Efficiency,charge,charges,2705,"od.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <=\n\n""); self.wfn = PsiMod.wavefunction(); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:2849,Energy Efficiency,charge,charge,2849,"s] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <=\n\n""); self.wfn = PsiMod.wavefunction(); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:2980,Energy Efficiency,charge,charge,2980,"rge Fitting (Determines da) <=\n\n""); self.wfn = PsiMod.wavefunction(); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.add",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3049,Energy Efficiency,charge,charges,3049," self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in s",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3155,Energy Efficiency,charge,charge,3155,"elf.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a modul",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3229,Energy Efficiency,charge,charges,3229,"r = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] »",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3518,Energy Efficiency,charge,charges,3518,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3579,Energy Efficiency,charge,charges,3579,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3599,Energy Efficiency,charge,charges,3599,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3619,Energy Efficiency,charge,charges,3619,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3639,Energy Efficiency,charge,charges,3639,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3839,Energy Efficiency,charge,charge,3839,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3904,Energy Efficiency,charge,charges,3904,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3933,Energy Efficiency,charge,charge,3933,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3948,Energy Efficiency,charge,charges,3948,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3980,Energy Efficiency,charge,charge,3980,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:3991,Energy Efficiency,charge,charge,3991,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:4002,Energy Efficiency,charge,charge,4002,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:4013,Energy Efficiency,charge,charge,4013,"self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def addChargeBohr(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Bohr. """"""; self.charges.append([Q, x, y, z]). [docs] def addChargeAngstrom(self, Q, x, y, z):; """"""Function to add a point charge of magnitude *Q* at; position (*x*, *y*, *z*) Angstroms. """"""; self.charges.append([Q, x / physconst.psi_bohr2angstroms, y / physconst.psi_bohr2angstroms, z / physconst.psi_bohr2angstroms]). def __str__(self):. s = ' ==> QMMM <==\n\n'. s = s + ' => Charges (a.u.) <=\n\n'; s = s + ' %11s %11s %11s %11s\n' % ('Z', 'x', 'y', 'z'); for k in range(0, len(self.charges)):; s = s + ' %11.7f %11.3E %11.3E %11.3E\n' % (self.charges[k][0], self.charges[k][1], self.charges[k][2], self.charges[k][3]); s = s + '\n'. s = s + ' => Diffuses <=\n\n'. for k in range(0, len(self.diffuses)):; s = s + str(self.diffuses[k]). return s. [docs] def populateExtern(self):; """"""Function to define a charge field external to the; molecule through point and diffuse charges. """"""; # Charges; for charge in self.charges:; self.extern.addCharge(charge[0], charge[1], charge[2], charge[3]); # Diffuses; for diffuse in self.diffuses:; diffuse.populateExtern(self.extern). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:159,Integrability,integrat,integrate,159,"﻿. qmmm — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qmmm; """"""Module with classes to integrate MM charges into; a QM calculation. """"""; import PsiMod; import re; import os; import math; import physconst; from molutil import *; from driver import *. [docs]class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. [docs] def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html:1867,Performance,perform,perform,1867,"""""""; basisChanged = PsiMod.has_option_changed(""BASIS""); ribasisChanged = PsiMod.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = PsiMod.has_option_changed(""SCF_TYPE""). basis = PsiMod.get_option(""BASIS""); ribasis = PsiMod.get_option(""DF_BASIS_SCF""); scftype = PsiMod.get_option(""SCF_TYPE""). PsiMod.print_out("" => Diffuse SCF (Determines Da) <=\n\n""); activate(self.molecule). PsiMod.set_global_option(""BASIS"", self.basisname); PsiMod.set_global_option(""DF_BASIS_SCF"", self.ribasisname); PsiMod.set_global_option(""SCF_TYPE"", ""DF""); energy('scf'); PsiMod.print_out(""\n""). self.fitGeneral(). PsiMod.clean(). PsiMod.set_global_option(""BASIS"", basis); PsiMod.set_global_option(""DF_BASIS_SCF"", ribasis); PsiMod.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; PsiMod.revoke_option_changed(""BASIS""); if not ribasisChanged:; PsiMod.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; PsiMod.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; PsiMod.print_out("" => Diffuse Charge Fitting (Determines da) <=\n\n""); self.wfn = PsiMod.wavefunction(); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = PsiMod.Gaussian94BasisSetParser(); self.ribasis = PsiMod.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = PsiMod.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = PsiMod.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qmmm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qmmm.html
https://psicode.org/psi4manual/4.0b4/_modules/text.html:4565,Availability,error,error,4565,"able object; such that the lowest value is zero. A scaling factor of *Factor* is applied. """"""; import copy. if len(self.data) == 0:; return. current_min = list(copy.deepcopy(self.data[0][1])); for datarow in self.data:; for col in range(0, len(datarow[1])):; if current_min[col] > datarow[1][col]:; current_min[col] = datarow[1][col]. for datarow in self.data:; for col in range(0, len(datarow[1])):; #print datarow[1][col]; datarow[1][col] = (datarow[1][col] - current_min[col]) * Factor. [docs] def scale(self, Factor=physconst.psi_hartree2kcalmol):; """"""Function to apply a scaling factor *Factor* to the; data of the Table object. """"""; if len(self.data) == 0:; return. for datarow in self.data:; for col in range(0, len(datarow[1])):; #print datarow[1][col]; datarow[1][col] = datarow[1][col] * Factor. [docs]def banner(text, type=1, width=35):; """"""Function to print *text* to output file in a banner of; minimum width *width* and minimum three-line height for; *type* = 1 or one-line height for *type* = 2. """"""; lines = text.split('\n'); max_length = 0; for line in lines:; if (len(line) > max_length):; max_length = len(line). max_length = max([width, max_length]). null = ''; if type == 1:; banner = ' //' + null.center(max_length, '>') + '//\n'; for line in lines:; banner += ' //' + line.center(max_length) + '//\n'; banner += ' //' + null.center(max_length, '<') + '//\n'. if type == 2:; banner = ''; for line in lines:; banner += (' ' + line + ' ').center(max_length, '='). PsiMod.print_out(banner). [docs]def print_stdout(stuff):; """"""Function to print *stuff* to standard output stream.""""""; print(stuff, file=sys.stdout). [docs]def print_stderr(stuff):; """"""Function to print *stuff* to standard error stream.""""""; print(stuff, file=sys.stderr). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/text.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/text.html
https://psicode.org/psi4manual/4.0b4/_modules/text.html:4802,Deployability,update,updated,4802,"able object; such that the lowest value is zero. A scaling factor of *Factor* is applied. """"""; import copy. if len(self.data) == 0:; return. current_min = list(copy.deepcopy(self.data[0][1])); for datarow in self.data:; for col in range(0, len(datarow[1])):; if current_min[col] > datarow[1][col]:; current_min[col] = datarow[1][col]. for datarow in self.data:; for col in range(0, len(datarow[1])):; #print datarow[1][col]; datarow[1][col] = (datarow[1][col] - current_min[col]) * Factor. [docs] def scale(self, Factor=physconst.psi_hartree2kcalmol):; """"""Function to apply a scaling factor *Factor* to the; data of the Table object. """"""; if len(self.data) == 0:; return. for datarow in self.data:; for col in range(0, len(datarow[1])):; #print datarow[1][col]; datarow[1][col] = datarow[1][col] * Factor. [docs]def banner(text, type=1, width=35):; """"""Function to print *text* to output file in a banner of; minimum width *width* and minimum three-line height for; *type* = 1 or one-line height for *type* = 2. """"""; lines = text.split('\n'); max_length = 0; for line in lines:; if (len(line) > max_length):; max_length = len(line). max_length = max([width, max_length]). null = ''; if type == 1:; banner = ' //' + null.center(max_length, '>') + '//\n'; for line in lines:; banner += ' //' + line.center(max_length) + '//\n'; banner += ' //' + null.center(max_length, '<') + '//\n'. if type == 2:; banner = ''; for line in lines:; banner += (' ' + line + ' ').center(max_length, '='). PsiMod.print_out(banner). [docs]def print_stdout(stuff):; """"""Function to print *stuff* to standard output stream.""""""; print(stuff, file=sys.stdout). [docs]def print_stderr(stuff):; """"""Function to print *stuff* to standard error stream.""""""; print(stuff, file=sys.stderr). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/text.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/text.html
https://psicode.org/psi4manual/4.0b4/_modules/text.html:480,Energy Efficiency,energy,energy,480,"﻿. text — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for text; from __future__ import print_function; """"""Module with utility classes and functions related; to data tables and text. """"""; import PsiMod; import sys; import re; import physconst; from psiexceptions import *. yes = re.compile(r'^(yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(no|false|off|0)', re.IGNORECASE); der0th = re.compile(r'^(0|none|energy)', re.IGNORECASE); der1st = re.compile(r'^(1|first|gradient)', re.IGNORECASE); der2nd = re.compile(r'^(2|second|hessian)', re.IGNORECASE). [docs]class Table(object):; """"""Class defining a flexible Table object for storing data."""""". def __init__(self, rows=(),; row_label_width=10,; row_label_precision=4,; cols=(),; width=16, precision=10):; self.row_label_width = row_label_width; self.row_label_precision = row_label_precision; self.width = width; self.precision = precision; self.rows = rows. if isinstance(cols, str):; self.cols = (cols,); else:; self.cols = cols. self.labels = []; self.data = []. [docs] def format_label(self):; """"""Function to pad the width of Table object labels.""""""; #str = lambda x: (('%%%d.%df' % (self.row_label_width, self.row_label_precision)) % x); str = lambda x: (('%%%ds' % (self.row_label_width)) % x); return "" "".join(map(str, self.labels)). [docs] def format_values(self, values):; """"""Function to pad the width of Table object data cells.""""""; str = lambda x: (('%%%d.%df' % (self.width, self.precision)) % x); return "" "".join(map(str, values)). def __getitem__(self, value):; self.labels.append(value); return self. def __setitem__(self, name, value):; self.labels.append(name); label = self.format_label(); self.labels = []. if isinstance(value, list):; self.data.append((label, value)); else:; self.data.append((label, [value])). [docs] def save(self, file):; """"""Function to save string of the Table object to *file*.""""""; import pickle; pickle_str = pickle.dumps(self); fileob",MatchSource.WIKI,psi4manual/4.0b4/_modules/text.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/text.html
https://psicode.org/psi4manual/4.0b4/_modules/text.html:674,Modifiability,flexible,flexible,674,"﻿. text — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for text; from __future__ import print_function; """"""Module with utility classes and functions related; to data tables and text. """"""; import PsiMod; import sys; import re; import physconst; from psiexceptions import *. yes = re.compile(r'^(yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(no|false|off|0)', re.IGNORECASE); der0th = re.compile(r'^(0|none|energy)', re.IGNORECASE); der1st = re.compile(r'^(1|first|gradient)', re.IGNORECASE); der2nd = re.compile(r'^(2|second|hessian)', re.IGNORECASE). [docs]class Table(object):; """"""Class defining a flexible Table object for storing data."""""". def __init__(self, rows=(),; row_label_width=10,; row_label_precision=4,; cols=(),; width=16, precision=10):; self.row_label_width = row_label_width; self.row_label_precision = row_label_precision; self.width = width; self.precision = precision; self.rows = rows. if isinstance(cols, str):; self.cols = (cols,); else:; self.cols = cols. self.labels = []; self.data = []. [docs] def format_label(self):; """"""Function to pad the width of Table object labels.""""""; #str = lambda x: (('%%%d.%df' % (self.row_label_width, self.row_label_precision)) % x); str = lambda x: (('%%%ds' % (self.row_label_width)) % x); return "" "".join(map(str, self.labels)). [docs] def format_values(self, values):; """"""Function to pad the width of Table object data cells.""""""; str = lambda x: (('%%%d.%df' % (self.width, self.precision)) % x); return "" "".join(map(str, values)). def __getitem__(self, value):; self.labels.append(value); return self. def __setitem__(self, name, value):; self.labels.append(name); label = self.format_label(); self.labels = []. if isinstance(value, list):; self.data.append((label, value)); else:; self.data.append((label, [value])). [docs] def save(self, file):; """"""Function to save string of the Table object to *file*.""""""; import pickle; pickle_str = pickle.dumps(self); fileob",MatchSource.WIKI,psi4manual/4.0b4/_modules/text.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/text.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:1376,Availability,failure,failure,1376,"e(kwargs['title']); for prop in args:; oe.add(prop); oe.compute(). [docs]def set_memory(bytes):; """"""Function to reset the total memory allocation.""""""; PsiMod.set_memory(bytes). [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return PsiMod.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; PsiMod.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return PsiMod.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two ",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:2087,Availability,failure,failure,2087,"'\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() ",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:2492,Availability,failure,failure,2492,"nt((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); if (expected.symmetry() != computed.symmetry()):; print(""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); sys.exit(1); nirreps = expected.nirrep(); symmetry = expected.symmet",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:2942,Availability,failure,failure,2942,"are two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); if (expected.symmetry() != computed.symmetry()):; print(""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); sys.exit(1); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; print(""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); sys.exit(1); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; print(""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); sys.exit(1); rows ",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:4902,Availability,failure,failure,4902,"omputed.cols(irrep))); sys.exit(1); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); PsiMod.print_out(""The Failed Test Matrices\n""); PsiMod.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); PsiMod.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); sys.exit(1); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; print(""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); sys.exit(1); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); failed = 1; break. if(failed):; PsiMod.print_out(""The computed vector\n""); computed.print_out(); PsiMod.print_out(""The reference vector\n""); expected.print_out(); sys.exit(1); success(label). [",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:8597,Deployability,update,updated,8597,"opy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. """""". pid = str(os.getpid()); scratch = PsiMod.IOManager.shared_object().get_file_path(int(unit)). cp = '/bin/cp';; if move:; cp = '/bin/mv';. unit = str(unit). target = ''; target += prefix; target += '.'; target += pid; if len(namespace):; target += '.'; target += namespace; target += '.'; target += unit. command = ('%s %s %s/%s' % (cp, filename, scratch, target)). os.system(command); #print command. [docs]def copy_file_from_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file out of scratch with correct naming; convention. Arguments:. @arg filename full path to target file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch('temp', 'psi', 'h2o', 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. """""". pid = str(os.getpid()); scratch = PsiMod.IOManager.shared_object().get_file_path(int(unit)). cp = '/bin/cp';; if move:; cp = '/bin/mv';. unit = str(unit). target = ''; target += prefix; target += '.'; target += pid; if len(namespace):; target += '.'; target += namespace; target += '.'; target += unit. command = ('%s %s/%s %s' % (cp, scratch, target, filename)). os.system(command); #print command. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:1412,Testability,test,test,1412,"; oe.add(prop); oe.compute(). [docs]def set_memory(bytes):; """"""Function to reset the total memory allocation.""""""; PsiMod.set_memory(bytes). [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return PsiMod.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; PsiMod.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return PsiMod.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:2123,Testability,test,test,2123,"s.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s ha",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:2528,Testability,test,test,2528,"digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); if (expected.symmetry() != computed.symmetry()):; print(""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); sys.exit(1); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:3038,Testability,test,test,3038,"ted* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); if (expected.symmetry() != computed.symmetry()):; print(""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); sys.exit(1); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; print(""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); sys.exit(1); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; print(""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); sys.exit(1); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); fai",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/util.html:4997,Testability,test,test,4997,"ols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); PsiMod.print_out(""The Failed Test Matrices\n""); PsiMod.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); PsiMod.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); sys.exit(1); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; print(""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); sys.exit(1); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); failed = 1; break. if(failed):; PsiMod.print_out(""The computed vector\n""); computed.print_out(); PsiMod.print_out(""The reference vector\n""); expected.print_out(); sys.exit(1); success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, mo",MatchSource.WIKI,psi4manual/4.0b4/_modules/util.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:18005,Availability,error,error,18005," - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs a",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24323,Availability,avail,available,24323,"z2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25525,Availability,avail,available,25525,"erforms a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25551,Availability,avail,availableDatabases,25551,"erforms a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25814,Availability,avail,available,25814," string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25840,Availability,avail,availableDatabases,25840," string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26702,Availability,avail,available,26702,"ther correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.;",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26727,Availability,avail,availableDatabases,26727,"ther correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.;",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26786,Availability,error,error,26786,"ther correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.;",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:27321,Availability,avail,available,27321,"boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:27897,Availability,avail,available,27897,"tom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2'",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28105,Availability,avail,available,28105,"cates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset=",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:34749,Availability,error,error,34749,"buteError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:35083,Availability,avail,available,35083,"(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise V",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:35627,Availability,avail,available,35627,"elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:35839,Availability,avail,available,35839,"db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name)",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:36063,Availability,avail,available,36063," raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name))); PsiMod.print_out(""\n""). # write index of calcs to output file; if (db_mode.lower() == 'continuous'):; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructi",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:36335,Availability,avail,available,36335," []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name))); PsiMod.print_out(""\n""). # write index of calcs to output file; if (db_mode.lower() == 'continuous'):; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49124,Availability,error,error,49124,"db_rxn][envv] = 0.0; for i in range(len(ACTV[db_rxn])):; VRXN[db_rxn][envv] += VRGT[ACTV[db_rxn][i]][envv] * RXNM[db_rxn][ACTV[db_rxn][i]]. tables += """"""\n%23s %16.8f """""" % (db_rxn, VRXN[db_rxn][envv]); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]); tables += """"""\n %s\n"""""" % (table_delimit). # tabulate primary requested energy variable with statistics; count_rxn = 0; minDerror = 100000.0; maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror);",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49305,Availability,error,error,49305,"ables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]); tables += """"""\n %s\n"""""" % (table_delimit). # tabulate primary requested energy variable with statistics; count_rxn = 0; minDerror = 100000.0; maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATI",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49444,Availability,error,error,49444,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49482,Availability,error,error,49482,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49496,Availability,error,error,49496,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49534,Availability,error,error,49534,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49553,Availability,error,error,49553,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49576,Availability,error,error,49576,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49597,Availability,error,error,49597,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:49605,Availability,error,error,49605,"maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error) > abs(maxDerror):; maxDerror = error; MSDerror += error; MADerror += abs(error); RMSDerror += error * error; count_rxn += 1; tables += """"""\n %s\n"""""" % (table_delimit). if count_rxn:. MSDerror /= float(count_rxn); MADerror /= float(count_rxn); RMSDerror = math.sqrt(RMSDerror / float(count_rxn)). tables += """"""%23s %19s %8.4f\n"""""" % ('Minimal Dev', '', minDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:57358,Availability,avail,available,57358,"asis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param mole",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:57406,Availability,avail,available,57406," corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defi",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:4821,Deployability,configurat,configuration,4821,"(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. do_total = False; if 'do_total' in kwargs:; do_total = kwargs['do_total']. external = None; external_indices = []; if 'external' in kwargs:; external = kwargs['external']; external_indices = [molecule.nfragments()]; if 'external_monomers' in kwargs:; external_indices = kwargs['external_monomers']. # Check input args; if not bsse == 'off' and not bsse == 'on' and not bsse == 'both':; raise ValidationError('n_body: bsse argument is one of on, off, or both'); if max_n_body < 1:; raise ValidationError('n_body: max_n_body must be at least 1'); if max_n_body > molecule.nfragments():; raise ValidationError('n_body: max_n_body must be <= to the number of fragments in the molecule'). # Set to save RI integrals for repeated full-basis computations; ri_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf;",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24900,Deployability,continuous,continuous,24900,"ndicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complex",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25047,Deployability,continuous,continuous,25047," :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whet",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:32630,Deployability,continuous,continuous,32630, %s not suitable for non-supramolecular calculation.' % (db_name)); else:; ACTV = database.ACTV_SA; # Force open-shell if needed; openshell_override = 0; if (user_reference == 'RHF') or (user_reference == 'RKS'):; try:; database.isOS; except AttributeError:; pass; else:; if yes.match(str(database.isOS)):; openshell_override = 1; PsiMod.print_out('\nSome reagents in database %s require an open-shell reference; will be reset to UHF/UKS as needed.\n' % (db_name)). # Configuration based upon database keyword options; # Option symmetry- whether symmetry treated normally or turned off (currently req'd for dfmp2 & dft); db_symm = 'yes'; if 'symm' in kwargs:; db_symm = kwargs['symm']. symmetry_override = 0; if no.match(str(db_symm)):; symmetry_override = 1; elif yes.match(str(db_symm)):; pass; else:; raise ValidationError('Symmetry mode \'%s\' not valid.' % (db_symm)). # Option mode of operation- whether db run in one job or files farmed out; if not('db_mode' in kwargs):; if ('mode' in kwargs):; kwargs['db_mode'] = kwargs['mode']; del kwargs['mode']; else:; kwargs['db_mode'] = 'continuous'; db_mode = kwargs['db_mode']. if (db_mode.lower() == 'continuous'):; pass; elif (db_mode.lower() == 'sow'):; pass; elif (db_mode.lower() == 'reap'):; if 'linkage' in kwargs:; db_linkage = kwargs['linkage']; else:; raise ValidationError('Database execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Database execution mode \'%s\' not valid.' % (db_mode)). # Option counterpoise- whether for interaction energy databases run in bsse-corrected or not; db_cp = 'no'; if 'cp' in kwargs:; db_cp = kwargs['cp']. if yes.match(str(db_cp)):; try:; database.ACTV_CP; except AttributeError:; raise ValidationError('Counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CP; elif no.match(str(db_cp)):; pass; else:; raise ValidationError('Counterpoise correction mode \'%s\' not valid.' % (db_cp)). # Option relaxed- whether for non-,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:32696,Deployability,continuous,continuous,32696,eference == 'RHF') or (user_reference == 'RKS'):; try:; database.isOS; except AttributeError:; pass; else:; if yes.match(str(database.isOS)):; openshell_override = 1; PsiMod.print_out('\nSome reagents in database %s require an open-shell reference; will be reset to UHF/UKS as needed.\n' % (db_name)). # Configuration based upon database keyword options; # Option symmetry- whether symmetry treated normally or turned off (currently req'd for dfmp2 & dft); db_symm = 'yes'; if 'symm' in kwargs:; db_symm = kwargs['symm']. symmetry_override = 0; if no.match(str(db_symm)):; symmetry_override = 1; elif yes.match(str(db_symm)):; pass; else:; raise ValidationError('Symmetry mode \'%s\' not valid.' % (db_symm)). # Option mode of operation- whether db run in one job or files farmed out; if not('db_mode' in kwargs):; if ('mode' in kwargs):; kwargs['db_mode'] = kwargs['mode']; del kwargs['mode']; else:; kwargs['db_mode'] = 'continuous'; db_mode = kwargs['db_mode']. if (db_mode.lower() == 'continuous'):; pass; elif (db_mode.lower() == 'sow'):; pass; elif (db_mode.lower() == 'reap'):; if 'linkage' in kwargs:; db_linkage = kwargs['linkage']; else:; raise ValidationError('Database execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Database execution mode \'%s\' not valid.' % (db_mode)). # Option counterpoise- whether for interaction energy databases run in bsse-corrected or not; db_cp = 'no'; if 'cp' in kwargs:; db_cp = kwargs['cp']. if yes.match(str(db_cp)):; try:; database.ACTV_CP; except AttributeError:; raise ValidationError('Counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CP; elif no.match(str(db_cp)):; pass; else:; raise ValidationError('Counterpoise correction mode \'%s\' not valid.' % (db_cp)). # Option relaxed- whether for non-frozen-monomer interaction energy databases include deformation correction or not?; db_rlxd = 'no'; if 'rlxd' in kwargs:; db_rlxd = kwargs['rlxd']. if yes.match(str,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:36901,Deployability,continuous,continuous,36901,"'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name))); PsiMod.print_out(""\n""). # write index of calcs to output file; if (db_mode.lower() == 'continuous'):; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; PsiMod.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if (db_mode.lower() == 'sow'):; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a single inpu",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:37003,Deployability,continuous,continuous,37003,"'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getattr_ignorecase(database, 'HRXN_' + db_subset); if HRXN is None:; raise ValidationError('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name))); PsiMod.print_out(""\n""). # write index of calcs to output file; if (db_mode.lower() == 'continuous'):; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; PsiMod.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if (db_mode.lower() == 'sow'):; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a single inpu",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:39075,Deployability,continuous,continuous,39075,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); b",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:42826,Deployability,continuous,continuous,42826,"s_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""molecule.update_geometry()\n"""""". if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec(banners); exec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[r",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:43147,Deployability,continuous,continuous,43147,"oint_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec(banners); exec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrappe",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:50885,Deployability,update,update,50885,"\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options; activate(user_molecule); user_molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", user_basis); PsiMod.set_global_option(""REFERENCE"", user_reference); if not b_user_reference:; PsiMod.revoke_global_option_changed('REFERENCE'); PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). DB_RGT.clear(); DB_RGT.update(VRGT); DB_RXN.clear(); DB_RXN.update(VRXN); return finalenergy . [docs]def tblhead(tbl_maxrgt, tbl_delimit, ttype):; r""""""Function that prints the header for the changable-width results tables in db().; *tbl_maxrgt* is the number of reagent columns the table must plan for. *tbl_delimit*; is a string of dashes of the correct length to set off the table. *ttype* is 1 for; tables comparing the computed values to the reference or 2 for simple tabulation; and sum of the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %8s"""""" % ('Reaction', 'Reaction Energy', 'Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:50922,Deployability,update,update,50922,"es += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options; activate(user_molecule); user_molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", user_basis); PsiMod.set_global_option(""REFERENCE"", user_reference); if not b_user_reference:; PsiMod.revoke_global_option_changed('REFERENCE'); PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). DB_RGT.clear(); DB_RGT.update(VRGT); DB_RXN.clear(); DB_RXN.update(VRXN); return finalenergy . [docs]def tblhead(tbl_maxrgt, tbl_delimit, ttype):; r""""""Function that prints the header for the changable-width results tables in db().; *tbl_maxrgt* is the number of reagent columns the table must plan for. *tbl_delimit*; is a string of dashes of the correct length to set off the table. *ttype* is 1 for; tables comparing the computed values to the reference or 2 for simple tabulation; and sum of the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %8s"""""" % ('Reaction', 'Reaction Energy', 'Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%20s"""""" % ('[H] Wt'); elif ttype == 2:; tbl_",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53058,Deployability,configurat,configuration,53058,"###################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. :aliases: cbs(). :returns: (*float*) -- Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:92193,Deployability,update,updated,92193,"h(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. # Quickly normalize the types for both python 2 and 3; try:; unicode = unicode; except NameError:; # 'unicode' is undefined, must be Python 3; str = str; unicode = str; bytes = bytes; basestring = (str,bytes); else:; # 'unicode' exists, must be Python 2; str = str; unicode = unicode; bytes = str; basestring = basestring. ## Aliases ##; cbs = complete_basis_set. #################################; ## End of Complete Basis Set ##; #################################. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:235,Energy Efficiency,energy,energy,235,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:657,Energy Efficiency,energy,energy,657,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:791,Energy Efficiency,energy,energy,791,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:4249,Energy Efficiency,energy,energy,4249,"group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = geometry(new_geom); new_mol.print_out(); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. do_total = False; if 'do_total' in kwargs:; do_total = kwargs['do_total']. external = None; external_indices = []; if 'external' in kwargs:; external = kwargs['external']; external_indices = [molecule.nfragments()]; if 'external_monome",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:16562,Energy Efficiency,energy,energy,16562,"' %6s %24s %24s\n' % (""N-Body"", ""Delta E [H]"", ""Delta E [kcal mol^-1]"")); for k in range(len(Ns)):; n = Ns[k]; if n == 1:; continue; E = energies_n_bsse[Ns[k]] - energies_n_bsse[Ns[k + 1]]; PsiMod.print_out(' %6s %24.16E %24.16E\n' % (n, E, physconst.psi_hartree2kcalmol * E)); PsiMod.print_out('\n'). # Put everything back the way it was; PsiMod.set_global_option('DF_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); PsiMod.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:16914,Energy Efficiency,energy,energy,16914,"_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); PsiMod.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17216,Energy Efficiency,energy,energy,17216," Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17325,Energy Efficiency,energy,energy,17325,"e cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any po",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17499,Energy Efficiency,energy,energy,17499,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17630,Energy Efficiency,energy,energy,17630,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:18211,Energy Efficiency,energy,energy,18211,":py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_m",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:18610,Energy Efficiency,energy,energy,18610,"rforms a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf; PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). PsiMo",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:19764,Energy Efficiency,energy,energy,19764,"er counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf; PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). PsiMod.print_out(""\n""); banner(""CP Computation: Complex.\nFull Basis Set.""); PsiMod.print_out(""\n""); e_dimer = call_function_in_1st_argument(func, **kwargs); #e_dimer = energy(name, **kwargs). PsiMod.clean(); PsiMod.set_global_option('DF_INTS_IO', 'LOAD'). # All monomers with ghosts; monomers = extract_clusters(molecule, True, 1); e_monomer_full = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); banner((""CP Computation: Monomer %d.\n Full Basis Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_full.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_full.append(energy(name,**kwargs)); cluster_n = cluster_n + 1; PsiMod.clean(). PsiMod.set_global_option('DF_INTS_IO', 'NONE'); if (check_bsse):; # All monomers without ghosts; monomers = extract_clusters(molecule, False, 1); e_monomer_bsse = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); #cluster.print_to_output(); banner((""CP Computation: Monomer %d.\n Monomer Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_bsse.append(call_function_in_1st_argument(func, **kw",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:20227,Energy Efficiency,energy,energy,20227,"bal_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf; PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). PsiMod.print_out(""\n""); banner(""CP Computation: Complex.\nFull Basis Set.""); PsiMod.print_out(""\n""); e_dimer = call_function_in_1st_argument(func, **kwargs); #e_dimer = energy(name, **kwargs). PsiMod.clean(); PsiMod.set_global_option('DF_INTS_IO', 'LOAD'). # All monomers with ghosts; monomers = extract_clusters(molecule, True, 1); e_monomer_full = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); banner((""CP Computation: Monomer %d.\n Full Basis Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_full.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_full.append(energy(name,**kwargs)); cluster_n = cluster_n + 1; PsiMod.clean(). PsiMod.set_global_option('DF_INTS_IO', 'NONE'); if (check_bsse):; # All monomers without ghosts; monomers = extract_clusters(molecule, False, 1); e_monomer_bsse = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); #cluster.print_to_output(); banner((""CP Computation: Monomer %d.\n Monomer Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_bsse.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_bsse.append(energy(name,**kwargs)); cluster_n = cluster_n + 1. PsiMod.set_global_option('DF_INTS_IO', df_ints_io); psioh.set_specific_retention(97, False). activate(molecule). if (check_bsse == False):; cp_table = Table(rows=[""System:""], cols=[""Energy (full):""]); cp_table[""Complex""] = [e_dimer]; for cluster_n in range(0, len(monomers)):; key = ""Monomer %d"" % (cluster_n + 1); cp_table[key] = [e_monomer_full[cluster_n]]. e_full = e_dimer; for cluster_n in range(0, len(monomers)):; e_full = e_full -",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:20764,Energy Efficiency,energy,energy,20764,"). PsiMod.clean(); PsiMod.set_global_option('DF_INTS_IO', 'LOAD'). # All monomers with ghosts; monomers = extract_clusters(molecule, True, 1); e_monomer_full = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); banner((""CP Computation: Monomer %d.\n Full Basis Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_full.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_full.append(energy(name,**kwargs)); cluster_n = cluster_n + 1; PsiMod.clean(). PsiMod.set_global_option('DF_INTS_IO', 'NONE'); if (check_bsse):; # All monomers without ghosts; monomers = extract_clusters(molecule, False, 1); e_monomer_bsse = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); #cluster.print_to_output(); banner((""CP Computation: Monomer %d.\n Monomer Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_bsse.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_bsse.append(energy(name,**kwargs)); cluster_n = cluster_n + 1. PsiMod.set_global_option('DF_INTS_IO', df_ints_io); psioh.set_specific_retention(97, False). activate(molecule). if (check_bsse == False):; cp_table = Table(rows=[""System:""], cols=[""Energy (full):""]); cp_table[""Complex""] = [e_dimer]; for cluster_n in range(0, len(monomers)):; key = ""Monomer %d"" % (cluster_n + 1); cp_table[key] = [e_monomer_full[cluster_n]]. e_full = e_dimer; for cluster_n in range(0, len(monomers)):; e_full = e_full - e_monomer_full[cluster_n]; cp_table[""Interaction""] = [e_full]. PsiMod.set_variable('CP-CORRECTED 2-BODY INTERACTION ENERGY', e_full). else:; cp_table = Table(rows=[""System:""], cols=[""Energy (full):"", ""Energy (monomer):"", ""BSSE:""]); cp_table[""Complex""] = [e_dimer, 0.0, 0.0]; for cluster_n in range(0, len(monomers)):; key = ""Monomer %d"" % (cluster_n + 1); cp_table[key] = [e_monomer_full[cluster_n], e_monomer_bsse[cluster_n], \; e_monomer_full[cluster_n] - e_monomer_bsse[cluster_n]]. e_full = e_dimer; e_bsse = e_dimer; for cluste",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24016,Energy Efficiency,energy,energy,24016,"EVIATION>`; * :psivar:`db_name DATABASE ROOT-MEAN-SQUARE DEVIATION <db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION>`; * Python dictionaries of results accessible as ``DB_RGT`` and ``DB_RXN``. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24435,Energy Efficiency,energy,energy,24435,"ot yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. U",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24591,Energy Efficiency,energy,energy,24591,"dded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24724,Energy Efficiency,energy,energy,24724,"dded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25752,Energy Efficiency,energy,energy,25752,"ython functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are emp",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26398,Energy Efficiency,energy,energy,26398,"rgies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26447,Energy Efficiency,energy,energy,26447,"rgies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26889,Energy Efficiency,energy,energy,26889,") only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. C",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26997,Energy Efficiency,energy,energy,26997,":`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]``",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28462,Energy Efficiency,energy,energy,28462,"'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28882,Energy Efficiency,energy,energy,28882,"r available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within databas",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28959,Energy Efficiency,energy,energy,28959,"r available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within databas",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28976,Energy Efficiency,energy,energy,28976,"r available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within databas",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:29130,Energy Efficiency,energy,energy,29130," the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:29150,Energy Efficiency,energy,energy,29150," the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:29605,Energy Efficiency,energy,energy,29605,"mputed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); database = import_ignorecase(db_name); if database is None:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSearch path that was tried:\n'); PsiMod.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAG",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:33076,Energy Efficiency,energy,energy,33076,ed normally or turned off (currently req'd for dfmp2 & dft); db_symm = 'yes'; if 'symm' in kwargs:; db_symm = kwargs['symm']. symmetry_override = 0; if no.match(str(db_symm)):; symmetry_override = 1; elif yes.match(str(db_symm)):; pass; else:; raise ValidationError('Symmetry mode \'%s\' not valid.' % (db_symm)). # Option mode of operation- whether db run in one job or files farmed out; if not('db_mode' in kwargs):; if ('mode' in kwargs):; kwargs['db_mode'] = kwargs['mode']; del kwargs['mode']; else:; kwargs['db_mode'] = 'continuous'; db_mode = kwargs['db_mode']. if (db_mode.lower() == 'continuous'):; pass; elif (db_mode.lower() == 'sow'):; pass; elif (db_mode.lower() == 'reap'):; if 'linkage' in kwargs:; db_linkage = kwargs['linkage']; else:; raise ValidationError('Database execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Database execution mode \'%s\' not valid.' % (db_mode)). # Option counterpoise- whether for interaction energy databases run in bsse-corrected or not; db_cp = 'no'; if 'cp' in kwargs:; db_cp = kwargs['cp']. if yes.match(str(db_cp)):; try:; database.ACTV_CP; except AttributeError:; raise ValidationError('Counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CP; elif no.match(str(db_cp)):; pass; else:; raise ValidationError('Counterpoise correction mode \'%s\' not valid.' % (db_cp)). # Option relaxed- whether for non-frozen-monomer interaction energy databases include deformation correction or not?; db_rlxd = 'no'; if 'rlxd' in kwargs:; db_rlxd = kwargs['rlxd']. if yes.match(str(db_rlxd)):; if yes.match(str(db_cp)):; try:; database.ACTV_CPRLX; database.RXNM_CPRLX; except AttributeError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Defo,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:33571,Energy Efficiency,energy,energy,33571,; else:; kwargs['db_mode'] = 'continuous'; db_mode = kwargs['db_mode']. if (db_mode.lower() == 'continuous'):; pass; elif (db_mode.lower() == 'sow'):; pass; elif (db_mode.lower() == 'reap'):; if 'linkage' in kwargs:; db_linkage = kwargs['linkage']; else:; raise ValidationError('Database execution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Database execution mode \'%s\' not valid.' % (db_mode)). # Option counterpoise- whether for interaction energy databases run in bsse-corrected or not; db_cp = 'no'; if 'cp' in kwargs:; db_cp = kwargs['cp']. if yes.match(str(db_cp)):; try:; database.ACTV_CP; except AttributeError:; raise ValidationError('Counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CP; elif no.match(str(db_cp)):; pass; else:; raise ValidationError('Counterpoise correction mode \'%s\' not valid.' % (db_cp)). # Option relaxed- whether for non-frozen-monomer interaction energy databases include deformation correction or not?; db_rlxd = 'no'; if 'rlxd' in kwargs:; db_rlxd = kwargs['rlxd']. if yes.match(str(db_rlxd)):; if yes.match(str(db_cp)):; try:; database.ACTV_CPRLX; database.RXNM_CPRLX; except AttributeError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); eli,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:35205,Energy Efficiency,energy,energy,35205,"tr(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getatt",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:42875,Energy Efficiency,energy,energy,42875,"s_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""molecule.update_geometry()\n"""""". if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec(banners); exec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[r",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:43020,Energy Efficiency,energy,energy,43020,"s_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""molecule.update_geometry()\n"""""". if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""PsiMod.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if (db_mode.lower() == 'continuous'):; exec(banners); exec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[r",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:44772,Energy Efficiency,energy,energy,44772,"; ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.print_variables()\n""""""); freagent.write(""""""PsiMod.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""PsiMod.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""PsiMod.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (PsiMod.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())); freagent.close(). elif (db_mode.lower() == 'reap'):; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' D",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:46265,Energy Efficiency,energy,energy,46265,"] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['DATABASE', 'RESULT:', 'computation']):; if int(s[3]) != db_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rgt, str(s[3]), str(db_linkage))); if s[6] != rgt:; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with reagent %s.'; % (rgt, s[6], rgt)); if (s[8:10] == ['electronic', 'energy']):; ERGT[rgt] = float(s[10]); PsiMod.print_out('DATABASE RESULT: electronic energy = %20.12f\n' % (ERGT[rgt])); elif (s[8:10] == ['variable', 'value']):; for envv in db_tabulate:; envv = envv.upper(); if (s[13:] == envv.split()):; VRGT[rgt][envv] = float(s[10]); PsiMod.print_out('DATABASE RESULT: variable %s value = %20.12f\n' % (envv, VRGT[rgt][envv])); freagent.close(). # end sow after writing files; if (db_mode.lower() == 'sow'):; return 0.0. # Reap all the necessary reaction computations; PsiMod.print_out(""\n""); banner((""Database %s Results"" % (db_name))); PsiMod.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (54 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); for i in range(len(ACTV[db_rxn])):; if abs(ERGT[ACTV[db_rxn][i]]) < 1.0e-12:; FAIL[rxn] = 1. # tabulate requested proce",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:46349,Energy Efficiency,energy,energy,46349,"rs); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['DATABASE', 'RESULT:', 'computation']):; if int(s[3]) != db_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rgt, str(s[3]), str(db_linkage))); if s[6] != rgt:; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with reagent %s.'; % (rgt, s[6], rgt)); if (s[8:10] == ['electronic', 'energy']):; ERGT[rgt] = float(s[10]); PsiMod.print_out('DATABASE RESULT: electronic energy = %20.12f\n' % (ERGT[rgt])); elif (s[8:10] == ['variable', 'value']):; for envv in db_tabulate:; envv = envv.upper(); if (s[13:] == envv.split()):; VRGT[rgt][envv] = float(s[10]); PsiMod.print_out('DATABASE RESULT: variable %s value = %20.12f\n' % (envv, VRGT[rgt][envv])); freagent.close(). # end sow after writing files; if (db_mode.lower() == 'sow'):; return 0.0. # Reap all the necessary reaction computations; PsiMod.print_out(""\n""); banner((""Database %s Results"" % (db_name))); PsiMod.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (54 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); for i in range(len(ACTV[db_rxn])):; if abs(ERGT[ACTV[db_rxn][i]]) < 1.0e-12:; FAIL[rxn] = 1. # tabulate requested process::environment variables; tables += """""" For each VARIABLE requested by tabu",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:48483,Energy Efficiency,energy,energy,48483,""" Depending on the nature of the variable, this may or may not make any physical sense.\n""""""; for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); VRXN[db_rxn] = {}. for envv in db_tabulate:; envv = envv.upper(); tables += """"""\n ==> %s <==\n\n"""""" % (envv.title()); tables += tblhead(maxrgt, table_delimit, 2). for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8s %8s %8s"""""" % (db_rxn, '', '****', ''); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; VRXN[db_rxn][envv] = 0.0; for i in range(len(ACTV[db_rxn])):; VRXN[db_rxn][envv] += VRGT[ACTV[db_rxn][i]][envv] * RXNM[db_rxn][ACTV[db_rxn][i]]. tables += """"""\n%23s %16.8f """""" % (db_rxn, VRXN[db_rxn][envv]); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]); tables += """"""\n %s\n"""""" % (table_delimit). # tabulate primary requested energy variable with statistics; count_rxn = 0; minDerror = 100000.0; maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error)",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:52324,Energy Efficiency,energy,energy,52324,"the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %8s"""""" % ('Reaction', 'Reaction Energy', 'Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%20s"""""" % ('[H] Wt'); elif ttype == 2:; tbl_str += """"""%20s"""""" % ('Value Wt'); tbl_str += """"""\n %s"""""" % (tbl_delimit); return tbl_str. ## Aliases ##; db = database. #######################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. :aliases: cbs(). :returns: (*float*) -- Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more ex",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:52532,Energy Efficiency,energy,energy,52532,"ror'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%20s"""""" % ('[H] Wt'); elif ttype == 2:; tbl_str += """"""%20s"""""" % ('Value Wt'); tbl_str += """"""\n %s"""""" % (tbl_delimit); return tbl_str. ## Aliases ##; db = database. #######################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. :aliases: cbs(). :returns: (*float*) -- Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment o",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53422,Energy Efficiency,energy,energy,53422,"Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; *",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53544,Energy Efficiency,energy,energy,53544,"Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; *",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53568,Energy Efficiency,energy,energy,53568,"Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; *",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53615,Energy Efficiency,energy,energy,53615,"Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; *",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53965,Energy Efficiency,energy,energy,53965,"RRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'c",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:54181,Energy Efficiency,energy,energy,54181,"ified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a d",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:54688,Energy Efficiency,energy,energy,54688,"s only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:54908,Energy Efficiency,energy,energy,54908," that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set se",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:54948,Energy Efficiency,energy,energy,54948," that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set se",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55168,Energy Efficiency,energy,energy,55168,"e been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of b",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55231,Energy Efficiency,energy,energy,55231,"e been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of b",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55379,Energy Efficiency,energy,energy,55379,"df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55442,Energy Efficiency,energy,energy,55442,"df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55574,Energy Efficiency,energy,energy,55574,"ent, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55644,Energy Efficiency,energy,energy,55644,"ent, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55797,Energy Efficiency,energy,energy,55797,": string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:55867,Energy Efficiency,energy,energy,55867,": string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:56236,Energy Efficiency,energy,energy,56236,"ion; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; se",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:56541,Energy Efficiency,energy,energy,56541,": ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; :param delta2_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_h",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:56786,Energy Efficiency,energy,energy,56786," |dr| || ``'ccsd(t)'`` || etc. Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. * Basis Sets; Currently, the basis set set through ``set`` commands have no influence; on a cbs calculation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:57040,Energy Efficiency,energy,energy,57040,"lation. :type scf_basis: :ref:`basis string <apdx:basisElement>`; :param scf_basis: |dl| ``corl_basis`` |dr| || ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta c",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:57082,Energy Efficiency,energy,energy,57082,"|| ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, ``scf_basis`` can default; to ``corl_basis``. :type corl_basis: :ref:`basis string <apdx:basisElement>`; :param corl_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the correlation energy. :type delta_basis: :ref:`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1``",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:57607,Energy Efficiency,energy,energy,57607,":`basis string <apdx:basisElement>`; :param delta_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replica",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:57802,Energy Efficiency,energy,energy,57802," to the correlation energy. :type delta2_basis: :ref:`basis string <apdx:basisElement>`; :param delta2_basis: ``'cc-pV[TQ]Z'`` || ``'jun-cc-pv[tq5]z'`` || ``'6-31G*'`` || etc. Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58024,Energy Efficiency,energy,energy,58024,"ets employed for the second delta correction; to the correlation energy. * Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtp",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58255,Energy Efficiency,energy,energy,58255,"; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, ``'highest_1'``, which uses the best basis; set available. See `Extrapolation Schemes`_ for all available schemes. :type scf_scheme: function; :param scf_scheme: |dl| ``highest_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58503,Energy Efficiency,energy,energy,58503,"est_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58653,Energy Efficiency,energy,energy,58653,"e: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='c",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58756,Energy Efficiency,energy,energy,58756,"be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58884,Energy Efficiency,energy,energy,58884,"|| etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:59095,Energy Efficiency,energy,energy,59095,"etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:59426,Energy Efficiency,energy,energy,59426,"s cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60153,Energy Efficiency,energy,energy,60153,">>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp4(sdq)'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATIO",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60322,Energy Efficiency,energy,energy,60322,">>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp4(sdq)'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATIO",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60505,Energy Efficiency,energy,energy,60505," delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp4(sdq)'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY', ; 'mp4(sdq)corl': 'MP4(SDQ) CORRELATION ENERGY'}; VARH['mp4'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60619,Energy Efficiency,energy,energy,60619," delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp4(sdq)'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY', ; 'mp4(sdq)corl': 'MP4(SDQ) CORRELATION ENERGY'}; VARH['mp4'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:66191,Energy Efficiency,energy,energy,66191,"ect (here) and set (below) basis sets after every new molecule activation; b_user_basis = PsiMod.has_global_option_changed('BASIS'); user_basis = PsiMod.get_global_option('BASIS'); #user_df_basis_scf = PsiMod.get_option('DF_BASIS_SCF'); #user_df_basis_mp2 = PsiMod.get_option('DF_BASIS_MP2'); #user_df_basis_cc = PsiMod.get_option('DF_BASIS_CC'); #user_df_basis_sapt = PsiMod.get_option('DF_BASIS_SAPT'); #user_df_basis_elst = PsiMod.get_option('DF_BASIS_ELST'); b_user_wfn = PsiMod.has_global_option_changed('WFN'); user_wfn = PsiMod.get_global_option('WFN'). user_writer_file_label = PsiMod.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Est",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:66645,Energy Efficiency,energy,energy,66645,"= PsiMod.get_option('DF_BASIS_ELST'); b_user_wfn = PsiMod.has_global_option_changed('WFN'); user_wfn = PsiMod.get_global_option('WFN'). user_writer_file_label = PsiMod.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:67285,Energy Efficiency,energy,energy,67285,orl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + ,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:68456,Energy Efficiency,energy,energy,68456,"t recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + delta2 (%s) not valid. These steps are cummulative.' %; (do_scf, do_corl, do_delta, do_delta2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC, ZETC = validate_bracketed_basis(kwargs['corl_basis'].lower()); else:; raise ValidationError('CORL basis sets through keyword \'%s\' are required.' % ('corl_basis')). # Establish list of valid basis sets for scf energy; if 'scf_basis' in kwargs:; BSTR, ZETR = validate_bracketed_basis(kwargs['scf_basis'].lower()); else:; if do_corl:; BSTR = BSTC[:]; ZETR = ZETC[:]; else:; raise ValidationError('SCF basis sets through keyword \'%s\' are required. Or perhaps you forgot the \'%s\'.' % ('scf_basis', 'corl_wfn')). # Establish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_ba",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:68722,Energy Efficiency,energy,energy,68722,"se ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + delta2 (%s) not valid. These steps are cummulative.' %; (do_scf, do_corl, do_delta, do_delta2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC, ZETC = validate_bracketed_basis(kwargs['corl_basis'].lower()); else:; raise ValidationError('CORL basis sets through keyword \'%s\' are required.' % ('corl_basis')). # Establish list of valid basis sets for scf energy; if 'scf_basis' in kwargs:; BSTR, ZETR = validate_bracketed_basis(kwargs['scf_basis'].lower()); else:; if do_corl:; BSTR = BSTC[:]; ZETR = ZETC[:]; else:; raise ValidationError('SCF basis sets through keyword \'%s\' are required. Or perhaps you forgot the \'%s\'.' % ('scf_basis', 'corl_wfn')). # Establish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 's",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:69082,Energy Efficiency,energy,energy,69082,"elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + delta2 (%s) not valid. These steps are cummulative.' %; (do_scf, do_corl, do_delta, do_delta2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC, ZETC = validate_bracketed_basis(kwargs['corl_basis'].lower()); else:; raise ValidationError('CORL basis sets through keyword \'%s\' are required.' % ('corl_basis')). # Establish list of valid basis sets for scf energy; if 'scf_basis' in kwargs:; BSTR, ZETR = validate_bracketed_basis(kwargs['scf_basis'].lower()); else:; if do_corl:; BSTR = BSTC[:]; ZETR = ZETC[:]; else:; raise ValidationError('SCF basis sets through keyword \'%s\' are required. Or perhaps you forgot the \'%s\'.' % ('scf_basis', 'corl_wfn')). # Establish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. #",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:69373,Energy Efficiency,energy,energy,69373,"2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC, ZETC = validate_bracketed_basis(kwargs['corl_basis'].lower()); else:; raise ValidationError('CORL basis sets through keyword \'%s\' are required.' % ('corl_basis')). # Establish list of valid basis sets for scf energy; if 'scf_basis' in kwargs:; BSTR, ZETR = validate_bracketed_basis(kwargs['scf_basis'].lower()); else:; if do_corl:; BSTR = BSTC[:]; ZETR = ZETC[:]; else:; raise ValidationError('SCF basis sets through keyword \'%s\' are required. Or perhaps you forgot the \'%s\'.' % ('scf_basis', 'corl_wfn')). # Establish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. # Establish treatment for delta2 correction energy; cbs_delta2_scheme = highest_1; if 'delta2_scheme' in kwargs:; cbs_delta2_scheme = kwargs['delta2_scheme']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Setup ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:69636,Energy Efficiency,energy,energy,69636,"is sets for scf energy; if 'scf_basis' in kwargs:; BSTR, ZETR = validate_bracketed_basis(kwargs['scf_basis'].lower()); else:; if do_corl:; BSTR = BSTC[:]; ZETR = ZETC[:]; else:; raise ValidationError('SCF basis sets through keyword \'%s\' are required. Or perhaps you forgot the \'%s\'.' % ('scf_basis', 'corl_wfn')). # Establish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. # Establish treatment for delta2 correction energy; cbs_delta2_scheme = highest_1; if 'delta2_scheme' in kwargs:; cbs_delta2_scheme = kwargs['delta2_scheme']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Setup ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = ['d_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy']; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta'",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:69846,Energy Efficiency,energy,energy,69846,"se:; raise ValidationError('SCF basis sets through keyword \'%s\' are required. Or perhaps you forgot the \'%s\'.' % ('scf_basis', 'corl_wfn')). # Establish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. # Establish treatment for delta2 correction energy; cbs_delta2_scheme = highest_1; if 'delta2_scheme' in kwargs:; cbs_delta2_scheme = kwargs['delta2_scheme']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Setup ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = ['d_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy']; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; GRAND_NEED = []; MODELCHEM = []; bstring = ''; if do_scf:; NEED = call_function_in_1st_argument(cbs_scf_scheme,; mode='requisition', basisname=BSTR, basiszeta=",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:69996,Energy Efficiency,energy,energy,69996,"ablish list of valid basis sets for delta correction energy; if do_delta:; if 'delta_basis' in kwargs:; BSTD, ZETD = validate_bracketed_basis(kwargs['delta_basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. # Establish treatment for delta2 correction energy; cbs_delta2_scheme = highest_1; if 'delta2_scheme' in kwargs:; cbs_delta2_scheme = kwargs['delta2_scheme']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Setup ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = ['d_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy']; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; GRAND_NEED = []; MODELCHEM = []; bstring = ''; if do_scf:; NEED = call_function_in_1st_argument(cbs_scf_scheme,; mode='requisition', basisname=BSTR, basiszeta=ZETR, wfnname='scf'); GRAND_NEED.append(dict(zip(d_fields, ['scf', cbs_scf_scheme, reconstitute_bracketed_basis(NEED), 'scf', NEED, +1, 0.0]))). if d",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:70151,Energy Efficiency,energy,energy,70151,"basis'].lower()); else:; raise ValidationError('DELTA basis sets through keyword \'%s\' are required.' % ('delta_basis')). # Establish list of valid basis sets for second delta correction energy; if do_delta2:; if 'delta2_basis' in kwargs:; BSTD2, ZETD2 = validate_bracketed_basis(kwargs['delta2_basis'].lower()); else:; raise ValidationError('DELTA2 basis sets through keyword \'%s\' are required.' % ('delta2_basis')). # Establish treatment for scf energy (validity check useless since python will catch it long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. # Establish treatment for delta2 correction energy; cbs_delta2_scheme = highest_1; if 'delta2_scheme' in kwargs:; cbs_delta2_scheme = kwargs['delta2_scheme']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Setup ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = ['d_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy']; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; GRAND_NEED = []; MODELCHEM = []; bstring = ''; if do_scf:; NEED = call_function_in_1st_argument(cbs_scf_scheme,; mode='requisition', basisname=BSTR, basiszeta=ZETR, wfnname='scf'); GRAND_NEED.append(dict(zip(d_fields, ['scf', cbs_scf_scheme, reconstitute_bracketed_basis(NEED), 'scf', NEED, +1, 0.0]))). if do_corl:; NEED = call_function_in_1st_argument(cbs_corl_scheme,; mode='requisition', basisname=BSTC, basiszeta=ZETC, wfnname=cbs_corl_wfn); GRAND_NEED.append(",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:70515,Energy Efficiency,energy,energy,70515," long before here); cbs_scf_scheme = highest_1; if 'scf_scheme' in kwargs:; cbs_scf_scheme = kwargs['scf_scheme']. # Establish treatment for correlation energy; cbs_corl_scheme = highest_1; if 'corl_scheme' in kwargs:; cbs_corl_scheme = kwargs['corl_scheme']. # Establish treatment for delta correction energy; cbs_delta_scheme = highest_1; if 'delta_scheme' in kwargs:; cbs_delta_scheme = kwargs['delta_scheme']. # Establish treatment for delta2 correction energy; cbs_delta2_scheme = highest_1; if 'delta2_scheme' in kwargs:; cbs_delta2_scheme = kwargs['delta2_scheme']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Setup ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = ['d_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy']; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; GRAND_NEED = []; MODELCHEM = []; bstring = ''; if do_scf:; NEED = call_function_in_1st_argument(cbs_scf_scheme,; mode='requisition', basisname=BSTR, basiszeta=ZETR, wfnname='scf'); GRAND_NEED.append(dict(zip(d_fields, ['scf', cbs_scf_scheme, reconstitute_bracketed_basis(NEED), 'scf', NEED, +1, 0.0]))). if do_corl:; NEED = call_function_in_1st_argument(cbs_corl_scheme,; mode='requisition', basisname=BSTC, basiszeta=ZETC, wfnname=cbs_corl_wfn); GRAND_NEED.append(dict(zip(d_fields, ['corl', cbs_corl_scheme, reconstitute_bracketed_basis(NEED), cbs_corl_wfn, NEED, +1, 0.0]))). if do_delta:; NEED = call_function_in_1st_argument(cbs_delta_scheme,; mode='requisition', basisname=BSTD, basiszeta=ZETD, wfnname=cbs_delta_wfn); GRAND_NEED.append(dict(zip(d_fields, ['delta', cbs_delta_scheme, reconstitute_bracketed_basis(NEED), cbs_delta_wfn, NEED, +1, 0.0]))). NEED = call_function_in_1st_argument(cbs_delta_scheme,; mode='requisition', basisname=BSTD, basiszeta=ZETD, wfnn",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:75042,Energy Efficiency,energy,energy,75042,"s for %s\n"""""" % (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']+mc['f_portion']]); PsiMod.print_out(instructions). psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(PSIF_SCF_MOS, True). # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Computation: %s / %s ')\n"""""" % (mc['f_wfn'].upper(), mc['f_basis'].upper()); cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\nPsiMod.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()). exec(commands). # Make energy() call; mc['f_energy'] = call_function_in_1st_argument(func, **kwargs). # Fill in energies for subsumed methods; for menial in VARH[mc['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); for job in JOBS_EXT:; if (temp_wfn == job['f_wfn']) and (temp_portion == job['f_portion']) and (mc['f_basis'] == job['f_basis']):; job['f_energy'] = PsiMod.get_variable(VARH[temp_wfn][menial]). PsiMod.clean(). psioh.set_specific_retention(PSIF_SCF_MOS, False). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Results ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Insert obtained energies into the array that stores the cbs stages; for stage in GRAND_NEED:; for lvl in stage['d_need'].items():; MODELCHEM.append(lvl[1]). for job in JOBS_EXT:; if ((lvl[1]['f_wfn'] == job['f_wfn']) and (lvl[1]['f_portion'] == job['f_portion']) and; (lvl[1]['f_basis'] == job['f_basis'])):; lvl[1]['f_energy'] = job['f_energy']. for stage in G",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:82426,Energy Efficiency,energy,energypiece,82426,"z' from array [cc-pvqz, cc-pv5z]). The; basis set array is extracted from the *f_basis* field of a *NEED* dictionary in; :py:func:`~wrappers.complete_basis_set`. Result is used to print a nicely; formatted basis set string in the results table. """"""; ZETA = {'d': 2, 't': 3, 'q': 4, '5': 5, '6': 6}; ZSET = [''] * len(ZETA); BSET = []. for lvl in needarray.items():; BSET.append(lvl[1]['f_basis']). if (len(BSET) == 1):; basisstring = BSET[0]; else:; indx = 0; while indx < len(BSET[0]):; if (BSET[0][indx] != BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (s",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:83171,Energy Efficiency,energy,energy,83171," + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:83179,Energy Efficiency,energy,energypiece,83179," + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:83457,Energy Efficiency,energy,energypiece,83457,".f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (funct",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:83570,Energy Efficiency,energy,energypiece,83570,"mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:83620,Energy Efficiency,energy,energypiece,83620,"ionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; '",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:84089,Energy Efficiency,energy,energypiece,84089,"tract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:84929,Energy Efficiency,energy,energy,84929," by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionna",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:84937,Energy Efficiency,energy,energypiece,84937," by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionna",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:85405,Energy Efficiency,energy,energypiece,85405,"\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0]",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:85520,Energy Efficiency,energy,energypiece,85520," the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:85781,Energy Efficiency,energy,energypiece,85781,"ay; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:86746,Energy Efficiency,energy,energy,86746,"-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:86884,Energy Efficiency,energy,energypiece,86884,"'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_nam",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:87365,Energy Efficiency,energy,energypiece,87365,"ct(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot'",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:87544,Energy Efficiency,energy,energypiece,87544,"y; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy'];",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:87818,Energy Efficiency,energy,energypiece,87818," = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); ener",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:88717,Energy Efficiency,energy,energy,88717,"plete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def validate_scheme_args(functionname, **largs):; r""""""Function called by each extrapolation scheme in :py:func:`~wrappers.complete_basis_set`.; Checks that all the input arguments are present and suitable so that; the scheme function can focus on defining the extrapolation. """"""; mode = ''; NEED = ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:88819,Energy Efficiency,energy,energypiece,88819,"ypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def validate_scheme_args(functionname, **largs):; r""""""Function called by each extrapolation scheme in :py:func:`~wrappers.complete_basis_set`.; Checks that all the input arguments are present and suitable so that; the scheme function can focus on defining the extrapolation. """"""; mode = ''; NEED = []; wfnname = ''; BSET = []; ZSET = []. # Mode where function fills out a form NEED with the computations nee",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:89219,Energy Efficiency,energy,energypiece,89219,"hat logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def validate_scheme_args(functionname, **largs):; r""""""Function called by each extrapolation scheme in :py:func:`~wrappers.complete_basis_set`.; Checks that all the input arguments are present and suitable so that; the scheme function can focus on defining the extrapolation. """"""; mode = ''; NEED = []; wfnname = ''; BSET = []; ZSET = []. # Mode where function fills out a form NEED with the computations needed to fulfill its call; if (largs['mode'].lower() == 'requisition'):; mode = largs['mode'].lower(). if 'wfnname' in largs:; wfnname = largs['wfnname']; else:; raise ValidationError('Call to \'%s\' has keyword \'wfnname\' missing.' % (functionname)). if re.match(r'scf_.*$', functionname) and (wfnname != 'scf'):; raise ValidationError('Call to \'%s\' is intended for scf portion of calculation.' % (functionname)); if ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:89398,Energy Efficiency,energy,energypiece,89398,"ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def validate_scheme_args(functionname, **largs):; r""""""Function called by each extrapolation scheme in :py:func:`~wrappers.complete_basis_set`.; Checks that all the input arguments are present and suitable so that; the scheme function can focus on defining the extrapolation. """"""; mode = ''; NEED = []; wfnname = ''; BSET = []; ZSET = []. # Mode where function fills out a form NEED with the computations needed to fulfill its call; if (largs['mode'].lower() == 'requisition'):; mode = largs['mode'].lower(). if 'wfnname' in largs:; wfnname = largs['wfnname']; else:; raise ValidationError('Call to \'%s\' has keyword \'wfnname\' missing.' % (functionname)). if re.match(r'scf_.*$', functionname) and (wfnname != 'scf'):; raise ValidationError('Call to \'%s\' is intended for scf portion of calculation.' % (functionname)); if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functi",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:3,Integrability,wrap,wrappers,3,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:131,Integrability,wrap,wrappers,131,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:645,Integrability,wrap,wrappers,645,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:3992,Integrability,wrap,wrappers,3992,"convert(i,symbol):; Queue.append(i) # if you find you, put it in the que; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[frag].append(int(u + 1)) # add to group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = geometry(new_geom); new_mol.print_out(); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:4371,Integrability,wrap,wrapper,4371,"group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = geometry(new_geom); new_mol.print_out(); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. do_total = False; if 'do_total' in kwargs:; do_total = kwargs['do_total']. external = None; external_indices = []; if 'external' in kwargs:; external = kwargs['external']; external_indices = [molecule.nfragments()]; if 'external_monome",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:18365,Integrability,wrap,wrappers,18365," Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inq",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:18728,Integrability,wrap,wrapper,18728,"rforms a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf; PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). PsiMo",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:25460,Integrability,wrap,wrappers,25460,"|dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-poin",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:29289,Integrability,wrap,wrappers,29289,"-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); database = import_ignorecase(db_name); if database is None:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSear",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:29723,Integrability,wrap,wrapper,29723,"mputed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); database = import_ignorecase(db_name); if database is None:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSearch path that was tried:\n'); PsiMod.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAG",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:37395,Integrability,wrap,wrapper,37395,"('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name))); PsiMod.print_out(""\n""). # write index of calcs to output file; if (db_mode.lower() == 'continuous'):; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; PsiMod.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if (db_mode.lower() == 'sow'):; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a single input file (%s-master.in) with a database(mode='reap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of comp",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:39054,Integrability,wrap,wrapper,39054,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); b",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:39252,Integrability,wrap,wrapper,39252,"n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); fo",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:41215,Integrability,wrap,wrapper,41215,"ctives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_global_option_changed(chgdopt):; chgdoptval = PsiMod.get_global_option(chgdopt); #chgdoptval = PsiMod.get_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""PsiMod.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""PsiMod.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'; commands += """"""PsiMod.set_global_option('BASIS', '%s')\n"""""" % (user_basis); if not((user_df_basis_scf == """") or (user_df_basis_scf == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SCF', '%s')\n"""""" % (user_df_basis_scf); if not((user_df_basis_mp2 == """") or (user_df_basis_mp2 == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_MP2', '%s')\n"""""" % (user_df_basis_mp2); if not((user_df_basis_sapt == """") or (user_df_basis_sapt == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SAPT', '%s')\n"""""" % (user_df_basis_sapt); if not((user_df_basis_elst == """") or (user_df_basis_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:41288,Integrability,depend,dependent,41288,"tives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_global_option_changed(chgdopt):; chgdoptval = PsiMod.get_global_option(chgdopt); #chgdoptval = PsiMod.get_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""PsiMod.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""PsiMod.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'; commands += """"""PsiMod.set_global_option('BASIS', '%s')\n"""""" % (user_basis); if not((user_df_basis_scf == """") or (user_df_basis_scf == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SCF', '%s')\n"""""" % (user_df_basis_scf); if not((user_df_basis_mp2 == """") or (user_df_basis_mp2 == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_MP2', '%s')\n"""""" % (user_df_basis_mp2); if not((user_df_basis_sapt == """") or (user_df_basis_sapt == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SAPT', '%s')\n"""""" % (user_df_basis_sapt); if not((user_df_basis_elst == """") or (user_df_basis_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""molecule.update_geometry()\n"""""". if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(1)\n""""""; commands ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:44210,Integrability,wrap,wrapper,44210,"ec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.print_variables()\n""""""); freagent.write(""""""PsiMod.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""PsiMod.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""PsiMod.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (PsiMod.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60040,Integrability,wrap,wrappers,60040,"orrection atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENE",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60441,Integrability,wrap,wrapper,60441,">>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp4(sdq)'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATIO",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:66562,Integrability,wrap,wrapper,66562,"siMod.get_option('DF_BASIS_CC'); #user_df_basis_sapt = PsiMod.get_option('DF_BASIS_SAPT'); #user_df_basis_elst = PsiMod.get_option('DF_BASIS_ELST'); b_user_wfn = PsiMod.has_global_option_changed('WFN'); user_wfn = PsiMod.get_global_option('WFN'). user_writer_file_label = PsiMod.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:66869,Integrability,wrap,wrapper,66869,"LE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:67187,Integrability,wrap,wrapper,67187,rrelation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf,MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:67515,Integrability,wrap,wrapper,67515,"L method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + delta2 (%s) not valid. These steps are cummulative.' %; (do_scf, do_corl, do_delta, do_delta2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC,",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:67840,Integrability,wrap,wrapper,67840," not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + delta2 (%s) not valid. These steps are cummulative.' %; (do_scf, do_corl, do_delta, do_delta2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC, ZETC = validate_bracketed_basis(kwargs['corl_basis'].lower()); else:; raise ValidationError('CORL basis sets through keyword \'%s\' are required.' % ('corl_basis')). # Establish list of valid basis sets for scf energy; if 'scf_basis' in kwargs:; BSTR, ZETR = validate_bracketed_basis(kwargs['scf_basis'].lower()); else:; if ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:74691,Integrability,depend,dependent,74691,"= []; for indx_job, job in enumerate(JOBS):; for menial in VARH[job['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); JOBS_EXT.append(dict(zip(f_fields, [temp_wfn, temp_portion, job['f_basis'], job['f_zeta'], 0.0]))). #instructions += """"""\n Full listing of computations to be obtained (required and bonus).\n""""""; #for mc in JOBS_EXT:; # instructions += """""" %12s / %-24s for %s\n"""""" % (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']+mc['f_portion']]); PsiMod.print_out(instructions). psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(PSIF_SCF_MOS, True). # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Computation: %s / %s ')\n"""""" % (mc['f_wfn'].upper(), mc['f_basis'].upper()); cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\nPsiMod.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()). exec(commands). # Make energy() call; mc['f_energy'] = call_function_in_1st_argument(func, **kwargs). # Fill in energies for subsumed methods; for menial in VARH[mc['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); for job in JOBS_EXT:; if (temp_wfn == job['f_wfn']) and (temp_portion == job['f_portion']) and (mc['f_basis'] == job['f_basis']):; job['f_energy'] = PsiMod.get_variable(VARH[temp_wfn][menial]). PsiMod.clean(). psioh.set_specific_retention(PSIF_SCF_MOS, False). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Results ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:80208,Integrability,wrap,wrappers,80208,"NERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CBS TOTAL ENERGY', finalenergy); PsiMod.set_variable('CURRENT REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT ENERGY', finalenergy); return finalenergy. # Transform and validate basis sets from 'cc-pV[Q5]Z' into [cc-pVQZ, cc-pV5Z] and [4, 5]; [docs]def validate_bracketed_basis(basisstring):; r""""""Function to transform and validate basis sets for cbs(). A basis set with no; paired square brackets is passed through with zeta level 0 (e.g., '6-31+G(d,p)'; is returned as [6-31+G(d,p)] and [0]). A basis set with square brackets is; checked for sensible sequence and Dunning-ness and returned as separate basis; sets (e.g., 'cc-pV[Q5]Z' is returned as [cc-pVQZ, cc-pV5Z] and [4, 5]). Note; that this function has no communication with the basis set library to check; if the basis actually exists. Used by :py:func:`~wrappers.complete_basis_set`. """"""; ZETA = ['d', 't', 'q', '5', '6']; BSET = []; ZSET = []; if re.match(r'.*cc-.*\[.*\].*z$', basisstring, flags=re.IGNORECASE):; basispattern = re.compile(r'^(.*)\[(.*)\](.*)$'); basisname = basispattern.match(basisstring); for b in basisname.group(2):; if b not in ZETA:; raise ValidationError('Basis set \'%s\' has invalid zeta level \'%s\'.' % (basisstring, b)); if len(ZSET) != 0:; if (int(ZSET[len(ZSET) - 1]) - ZETA.index(b)) != 1:; raise ValidationError('Basis set \'%s\' has out-of-order zeta level \'%s\'.' % (basisstring, b)); BSET.append(basisname.group(1) + b + basisname.group(3)); if b == 'd':; b = '2'; if b == 't':; b = '3'; if b == 'q':; b = '4'; ZSET.append(int(b)); elif re.match(r'.*\[.*\].*$', basisstring, flags=re.IGNORECASE):; raise ValidationError('Basis set surrounding series indicator [] in \'%s\' is invalid.' % (basisstring)); else:; BSET.append(basisstring); ZSET.append(0). return [BSET, ZSET]. # Reform string basis set descriptor",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:81563,Integrability,wrap,wrappers,81563," ValidationError('Basis set \'%s\' has invalid zeta level \'%s\'.' % (basisstring, b)); if len(ZSET) != 0:; if (int(ZSET[len(ZSET) - 1]) - ZETA.index(b)) != 1:; raise ValidationError('Basis set \'%s\' has out-of-order zeta level \'%s\'.' % (basisstring, b)); BSET.append(basisname.group(1) + b + basisname.group(3)); if b == 'd':; b = '2'; if b == 't':; b = '3'; if b == 'q':; b = '4'; ZSET.append(int(b)); elif re.match(r'.*\[.*\].*$', basisstring, flags=re.IGNORECASE):; raise ValidationError('Basis set surrounding series indicator [] in \'%s\' is invalid.' % (basisstring)); else:; BSET.append(basisstring); ZSET.append(0). return [BSET, ZSET]. # Reform string basis set descriptor from basis set strings, 'cc-pv[q5]z' from [cc-pvqz, cc-pv5z]; [docs]def reconstitute_bracketed_basis(needarray):; r""""""Function to reform a bracketed basis set string from a sequential series; of basis sets (e.g, form 'cc-pv[q5]z' from array [cc-pvqz, cc-pv5z]). The; basis set array is extracted from the *f_basis* field of a *NEED* dictionary in; :py:func:`~wrappers.complete_basis_set`. Result is used to print a nicely; formatted basis set string in the results table. """"""; ZETA = {'d': 2, 't': 3, 'q': 4, '5': 5, '6': 6}; ZSET = [''] * len(ZETA); BSET = []. for lvl in needarray.items():; BSET.append(lvl[1]['f_basis']). if (len(BSET) == 1):; basisstring = BSET[0]; else:; indx = 0; while indx < len(BSET[0]):; if (BSET[0][indx] != BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_por",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:82354,Integrability,wrap,wrappers,82354,"eted basis set string from a sequential series; of basis sets (e.g, form 'cc-pv[q5]z' from array [cc-pvqz, cc-pv5z]). The; basis set array is extracted from the *f_basis* field of a *NEED* dictionary in; :py:func:`~wrappers.complete_basis_set`. Result is used to print a nicely; formatted basis set string in the results table. """"""; ZETA = {'d': 2, 't': 3, 'q': 4, '5': 5, '6': 6}; ZSET = [''] * len(ZETA); BSET = []. for lvl in needarray.items():; BSET.append(lvl[1]['f_basis']). if (len(BSET) == 1):; basisstring = BSET[0]; else:; indx = 0; while indx < len(BSET[0]):; if (BSET[0][indx] != BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:83997,Integrability,wrap,wrappers,83997,"rtion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:85680,Integrability,wrap,wrappers,85680,"SET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = N",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:87702,Integrability,wrap,wrappers,87702,"LO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. #",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:89530,Integrability,wrap,wrappers,89530,"red energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def validate_scheme_args(functionname, **largs):; r""""""Function called by each extrapolation scheme in :py:func:`~wrappers.complete_basis_set`.; Checks that all the input arguments are present and suitable so that; the scheme function can focus on defining the extrapolation. """"""; mode = ''; NEED = []; wfnname = ''; BSET = []; ZSET = []. # Mode where function fills out a form NEED with the computations needed to fulfill its call; if (largs['mode'].lower() == 'requisition'):; mode = largs['mode'].lower(). if 'wfnname' in largs:; wfnname = largs['wfnname']; else:; raise ValidationError('Call to \'%s\' has keyword \'wfnname\' missing.' % (functionname)). if re.match(r'scf_.*$', functionname) and (wfnname != 'scf'):; raise ValidationError('Call to \'%s\' is intended for scf portion of calculation.' % (functionname)); if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:91269,Integrability,wrap,wrappers,91269,"if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. # Quickly normalize the types for both python 2 and 3; try:; unicode = unicode; except NameError:; # 'unicode' is undefined, must be Python 3; str = str; unicode = str; bytes = bytes; basestring = (str,bytes); else:; # 'unicode' exists, must be Python 2; str = str; unicode = unicode; bytes = str; basestring = basestring. ## Aliases ##; cbs = complete_basis_set. #################################; ## End of Complete Basis Set ##; #################################. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:891,Modifiability,variab,variable,891,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:4821,Modifiability,config,configuration,4821,"(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. do_total = False; if 'do_total' in kwargs:; do_total = kwargs['do_total']. external = None; external_indices = []; if 'external' in kwargs:; external = kwargs['external']; external_indices = [molecule.nfragments()]; if 'external_monomers' in kwargs:; external_indices = kwargs['external_monomers']. # Check input args; if not bsse == 'off' and not bsse == 'on' and not bsse == 'both':; raise ValidationError('n_body: bsse argument is one of on, off, or both'); if max_n_body < 1:; raise ValidationError('n_body: max_n_body must be at least 1'); if max_n_body > molecule.nfragments():; raise ValidationError('n_body: max_n_body must be <= to the number of fragments in the molecule'). # Set to save RI integrals for repeated full-basis computations; ri_ints_io = PsiMod.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf;",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:16587,Modifiability,variab,variables,16587," ""Delta E [kcal mol^-1]"")); for k in range(len(Ns)):; n = Ns[k]; if n == 1:; continue; E = energies_n_bsse[Ns[k]] - energies_n_bsse[Ns[k + 1]]; PsiMod.print_out(' %6s %24.16E %24.16E\n' % (n, E, physconst.psi_hartree2kcalmol * E)); PsiMod.print_out('\n'). # Put everything back the way it was; PsiMod.set_global_option('DF_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); PsiMod.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and `",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:16987,Modifiability,variab,variables,16987,"ean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basi",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:22813,Modifiability,variab,variables,22813,"):; e_full = e_full - e_monomer_full[cluster_n]; e_bsse = e_bsse - e_monomer_bsse[cluster_n]; cp_table[""Totals:""] = [e_full, e_bsse, e_full - e_bsse]. PsiMod.set_variable('UNCP-CORRECTED 2-BODY INTERACTION ENERGY', e_full). PsiMod.print_out(""\n""); banner(""CP Computation: Results.""); PsiMod.print_out(""\n""). banner(""Hartree"", 2); PsiMod.print_out(""\n""). PsiMod.print_out(str(cp_table)). PsiMod.print_out(""\n""); banner(""kcal*mol^-1"", 2); PsiMod.print_out(""\n""). cp_table.scale(). PsiMod.print_out(str(cp_table)); return e_full. ## Aliases ##; counterpoise_correct = cp; counterpoise_correction = cp. #################; ## End of cp ##; #################. #########################; ## Start of Database ##; #########################. DB_RGT = {}; DB_RXN = {}. [docs]def database(name, db_name, **kwargs):; r""""""Function to access the molecule objects and reference energies of; popular chemical databases. :aliases: db(). :returns: (*float*) Mean absolute deviation of the database in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`db_name DATABASE MEAN SIGNED DEVIATION <db_nameDATABASEMEANSIGNEDDEVIATION>`; * :psivar:`db_name DATABASE MEAN ABSOLUTE DEVIATION <db_nameDATABASEMEANABSOLUTEDEVIATION>`; * :psivar:`db_name DATABASE ROOT-MEAN-SQUARE DEVIATION <db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION>`; * Python dictionaries of results accessible as ``DB_RGT`` and ``DB_RXN``. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:23752,Modifiability,variab,variable,23752,"; popular chemical databases. :aliases: db(). :returns: (*float*) Mean absolute deviation of the database in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`db_name DATABASE MEAN SIGNED DEVIATION <db_nameDATABASEMEANSIGNEDDEVIATION>`; * :psivar:`db_name DATABASE MEAN ABSOLUTE DEVIATION <db_nameDATABASEMEANABSOLUTEDEVIATION>`; * :psivar:`db_name DATABASE ROOT-MEAN-SQUARE DEVIATION <db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION>`; * Python dictionaries of results accessible as ``DB_RGT`` and ``DB_RXN``. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26953,Modifiability,variab,variables,26953,":`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]``",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:27027,Modifiability,variab,variable,27027,"|| ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:27159,Modifiability,flexible,flexible,27159,"e computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is c",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:35176,Modifiability,variab,variables,35176,"tr(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise ValidationError('Special subset \'equilibrium\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_EQ; else:; HRXN = getattr_ignorecase(database, db_subset); if HRXN is None:; HRXN = getatt",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:45057,Modifiability,variab,variable,45057,"elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.print_variables()\n""""""); freagent.write(""""""PsiMod.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""PsiMod.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""PsiMod.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (PsiMod.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())); freagent.close(). elif (db_mode.lower() == 'reap'):; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['DATABASE', 'RESULT:', 'computation']):; if int(s[3]) != db_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rgt",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:45084,Modifiability,variab,variable,45084,"reagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.print_variables()\n""""""); freagent.write(""""""PsiMod.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""PsiMod.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""PsiMod.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (PsiMod.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())); freagent.close(). elif (db_mode.lower() == 'reap'):; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['DATABASE', 'RESULT:', 'computation']):; if int(s[3]) != db_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rgt, str(s[3]), str(db_linkage))); if",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:46404,Modifiability,variab,variable,46404,"ror:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['DATABASE', 'RESULT:', 'computation']):; if int(s[3]) != db_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rgt, str(s[3]), str(db_linkage))); if s[6] != rgt:; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with reagent %s.'; % (rgt, s[6], rgt)); if (s[8:10] == ['electronic', 'energy']):; ERGT[rgt] = float(s[10]); PsiMod.print_out('DATABASE RESULT: electronic energy = %20.12f\n' % (ERGT[rgt])); elif (s[8:10] == ['variable', 'value']):; for envv in db_tabulate:; envv = envv.upper(); if (s[13:] == envv.split()):; VRGT[rgt][envv] = float(s[10]); PsiMod.print_out('DATABASE RESULT: variable %s value = %20.12f\n' % (envv, VRGT[rgt][envv])); freagent.close(). # end sow after writing files; if (db_mode.lower() == 'sow'):; return 0.0. # Reap all the necessary reaction computations; PsiMod.print_out(""\n""); banner((""Database %s Results"" % (db_name))); PsiMod.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (54 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); for i in range(len(ACTV[db_rxn])):; if abs(ERGT[ACTV[db_rxn][i]]) < 1.0e-12:; FAIL[rxn] = 1. # tabulate requested process::environment variables; tables += """""" For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from\n""""""; tables += """""" 'Reagent' val",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:46571,Modifiability,variab,variable,46571,"; else:; while 1:; line = freagent.readline(); if not line:; if ERGT[rgt] == 0.0:; PsiMod.print_out('Warning: Output file \'%s.out\' has no DATABASE RESULT line.\n' % (rgt)); PsiMod.print_out(' Database summary will have 0.0 and **** in its place.\n'); break; s = line.split(); if (len(s) != 0) and (s[0:3] == ['DATABASE', 'RESULT:', 'computation']):; if int(s[3]) != db_linkage:; raise ValidationError('Output file \'%s.out\' has linkage %s incompatible with master.in linkage %s.'; % (rgt, str(s[3]), str(db_linkage))); if s[6] != rgt:; raise ValidationError('Output file \'%s.out\' has nominal affiliation %s incompatible with reagent %s.'; % (rgt, s[6], rgt)); if (s[8:10] == ['electronic', 'energy']):; ERGT[rgt] = float(s[10]); PsiMod.print_out('DATABASE RESULT: electronic energy = %20.12f\n' % (ERGT[rgt])); elif (s[8:10] == ['variable', 'value']):; for envv in db_tabulate:; envv = envv.upper(); if (s[13:] == envv.split()):; VRGT[rgt][envv] = float(s[10]); PsiMod.print_out('DATABASE RESULT: variable %s value = %20.12f\n' % (envv, VRGT[rgt][envv])); freagent.close(). # end sow after writing files; if (db_mode.lower() == 'sow'):; return 0.0. # Reap all the necessary reaction computations; PsiMod.print_out(""\n""); banner((""Database %s Results"" % (db_name))); PsiMod.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (54 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); for i in range(len(ACTV[db_rxn])):; if abs(ERGT[ACTV[db_rxn][i]]) < 1.0e-12:; FAIL[rxn] = 1. # tabulate requested process::environment variables; tables += """""" For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from\n""""""; tables += """""" 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.\n""""""; tables += """""" Depending on the nature of the variable, this may or may not make ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:47276,Modifiability,variab,variables,47276," %20.12f\n' % (ERGT[rgt])); elif (s[8:10] == ['variable', 'value']):; for envv in db_tabulate:; envv = envv.upper(); if (s[13:] == envv.split()):; VRGT[rgt][envv] = float(s[10]); PsiMod.print_out('DATABASE RESULT: variable %s value = %20.12f\n' % (envv, VRGT[rgt][envv])); freagent.close(). # end sow after writing files; if (db_mode.lower() == 'sow'):; return 0.0. # Reap all the necessary reaction computations; PsiMod.print_out(""\n""); banner((""Database %s Results"" % (db_name))); PsiMod.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (54 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); for i in range(len(ACTV[db_rxn])):; if abs(ERGT[ACTV[db_rxn][i]]) < 1.0e-12:; FAIL[rxn] = 1. # tabulate requested process::environment variables; tables += """""" For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from\n""""""; tables += """""" 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.\n""""""; tables += """""" Depending on the nature of the variable, this may or may not make any physical sense.\n""""""; for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); VRXN[db_rxn] = {}. for envv in db_tabulate:; envv = envv.upper(); tables += """"""\n ==> %s <==\n\n"""""" % (envv.title()); tables += tblhead(maxrgt, table_delimit, 2). for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8s %8s %8s"""""" % (db_rxn, '', '****', ''); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; VRXN[db_rxn][envv] = 0.0; for i in range(len(ACTV[db_rxn])):; VRXN[db_rxn][envv] += VRGT[ACTV[db_rxn][i]][envv] * RXNM[db_rxn][ACTV[db_rxn][i]]. tables += """"""\n%23s %16.8f """""" % (db_rxn, VRXN[db_rxn][envv]); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACT",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:47534,Modifiability,variab,variable,47534," PsiMod.print_out('DATABASE RESULT: variable %s value = %20.12f\n' % (envv, VRGT[rgt][envv])); freagent.close(). # end sow after writing files; if (db_mode.lower() == 'sow'):; return 0.0. # Reap all the necessary reaction computations; PsiMod.print_out(""\n""); banner((""Database %s Results"" % (db_name))); PsiMod.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (54 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); for i in range(len(ACTV[db_rxn])):; if abs(ERGT[ACTV[db_rxn][i]]) < 1.0e-12:; FAIL[rxn] = 1. # tabulate requested process::environment variables; tables += """""" For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from\n""""""; tables += """""" 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.\n""""""; tables += """""" Depending on the nature of the variable, this may or may not make any physical sense.\n""""""; for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); VRXN[db_rxn] = {}. for envv in db_tabulate:; envv = envv.upper(); tables += """"""\n ==> %s <==\n\n"""""" % (envv.title()); tables += tblhead(maxrgt, table_delimit, 2). for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8s %8s %8s"""""" % (db_rxn, '', '****', ''); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; VRXN[db_rxn][envv] = 0.0; for i in range(len(ACTV[db_rxn])):; VRXN[db_rxn][envv] += VRGT[ACTV[db_rxn][i]][envv] * RXNM[db_rxn][ACTV[db_rxn][i]]. tables += """"""\n%23s %16.8f """""" % (db_rxn, VRXN[db_rxn][envv]); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]); tables += """"""\n %s\n"""""" % (table_delimit). # tabulate primary requested energy variable with statistics; count_rxn = 0; minD",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:48490,Modifiability,variab,variable,48490,""" Depending on the nature of the variable, this may or may not make any physical sense.\n""""""; for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); VRXN[db_rxn] = {}. for envv in db_tabulate:; envv = envv.upper(); tables += """"""\n ==> %s <==\n\n"""""" % (envv.title()); tables += tblhead(maxrgt, table_delimit, 2). for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8s %8s %8s"""""" % (db_rxn, '', '****', ''); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; VRXN[db_rxn][envv] = 0.0; for i in range(len(ACTV[db_rxn])):; VRXN[db_rxn][envv] += VRGT[ACTV[db_rxn][i]][envv] * RXNM[db_rxn][ACTV[db_rxn][i]]. tables += """"""\n%23s %16.8f """""" % (db_rxn, VRXN[db_rxn][envv]); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (VRGT[ACTV[db_rxn][i]][envv], RXNM[db_rxn][ACTV[db_rxn][i]]); tables += """"""\n %s\n"""""" % (table_delimit). # tabulate primary requested energy variable with statistics; count_rxn = 0; minDerror = 100000.0; maxDerror = 0.0; MSDerror = 0.0; MADerror = 0.0; RMSDerror = 0.0. tables += """"""\n ==> %s <==\n\n"""""" % ('Requested Energy'); tables += tblhead(maxrgt, table_delimit, 1); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn). if FAIL[rxn]:; tables += """"""\n%23s %8.4f %8s %8s"""""" % (db_rxn, BIND[db_rxn], '****', '****'); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). else:; ERXN[db_rxn] = 0.0; for i in range(len(ACTV[db_rxn])):; ERXN[db_rxn] += ERGT[ACTV[db_rxn][i]] * RXNM[db_rxn][ACTV[db_rxn][i]]; error = physconst.psi_hartree2kcalmol * ERXN[db_rxn] - BIND[db_rxn]. tables += """"""\n%23s %8.4f %8.4f %8.4f"""""" % (db_rxn, BIND[db_rxn], physconst.psi_hartree2kcalmol * ERXN[db_rxn], error); for i in range(len(ACTV[db_rxn])):; tables += """""" %16.8f %2.0f"""""" % (ERGT[ACTV[db_rxn][i]], RXNM[db_rxn][ACTV[db_rxn][i]]). if abs(error) < abs(minDerror):; minDerror = error; if abs(error)",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:52557,Modifiability,variab,variables,52557,"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%20s"""""" % ('[H] Wt'); elif ttype == 2:; tbl_str += """"""%20s"""""" % ('Value Wt'); tbl_str += """"""\n %s"""""" % (tbl_delimit); return tbl_str. ## Aliases ##; db = database. #######################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. :aliases: cbs(). :returns: (*float*) -- Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the corr",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53047,Modifiability,variab,variables,53047,"###################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. :aliases: cbs(). :returns: (*float*) -- Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:53058,Modifiability,config,configuration,53058,"###################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. :aliases: cbs(). :returns: (*float*) -- Total electronic energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CBS TOTAL ENERGY <CBSTOTALENERGY>`; * :psivar:`CBS REFERENCE ENERGY <CBSREFERENCEENERGY>`; * :psivar:`CBS CORRELATION ENERGY <CBSCORRELATIONENERGY>`; * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Not all methods hooked in through PSI variables, configuration interaction and arbitrary order MP in particular. - No scheme defaults for given basis zeta number, so scheme must be specified explicitly. - No way to tell function to boost fitting basis size for all calculations. - No way to extrapolate def2 family basis sets. - Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in four; sequential stages (scf, corl, delta, delta2) covering treatment of the; reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:260,Performance,optimiz,optimize,260,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:667,Performance,optimiz,optimize,667,"﻿. wrappers — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for wrappers; """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import PsiMod; import re; import os; import math; import warnings; import pickle; import copy; import physconst; from driver import *; from molutil import *; from text import *; from collections import defaultdict; from procutil import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule();",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17344,Performance,optimiz,optimize,17344,"e cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any po",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17407,Performance,perform,performed,17407,"of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17472,Performance,perform,performs,17472,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17525,Performance,optimiz,optimize,17525,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17555,Performance,optimiz,optimization,17555,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:17597,Performance,perform,performs,17597,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24454,Performance,optimiz,optimize,24454,"ot yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. U",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24517,Performance,perform,performed,24517," (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24565,Performance,perform,performs,24565,"dded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24618,Performance,optimiz,optimize,24618,"dded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24648,Performance,optimiz,optimization,24648,"dded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:24691,Performance,perform,performs,24691,"dded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28917,Performance,optimiz,optimize,28917,"r available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within databas",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:29945,Performance,load,load,29945,"tal energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); database = import_ignorecase(db_name); if database is None:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSearch path that was tried:\n'); PsiMod.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAGL; GEOS = database.GEOS; try:; DATA = database.DATA; except AttributeError:; DATA = {}. # Must collect (here) and set (below) basis sets after every new molecule activation; user_basis = PsiMod.get_global_option('BASIS'); user_df_basis_scf = PsiMod.get_global_option('DF_BASIS_SCF'); user_df_basis_mp2 = PsiMod.get_global_option('DF_BASIS_MP2'); user_df_basis_sapt = ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:30242,Performance,load,load,30242,"ny positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); database = import_ignorecase(db_name); if database is None:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSearch path that was tried:\n'); PsiMod.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAGL; GEOS = database.GEOS; try:; DATA = database.DATA; except AttributeError:; DATA = {}. # Must collect (here) and set (below) basis sets after every new molecule activation; user_basis = PsiMod.get_global_option('BASIS'); user_df_basis_scf = PsiMod.get_global_option('DF_BASIS_SCF'); user_df_basis_mp2 = PsiMod.get_global_option('DF_BASIS_MP2'); user_df_basis_sapt = PsiMod.get_global_option('DF_BASIS_SAPT'); user_df_basis_elst = PsiMod.get_global_option('DF_BASIS_ELST'). user_writer_file_label = PsiMod.get_global_option('WRITER_FILE_LABEL'). b_user_reference = PsiMod.has_global_option_changed('REFERENCE'); user_reference = PsiMod.get_gl",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:30405,Performance,load,loading,30405,"db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); database = import_ignorecase(db_name); if database is None:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSearch path that was tried:\n'); PsiMod.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAGL; GEOS = database.GEOS; try:; DATA = database.DATA; except AttributeError:; DATA = {}. # Must collect (here) and set (below) basis sets after every new molecule activation; user_basis = PsiMod.get_global_option('BASIS'); user_df_basis_scf = PsiMod.get_global_option('DF_BASIS_SCF'); user_df_basis_mp2 = PsiMod.get_global_option('DF_BASIS_MP2'); user_df_basis_sapt = PsiMod.get_global_option('DF_BASIS_SAPT'); user_df_basis_elst = PsiMod.get_global_option('DF_BASIS_ELST'). user_writer_file_label = PsiMod.get_global_option('WRITER_FILE_LABEL'). b_user_reference = PsiMod.has_global_option_changed('REFERENCE'); user_reference = PsiMod.get_global_option('REFERENCE'); user_memory = PsiMod.get_memory(). user_molecule = PsiMod.get_active_molecule(). # Configuration based upon e_name & db_name options; # Force non-supramolecular ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:44470,Performance,load,loads,44470,"'NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.print_variables()\n""""""); freagent.write(""""""PsiMod.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""PsiMod.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""PsiMod.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (PsiMod.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())); freagent.close(). elif (db_mode.lower() == 'reap'):; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; PsiMod.print_out('Warning: Output file \'%s.out\' not found.\n' % (r",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:54729,Performance,perform,performed,54729,"s only allowed if all preceding stages are active. .. include:: cbs_eqn.rst. * Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy. The cbs() function requires, at a minimum, ``name='scf'`` and ``scf_basis``; keywords to be specified for reference-step only jobs and ``name`` and; ``corl_basis`` keywords for correlated jobs. The following energy methods have been set up for cbs(). .. hlist::; :columns: 5. * scf; * mp2; * mp2.5; * mp3; * mp4(sdq); * mp4; * omp2; * omp3; * ocepa; * cepa0; * cepa(0); * cepa(1); * cepa(3); * acpf; * aqcc; * qcisd; * cc2; * ccsd; * fno-df-ccsd; * bccd; * cc3; * qcisd(t); * ccsd(t); * fno-df-ccsd(t); * bccd(t); * cisd; * cisdt; * cisdtq; * ci\ *n*; * fci. :type name: string; :param name: ``'scf'`` || ``'ccsd'`` || etc. First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be ``'scf'``. Overruled if stage_wfn keywords supplied. :type corl_wfn: string; :param corl_wfn: ``'mp2'`` || ``'ccsd(t)'`` || etc. Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with ``name`` or as the unlabeled; first argument to the function. :type delta_wfn: string; :param delta_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. :type delta_wfn_lesser: string; :param delta_wfn_lesser: |dl| ``'mp2'`` |dr| || ``'ccsd'`` || etc. Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. :type delta2_wfn: string; :param delta2_wfn: ``'ccsd'`` || ``'ccsd(t)'`` || etc. Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. :type delta2_wfn_lesser: string; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:90795,Performance,perform,performs,90795,"tion fills out a form NEED with the computations needed to fulfill its call; if (largs['mode'].lower() == 'requisition'):; mode = largs['mode'].lower(). if 'wfnname' in largs:; wfnname = largs['wfnname']; else:; raise ValidationError('Call to \'%s\' has keyword \'wfnname\' missing.' % (functionname)). if re.match(r'scf_.*$', functionname) and (wfnname != 'scf'):; raise ValidationError('Call to \'%s\' is intended for scf portion of calculation.' % (functionname)); if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. # Quickly normalize the types for both python 2 and 3; try:; unicode = unicode; except NameError:; # 'unicode' is undefined, must be Python 3; str = str; unicode = str; bytes = bytes; basestring = (str,bytes); else:; # 'unicode' exist",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:1599,Safety,detect,detect,1599,"calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symbol[p] == 'Ne':; d = 1.243; if symbol[p] == 'Na':; d = 1.144; if symbol[p] == 'Mg':; d = 1.364; if symbol[p] == 'Al':; d = 1.639; if symbol[p] == 'Si':; d = 1.716; if symbol[p] == 'P':; d = 1.705; if symbol[p] == 'S':; d = 1.683; if symbol[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); ; geom = molecule.save_string_xyz(). numatoms = molecule.natom(); VdW = [1.2, 1.7, 1.5, 1.55, 1.52, 1.9, 1.85, 1.8]; ; symbol = range(numatoms); X = [0.0] * numatoms; Y = [0.0] * numatoms; Z = [0.0] * numatoms; ; Queue = []; White = []; Black = []; F = geom.split('\n'); for f in range(0, numatoms):; A = F[f+1].split(); symbol[f] = A[0]; X[f] = float(A[1]); Y[f] = float(A[2]); Z[f] = float(A[3]); White.append(f); Fragment = [[] for i in range(numatoms)] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). frag = 0; ; while((len(White) > 0",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:22636,Security,access,access,22636,"ster_n], e_monomer_bsse[cluster_n], \; e_monomer_full[cluster_n] - e_monomer_bsse[cluster_n]]. e_full = e_dimer; e_bsse = e_dimer; for cluster_n in range(0, len(monomers)):; e_full = e_full - e_monomer_full[cluster_n]; e_bsse = e_bsse - e_monomer_bsse[cluster_n]; cp_table[""Totals:""] = [e_full, e_bsse, e_full - e_bsse]. PsiMod.set_variable('UNCP-CORRECTED 2-BODY INTERACTION ENERGY', e_full). PsiMod.print_out(""\n""); banner(""CP Computation: Results.""); PsiMod.print_out(""\n""). banner(""Hartree"", 2); PsiMod.print_out(""\n""). PsiMod.print_out(str(cp_table)). PsiMod.print_out(""\n""); banner(""kcal*mol^-1"", 2); PsiMod.print_out(""\n""). cp_table.scale(). PsiMod.print_out(str(cp_table)); return e_full. ## Aliases ##; counterpoise_correct = cp; counterpoise_correction = cp. #################; ## End of cp ##; #################. #########################; ## Start of Database ##; #########################. DB_RGT = {}; DB_RXN = {}. [docs]def database(name, db_name, **kwargs):; r""""""Function to access the molecule objects and reference energies of; popular chemical databases. :aliases: db(). :returns: (*float*) Mean absolute deviation of the database in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`db_name DATABASE MEAN SIGNED DEVIATION <db_nameDATABASEMEANSIGNEDDEVIATION>`; * :psivar:`db_name DATABASE MEAN ABSOLUTE DEVIATION <db_nameDATABASEMEANABSOLUTEDEVIATION>`; * :psivar:`db_name DATABASE ROOT-MEAN-SQUARE DEVIATION <db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION>`; * Python dictionaries of results accessible as ``DB_RGT`` and ``DB_RXN``. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:23171,Security,access,accessible,23171,"e_full). PsiMod.print_out(""\n""); banner(""CP Computation: Results.""); PsiMod.print_out(""\n""). banner(""Hartree"", 2); PsiMod.print_out(""\n""). PsiMod.print_out(str(cp_table)). PsiMod.print_out(""\n""); banner(""kcal*mol^-1"", 2); PsiMod.print_out(""\n""). cp_table.scale(). PsiMod.print_out(str(cp_table)); return e_full. ## Aliases ##; counterpoise_correct = cp; counterpoise_correction = cp. #################; ## End of cp ##; #################. #########################; ## Start of Database ##; #########################. DB_RGT = {}; DB_RXN = {}. [docs]def database(name, db_name, **kwargs):; r""""""Function to access the molecule objects and reference energies of; popular chemical databases. :aliases: db(). :returns: (*float*) Mean absolute deviation of the database in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`db_name DATABASE MEAN SIGNED DEVIATION <db_nameDATABASEMEANSIGNEDDEVIATION>`; * :psivar:`db_name DATABASE MEAN ABSOLUTE DEVIATION <db_nameDATABASEMEANABSOLUTEDEVIATION>`; * :psivar:`db_name DATABASE ROOT-MEAN-SQUARE DEVIATION <db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION>`; * Python dictionaries of results accessible as ``DB_RGT`` and ``DB_RXN``. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:23607,Security,access,access,23607,"; popular chemical databases. :aliases: db(). :returns: (*float*) Mean absolute deviation of the database in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`db_name DATABASE MEAN SIGNED DEVIATION <db_nameDATABASEMEANSIGNEDDEVIATION>`; * :psivar:`db_name DATABASE MEAN ABSOLUTE DEVIATION <db_nameDATABASEMEANABSOLUTEDEVIATION>`; * :psivar:`db_name DATABASE ROOT-MEAN-SQUARE DEVIATION <db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION>`; * Python dictionaries of results accessible as ``DB_RGT`` and ``DB_RXN``. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour| ; distribution, add the path to the directory containing the database ; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in ; ``psi4/lib/databases`` or :envvar:`PYTHONPATH`. Consult that ; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:37339,Security,access,accessed,37339,"('Special subset \'%s\' not available for database %s.' % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError('Subset element \'%s\' not a member of database %s.' % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; PsiMod.print_out(""\n\n""); banner((""Database %s Computation"" % (db_name))); PsiMod.print_out(""\n""). # write index of calcs to output file; if (db_mode.lower() == 'continuous'):; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; PsiMod.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if (db_mode.lower() == 'sow'):; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a single input file (%s-master.in) with a database(mode='reap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of comp",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:38998,Security,access,accessed,38998,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); b",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:79562,Security,validat,validate,79562,"rgy, ''); tables += table_delimit. #print tables; PsiMod.print_out(tables). # Restore molecule and options; #PsiMod.set_local_option('SCF', ""WFN"", user_wfn) # TODO refuses to set global option WFN - rejects SCF as option; PsiMod.set_global_option('BASIS', user_basis). PsiMod.set_global_option('WFN', user_wfn); if not b_user_wfn:; PsiMod.revoke_global_option_changed('WFN'). PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). PsiMod.set_variable('CBS REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CBS CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CBS TOTAL ENERGY', finalenergy); PsiMod.set_variable('CURRENT REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT ENERGY', finalenergy); return finalenergy. # Transform and validate basis sets from 'cc-pV[Q5]Z' into [cc-pVQZ, cc-pV5Z] and [4, 5]; [docs]def validate_bracketed_basis(basisstring):; r""""""Function to transform and validate basis sets for cbs(). A basis set with no; paired square brackets is passed through with zeta level 0 (e.g., '6-31+G(d,p)'; is returned as [6-31+G(d,p)] and [0]). A basis set with square brackets is; checked for sensible sequence and Dunning-ness and returned as separate basis; sets (e.g., 'cc-pV[Q5]Z' is returned as [cc-pVQZ, cc-pV5Z] and [4, 5]). Note; that this function has no communication with the basis set library to check; if the basis actually exists. Used by :py:func:`~wrappers.complete_basis_set`. """"""; ZETA = ['d', 't', 'q', '5', '6']; BSET = []; ZSET = []; if re.match(r'.*cc-.*\[.*\].*z$', basisstring, flags=re.IGNORECASE):; basispattern = re.compile(r'^(.*)\[(.*)\](.*)$'); basisname = basispattern.match(basisstring); for b in basisname.group(2):; if b not in ZETA:; raise ValidationError('Basis set \'%s\' has invalid zeta level \'%s\'.' % (basisstring, b)); if len(ZSET) != 0:; if (int(ZSET[len(ZSE",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:79716,Security,validat,validate,79716,"rgy, ''); tables += table_delimit. #print tables; PsiMod.print_out(tables). # Restore molecule and options; #PsiMod.set_local_option('SCF', ""WFN"", user_wfn) # TODO refuses to set global option WFN - rejects SCF as option; PsiMod.set_global_option('BASIS', user_basis). PsiMod.set_global_option('WFN', user_wfn); if not b_user_wfn:; PsiMod.revoke_global_option_changed('WFN'). PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). PsiMod.set_variable('CBS REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CBS CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CBS TOTAL ENERGY', finalenergy); PsiMod.set_variable('CURRENT REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT ENERGY', finalenergy); return finalenergy. # Transform and validate basis sets from 'cc-pV[Q5]Z' into [cc-pVQZ, cc-pV5Z] and [4, 5]; [docs]def validate_bracketed_basis(basisstring):; r""""""Function to transform and validate basis sets for cbs(). A basis set with no; paired square brackets is passed through with zeta level 0 (e.g., '6-31+G(d,p)'; is returned as [6-31+G(d,p)] and [0]). A basis set with square brackets is; checked for sensible sequence and Dunning-ness and returned as separate basis; sets (e.g., 'cc-pV[Q5]Z' is returned as [cc-pVQZ, cc-pV5Z] and [4, 5]). Note; that this function has no communication with the basis set library to check; if the basis actually exists. Used by :py:func:`~wrappers.complete_basis_set`. """"""; ZETA = ['d', 't', 'q', '5', '6']; BSET = []; ZSET = []; if re.match(r'.*cc-.*\[.*\].*z$', basisstring, flags=re.IGNORECASE):; basispattern = re.compile(r'^(.*)\[(.*)\](.*)$'); basisname = basispattern.match(basisstring); for b in basisname.group(2):; if b not in ZETA:; raise ValidationError('Basis set \'%s\' has invalid zeta level \'%s\'.' % (basisstring, b)); if len(ZSET) != 0:; if (int(ZSET[len(ZSE",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:16931,Testability,test,tested,16931,"_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); PsiMod.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26556,Testability,benchmark,benchmark,26556," bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium g",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:26582,Testability,benchmark,benchmark,26582," bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: string; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: array of strings; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: string or array of strings; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See `Available Databases`_ for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium g",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28606,Testability,benchmark,benchmark,28606,"librium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28673,Testability,benchmark,benchmark,28673,"librium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; k",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:34730,Testability,benchmark,benchmark,34730,"buteError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:34839,Testability,benchmark,benchmark,34839,"buteError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:34885,Testability,benchmark,benchmark,34885,"buteError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:35062,Testability,benchmark,benchmark,35062,"(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError('Special subset \'large\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_LG; elif (db_subset.lower() == 'equilibrium'):; try:; database.HRXN_EQ; except AttributeError:; raise V",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:39347,Testability,benchmark,benchmark,39347,"ut file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:39662,Testability,log,logic,39662,"al in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_glo",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:82855,Testability,log,logs,82855,"= BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energi",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:84518,Testability,log,logs,84518,"']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helg",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:86210,Testability,log,logs,86210,"zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:86807,Testability,log,log,86807,"me().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypie",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:88247,Testability,log,logs,88247,"str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. # Return extrapolated energy; alpha = 1.63; beta = (eHI - eLO) / (math.exp(-1 * alpha * zLO) * (math.exp(-1 * alpha) - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n""""",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:50869,Usability,clear,clear,50869,"""""""%23s %19s %8.4f\n"""""" % ('Maximal Dev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options; activate(user_molecule); user_molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", user_basis); PsiMod.set_global_option(""REFERENCE"", user_reference); if not b_user_reference:; PsiMod.revoke_global_option_changed('REFERENCE'); PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). DB_RGT.clear(); DB_RGT.update(VRGT); DB_RXN.clear(); DB_RXN.update(VRXN); return finalenergy . [docs]def tblhead(tbl_maxrgt, tbl_delimit, ttype):; r""""""Function that prints the header for the changable-width results tables in db().; *tbl_maxrgt* is the number of reagent columns the table must plan for. *tbl_delimit*; is a string of dashes of the correct length to set off the table. *ttype* is 1 for; tables comparing the computed values to the reference or 2 for simple tabulation; and sum of the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %8s"""""" % ('Reaction', 'Reaction Energy', 'Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:50906,Usability,clear,clear,50906,"ev', '', maxDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Signed Dev', '', MSDerror); tables += """"""%23s %19s %8.4f\n"""""" % ('Mean Absolute Dev', '', MADerror); tables += """"""%23s %19s %8.4f\n"""""" % ('RMS Dev', '', RMSDerror); tables += """""" %s\n"""""" % (table_delimit). PsiMod.set_variable('%s DATABASE MEAN SIGNED DEVIATION' % (db_name), MSDerror); PsiMod.set_variable('%s DATABASE MEAN ABSOLUTE DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options; activate(user_molecule); user_molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", user_basis); PsiMod.set_global_option(""REFERENCE"", user_reference); if not b_user_reference:; PsiMod.revoke_global_option_changed('REFERENCE'); PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). DB_RGT.clear(); DB_RGT.update(VRGT); DB_RXN.clear(); DB_RXN.update(VRXN); return finalenergy . [docs]def tblhead(tbl_maxrgt, tbl_delimit, ttype):; r""""""Function that prints the header for the changable-width results tables in db().; *tbl_maxrgt* is the number of reagent columns the table must plan for. *tbl_delimit*; is a string of dashes of the correct length to set off the table. *ttype* is 1 for; tables comparing the computed values to the reference or 2 for simple tabulation; and sum of the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %8s"""""" % ('Reaction', 'Reaction Energy', 'Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%20s"""""" % ('[H] Wt'",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:51327,Usability,simpl,simple,51327,"DEVIATION' % (db_name), MADerror); PsiMod.set_variable('%s DATABASE ROOT-MEAN-SQUARE DEVIATION' % (db_name), RMSDerror). #print tables; PsiMod.print_out(tables); finalenergy = MADerror. else:; finalenergy = 0.0. # restore molecule and options; activate(user_molecule); user_molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", user_basis); PsiMod.set_global_option(""REFERENCE"", user_reference); if not b_user_reference:; PsiMod.revoke_global_option_changed('REFERENCE'); PsiMod.set_global_option('WRITER_FILE_LABEL', user_writer_file_label). DB_RGT.clear(); DB_RGT.update(VRGT); DB_RXN.clear(); DB_RXN.update(VRXN); return finalenergy . [docs]def tblhead(tbl_maxrgt, tbl_delimit, ttype):; r""""""Function that prints the header for the changable-width results tables in db().; *tbl_maxrgt* is the number of reagent columns the table must plan for. *tbl_delimit*; is a string of dashes of the correct length to set off the table. *ttype* is 1 for; tables comparing the computed values to the reference or 2 for simple tabulation; and sum of the computed values. """"""; tbl_str = ''; tbl_str += """""" %s"""""" % (tbl_delimit); if ttype == 1:; tbl_str += """"""\n%23s %19s %8s"""""" % ('Reaction', 'Reaction Energy', 'Error'); elif ttype == 2:; tbl_str += """"""\n%23s %19s %6s"""""" % ('Reaction', 'Reaction Value', ''); for i in range(tbl_maxrgt):; tbl_str += """"""%20s"""""" % ('Reagent ' + str(i + 1)); if ttype == 1:; tbl_str += """"""\n%23s %8s %8s %8s"""""" % ('', 'Ref', 'Calc', '[kcal/mol]'); elif ttype == 2:; tbl_str += """"""\n%54s"""""" % (''); for i in range(tbl_maxrgt):; if ttype == 1:; tbl_str += """"""%20s"""""" % ('[H] Wt'); elif ttype == 2:; tbl_str += """"""%20s"""""" % ('Value Wt'); tbl_str += """"""\n %s"""""" % (tbl_delimit); return tbl_str. ## Aliases ##; db = database. #######################; ## End of Database ##; #######################. ###################################; ## Start of Complete Basis Set ##; ###################################. [docs]def complete_basis_set(name, **kwargs):; r""""""Function to define ",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58449,Usability,simpl,simple,58449,"est_1`` |dr| || ``scf_xtpl_helgaker_3`` || etc. Indicates the basis set extrapolation scheme to be applied to the reference energy. :type corl_scheme: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:58591,Usability,simpl,simple,58591,"e: function; :param corl_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the correlation energy. :type delta_scheme: function; :param delta_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy. :type delta2_scheme: function; :param delta2_scheme: |dl| ``highest_1`` |dr| || ``corl_xtpl_helgaker_2`` || etc. Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs('scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs('mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs('scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='c",MatchSource.WIKI,psi4manual/4.0b4/_modules/wrappers.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/dbproc.html:428,Deployability,update,updated,428,"﻿. qcdb.dbproc — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.dbproc; r""""""File to. """""". [docs]def useful():; pass. [docs]def dictify_database_docstrings():; pass. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/dbproc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/dbproc.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html:716,Availability,error,error,716,"﻿. qcdb.exceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.exceptions; """"""Module with non-generic exceptions classes."""""". [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/exceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html:1119,Availability,error,error,1119,"﻿. qcdb.exceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.exceptions; """"""Module with non-generic exceptions classes."""""". [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/exceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html:1405,Deployability,update,updated,1405,"﻿. qcdb.exceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.exceptions; """"""Module with non-generic exceptions classes."""""". [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/exceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html:722,Integrability,message,message,722,"﻿. qcdb.exceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.exceptions; """"""Module with non-generic exceptions classes."""""". [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/exceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html:1069,Integrability,message,message,1069,"﻿. qcdb.exceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.exceptions; """"""Module with non-generic exceptions classes."""""". [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/exceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html:965,Modifiability,variab,variables,965,"﻿. qcdb.exceptions — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.exceptions; """"""Module with non-generic exceptions classes."""""". [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/exceptions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/exceptions.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:8524,Deployability,update,updates,8524,"s = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Typ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:8912,Deployability,update,updated,8912,"init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Type = %s\n x = %s\n y = %s\n z = %s\n\n' % (self.type(), self.x.variable_to_string(8), self.y.variable_to_string(8), self.z.variable_to_string(8)). [docs]class ZMatrixEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, \; rto=None, rv",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:10425,Deployability,update,updated,10425,". [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Type = %s\n x = %s\n y = %s\n z = %s\n\n' % (self.type(), self.x.variable_to_string(8), self.y.variable_to_string(8), self.z.variable_to_string(8)). [docs]class ZMatrixEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, \; rto=None, rval=0, ato=None, aval=0, dto=None, dval=0):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.rto = rto; self.rval = rval; self.ato = ato; self.aval = aval; self.dto = dto; self.dval = dval. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated""""""; self.computed = False; if self.rval != 0:; self.rval.invalidate(); if self.aval != 0:; self.aval.invalidate(); if self.dval != 0:; self.dval.invalidate(). [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user""""""; text = """"; if self.rto == None and self.ato == None and self.dto == None:; # The first atom; text += ""\t%s\n"" % (self.symbol()); elif self.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += ""\t%s %5d %s\n"" % (self.symbol(), now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); text += ""\t%s %5d %s %5d %s\n"" % (self.symbol(), now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(6); text += ""\t%s %5d %s %5d %s %5d %s\n"" % \; (",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:11617,Deployability,update,updates,11617,"lf.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += ""\t%s %5d %s\n"" % (self.symbol(), now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); text += ""\t%s %5d %s %5d %s\n"" % (self.symbol(), now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(6); text += ""\t%s %5d %s %5d %s %5d %s\n"" % \; (self.symbol(), now_rto, now_rval, now_ato, now_aval, now_dto, now_dval); return text; # outfile. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""; self.coordinates[0] = 0.0 if math.fabs(x) < 1.0E-14 else x; self.coordinates[1] = 0.0 if math.fabs(y) < 1.0E-14 else y; self.coordinates[2] = 0.0 if math.fabs(z) < 1.0E-14 else z. if self.rto != None:; if not self.rto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); self.rval.rset(self.r(self.coordinates, self.rto.compute())). if self.ato != None:; if not self.ato.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); aval = self.a(self.coordinates, self.rto.compute(), self.ato.compute()); # Noise creeps in for linear molecules. Force linearity, if it is close enough.; val = aval * 180.0 / math.pi; self.aval.rset(val). if self.dto != None:; if not self.dto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); val = self.d(self.coordinates, self.rto.compute(), self.ato.compute(), self.dto.compu",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:12652,Deployability,update,update,12652,"ariables that may depend on it. """"""; self.coordinates[0] = 0.0 if math.fabs(x) < 1.0E-14 else x; self.coordinates[1] = 0.0 if math.fabs(y) < 1.0E-14 else y; self.coordinates[2] = 0.0 if math.fabs(z) < 1.0E-14 else z. if self.rto != None:; if not self.rto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); self.rval.rset(self.r(self.coordinates, self.rto.compute())). if self.ato != None:; if not self.ato.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); aval = self.a(self.coordinates, self.rto.compute(), self.ato.compute()); # Noise creeps in for linear molecules. Force linearity, if it is close enough.; val = aval * 180.0 / math.pi; self.aval.rset(val). if self.dto != None:; if not self.dto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); val = self.d(self.coordinates, self.rto.compute(), self.ato.compute(), self.dto.compute()); # Check for NaN, and don't update if we find one; # what is this? proper py traslation?; if val == val:; self.dval.rset(val * 180.0 / math.pi). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'ZMatrixCoord'. [docs] def clone(self):; """"""Returns new, independent ZMatrixEntry object.""""""; return copy.deepcopy(self). [docs] def compute(self):; """"""Compute the Cartesian coordinates in Bohr of current atom's entry."""""". if self.computed:; return self.coordinates. # place first atom at the origin; if self.rto == None and self.ato == None and self.dto == None:; self.coordinates[0] = 0.0; self.coordinates[1] = 0.0; self.coordinates[2] = 0.0. # place second atom directly above the first; elif self.ato == None and self.dto == None:; self.coordinates[0] = 0.0; self.coordinates[1] = 0.0; self.coordinates[2] = self.rval.compute(). # place third atom pointing upwards; # this rTo rVal aTo aVal; # A B C; elif self.dto == None:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; cosABC =",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:15597,Deployability,update,updated,15597,"pi / 180.0; cosABC = math.cos(a); sinABC = math.sin(a); B = self.rto.compute(); C = self.ato.compute(). eCB = sub(B, C); eCB = normalize(eCB); eX = [0.0, 0.0, 0.0]; eY = [0.0, 0.0, 0.0]; if (math.fabs(1.0 - math.fabs(eCB[0])) < 1.0E-5):; # CB is collinear with X, start by finding Y; eY[1] = 1.0; eX = perp_unit(eY, eCB); eY = perp_unit(eX, eCB); else:; # CB is not collinear with X, we can safely find X first; eX[0] = 1.0; eY = perp_unit(eX, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eY[xyz] * sinABC - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. # The fourth, or subsequent, atom; #; # The atom specification is; # this rTo rVal aTo aVal dTo dVal; # A B C D; # which allows us to define the vector from C->B (eCB) as the +z axis, and eDC; # lies in the xz plane. Then eX, eY and eZ (=eBC) are the x, y, and z axes, respecively.; else:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; d = self.dval.compute() * math.pi / 180.0; B = self.rto.compute(); C = self.ato.compute(); D = self.dto.compute(). eDC = sub(C, D); eCB = sub(B, C); eDC = normalize(eDC); eCB = normalize(eCB); cosABC = math.cos(a); sinABC = math.sin(a); cosABCD = math.cos(d); sinABCD = math.sin(d); eY = perp_unit(eDC, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eX[xyz] * sinABC * cosABCD +; eY[xyz] * sinABC * sinABCD - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. self.computed = True; return self.coordinates. [docs] def everything(self):; CoordEntry.everything(self); print '\nZMatrixEntry\n Type = %s\n\n' % (self.type()); print self.print_in_input_format(). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:4419,Energy Efficiency,charge,charge,4419,"set(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; if self.negate:; self.geometryVariables[self.PYname] = val * -1.0; else:; self.geometryVariables[self.PYname] = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'VariableType'. [docs] def clone(self):; """"""Returns new, independent VariableValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; if self.negate:; return '-' + self.PYname; else:; return self.PYname. [docs] def everything(self):; print '\nVariableValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n Name = %s\n Negated = %s\n Map = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.compute(), self.variable_to_string(4), self.name(), self.negated(), self.geometryVariables). [docs]class CoordEntry(object):; """"""Class to. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label=""""):; # Order in full atomic list; self.PYentry_number = entry_number; # Whether the coordinates have been computed; self.computed = False; # Actual cartesian coordinates of the atom; self.coordinates = [None, None, None]. # Atomic number of the atom; self.PYZ = Z; # Charge of the atom (SAD-related); self.PYcharge = charge; # Mass of the atom; self.PYmass = mass; # Label of the atom minus any extra info (H1 => H); self.PYsymbol = symbol; # Original label from the molecule from the input file (H1); self.PYlabel = label; # Is this a ghost atom?; self.ghosted = False. @staticmethod; [docs] def r(a1, a2):; """"""Computes the distance between two sets of coordinates""""""; if len(a1) != 3 or len(a2) != 3:; raise ValidationError('ERROR: r() only defined for Vector3\n'); return distance(a1, a2). @staticmethod; [docs] def a(a1, a2, a3):; """"""Computes the angle (in rad.) between three sets of coordinates.""""""; if len(a1) != 3 or len(a2) != 3 or len(a3) != 3:; raise ValidationError('ERROR",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:4765,Energy Efficiency,charge,charge,4765,"dent VariableValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; if self.negate:; return '-' + self.PYname; else:; return self.PYname. [docs] def everything(self):; print '\nVariableValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n Name = %s\n Negated = %s\n Map = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.compute(), self.variable_to_string(4), self.name(), self.negated(), self.geometryVariables). [docs]class CoordEntry(object):; """"""Class to. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label=""""):; # Order in full atomic list; self.PYentry_number = entry_number; # Whether the coordinates have been computed; self.computed = False; # Actual cartesian coordinates of the atom; self.coordinates = [None, None, None]. # Atomic number of the atom; self.PYZ = Z; # Charge of the atom (SAD-related); self.PYcharge = charge; # Mass of the atom; self.PYmass = mass; # Label of the atom minus any extra info (H1 => H); self.PYsymbol = symbol; # Original label from the molecule from the input file (H1); self.PYlabel = label; # Is this a ghost atom?; self.ghosted = False. @staticmethod; [docs] def r(a1, a2):; """"""Computes the distance between two sets of coordinates""""""; if len(a1) != 3 or len(a2) != 3:; raise ValidationError('ERROR: r() only defined for Vector3\n'); return distance(a1, a2). @staticmethod; [docs] def a(a1, a2, a3):; """"""Computes the angle (in rad.) between three sets of coordinates.""""""; if len(a1) != 3 or len(a2) != 3 or len(a3) != 3:; raise ValidationError('ERROR: a() only defined for Vector3\n'); eBA = sub(a2, a1); eBC = sub(a2, a3); eBA = normalize(eBA); eBC = normalize(eBC); costheta = dot(eBA, eBC). if costheta > 1.0 - 1.0E-14:; costheta = 1.0; if costheta < 1.0E-14 - 1.0:; costheta = -1.0; return math.acos(costheta). @staticmethod; [docs] def d(a1, a2, a3, a4):; """"""Computes the dihedral (in rad.",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:6841,Energy Efficiency,charge,charge,6841,"!= 3 or len(a3) != 3 or len(a4) != 3:; raise ValidationError('ERROR: d() only defined for Vector3\n'); eBA = sub(a2, a1); eDC = sub(a4, a3); eCB = sub(a3, a2); CBNorm = norm(eCB); DCxCB = cross(eDC, eCB); CBxBA = cross(eCB, eBA); return -1.0 * math.atan2(CBNorm * dot(eDC, CBxBA), dot(DCxCB, CBxBA)). [docs] def is_computed(self):; """"""Whether the current atom's coordinates are up-to-date.""""""; return self.computed. [docs] def is_equivalent_to(self, other):; """"""Whether this atom has the same mass and ghost status as atom *other*.; Unlike the libmints version, this does not compare basisset assignment. """"""; if other.PYZ != self.PYZ:; return False; if other.PYmass != self.PYmass:; return False; if other.ghosted != self.ghosted:; return False; return True. [docs] def is_ghosted(self):; """"""Whether the current atom is ghosted or not.""""""; return self.ghosted. [docs] def set_ghosted(self, gh):; """"""Flag the atom as either ghost or real.""""""; self.ghosted = gh. [docs] def Z(self):; """"""The nuclear charge of the current atom (0 if ghosted).""""""; if self.ghosted:; return 0.0; else:; return self.PYZ. [docs] def charge(self):; """"""The ""atomic charge"" of the current atom (for SAD purposes).""""""; return self.PYcharge. [docs] def mass(self):; """"""The atomic mass of the current atom.""""""; return self.PYmass. [docs] def symbol(self):; """"""The atomic symbol.""""""; return self.PYsymbol. [docs] def label(self):; """"""The atom label.""""""; return self.PYlabel. [docs] def entry_number(self):; """"""The order in which this appears in the full atom list.""""""; return self.PYentry_number. [docs] def everything(self):; print '\nCoordEntry\n Entry Number = %d\n Computed = %s\n Z = %d\n Charge = %f\n Mass = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, includ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:6953,Energy Efficiency,charge,charge,6953,"CB = sub(a3, a2); CBNorm = norm(eCB); DCxCB = cross(eDC, eCB); CBxBA = cross(eCB, eBA); return -1.0 * math.atan2(CBNorm * dot(eDC, CBxBA), dot(DCxCB, CBxBA)). [docs] def is_computed(self):; """"""Whether the current atom's coordinates are up-to-date.""""""; return self.computed. [docs] def is_equivalent_to(self, other):; """"""Whether this atom has the same mass and ghost status as atom *other*.; Unlike the libmints version, this does not compare basisset assignment. """"""; if other.PYZ != self.PYZ:; return False; if other.PYmass != self.PYmass:; return False; if other.ghosted != self.ghosted:; return False; return True. [docs] def is_ghosted(self):; """"""Whether the current atom is ghosted or not.""""""; return self.ghosted. [docs] def set_ghosted(self, gh):; """"""Flag the atom as either ghost or real.""""""; self.ghosted = gh. [docs] def Z(self):; """"""The nuclear charge of the current atom (0 if ghosted).""""""; if self.ghosted:; return 0.0; else:; return self.PYZ. [docs] def charge(self):; """"""The ""atomic charge"" of the current atom (for SAD purposes).""""""; return self.PYcharge. [docs] def mass(self):; """"""The atomic mass of the current atom.""""""; return self.PYmass. [docs] def symbol(self):; """"""The atomic symbol.""""""; return self.PYsymbol. [docs] def label(self):; """"""The atom label.""""""; return self.PYlabel. [docs] def entry_number(self):; """"""The order in which this appears in the full atom list.""""""; return self.PYentry_number. [docs] def everything(self):; print '\nCoordEntry\n Entry Number = %d\n Computed = %s\n Z = %d\n Charge = %f\n Mass = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordE",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:6983,Energy Efficiency,charge,charge,6983,"CB = sub(a3, a2); CBNorm = norm(eCB); DCxCB = cross(eDC, eCB); CBxBA = cross(eCB, eBA); return -1.0 * math.atan2(CBNorm * dot(eDC, CBxBA), dot(DCxCB, CBxBA)). [docs] def is_computed(self):; """"""Whether the current atom's coordinates are up-to-date.""""""; return self.computed. [docs] def is_equivalent_to(self, other):; """"""Whether this atom has the same mass and ghost status as atom *other*.; Unlike the libmints version, this does not compare basisset assignment. """"""; if other.PYZ != self.PYZ:; return False; if other.PYmass != self.PYmass:; return False; if other.ghosted != self.ghosted:; return False; return True. [docs] def is_ghosted(self):; """"""Whether the current atom is ghosted or not.""""""; return self.ghosted. [docs] def set_ghosted(self, gh):; """"""Flag the atom as either ghost or real.""""""; self.ghosted = gh. [docs] def Z(self):; """"""The nuclear charge of the current atom (0 if ghosted).""""""; if self.ghosted:; return 0.0; else:; return self.PYZ. [docs] def charge(self):; """"""The ""atomic charge"" of the current atom (for SAD purposes).""""""; return self.PYcharge. [docs] def mass(self):; """"""The atomic mass of the current atom.""""""; return self.PYmass. [docs] def symbol(self):; """"""The atomic symbol.""""""; return self.PYsymbol. [docs] def label(self):; """"""The atom label.""""""; return self.PYlabel. [docs] def entry_number(self):; """"""The order in which this appears in the full atom list.""""""; return self.PYentry_number. [docs] def everything(self):; print '\nCoordEntry\n Entry Number = %d\n Computed = %s\n Z = %d\n Charge = %f\n Mass = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordE",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:7659,Energy Efficiency,charge,charge,7659,"osted or not.""""""; return self.ghosted. [docs] def set_ghosted(self, gh):; """"""Flag the atom as either ghost or real.""""""; self.ghosted = gh. [docs] def Z(self):; """"""The nuclear charge of the current atom (0 if ghosted).""""""; if self.ghosted:; return 0.0; else:; return self.PYZ. [docs] def charge(self):; """"""The ""atomic charge"" of the current atom (for SAD purposes).""""""; return self.PYcharge. [docs] def mass(self):; """"""The atomic mass of the current atom.""""""; return self.PYmass. [docs] def symbol(self):; """"""The atomic symbol.""""""; return self.PYsymbol. [docs] def label(self):; """"""The atom label.""""""; return self.PYlabel. [docs] def entry_number(self):; """"""The order in which this appears in the full atom list.""""""; return self.PYentry_number. [docs] def everything(self):; print '\nCoordEntry\n Entry Number = %d\n Computed = %s\n Z = %d\n Charge = %f\n Mass = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:7940,Energy Efficiency,charge,charge,7940,"ocs] def charge(self):; """"""The ""atomic charge"" of the current atom (for SAD purposes).""""""; return self.PYcharge. [docs] def mass(self):; """"""The atomic mass of the current atom.""""""; return self.PYmass. [docs] def symbol(self):; """"""The atomic symbol.""""""; return self.PYsymbol. [docs] def label(self):; """"""The atom label.""""""; return self.PYlabel. [docs] def entry_number(self):; """"""The order in which this appears in the full atom list.""""""; return self.PYentry_number. [docs] def everything(self):; print '\nCoordEntry\n Entry Number = %d\n Computed = %s\n Z = %d\n Charge = %f\n Mass = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format p",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:8023,Energy Efficiency,charge,charge,8023,"oses).""""""; return self.PYcharge. [docs] def mass(self):; """"""The atomic mass of the current atom.""""""; return self.PYmass. [docs] def symbol(self):; """"""The atomic symbol.""""""; return self.PYsymbol. [docs] def label(self):; """"""The atom label.""""""; return self.PYlabel. [docs] def entry_number(self):; """"""The order in which this appears in the full atom list.""""""; return self.PYentry_number. [docs] def everything(self):; print '\nCoordEntry\n Entry Number = %d\n Computed = %s\n Z = %d\n Charge = %f\n Mass = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.var",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:9867,Energy Efficiency,charge,charge,9867,":; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Type = %s\n x = %s\n y = %s\n z = %s\n\n' % (self.type(), self.x.variable_to_string(8), self.y.variable_to_string(8), self.z.variable_to_string(8)). [docs]class ZMatrixEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, \; rto=None, rval=0, ato=None, aval=0, dto=None, dval=0):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.rto = rto; self.rval = rval; self.ato = ato; self.aval = aval; self.dto = dto; self.dval = dval. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated""""""; self.computed = False; if self.rval != 0:; self.rval.invalidate(); if self.aval != 0:; self.aval.invalidate(); if self.dval != 0:; self.dval.invalidate(). [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user""""""; text = """"; if self.rto == None and self.ato == None and self.dto == None:; # The first atom; text += ""\t%s\n"" % (self.symbol()); elif self.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += ""\t%s %5d %s\n"" % (self.symbol(), now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:9998,Energy Efficiency,charge,charge,9998,"ing(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Type = %s\n x = %s\n y = %s\n z = %s\n\n' % (self.type(), self.x.variable_to_string(8), self.y.variable_to_string(8), self.z.variable_to_string(8)). [docs]class ZMatrixEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, \; rto=None, rval=0, ato=None, aval=0, dto=None, dval=0):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.rto = rto; self.rval = rval; self.ato = ato; self.aval = aval; self.dto = dto; self.dval = dval. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated""""""; self.computed = False; if self.rval != 0:; self.rval.invalidate(); if self.aval != 0:; self.aval.invalidate(); if self.dval != 0:; self.dval.invalidate(). [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user""""""; text = """"; if self.rto == None and self.ato == None and self.dto == None:; # The first atom; text += ""\t%s\n"" % (self.symbol()); elif self.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += ""\t%s %5d %s\n"" % (self.symbol(), now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:2424,Integrability,depend,depends,2424,"t__(self, value, fixed=False):; CoordValue.__init__(self, fixed, True); # coordinate number value; self.value = value. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; return self.value. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; self.value = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; return ""%*.*f"" % (precision + 5, precision, self.compute()). [docs] def everything(self):; print '\nNumberValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.value, self.variable_to_string(4)). [docs]class VariableValue(CoordValue):; """"""Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""; def __init__(self, name, geometryVariables, negate=False, fixed=False):; CoordValue.__init__(self, fixed, True); # Name of variable; self.PYname = name; # Dictionary from molecule of variable names and values; self.geometryVariables = geometryVariables; # Whether the coordinate value is actually the negative of the variable value; self.negate = negate. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; vstr = self.PYname.upper(); if vstr not in self.geometryVariables:; raise IncompleteAtomError('Variable %s used in geometry specification has not been defined' % (vstr)); if self.negate:; return self.geometryVariables[vstr] * -1.0; else:; return self.geometryVariables[vstr]. [docs] def negated(self):; """"""Gets whether the coordinate value is actually the negative of the variable value""""""; return self.negate. [docs] def name(self):; """"""Gets the name of the variable""""""; return ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:8598,Integrability,depend,depend,8598,"s = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Typ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:11692,Integrability,depend,depend,11692,"lf.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += ""\t%s %5d %s\n"" % (self.symbol(), now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); text += ""\t%s %5d %s %5d %s\n"" % (self.symbol(), now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(6); text += ""\t%s %5d %s %5d %s %5d %s\n"" % \; (self.symbol(), now_rto, now_rval, now_ato, now_aval, now_dto, now_dval); return text; # outfile. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""; self.coordinates[0] = 0.0 if math.fabs(x) < 1.0E-14 else x; self.coordinates[1] = 0.0 if math.fabs(y) < 1.0E-14 else y; self.coordinates[2] = 0.0 if math.fabs(z) < 1.0E-14 else z. if self.rto != None:; if not self.rto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); self.rval.rset(self.r(self.coordinates, self.rto.compute())). if self.ato != None:; if not self.ato.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); aval = self.a(self.coordinates, self.rto.compute(), self.ato.compute()); # Noise creeps in for linear molecules. Force linearity, if it is close enough.; val = aval * 180.0 / math.pi; self.aval.rset(val). if self.dto != None:; if not self.dto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); val = self.d(self.coordinates, self.rto.compute(), self.ato.compute(), self.dto.compu",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:591,Modifiability,variab,variables,591,"﻿. qcdb.libmintscoordentry — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.libmintscoordentry; r""""""Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. """"""; import math; import copy; from vecutil import *; from exceptions import *. [docs]class CoordValue(object):; """"""An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. """""". def __init__(self, fixed=False, computed=False):; # Fixed coordinate?; self.PYfixed = fixed; # Whether the current value is up to date or not; self.computed = computed. [docs] def set_fixed(self, fixed):; """"""Set whether the coordinate value is fixed or not""""""; self.PYfixed = fixed. [docs] def fixed(self):; """"""Get whether the coordinate value is fixed or not""""""; return self.PYfixed. [docs] def invalidate(self):; """"""Flag the current value as outdated""""""; self.computed = False. [docs] def everything(self):; print '\nCoordValue\n Fixed = %s\n Computed = %s\n\n' % (self.PYfixed, self.computed). [docs]class NumberValue(CoordValue):; """"""Specialization of CoordValue that is simply a number to be stored."""""". def __init__(self, value, fixed=False):; CoordValue.__init__(self, fixed, True); # coordinate number value; self.value = value. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; return self.value. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; self.value = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordV",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:2616,Modifiability,variab,variable,2616," return self.value. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; self.value = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; return ""%*.*f"" % (precision + 5, precision, self.compute()). [docs] def everything(self):; print '\nNumberValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.value, self.variable_to_string(4)). [docs]class VariableValue(CoordValue):; """"""Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""; def __init__(self, name, geometryVariables, negate=False, fixed=False):; CoordValue.__init__(self, fixed, True); # Name of variable; self.PYname = name; # Dictionary from molecule of variable names and values; self.geometryVariables = geometryVariables; # Whether the coordinate value is actually the negative of the variable value; self.negate = negate. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; vstr = self.PYname.upper(); if vstr not in self.geometryVariables:; raise IncompleteAtomError('Variable %s used in geometry specification has not been defined' % (vstr)); if self.negate:; return self.geometryVariables[vstr] * -1.0; else:; return self.geometryVariables[vstr]. [docs] def negated(self):; """"""Gets whether the coordinate value is actually the negative of the variable value""""""; return self.negate. [docs] def name(self):; """"""Gets the name of the variable""""""; return self.PYname. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; if self.negate:; self.geometryVariables[self.PYname] = val * -1.0; else:; self.geometr",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:2676,Modifiability,variab,variable,2676,"of coordinate if not fixed""""""; if not self.PYfixed:; self.value = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; return ""%*.*f"" % (precision + 5, precision, self.compute()). [docs] def everything(self):; print '\nNumberValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.value, self.variable_to_string(4)). [docs]class VariableValue(CoordValue):; """"""Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""; def __init__(self, name, geometryVariables, negate=False, fixed=False):; CoordValue.__init__(self, fixed, True); # Name of variable; self.PYname = name; # Dictionary from molecule of variable names and values; self.geometryVariables = geometryVariables; # Whether the coordinate value is actually the negative of the variable value; self.negate = negate. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; vstr = self.PYname.upper(); if vstr not in self.geometryVariables:; raise IncompleteAtomError('Variable %s used in geometry specification has not been defined' % (vstr)); if self.negate:; return self.geometryVariables[vstr] * -1.0; else:; return self.geometryVariables[vstr]. [docs] def negated(self):; """"""Gets whether the coordinate value is actually the negative of the variable value""""""; return self.negate. [docs] def name(self):; """"""Gets the name of the variable""""""; return self.PYname. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; if self.negate:; self.geometryVariables[self.PYname] = val * -1.0; else:; self.geometryVariables[self.PYname] = val. [docs] def type(self):; """"""Gets spe",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:2810,Modifiability,variab,variable,2810,"ts specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; return ""%*.*f"" % (precision + 5, precision, self.compute()). [docs] def everything(self):; print '\nNumberValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.value, self.variable_to_string(4)). [docs]class VariableValue(CoordValue):; """"""Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""; def __init__(self, name, geometryVariables, negate=False, fixed=False):; CoordValue.__init__(self, fixed, True); # Name of variable; self.PYname = name; # Dictionary from molecule of variable names and values; self.geometryVariables = geometryVariables; # Whether the coordinate value is actually the negative of the variable value; self.negate = negate. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; vstr = self.PYname.upper(); if vstr not in self.geometryVariables:; raise IncompleteAtomError('Variable %s used in geometry specification has not been defined' % (vstr)); if self.negate:; return self.geometryVariables[vstr] * -1.0; else:; return self.geometryVariables[vstr]. [docs] def negated(self):; """"""Gets whether the coordinate value is actually the negative of the variable value""""""; return self.negate. [docs] def name(self):; """"""Gets the name of the variable""""""; return self.PYname. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; if self.negate:; self.geometryVariables[self.PYname] = val * -1.0; else:; self.geometryVariables[self.PYname] = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'VariableType'. [docs] def clone(self):; """"""Returns new, i",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:3300,Modifiability,variab,variable,3300,"uted, self.type(), self.value, self.variable_to_string(4)). [docs]class VariableValue(CoordValue):; """"""Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""; def __init__(self, name, geometryVariables, negate=False, fixed=False):; CoordValue.__init__(self, fixed, True); # Name of variable; self.PYname = name; # Dictionary from molecule of variable names and values; self.geometryVariables = geometryVariables; # Whether the coordinate value is actually the negative of the variable value; self.negate = negate. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; vstr = self.PYname.upper(); if vstr not in self.geometryVariables:; raise IncompleteAtomError('Variable %s used in geometry specification has not been defined' % (vstr)); if self.negate:; return self.geometryVariables[vstr] * -1.0; else:; return self.geometryVariables[vstr]. [docs] def negated(self):; """"""Gets whether the coordinate value is actually the negative of the variable value""""""; return self.negate. [docs] def name(self):; """"""Gets the name of the variable""""""; return self.PYname. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; if self.negate:; self.geometryVariables[self.PYname] = val * -1.0; else:; self.geometryVariables[self.PYname] = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'VariableType'. [docs] def clone(self):; """"""Returns new, independent VariableValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; if self.negate:; return '-' + self.PYname; else:; return self.PYname. [docs] def everything(self):; print '\nVariableValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n Name = %s\n Negated = %s\n Map = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.compute(), self.variable_to_",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:3387,Modifiability,variab,variable,3387,"alization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. """"""; def __init__(self, name, geometryVariables, negate=False, fixed=False):; CoordValue.__init__(self, fixed, True); # Name of variable; self.PYname = name; # Dictionary from molecule of variable names and values; self.geometryVariables = geometryVariables; # Whether the coordinate value is actually the negative of the variable value; self.negate = negate. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; vstr = self.PYname.upper(); if vstr not in self.geometryVariables:; raise IncompleteAtomError('Variable %s used in geometry specification has not been defined' % (vstr)); if self.negate:; return self.geometryVariables[vstr] * -1.0; else:; return self.geometryVariables[vstr]. [docs] def negated(self):; """"""Gets whether the coordinate value is actually the negative of the variable value""""""; return self.negate. [docs] def name(self):; """"""Gets the name of the variable""""""; return self.PYname. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; if self.negate:; self.geometryVariables[self.PYname] = val * -1.0; else:; self.geometryVariables[self.PYname] = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'VariableType'. [docs] def clone(self):; """"""Returns new, independent VariableValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; if self.negate:; return '-' + self.PYname; else:; return self.PYname. [docs] def everything(self):; print '\nVariableValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n Name = %s\n Negated = %s\n Map = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.compute(), self.variable_to_string(4), self.name(), self.negated(), self.geometryVariables). [docs]class CoordEntry(object):; """"""Class t",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:8579,Modifiability,variab,variables,8579,"s = %f\n Symbol = %s\n Label = %s\n Ghosted = %s\n Coordinates = %s\n\n' % \; (self.entry_number(), self.is_computed(), self.Z(), self.charge(), self.mass(), self.symbol(), self.label(), self.is_ghosted(), self.coordinates). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """"""; def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(10); ystr = self.y.variable_to_string(10); zstr = self.z.variable_to_string(10); return ""\t%16s %16s %16s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def invalidate(self):; """"""Flags the current coordinates as being outdated.""""""; self.computed = False; self.x.invalidate(); self.y.invalidate(); self.z.invalidate(). [docs] def clone(self):; """"""Returns new, independent CartesianEntry object""""""; return copy.deepcopy(self). [docs] def everything(self):; CoordEntry.everything(self); print '\nCartesianEntry\n Typ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:11673,Modifiability,variab,variables,11673,"lf.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); text += ""\t%s %5d %s\n"" % (self.symbol(), now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); text += ""\t%s %5d %s %5d %s\n"" % (self.symbol(), now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(6); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(6); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(6); text += ""\t%s %5d %s %5d %s %5d %s\n"" % \; (self.symbol(), now_rto, now_rval, now_ato, now_aval, now_dto, now_dval); return text; # outfile. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""; self.coordinates[0] = 0.0 if math.fabs(x) < 1.0E-14 else x; self.coordinates[1] = 0.0 if math.fabs(y) < 1.0E-14 else y; self.coordinates[2] = 0.0 if math.fabs(z) < 1.0E-14 else z. if self.rto != None:; if not self.rto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); self.rval.rset(self.r(self.coordinates, self.rto.compute())). if self.ato != None:; if not self.ato.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); aval = self.a(self.coordinates, self.rto.compute(), self.ato.compute()); # Noise creeps in for linear molecules. Force linearity, if it is close enough.; val = aval * 180.0 / math.pi; self.aval.rset(val). if self.dto != None:; if not self.dto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); val = self.d(self.coordinates, self.rto.compute(), self.ato.compute(), self.dto.compu",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:14045,Safety,safe,safely,14045,"f):; """"""Compute the Cartesian coordinates in Bohr of current atom's entry."""""". if self.computed:; return self.coordinates. # place first atom at the origin; if self.rto == None and self.ato == None and self.dto == None:; self.coordinates[0] = 0.0; self.coordinates[1] = 0.0; self.coordinates[2] = 0.0. # place second atom directly above the first; elif self.ato == None and self.dto == None:; self.coordinates[0] = 0.0; self.coordinates[1] = 0.0; self.coordinates[2] = self.rval.compute(). # place third atom pointing upwards; # this rTo rVal aTo aVal; # A B C; elif self.dto == None:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; cosABC = math.cos(a); sinABC = math.sin(a); B = self.rto.compute(); C = self.ato.compute(). eCB = sub(B, C); eCB = normalize(eCB); eX = [0.0, 0.0, 0.0]; eY = [0.0, 0.0, 0.0]; if (math.fabs(1.0 - math.fabs(eCB[0])) < 1.0E-5):; # CB is collinear with X, start by finding Y; eY[1] = 1.0; eX = perp_unit(eY, eCB); eY = perp_unit(eX, eCB); else:; # CB is not collinear with X, we can safely find X first; eX[0] = 1.0; eY = perp_unit(eX, eCB); eX = perp_unit(eY, eCB); for xyz in range(3):; self.coordinates[xyz] = B[xyz] + r * (eY[xyz] * sinABC - eCB[xyz] * cosABC); if math.fabs(self.coordinates[xyz]) < 1.E-14:; self.coordinates[xyz] = 0.0. # The fourth, or subsequent, atom; #; # The atom specification is; # this rTo rVal aTo aVal dTo dVal; # A B C D; # which allows us to define the vector from C->B (eCB) as the +z axis, and eDC; # lies in the xz plane. Then eX, eY and eZ (=eBC) are the x, y, and z axes, respecively.; else:; r = self.rval.compute(); a = self.aval.compute() * math.pi / 180.0; d = self.dval.compute() * math.pi / 180.0; B = self.rto.compute(); C = self.ato.compute(); D = self.dto.compute(). eDC = sub(C, D); eCB = sub(B, C); eDC = normalize(eDC); eCB = normalize(eCB); cosABC = math.cos(a); sinABC = math.sin(a); cosABCD = math.cos(d); sinABCD = math.sin(d); eY = perp_unit(eDC, eCB); eX = perp_unit(eY, eCB); for xyz in range",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:634,Usability,simpl,simplifying,634,"﻿. qcdb.libmintscoordentry — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.libmintscoordentry; r""""""Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. """"""; import math; import copy; from vecutil import *; from exceptions import *. [docs]class CoordValue(object):; """"""An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. """""". def __init__(self, fixed=False, computed=False):; # Fixed coordinate?; self.PYfixed = fixed; # Whether the current value is up to date or not; self.computed = computed. [docs] def set_fixed(self, fixed):; """"""Set whether the coordinate value is fixed or not""""""; self.PYfixed = fixed. [docs] def fixed(self):; """"""Get whether the coordinate value is fixed or not""""""; return self.PYfixed. [docs] def invalidate(self):; """"""Flag the current value as outdated""""""; self.computed = False. [docs] def everything(self):; print '\nCoordValue\n Fixed = %s\n Computed = %s\n\n' % (self.PYfixed, self.computed). [docs]class NumberValue(CoordValue):; """"""Specialization of CoordValue that is simply a number to be stored."""""". def __init__(self, value, fixed=False):; CoordValue.__init__(self, fixed, True); # coordinate number value; self.value = value. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; return self.value. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; self.value = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordV",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html:1363,Usability,simpl,simply,1363,"s by other; psi4 developers. """"""; import math; import copy; from vecutil import *; from exceptions import *. [docs]class CoordValue(object):; """"""An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. """""". def __init__(self, fixed=False, computed=False):; # Fixed coordinate?; self.PYfixed = fixed; # Whether the current value is up to date or not; self.computed = computed. [docs] def set_fixed(self, fixed):; """"""Set whether the coordinate value is fixed or not""""""; self.PYfixed = fixed. [docs] def fixed(self):; """"""Get whether the coordinate value is fixed or not""""""; return self.PYfixed. [docs] def invalidate(self):; """"""Flag the current value as outdated""""""; self.computed = False. [docs] def everything(self):; print '\nCoordValue\n Fixed = %s\n Computed = %s\n\n' % (self.PYfixed, self.computed). [docs]class NumberValue(CoordValue):; """"""Specialization of CoordValue that is simply a number to be stored."""""". def __init__(self, value, fixed=False):; CoordValue.__init__(self, fixed, True); # coordinate number value; self.value = value. [docs] def compute(self):; """"""Computes value of coordinate from member data""""""; return self.value. [docs] def rset(self, val):; """"""Resets value of coordinate if not fixed""""""; if not self.PYfixed:; self.value = val. [docs] def type(self):; """"""Gets specialization type of CoordValue""""""; return 'NumberType'. [docs] def clone(self):; """"""Returns new, independent NumberValue object""""""; return copy.deepcopy(self). [docs] def variable_to_string(self, precision):; """"""Takes a CoordValue object, and returns a string for printing.""""""; return ""%*.*f"" % (precision + 5, precision, self.compute()). [docs] def everything(self):; print '\nNumberValue\n Fixed = %s\n Computed = %s\n Type = %s\n Value = %f\n FValue = %s\n\n' % \; (self.PYfixed, self.computed, self.type(), self.value, self.variable_to_string(4)). [docs]class",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintscoordentry.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:27595,Availability,echo,echoing,27595,"tom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.nallatom()):; geom = self.full_atoms[i].compute(); text += """""" %8s%4s """""" % (self.fsymbol(i), """" if self.fZ(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if self.units() == 'Angstrom' else ""bohr""); for i in range(self.nallatom()):; text += self.full_atoms[i].print_in_input_format(); text += ""\n""; if len(self.geometry_variables):; for vb, val in self.geometry_variables.items():; text += """"""\t%-10s=%16.10f\n"""""" % (vb, val); text += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(),",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:30897,Availability,toler,tolerance,30897,"y_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, v",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:33155,Availability,error,error,33155,"), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""; integerNumber = re.compile(r""(-?\d+)"", re.IGNORECASE); if integerNumber.match(vstr):; # This is just a number, return it; return int(vstr) - 1; else:; # Look to see if this string is known; for i in range(self.nallatom()):; if self.full_atoms[i].label() == vstr:; return i; raise ValidationError(""Illegal value %s in atom specification on line %s.\n"" % (vstr, line)). [docs] def geometry(self):; """"""Returns the geometry in Bohr as a N X 3 array. >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. """"""; geom = []; for at in range(self.natom()):; geom.append([self.x(at), self.y(at), self.z(at)]); return geom. [d",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:54404,Availability,checkpoint,checkpoint,54404,"le. >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. """"""; factor = 1.0 if self.PYunits == 'Angstrom' else psi_bohr2angstroms. text = '%d\n' % (self.natom()); text += '%d %d %s\n' % (self.molecular_charge(), self.multiplicity(), self.name()). for i in range(self.natom()):; [x, y, z] = self.atoms[i].compute(); text += '%2s %17.12f %17.12f %17.12f\n' % ((self.symbol(i) if self.Z(i) else ""Gh""), \; x * factor, y * factor, z * factor); return text. [docs] def save_xyz(self, filename):; """"""Save an XYZ file. >>> H2OH2O.save_xyz('h2o.xyz'). """"""; outfile = open(filename, 'w'); outfile.write(self.save_string_xyz()); outfile.close(). [docs] def save_to_checkpoint(self, chkpt, prefix=""""):; """""" **NYI** Save information to checkpoint file; (method name in libmints is save_to_chkpt). """"""; raise FeatureNotImplemented('Molecule::save_to_checkpoint') # FINAL. # <<< Methods for Symmetry >>>. [docs] def has_symmetry_element(self, op, tol=DEFAULT_SYM_TOL):; """""" **NYI** Whether molecule satisfies the vector symmetry operation *op* """"""; raise FeatureNotImplemented('Molecule::has_symmetry_element') # FINAL SYMM. [docs] def point_group(self):; """""" **NYI** Returns the point group (object) if set""""""; raise FeatureNotImplemented('Molecule::point_group') # FINAL SYMM. [docs] def set_point_group(self, pg):; """""" **NYI** Set the point group to object *pg* """"""; raise FeatureNotImplemented('Molecule::set_point_group') # FINAL SYMM. [docs] def set_full_point_group(self, tol=FULL_PG_TOL):; """""" **NYI** Determine and set FULL point group""""""; raise FeatureNotImplemented('Molecule::set_full_point_group') # FINAL SYMM. [docs] def has_inversion(self, origin, tol=DEFAULT_SYM_TOL):; """"""Does the molecule have an inversio",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:43274,Deployability,update,updated,43274,"tom(); 2. """"""; if self.nfragments() == 0:; raise ValidationError(""Molecule::update_geometry: There are no fragments in this molecule.""). # Idempotence condition; if self.lock_frame:; return. #print ""beginning update_geometry:""; #self.print_full(); if self.PYreinterpret_coordentries:; self.reinterpret_coordentries(); #print ""after reinterpret_coordentries:""; #self.print_full(). if self.PYmove_to_com:; self.move_to_com(); #print ""after com:""; #self.print_full(). # If the no_reorient command was given, don't reorient; if not self.PYfix_orientation:; # Now we need to rotate the geometry to its symmetry frame; # to align the axes correctly for the point group; # symmetry_frame looks for the highest point group so that we can align; # the molecule according to its actual symmetry, rather than the symmetry; # the the user might have provided.; frame = self.symmetry_frame(); self.rotate_full(frame); #print ""after rotate:""; #self.print_full(). # Recompute point group of the molecule, so the symmetry info is updated to the new frame; # TODO self.set_point_group(self.find_point_group()); # TODO self.set_full_point_group(). # Disabling symmetrize for now if orientation is fixed, as it is not; # correct. We may want to fix this in the future, but in some cases of; # finite-differences the set geometry is not totally symmetric anyway.; # Symmetrize the molecule to remove any noise; # TODO self.symmetrize(); #print ""after symmetry:""; #self.print_full(). self.lock_frame = True. # <<< Methods for Miscellaneous >>>. [docs] def clear(self):; """"""Zero it out.""""""; self.lock_frame = False; self.atoms = []; self.full_atoms = []. [docs] def nuclear_repulsion_energy(self):; """"""Computes nuclear repulsion energy. >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. """"""; e = 0.0; for at1 in range(self.natom()):; for at2 in range(self.natom()):; if at2 < at1:; Zi = self.Z(at1); Zj = self.Z(at2); dist = distance(self.xyz(at1), self.xyz(at2)); e += Zi * Zj / dist; return e. [docs] def nucle",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:53225,Deployability,release,release,53225,"[0,-1,0],[-1,0,0],[0,0,1]]). """"""; new_geom = zero(3, self.nallatom()); geom = self.full_geometry(); new_geom = mult(geom, R); self.set_full_geometry(new_geom). [docs] def orientation_fixed(self):; """"""Get whether or not orientation is fixed. >>> H2OH2O.orientation_fixed(); True. """"""; return self.PYfix_orientation. [docs] def fix_orientation(self, _fix=True):; """"""Fix the orientation at its current frame; (method name in libmints is set_orientation_fixed). """"""; if _fix:; self.PYfix_orientation = True # tells update_geometry() not to change orientation; # Compute original cartesian coordinates - code coped from update_geometry(); self.atoms = []; for item in self.full_atoms:; item.invalidate(). for fr in range(self.nfragments()):; for at in range(self.fragments[fr][0], self.fragments[fr][1] + 1):; self.full_atoms[at].compute(); self.full_atoms[at].set_ghosted(self.fragment_types[fr] == 'Ghost'); if self.full_atoms[at].symbol() != 'X':; self.atoms.append(self.full_atoms[at]); else: # release orientation to be free; self.PYfix_orientation = False. # <<< Methods for Saving >>>. [docs] def save_string_xyz(self):; """"""Save a string for a XYZ-style file. >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. """"""; factor = 1.0 if self.PYunits == 'Angstrom' else psi_bohr2angstroms. text = '%d\n' % (self.natom()); text += '%d %d %s\n' % (self.molecular_charge(), self.multiplicity(), self.name()). for i in range(self.natom()):; [x, y, z] = self.atoms[i].compute(); text += '%2s %17.12f %17.12f %17.12f\n' % ((self.symbol(i) if self.Z(i) else ""Gh""), \; x * factor, y * factor, z * factor); return text. [docs] def save_xyz(self, filename):; """"""Save an XYZ file. >>> H2OH2O.save_xyz('h2o.xyz'). """"""; ou",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:71234,Deployability,update,updated,71234,"_group') # FINAL SYMM. # <<< Methods for Uniqueness >>> (assume molecular point group has been determined). [docs] def nunique(self):; """""" **NYI** Return the number of unique atoms.""""""; #w#return PYnunique; raise FeatureNotImplemented('Molecule::nunique') # FINAL SYMM. [docs] def unique(self, iuniq):; """""" **NYI** Returns the overall number of the iuniq'th unique atom.""""""; #w#return self.equiv[iuniq][0]; raise FeatureNotImplemented('Molecule::unique') # FINAL SYMM. [docs] def nequivalent(self, iuniq):; """""" **NYI** Returns the number of atoms equivalent to iuniq.""""""; #w#return self.nequiv[iuniq]; raise FeatureNotImplemented('Molecule::nequivalent') # FINAL SYMM. [docs] def equivalent(self, iuniq, j):; """""" **NYI** Returns the j'th atom equivalent to iuniq.""""""; #w#return self.equiv[iuniq][j]; raise FeatureNotImplemented('Molecule::equivalent') # FINAL SYMM. [docs] def atom_to_unique(self, iatom):; """""" **NYI** Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). """"""; #w#return PYatom_to_unique[iatom]; raise FeatureNotImplemented('Molecule::atom_to_unique') # FINAL SYMM. [docs] def atom_to_unique_offset(self, iatom):; """""" **NYI** Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. """"""; raise FeatureNotImplemented('Molecule::atom_to_unique_offset') # FINAL SYMM. [docs] def max_nequivalent(self):; """""" **NYI** Returns the maximum number of equivalent atoms.""""""; raise FeatureNotImplemented('Molecule::max_nequivalent') # FINAL SYMM. # TODO outfile; # ignored =, +, 0, += assignment operators; # no pubchem; # no symmetry; # TODO rename save_string_for_psi4; # TODO add no_com no_reorint in save string for psi4. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:632,Energy Efficiency,charge,charge,632,"﻿. qcdb.libmintsmolecule — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.libmintsmolecule; import os; import re; import math; import copy; from periodictable import *; from physconst import *; from vecutil import *; from exceptions import *; from libmintscoordentry import *. LINEAR_A_TOL = 1.0E-2 # When sin(a) is below this, we consider the angle to be linear; DEFAULT_SYM_TOL = 1.0E-8; FULL_PG_TOL = 1.0e-8; ZERO = 1.0E-14; NOISY_ZERO = 1.0E-8. [docs]class LibmintsMolecule(object):; """"""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney with incremental; improvements by other psi4 developers. Major differences from the C++; class are: no basisset handling, no symmetry, no pubchem. This class; translated so that databases can function independently of psi4. >>> H2OH2O = qcdb.Molecule(\""\""\""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; \""\""\""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'); """"""; FullPointGroupList = [""ATOM"", ""C_inf_v"", ""D_inf_h"", ""C1"", ""Cs"", ""Ci"", \; ""Cn"", ""Cnv"", ""Cnh"", ""Sn"", ""Dn"", ""Dnd"", ""Dnh"", ""Td"", ""Oh"", ""Ih""]. def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from string in psi4 format"""""". # <<< Basic Molecule Information >>>. # Molecule (or fragment) name; self.PYname = 'default'; # The molecular charge; self.PYmolecular_charge = 0; # Whether the charge was given by the user UNUSED; self.PYcharge_specified = False; # The multiplicity (defined as 2Ms + 1); self.PYmultiplicity = 1; # Whether the multiplicity was specified by the user UNUSED; self.PYmultiplicity_specified = False; # The units used to ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:1694,Energy Efficiency,charge,charge,1694,"ates psi4's libmints; Molecule class, developed by Justin M. Turney with incremental; improvements by other psi4 developers. Major differences from the C++; class are: no basisset handling, no symmetry, no pubchem. This class; translated so that databases can function independently of psi4. >>> H2OH2O = qcdb.Molecule(\""\""\""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; \""\""\""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'); """"""; FullPointGroupList = [""ATOM"", ""C_inf_v"", ""D_inf_h"", ""C1"", ""Cs"", ""Ci"", \; ""Cn"", ""Cnv"", ""Cnh"", ""Sn"", ""Dn"", ""Dnd"", ""Dnh"", ""Td"", ""Oh"", ""Ih""]. def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from string in psi4 format"""""". # <<< Basic Molecule Information >>>. # Molecule (or fragment) name; self.PYname = 'default'; # The molecular charge; self.PYmolecular_charge = 0; # Whether the charge was given by the user UNUSED; self.PYcharge_specified = False; # The multiplicity (defined as 2Ms + 1); self.PYmultiplicity = 1; # Whether the multiplicity was specified by the user UNUSED; self.PYmultiplicity_specified = False; # The units used to define the geometry; self.PYunits = 'Angstrom'; # The conversion factor to take input units to Bohr; self.input_units_to_au = 1.0 / psi_bohr2angstroms. # <<< Coordinates >>>. # Atom info vector (no knowledge of dummy atoms); self.atoms = []; # Atom info vector (includes dummy atoms); self.full_atoms = []; # A list of all variables known, whether they have been set or not.; self.all_variables = []; # A listing of the variables used to define the geometries; self.geometry_variables = {}. # <<< Fragmentation >>>. # The list of atom ranges defining each fragment from parent molecule; self.fragments = []; # A list describing how to handle each fragment; self.fragment_types = [];",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:1745,Energy Efficiency,charge,charge,1745,"ey with incremental; improvements by other psi4 developers. Major differences from the C++; class are: no basisset handling, no symmetry, no pubchem. This class; translated so that databases can function independently of psi4. >>> H2OH2O = qcdb.Molecule(\""\""\""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; \""\""\""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'); """"""; FullPointGroupList = [""ATOM"", ""C_inf_v"", ""D_inf_h"", ""C1"", ""Cs"", ""Ci"", \; ""Cn"", ""Cnv"", ""Cnh"", ""Sn"", ""Dn"", ""Dnd"", ""Dnh"", ""Td"", ""Oh"", ""Ih""]. def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from string in psi4 format"""""". # <<< Basic Molecule Information >>>. # Molecule (or fragment) name; self.PYname = 'default'; # The molecular charge; self.PYmolecular_charge = 0; # Whether the charge was given by the user UNUSED; self.PYcharge_specified = False; # The multiplicity (defined as 2Ms + 1); self.PYmultiplicity = 1; # Whether the multiplicity was specified by the user UNUSED; self.PYmultiplicity_specified = False; # The units used to define the geometry; self.PYunits = 'Angstrom'; # The conversion factor to take input units to Bohr; self.input_units_to_au = 1.0 / psi_bohr2angstroms. # <<< Coordinates >>>. # Atom info vector (no knowledge of dummy atoms); self.atoms = []; # Atom info vector (includes dummy atoms); self.full_atoms = []; # A list of all variables known, whether they have been set or not.; self.all_variables = []; # A listing of the variables used to define the geometries; self.geometry_variables = {}. # <<< Fragmentation >>>. # The list of atom ranges defining each fragment from parent molecule; self.fragments = []; # A list describing how to handle each fragment; self.fragment_types = []; # The charge of each fragment; self.fragment_charges = []; # Th",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:2690,Energy Efficiency,charge,charge,2690,"ar charge; self.PYmolecular_charge = 0; # Whether the charge was given by the user UNUSED; self.PYcharge_specified = False; # The multiplicity (defined as 2Ms + 1); self.PYmultiplicity = 1; # Whether the multiplicity was specified by the user UNUSED; self.PYmultiplicity_specified = False; # The units used to define the geometry; self.PYunits = 'Angstrom'; # The conversion factor to take input units to Bohr; self.input_units_to_au = 1.0 / psi_bohr2angstroms. # <<< Coordinates >>>. # Atom info vector (no knowledge of dummy atoms); self.atoms = []; # Atom info vector (includes dummy atoms); self.full_atoms = []; # A list of all variables known, whether they have been set or not.; self.all_variables = []; # A listing of the variables used to define the geometries; self.geometry_variables = {}. # <<< Fragmentation >>>. # The list of atom ranges defining each fragment from parent molecule; self.fragments = []; # A list describing how to handle each fragment; self.fragment_types = []; # The charge of each fragment; self.fragment_charges = []; # The multiplicity of each fragment; self.fragment_multiplicities = []. # <<< Frame >>>. # Move to center of mass or not?; self.PYmove_to_com = True; # Reorient or not? UNUSED; self.PYfix_orientation = False; # Reinterpret the coord entries or not (Default is true, except for findif); self.PYreinterpret_coordentries = True; # Nilpotence boolean (flagged upon first determination of symmetry frame,; # reset each time a substantiative change is made); self.lock_frame = False. # <<< Symmetry >>>. # Point group to use with this molecule UNUSED; self.pg = None; # Full point group UNUSED; self.full_pg = 'PG_C1'; # n of the highest rotational axis Cn UNUSED; self.full_pg_n = 1; # Symmetry string from geometry specification; self.PYsymmetry_from_input = 'C1'; # Number of unique atoms; self.PYnunique = 0; # Number of equivalent atoms per unique atom (length nunique); self.nequiv = 0; # Equivalent atom mapping array; self.equiv = 0; # Atom to uni",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:4401,Energy Efficiency,charge,charge,4401,"rotational axis Cn UNUSED; self.full_pg_n = 1; # Symmetry string from geometry specification; self.PYsymmetry_from_input = 'C1'; # Number of unique atoms; self.PYnunique = 0; # Number of equivalent atoms per unique atom (length nunique); self.nequiv = 0; # Equivalent atom mapping array; self.equiv = 0; # Atom to unique atom mapping array (length natom); self.PYatom_to_unique = 0. if psi4molstr:; self.create_molecule_from_string(psi4molstr). # <<< Simple Methods for Basic Molecule Information >>>. [docs] def name(self):; """"""Get molecule name. >>> print H2OH2O.name(); water_dimer. """"""; return self.PYname. [docs] def set_name(self, name):; """"""Set molecule name. >>> H2OH2O.set_name('water_dimer'). """"""; self.PYname = name. [docs] def natom(self):; """"""Number of atoms. >>> print H2OH2O.natom(); 6. """"""; return len(self.atoms). [docs] def nallatom(self):; """"""Number of all atoms (includes dummies). >>> print H2OH2O.nallatom(); 7. """"""; return len(self.full_atoms). [docs] def molecular_charge(self):; """"""Gets the molecular charge. >>> print H2OH2O.molecular_charge(); -2. """"""; return self.PYmolecular_charge. [docs] def set_molecular_charge(self, charge):; """"""Sets the molecular charge. >>> H2OH2O.set_molecular_charge(-2). """"""; self.PYcharge_specified = True; self.PYmolecular_charge = charge. [docs] def charge_specified(self):; """"""Whether the charge was given by the user. >>> print H2OH2O.charge_specified(); True. """"""; return self.PYcharge_specified. [docs] def multiplicity(self):; """"""Get the multiplicity (defined as 2Ms + 1). >>> print H2OH2O.multiplicity(). """"""; return self.PYmultiplicity. [docs] def set_multiplicity(self, mult):; """"""Sets the multiplicity (defined as 2Ms + 1). >>> H2OH2O.set_multiplicity(3). """"""; self.PYmultiplicity_specified = True; self.PYmultiplicity = mult. [docs] def multiplicity_specified(self):; """"""Whether the multiplicity was given by the user. >>> print H2OH2O.multiplicity_specified(); True. """"""; return self.PYmultiplicity_specified. [docs] def units(sel",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:4525,Energy Efficiency,charge,charge,4525,"oms; self.PYnunique = 0; # Number of equivalent atoms per unique atom (length nunique); self.nequiv = 0; # Equivalent atom mapping array; self.equiv = 0; # Atom to unique atom mapping array (length natom); self.PYatom_to_unique = 0. if psi4molstr:; self.create_molecule_from_string(psi4molstr). # <<< Simple Methods for Basic Molecule Information >>>. [docs] def name(self):; """"""Get molecule name. >>> print H2OH2O.name(); water_dimer. """"""; return self.PYname. [docs] def set_name(self, name):; """"""Set molecule name. >>> H2OH2O.set_name('water_dimer'). """"""; self.PYname = name. [docs] def natom(self):; """"""Number of atoms. >>> print H2OH2O.natom(); 6. """"""; return len(self.atoms). [docs] def nallatom(self):; """"""Number of all atoms (includes dummies). >>> print H2OH2O.nallatom(); 7. """"""; return len(self.full_atoms). [docs] def molecular_charge(self):; """"""Gets the molecular charge. >>> print H2OH2O.molecular_charge(); -2. """"""; return self.PYmolecular_charge. [docs] def set_molecular_charge(self, charge):; """"""Sets the molecular charge. >>> H2OH2O.set_molecular_charge(-2). """"""; self.PYcharge_specified = True; self.PYmolecular_charge = charge. [docs] def charge_specified(self):; """"""Whether the charge was given by the user. >>> print H2OH2O.charge_specified(); True. """"""; return self.PYcharge_specified. [docs] def multiplicity(self):; """"""Get the multiplicity (defined as 2Ms + 1). >>> print H2OH2O.multiplicity(). """"""; return self.PYmultiplicity. [docs] def set_multiplicity(self, mult):; """"""Sets the multiplicity (defined as 2Ms + 1). >>> H2OH2O.set_multiplicity(3). """"""; self.PYmultiplicity_specified = True; self.PYmultiplicity = mult. [docs] def multiplicity_specified(self):; """"""Whether the multiplicity was given by the user. >>> print H2OH2O.multiplicity_specified(); True. """"""; return self.PYmultiplicity_specified. [docs] def units(self):; """"""Gets the geometry units. >>> print H2OH2O.units(); Angstrom. """"""; return self.PYunits. [docs] def set_units(self, units):; """"""Sets the geometr",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:4557,Energy Efficiency,charge,charge,4557,"oms; self.PYnunique = 0; # Number of equivalent atoms per unique atom (length nunique); self.nequiv = 0; # Equivalent atom mapping array; self.equiv = 0; # Atom to unique atom mapping array (length natom); self.PYatom_to_unique = 0. if psi4molstr:; self.create_molecule_from_string(psi4molstr). # <<< Simple Methods for Basic Molecule Information >>>. [docs] def name(self):; """"""Get molecule name. >>> print H2OH2O.name(); water_dimer. """"""; return self.PYname. [docs] def set_name(self, name):; """"""Set molecule name. >>> H2OH2O.set_name('water_dimer'). """"""; self.PYname = name. [docs] def natom(self):; """"""Number of atoms. >>> print H2OH2O.natom(); 6. """"""; return len(self.atoms). [docs] def nallatom(self):; """"""Number of all atoms (includes dummies). >>> print H2OH2O.nallatom(); 7. """"""; return len(self.full_atoms). [docs] def molecular_charge(self):; """"""Gets the molecular charge. >>> print H2OH2O.molecular_charge(); -2. """"""; return self.PYmolecular_charge. [docs] def set_molecular_charge(self, charge):; """"""Sets the molecular charge. >>> H2OH2O.set_molecular_charge(-2). """"""; self.PYcharge_specified = True; self.PYmolecular_charge = charge. [docs] def charge_specified(self):; """"""Whether the charge was given by the user. >>> print H2OH2O.charge_specified(); True. """"""; return self.PYcharge_specified. [docs] def multiplicity(self):; """"""Get the multiplicity (defined as 2Ms + 1). >>> print H2OH2O.multiplicity(). """"""; return self.PYmultiplicity. [docs] def set_multiplicity(self, mult):; """"""Sets the multiplicity (defined as 2Ms + 1). >>> H2OH2O.set_multiplicity(3). """"""; self.PYmultiplicity_specified = True; self.PYmultiplicity = mult. [docs] def multiplicity_specified(self):; """"""Whether the multiplicity was given by the user. >>> print H2OH2O.multiplicity_specified(); True. """"""; return self.PYmultiplicity_specified. [docs] def units(self):; """"""Gets the geometry units. >>> print H2OH2O.units(); Angstrom. """"""; return self.PYunits. [docs] def set_units(self, units):; """"""Sets the geometr",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:4665,Energy Efficiency,charge,charge,4665,"ray; self.equiv = 0; # Atom to unique atom mapping array (length natom); self.PYatom_to_unique = 0. if psi4molstr:; self.create_molecule_from_string(psi4molstr). # <<< Simple Methods for Basic Molecule Information >>>. [docs] def name(self):; """"""Get molecule name. >>> print H2OH2O.name(); water_dimer. """"""; return self.PYname. [docs] def set_name(self, name):; """"""Set molecule name. >>> H2OH2O.set_name('water_dimer'). """"""; self.PYname = name. [docs] def natom(self):; """"""Number of atoms. >>> print H2OH2O.natom(); 6. """"""; return len(self.atoms). [docs] def nallatom(self):; """"""Number of all atoms (includes dummies). >>> print H2OH2O.nallatom(); 7. """"""; return len(self.full_atoms). [docs] def molecular_charge(self):; """"""Gets the molecular charge. >>> print H2OH2O.molecular_charge(); -2. """"""; return self.PYmolecular_charge. [docs] def set_molecular_charge(self, charge):; """"""Sets the molecular charge. >>> H2OH2O.set_molecular_charge(-2). """"""; self.PYcharge_specified = True; self.PYmolecular_charge = charge. [docs] def charge_specified(self):; """"""Whether the charge was given by the user. >>> print H2OH2O.charge_specified(); True. """"""; return self.PYcharge_specified. [docs] def multiplicity(self):; """"""Get the multiplicity (defined as 2Ms + 1). >>> print H2OH2O.multiplicity(). """"""; return self.PYmultiplicity. [docs] def set_multiplicity(self, mult):; """"""Sets the multiplicity (defined as 2Ms + 1). >>> H2OH2O.set_multiplicity(3). """"""; self.PYmultiplicity_specified = True; self.PYmultiplicity = mult. [docs] def multiplicity_specified(self):; """"""Whether the multiplicity was given by the user. >>> print H2OH2O.multiplicity_specified(); True. """"""; return self.PYmultiplicity_specified. [docs] def units(self):; """"""Gets the geometry units. >>> print H2OH2O.units(); Angstrom. """"""; return self.PYunits. [docs] def set_units(self, units):; """"""Sets the geometry units. >>> H2OH2O.set_units('Angstom'). """"""; if units == 'Angstrom' or units == 'Bohr':; self.PYunits = units; else:; raise Validat",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:4724,Energy Efficiency,charge,charge,4724,"ay (length natom); self.PYatom_to_unique = 0. if psi4molstr:; self.create_molecule_from_string(psi4molstr). # <<< Simple Methods for Basic Molecule Information >>>. [docs] def name(self):; """"""Get molecule name. >>> print H2OH2O.name(); water_dimer. """"""; return self.PYname. [docs] def set_name(self, name):; """"""Set molecule name. >>> H2OH2O.set_name('water_dimer'). """"""; self.PYname = name. [docs] def natom(self):; """"""Number of atoms. >>> print H2OH2O.natom(); 6. """"""; return len(self.atoms). [docs] def nallatom(self):; """"""Number of all atoms (includes dummies). >>> print H2OH2O.nallatom(); 7. """"""; return len(self.full_atoms). [docs] def molecular_charge(self):; """"""Gets the molecular charge. >>> print H2OH2O.molecular_charge(); -2. """"""; return self.PYmolecular_charge. [docs] def set_molecular_charge(self, charge):; """"""Sets the molecular charge. >>> H2OH2O.set_molecular_charge(-2). """"""; self.PYcharge_specified = True; self.PYmolecular_charge = charge. [docs] def charge_specified(self):; """"""Whether the charge was given by the user. >>> print H2OH2O.charge_specified(); True. """"""; return self.PYcharge_specified. [docs] def multiplicity(self):; """"""Get the multiplicity (defined as 2Ms + 1). >>> print H2OH2O.multiplicity(). """"""; return self.PYmultiplicity. [docs] def set_multiplicity(self, mult):; """"""Sets the multiplicity (defined as 2Ms + 1). >>> H2OH2O.set_multiplicity(3). """"""; self.PYmultiplicity_specified = True; self.PYmultiplicity = mult. [docs] def multiplicity_specified(self):; """"""Whether the multiplicity was given by the user. >>> print H2OH2O.multiplicity_specified(); True. """"""; return self.PYmultiplicity_specified. [docs] def units(self):; """"""Gets the geometry units. >>> print H2OH2O.units(); Angstrom. """"""; return self.PYunits. [docs] def set_units(self, units):; """"""Sets the geometry units. >>> H2OH2O.set_units('Angstom'). """"""; if units == 'Angstrom' or units == 'Bohr':; self.PYunits = units; else:; raise ValidationError(""""""Argument to Molecule::set_units must be 'An",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:5817,Energy Efficiency,charge,charge,5817,"lf.PYcharge_specified. [docs] def multiplicity(self):; """"""Get the multiplicity (defined as 2Ms + 1). >>> print H2OH2O.multiplicity(). """"""; return self.PYmultiplicity. [docs] def set_multiplicity(self, mult):; """"""Sets the multiplicity (defined as 2Ms + 1). >>> H2OH2O.set_multiplicity(3). """"""; self.PYmultiplicity_specified = True; self.PYmultiplicity = mult. [docs] def multiplicity_specified(self):; """"""Whether the multiplicity was given by the user. >>> print H2OH2O.multiplicity_specified(); True. """"""; return self.PYmultiplicity_specified. [docs] def units(self):; """"""Gets the geometry units. >>> print H2OH2O.units(); Angstrom. """"""; return self.PYunits. [docs] def set_units(self, units):; """"""Sets the geometry units. >>> H2OH2O.set_units('Angstom'). """"""; if units == 'Angstrom' or units == 'Bohr':; self.PYunits = units; else:; raise ValidationError(""""""Argument to Molecule::set_units must be 'Angstrom' or 'Bohr'.""""""). # <<< Simple Methods for Coordinates >>>. [docs] def Z(self, atom):; """"""Nuclear charge of atom (0-indexed). >>> print H2OH2O.Z(4); 1. """"""; return self.atoms[atom].Z(). [docs] def x(self, atom):; """"""x position of atom (0-indexed) in Bohr. >>> print H2OH2O.x(4); 3.17549201425. """"""; return self.input_units_to_au * self.atoms[atom].compute()[0]. [docs] def y(self, atom):; """"""y position of atom (0-indexed) in Bohr. >>> print H2OH2O.y(4); -0.706268134631. """"""; return self.input_units_to_au * self.atoms[atom].compute()[1]. [docs] def z(self, atom):; """"""z position of atom (0-indexed) in Bohr. >>> print H2OH2O.z(4); -1.43347254509. """"""; return self.input_units_to_au * self.atoms[atom].compute()[2]. [docs] def xyz(self, atom, posn=None):; """"""Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at *posn*. >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. """"""; temp = scale(self.atoms[atom].compute(), self.input_units_to_au); if posn >= 0:; return temp[posn]; else:; return temp. [docs] def mass(self, ato",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:7097,Energy Efficiency,charge,charge,7097,"mpute()[0]. [docs] def y(self, atom):; """"""y position of atom (0-indexed) in Bohr. >>> print H2OH2O.y(4); -0.706268134631. """"""; return self.input_units_to_au * self.atoms[atom].compute()[1]. [docs] def z(self, atom):; """"""z position of atom (0-indexed) in Bohr. >>> print H2OH2O.z(4); -1.43347254509. """"""; return self.input_units_to_au * self.atoms[atom].compute()[2]. [docs] def xyz(self, atom, posn=None):; """"""Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at *posn*. >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. """"""; temp = scale(self.atoms[atom].compute(), self.input_units_to_au); if posn >= 0:; return temp[posn]; else:; return temp. [docs] def mass(self, atom):; """"""Returns mass of atom (0-indexed). >>> print H2OH2O.mass(4); 1.00782503207. """"""; if self.atoms[atom].mass() != 0.0:; return self.atoms[atom].mass(). if math.fabs(self.atoms[atom].Z() - int(self.atoms[atom].Z())) > 0.0:; print ""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""; # TODO outfile; return an2masses[int(self.atoms[atom].Z())]. [docs] def symbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed). >>> print H2OH2O.symbol(4); H. """"""; return self.atoms[atom].symbol(). [docs] def label(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). >>> print H2OH2O.label(4); H3. """"""; return self.atoms[atom].label(). [docs] def charge(self, atom):; """"""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print H2OH2O.charge(4); 1.0. """"""; return self.atoms[atom].charge(). [docs] def fZ(self, atom):; """"""Nuclear charge of atom (includes dummies). >>> print H2OH2O.fZ(4); 8. """"""; return self.full_atoms[atom].Z(). [docs] def fx(self, atom):; """"""x position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fx(4); 2.55231135823. """"""; return self.input_units_to_au * self.full_atoms[ato",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:7570,Energy Efficiency,charge,charge,7570,"(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. """"""; temp = scale(self.atoms[atom].compute(), self.input_units_to_au); if posn >= 0:; return temp[posn]; else:; return temp. [docs] def mass(self, atom):; """"""Returns mass of atom (0-indexed). >>> print H2OH2O.mass(4); 1.00782503207. """"""; if self.atoms[atom].mass() != 0.0:; return self.atoms[atom].mass(). if math.fabs(self.atoms[atom].Z() - int(self.atoms[atom].Z())) > 0.0:; print ""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""; # TODO outfile; return an2masses[int(self.atoms[atom].Z())]. [docs] def symbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed). >>> print H2OH2O.symbol(4); H. """"""; return self.atoms[atom].symbol(). [docs] def label(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). >>> print H2OH2O.label(4); H3. """"""; return self.atoms[atom].label(). [docs] def charge(self, atom):; """"""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print H2OH2O.charge(4); 1.0. """"""; return self.atoms[atom].charge(). [docs] def fZ(self, atom):; """"""Nuclear charge of atom (includes dummies). >>> print H2OH2O.fZ(4); 8. """"""; return self.full_atoms[atom].Z(). [docs] def fx(self, atom):; """"""x position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fx(4); 2.55231135823. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[0]. [docs] def fy(self, atom):; """"""y position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fy(4); 0.210645882307. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[1]. [docs] def fz(self, atom):; """"""z position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fz(4); 0.0. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[2]. [docs] def fxyz(self, atom):; """"""Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dum",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:7602,Energy Efficiency,charge,charge,7602,"(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. """"""; temp = scale(self.atoms[atom].compute(), self.input_units_to_au); if posn >= 0:; return temp[posn]; else:; return temp. [docs] def mass(self, atom):; """"""Returns mass of atom (0-indexed). >>> print H2OH2O.mass(4); 1.00782503207. """"""; if self.atoms[atom].mass() != 0.0:; return self.atoms[atom].mass(). if math.fabs(self.atoms[atom].Z() - int(self.atoms[atom].Z())) > 0.0:; print ""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""; # TODO outfile; return an2masses[int(self.atoms[atom].Z())]. [docs] def symbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed). >>> print H2OH2O.symbol(4); H. """"""; return self.atoms[atom].symbol(). [docs] def label(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). >>> print H2OH2O.label(4); H3. """"""; return self.atoms[atom].label(). [docs] def charge(self, atom):; """"""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print H2OH2O.charge(4); 1.0. """"""; return self.atoms[atom].charge(). [docs] def fZ(self, atom):; """"""Nuclear charge of atom (includes dummies). >>> print H2OH2O.fZ(4); 8. """"""; return self.full_atoms[atom].Z(). [docs] def fx(self, atom):; """"""x position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fx(4); 2.55231135823. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[0]. [docs] def fy(self, atom):; """"""y position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fy(4); 0.210645882307. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[1]. [docs] def fz(self, atom):; """"""z position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fz(4); 0.0. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[2]. [docs] def fxyz(self, atom):; """"""Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dum",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:7690,Energy Efficiency,charge,charge,7690,"compute(), self.input_units_to_au); if posn >= 0:; return temp[posn]; else:; return temp. [docs] def mass(self, atom):; """"""Returns mass of atom (0-indexed). >>> print H2OH2O.mass(4); 1.00782503207. """"""; if self.atoms[atom].mass() != 0.0:; return self.atoms[atom].mass(). if math.fabs(self.atoms[atom].Z() - int(self.atoms[atom].Z())) > 0.0:; print ""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""; # TODO outfile; return an2masses[int(self.atoms[atom].Z())]. [docs] def symbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed). >>> print H2OH2O.symbol(4); H. """"""; return self.atoms[atom].symbol(). [docs] def label(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). >>> print H2OH2O.label(4); H3. """"""; return self.atoms[atom].label(). [docs] def charge(self, atom):; """"""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print H2OH2O.charge(4); 1.0. """"""; return self.atoms[atom].charge(). [docs] def fZ(self, atom):; """"""Nuclear charge of atom (includes dummies). >>> print H2OH2O.fZ(4); 8. """"""; return self.full_atoms[atom].Z(). [docs] def fx(self, atom):; """"""x position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fx(4); 2.55231135823. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[0]. [docs] def fy(self, atom):; """"""y position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fy(4); 0.210645882307. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[1]. [docs] def fz(self, atom):; """"""z position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fz(4); 0.0. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[2]. [docs] def fxyz(self, atom):; """"""Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies). >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. """"""; return scale(self",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:7735,Energy Efficiency,charge,charge,7735," >= 0:; return temp[posn]; else:; return temp. [docs] def mass(self, atom):; """"""Returns mass of atom (0-indexed). >>> print H2OH2O.mass(4); 1.00782503207. """"""; if self.atoms[atom].mass() != 0.0:; return self.atoms[atom].mass(). if math.fabs(self.atoms[atom].Z() - int(self.atoms[atom].Z())) > 0.0:; print ""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""; # TODO outfile; return an2masses[int(self.atoms[atom].Z())]. [docs] def symbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed). >>> print H2OH2O.symbol(4); H. """"""; return self.atoms[atom].symbol(). [docs] def label(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). >>> print H2OH2O.label(4); H3. """"""; return self.atoms[atom].label(). [docs] def charge(self, atom):; """"""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print H2OH2O.charge(4); 1.0. """"""; return self.atoms[atom].charge(). [docs] def fZ(self, atom):; """"""Nuclear charge of atom (includes dummies). >>> print H2OH2O.fZ(4); 8. """"""; return self.full_atoms[atom].Z(). [docs] def fx(self, atom):; """"""x position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fx(4); 2.55231135823. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[0]. [docs] def fy(self, atom):; """"""y position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fy(4); 0.210645882307. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[1]. [docs] def fz(self, atom):; """"""z position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fz(4); 0.0. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[2]. [docs] def fxyz(self, atom):; """"""Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies). >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. """"""; return scale(self.full_atoms[atom].compute(), self.input_uni",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:7784,Energy Efficiency,charge,charge,7784,"emp. [docs] def mass(self, atom):; """"""Returns mass of atom (0-indexed). >>> print H2OH2O.mass(4); 1.00782503207. """"""; if self.atoms[atom].mass() != 0.0:; return self.atoms[atom].mass(). if math.fabs(self.atoms[atom].Z() - int(self.atoms[atom].Z())) > 0.0:; print ""WARNING: Obtaining masses from atom with fractional charge...may be incorrect!!!\n""; # TODO outfile; return an2masses[int(self.atoms[atom].Z())]. [docs] def symbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed). >>> print H2OH2O.symbol(4); H. """"""; return self.atoms[atom].symbol(). [docs] def label(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). >>> print H2OH2O.label(4); H3. """"""; return self.atoms[atom].label(). [docs] def charge(self, atom):; """"""Returns charge of atom (0-indexed).; Related to SAD guess in libmints version. >>> print H2OH2O.charge(4); 1.0. """"""; return self.atoms[atom].charge(). [docs] def fZ(self, atom):; """"""Nuclear charge of atom (includes dummies). >>> print H2OH2O.fZ(4); 8. """"""; return self.full_atoms[atom].Z(). [docs] def fx(self, atom):; """"""x position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fx(4); 2.55231135823. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[0]. [docs] def fy(self, atom):; """"""y position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fy(4); 0.210645882307. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[1]. [docs] def fz(self, atom):; """"""z position of atom (0-indexed, includes dummies) in Bohr. >>> print H2OH2O.fz(4); 0.0. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[2]. [docs] def fxyz(self, atom):; """"""Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies). >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. """"""; return scale(self.full_atoms[atom].compute(), self.input_units_to_au). [docs] def fmass(self, atom):;",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:9374,Energy Efficiency,charge,charge,9374,"r. >>> print H2OH2O.fz(4); 0.0. """"""; return self.input_units_to_au * self.full_atoms[atom].compute()[2]. [docs] def fxyz(self, atom):; """"""Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies). >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. """"""; return scale(self.full_atoms[atom].compute(), self.input_units_to_au). [docs] def fmass(self, atom):; """"""Returns mass of atom (0-indexed, includes dummies). >>> print H2OH2O.fmass(4); 15.9949146196. """"""; return self.full_atoms[atom].mass(). [docs] def fsymbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (includes dummies). >>> print H2OH2O.fsymbol(4); O. """"""; return self.full_atoms[atom].symbol(). [docs] def flabel(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in; the input file (C2, H4) (includes dummies). >>> print H2OH2O.flabel(4); O2. """"""; return self.full_atoms[atom].label(). [docs] def fcharge(self, atom):; """"""Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version. >>> print H2OH2O.fcharge(4); 8.0. """"""; return self.full_atoms[atom].charge(). # <<< Simple Methods for Fragmentation >>>. [docs] def nfragments(self):; """"""The number of fragments in the molecule. >>> print H2OH2O.nfragments(); 2. """"""; return len(self.fragments). [docs] def nactive_fragments(self):; """"""The number of active fragments in the molecule. >>> print H2OH2O.nactive_fragments(); 2. """"""; n = 0; for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Real':; n += 1; return n. [docs] def activate_all_fragments(self):; """"""Sets all fragments in the molecule to be active.""""""; self.lock_frame = False; print 'it lives', 'activate all'; for fr in range(self.nfragments()):; print 'reviving', fr; self.fragment_types[fr] = 'Real'. [docs] def set_active_fragment(self, fr):; """"""Tags fragment index *fr* as composed of real atoms.""""""; self.lock_frame = False; self.fragment_types[fr - 1] = 'Real'",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:9531,Energy Efficiency,charge,charge,9531,"x, y, z position of atom; (0-indexed) in Bohr (includes dummies). >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. """"""; return scale(self.full_atoms[atom].compute(), self.input_units_to_au). [docs] def fmass(self, atom):; """"""Returns mass of atom (0-indexed, includes dummies). >>> print H2OH2O.fmass(4); 15.9949146196. """"""; return self.full_atoms[atom].mass(). [docs] def fsymbol(self, atom):; """"""Returns the cleaned up label of the atom (C2 => C, H4 = H) (includes dummies). >>> print H2OH2O.fsymbol(4); O. """"""; return self.full_atoms[atom].symbol(). [docs] def flabel(self, atom):; """"""Returns the original label of the atom (0-indexed) as given in; the input file (C2, H4) (includes dummies). >>> print H2OH2O.flabel(4); O2. """"""; return self.full_atoms[atom].label(). [docs] def fcharge(self, atom):; """"""Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version. >>> print H2OH2O.fcharge(4); 8.0. """"""; return self.full_atoms[atom].charge(). # <<< Simple Methods for Fragmentation >>>. [docs] def nfragments(self):; """"""The number of fragments in the molecule. >>> print H2OH2O.nfragments(); 2. """"""; return len(self.fragments). [docs] def nactive_fragments(self):; """"""The number of active fragments in the molecule. >>> print H2OH2O.nactive_fragments(); 2. """"""; n = 0; for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Real':; n += 1; return n. [docs] def activate_all_fragments(self):; """"""Sets all fragments in the molecule to be active.""""""; self.lock_frame = False; print 'it lives', 'activate all'; for fr in range(self.nfragments()):; print 'reviving', fr; self.fragment_types[fr] = 'Real'. [docs] def set_active_fragment(self, fr):; """"""Tags fragment index *fr* as composed of real atoms.""""""; self.lock_frame = False; self.fragment_types[fr - 1] = 'Real'. [docs] def set_active_fragments(self, reals):; """"""Tags the fragments in array *reals* as composed of real atoms.""""""; self.lock_frame = False; for fr in reals:; ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:14937,Energy Efficiency,charge,charge,14937,"it('\n', text); glines = []; ifrag = 0. for line in lines:. # handle comments; if comment.match(line) or blank.match(line):; pass. # handle units; elif ang.match(line):; self.set_units('Angstrom'); self.input_units_to_au = 1.0 / psi_bohr2angstroms; elif bohr.match(line):; self.set_units('Bohr'); self.input_units_to_au = 1.0. # handle no_reorient; elif orient.match(line):; self.fix_orientation(True). # handle no_com; elif com.match(line):; self.PYmove_to_com = False. # handle symmetry; elif symmetry.match(line):; tempSymm = symmetry.match(line).group(1); temp2 = re.sub('[23456789]', 'n', tempSymm).upper(); if temp2 in (item.upper() for item in self.FullPointGroupList):; self.PYsymmetry_from_input = tempSymm. # handle variables; elif variable.match(line):; vname = variable.match(line).group(1).upper(); vval = float(variable.match(line).group(2)); tda = 360.0 * math.atan(math.sqrt(2)) / math.pi; self.geometry_variables['%s' % vname] = tda if vname == 'TDA' else vval. # handle charge and multiplicity; elif cgmp.match(line):; tempCharge = int(cgmp.match(line).group(1)); tempMultiplicity = int(cgmp.match(line).group(2)). if ifrag == 0:; self.PYcharge_specified = True; self.PYmultiplicity_specified = True; self.PYmolecular_charge = tempCharge; self.PYmultiplicity = tempMultiplicity; self.fragment_charges.append(tempCharge); self.fragment_multiplicities.append(tempMultiplicity). # handle fragment markers and default fragment cgmp; elif frag.match(line):; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1); ifrag += 1; glines.append(line). elif atom.match(line):; glines.append(line). # catch last default fragment cgmp; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1). # Now go through the rest of the lines looking for fragment markers; ifrag = 0; iatom = 0; tempfrag = []; atomSym = """"; atomLabel = """"; for line in glines:. # handle fragment marke",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:16766,Energy Efficiency,charge,charge,16766,"ugh the rest of the lines looking for fragment markers; ifrag = 0; iatom = 0; tempfrag = []; atomSym = """"; atomLabel = """"; for line in glines:. # handle fragment markers; if frag.match(line):; ifrag += 1; self.fragments.append([tempfrag[0], tempfrag[-1]]); self.fragment_types.append('Real'); tempfrag = []. # handle atom markers; elif atom.match(line):; entries = re.split(r'\s+|\s*,\s*', line.strip()); atomLabel = entries[0]. # handle ghost atoms; ghostAtom = False; if ghost.match(atomLabel):; # We don't know whether the @C or Gh(C) notation matched. Do a quick check.; atomLabel = ghost.match(atomLabel).group(2) if not ghost.match(atomLabel).group(1) \; else ghost.match(atomLabel).group(1); ghostAtom = True. # Save the actual atom symbol (H1 => H); atomSym = re.split('(\d+)', atomLabel)[0].upper(). # Check that the atom symbol is valid; if not atomSym in el2z:; raise ValidationError('Illegal atom symbol in geometry specification: %s' % (atomSym)). zVal = el2z[atomSym]; charge = float(zVal); if ghostAtom:; zVal = 0; charge = 0.0. # handle cartesians; if len(entries) == 4:; tempfrag.append(iatom); xval = self.get_coord_value(entries[1]); yval = self.get_coord_value(entries[2]); zval = self.get_coord_value(entries[3]); self.full_atoms.append(CartesianEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; xval, yval, zval)). # handle first line of Zmat; elif len(entries) == 1:; tempfrag.append(iatom); self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel)). # handle second line of Zmat; elif len(entries) == 3:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); rval = self.get_coord_value(entries[2]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabe",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:16813,Energy Efficiency,charge,charge,16813,"ugh the rest of the lines looking for fragment markers; ifrag = 0; iatom = 0; tempfrag = []; atomSym = """"; atomLabel = """"; for line in glines:. # handle fragment markers; if frag.match(line):; ifrag += 1; self.fragments.append([tempfrag[0], tempfrag[-1]]); self.fragment_types.append('Real'); tempfrag = []. # handle atom markers; elif atom.match(line):; entries = re.split(r'\s+|\s*,\s*', line.strip()); atomLabel = entries[0]. # handle ghost atoms; ghostAtom = False; if ghost.match(atomLabel):; # We don't know whether the @C or Gh(C) notation matched. Do a quick check.; atomLabel = ghost.match(atomLabel).group(2) if not ghost.match(atomLabel).group(1) \; else ghost.match(atomLabel).group(1); ghostAtom = True. # Save the actual atom symbol (H1 => H); atomSym = re.split('(\d+)', atomLabel)[0].upper(). # Check that the atom symbol is valid; if not atomSym in el2z:; raise ValidationError('Illegal atom symbol in geometry specification: %s' % (atomSym)). zVal = el2z[atomSym]; charge = float(zVal); if ghostAtom:; zVal = 0; charge = 0.0. # handle cartesians; if len(entries) == 4:; tempfrag.append(iatom); xval = self.get_coord_value(entries[1]); yval = self.get_coord_value(entries[2]); zval = self.get_coord_value(entries[3]); self.full_atoms.append(CartesianEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; xval, yval, zval)). # handle first line of Zmat; elif len(entries) == 1:; tempfrag.append(iatom); self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel)). # handle second line of Zmat; elif len(entries) == 3:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); rval = self.get_coord_value(entries[2]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabe",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:17069,Energy Efficiency,charge,charge,17069,"]. # handle atom markers; elif atom.match(line):; entries = re.split(r'\s+|\s*,\s*', line.strip()); atomLabel = entries[0]. # handle ghost atoms; ghostAtom = False; if ghost.match(atomLabel):; # We don't know whether the @C or Gh(C) notation matched. Do a quick check.; atomLabel = ghost.match(atomLabel).group(2) if not ghost.match(atomLabel).group(1) \; else ghost.match(atomLabel).group(1); ghostAtom = True. # Save the actual atom symbol (H1 => H); atomSym = re.split('(\d+)', atomLabel)[0].upper(). # Check that the atom symbol is valid; if not atomSym in el2z:; raise ValidationError('Illegal atom symbol in geometry specification: %s' % (atomSym)). zVal = el2z[atomSym]; charge = float(zVal); if ghostAtom:; zVal = 0; charge = 0.0. # handle cartesians; if len(entries) == 4:; tempfrag.append(iatom); xval = self.get_coord_value(entries[1]); yval = self.get_coord_value(entries[2]); zval = self.get_coord_value(entries[3]); self.full_atoms.append(CartesianEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; xval, yval, zval)). # handle first line of Zmat; elif len(entries) == 1:; tempfrag.append(iatom); self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel)). # handle second line of Zmat; elif len(entries) == 3:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); rval = self.get_coord_value(entries[2]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval)). # handle third line of Zmat; elif len(entries) == 5:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); aTo = self",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:17270,Energy Efficiency,charge,charge,17270,"; # We don't know whether the @C or Gh(C) notation matched. Do a quick check.; atomLabel = ghost.match(atomLabel).group(2) if not ghost.match(atomLabel).group(1) \; else ghost.match(atomLabel).group(1); ghostAtom = True. # Save the actual atom symbol (H1 => H); atomSym = re.split('(\d+)', atomLabel)[0].upper(). # Check that the atom symbol is valid; if not atomSym in el2z:; raise ValidationError('Illegal atom symbol in geometry specification: %s' % (atomSym)). zVal = el2z[atomSym]; charge = float(zVal); if ghostAtom:; zVal = 0; charge = 0.0. # handle cartesians; if len(entries) == 4:; tempfrag.append(iatom); xval = self.get_coord_value(entries[1]); yval = self.get_coord_value(entries[2]); zval = self.get_coord_value(entries[3]); self.full_atoms.append(CartesianEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; xval, yval, zval)). # handle first line of Zmat; elif len(entries) == 1:; tempfrag.append(iatom); self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel)). # handle second line of Zmat; elif len(entries) == 3:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); rval = self.get_coord_value(entries[2]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval)). # handle third line of Zmat; elif len(entries) == 5:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); aTo = self.get_anchor_atom(entries[3], line); if aTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[3])); if aTo == rTo:; raise ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:17736,Energy Efficiency,charge,charge,17736,"= el2z[atomSym]; charge = float(zVal); if ghostAtom:; zVal = 0; charge = 0.0. # handle cartesians; if len(entries) == 4:; tempfrag.append(iatom); xval = self.get_coord_value(entries[1]); yval = self.get_coord_value(entries[2]); zval = self.get_coord_value(entries[3]); self.full_atoms.append(CartesianEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; xval, yval, zval)). # handle first line of Zmat; elif len(entries) == 1:; tempfrag.append(iatom); self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel)). # handle second line of Zmat; elif len(entries) == 3:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); rval = self.get_coord_value(entries[2]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval)). # handle third line of Zmat; elif len(entries) == 5:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); aTo = self.get_anchor_atom(entries[3], line); if aTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[3])); if aTo == rTo:; raise ValidationError(""Atom used multiple times on line %s."" % (line)); rval = self.get_coord_value(entries[2]); aval = self.get_coord_value(entries[4]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True); if self.full_atoms[aTo].symbol() == 'X':; aval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval, \; self.full_atoms[aTo], aval)). # handle fourth line of Zmat;",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:18605,Energy Efficiency,charge,charge,18605,"2]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval)). # handle third line of Zmat; elif len(entries) == 5:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); aTo = self.get_anchor_atom(entries[3], line); if aTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[3])); if aTo == rTo:; raise ValidationError(""Atom used multiple times on line %s."" % (line)); rval = self.get_coord_value(entries[2]); aval = self.get_coord_value(entries[4]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True); if self.full_atoms[aTo].symbol() == 'X':; aval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval, \; self.full_atoms[aTo], aval)). # handle fourth line of Zmat; elif len(entries) == 7:; tempfrag.append(iatom). rTo = self.get_anchor_atom(entries[1], line); if rTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); aTo = self.get_anchor_atom(entries[3], line); if aTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[3])); dTo = self.get_anchor_atom(entries[5], line); if dTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[5])); if aTo == rTo or rTo == dTo or aTo == dTo: # for you star wars fans; raise ValidationError(""Atom used multiple times on line %s"" % (line)). rval = self.get_coord_value(entries[2]); aval = self.get_coord_value(entries[4]); dval = self.get_coord_value(entries[6]). if self.full_ato",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:19843,Energy Efficiency,charge,charge,19843,"atom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[1])); aTo = self.get_anchor_atom(entries[3], line); if aTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[3])); dTo = self.get_anchor_atom(entries[5], line); if dTo >= iatom:; raise ValidationError(""Error on geometry input line %s. Atom %s has not been defined yet.\n"" % (line, entries[5])); if aTo == rTo or rTo == dTo or aTo == dTo: # for you star wars fans; raise ValidationError(""Atom used multiple times on line %s"" % (line)). rval = self.get_coord_value(entries[2]); aval = self.get_coord_value(entries[4]); dval = self.get_coord_value(entries[6]). if self.full_atoms[rTo].symbol() == 'X':; rval.set_fixed(True); if self.full_atoms[aTo].symbol() == 'X':; aval.set_fixed(True); if self.full_atoms[dTo].symbol() == 'X':; dval.set_fixed(True). self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval, \; self.full_atoms[aTo], aval, \; self.full_atoms[dTo], dval)). else:; raise ValidationError('Illegal geometry specification line : %s. \; You should provide either Z-Matrix or Cartesian input' % (line)). iatom += 1. self.fragments.append([tempfrag[0], tempfrag[-1]]); self.fragment_types.append('Real'). [docs] def init_with_checkpoint(self, chkpt):; """""" **NYI** Pull information from the *chkpt* object passed; (method name in libmints is init_with_chkpt). """"""; raise FeatureNotImplemented('Molecule::init_with_checkpoint') # FINAL. [docs] def init_with_io(self, psio):; """""" **NYI** Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). """"""; raise FeatureNotImplemented('Molecule::init_with_io') # FINAL. @classmethod; [docs] def init_with_xyz(cls, xyzfilename):; """"""Pull information from an XYZ file. No fragment or chg/mult info detected. >>> H2O = qcdb.Molecule.init_with_xyz('h2",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:23411,Energy Efficiency,charge,charge,23411," fileAtom, el2masses[fileAtom]). else:; raise ValidationError(""Molecule::init_with_xyz: Malformed atom information line %d."" % (i + 3)); except IndexError:; raise ValidationError(""Molecule::init_with_xyz: Expected atom in file at line %d.\n%s"" % (i + 3, text[i + 2])). # We need to make 1 fragment with all atoms; instance.fragments.append([0, fileNatom - 1]); instance.fragment_types.append('Real'); instance.fragment_charges.append(0); instance.fragment_multiplicities.append(1); # Set the units to bohr since we did the conversion above, if needed.; instance.PYunits = 'Bohr'; instance.input_units_to_au = 1.0. instance.update_geometry(); return instance. [docs] def clone(self):; """"""Returns new, independent Molecule object. >>> dimer = H2OH2O.clone(). """"""; return copy.deepcopy(self). # <<< Methods for Printing >>>. [docs] def print_out(self):; """"""Print the molecule.; (method name in libmints is print). >>> H2OH2O.print_out(); Geometry (in Angstrom), charge = -2, multiplicity = 3:; Center X Y Z; ------------ ----------------- ----------------- -----------------; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Angstrom' if self.units() == 'Angstrom' else 'Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; geom = self.atoms[i].compute(); text += """""" %8s%4s """""" % (self.symbol(i), """" ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:24081,Energy Efficiency,charge,charge,24081,"e_geometry(); return instance. [docs] def clone(self):; """"""Returns new, independent Molecule object. >>> dimer = H2OH2O.clone(). """"""; return copy.deepcopy(self). # <<< Methods for Printing >>>. [docs] def print_out(self):; """"""Print the molecule.; (method name in libmints is print). >>> H2OH2O.print_out(); Geometry (in Angstrom), charge = -2, multiplicity = 3:; Center X Y Z; ------------ ----------------- ----------------- -----------------; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Angstrom' if self.units() == 'Angstrom' else 'Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; geom = self.atoms[i].compute(); text += """""" %8s%4s """""" % (self.symbol(i), """" if self.Z(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_out_in_bohr(self):; """"""Print the molecule in Bohr. Same as :py:func:`print_out` only in Bohr.; (method name in libmints is print_in_bohr). """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:25056,Energy Efficiency,charge,charge,25056,"ext += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Angstrom' if self.units() == 'Angstrom' else 'Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; geom = self.atoms[i].compute(); text += """""" %8s%4s """""" % (self.symbol(i), """" if self.Z(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_out_in_bohr(self):; """"""Print the molecule in Bohr. Same as :py:func:`print_out` only in Bohr.; (method name in libmints is print_in_bohr). """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; text += """""" %8s%4s """""" % (self.symbol(i), """" if self.Z(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (self.xyz(i, j)); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_out_in_angstrom(self):; """"""Print the molecule in Angstroms. Same as :py:func:`print_out` only always in Angstroms.; (method name in libmints is print_in_angstrom). """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Bohr', self.molecular_",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:25985,Energy Efficiency,charge,charge,25985,""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; text += """""" %8s%4s """""" % (self.symbol(i), """" if self.Z(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (self.xyz(i, j)); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_out_in_angstrom(self):; """"""Print the molecule in Angstroms. Same as :py:func:`print_out` only always in Angstroms.; (method name in libmints is print_in_angstrom). """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; text += """""" %8s%4s """""" % (self.symbol(i), """" if self.Z(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (self.xyz(i, j) * psi_bohr2angstroms); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_full(self):; """"""Print full atom list. Same as :py:func:`print_out` only displays dummy atoms. """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """"""",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:26865,Energy Efficiency,charge,charge,26865,"DO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; ('Bohr', self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.natom()):; text += """""" %8s%4s """""" % (self.symbol(i), """" if self.Z(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (self.xyz(i, j) * psi_bohr2angstroms); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_full(self):; """"""Print full atom list. Same as :py:func:`print_out` only displays dummy atoms. """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.nallatom()):; geom = self.full_atoms[i].compute(); text += """""" %8s%4s """""" % (self.fsymbol(i), """" if self.fZ(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:28381,Energy Efficiency,charge,charge,28381,"ile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if self.units() == 'Angstrom' else ""bohr""); for i in range(self.nallatom()):; text += self.full_atoms[i].print_in_input_format(); text += ""\n""; if len(self.geometry_variables):; for vb, val in self.geometry_variables.items():; text += """"""\t%-10s=%16.10f\n"""""" % (vb, val); text += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(), self.input_units_to_au); text += """""" DOcom? %s\t\tDONTreorient? %s\n"""""" % (self.PYmove_to_com, self.orientation_fixed()); text += """""" reinterpret? %s\t\tlock_frame? %s\n"""""" % (self.PYreinterpret_coordentries, self.lock_frame); text += """""" input symm %s\n"""""" % (self.symmetry_from_input()); text += """""" Nfragments %d\t\tNactive %d\n"""""" % (self.nfragments(), self.nactive_fragments()); print text. # <<< Involved Methods for Coordinates >>>. [docs] def get_coord_value(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(flo",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:29938,Energy Efficiency,charge,charge,29938,"ts %d\t\tNactive %d\n"""""" % (self.nfragments(), self.nactive_fragments()); print text. # <<< Involved Methods for Coordinates >>>. [docs] def get_coord_value(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_po",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:30158,Energy Efficiency,charge,charge,30158,"ue(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERRO",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:30166,Energy Efficiency,charge,charge,30166,"ue(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERRO",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:30432,Energy Efficiency,charge,charge,30432,"TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper()",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:43967,Energy Efficiency,energy,energy,43967,"y_frame looks for the highest point group so that we can align; # the molecule according to its actual symmetry, rather than the symmetry; # the the user might have provided.; frame = self.symmetry_frame(); self.rotate_full(frame); #print ""after rotate:""; #self.print_full(). # Recompute point group of the molecule, so the symmetry info is updated to the new frame; # TODO self.set_point_group(self.find_point_group()); # TODO self.set_full_point_group(). # Disabling symmetrize for now if orientation is fixed, as it is not; # correct. We may want to fix this in the future, but in some cases of; # finite-differences the set geometry is not totally symmetric anyway.; # Symmetrize the molecule to remove any noise; # TODO self.symmetrize(); #print ""after symmetry:""; #self.print_full(). self.lock_frame = True. # <<< Methods for Miscellaneous >>>. [docs] def clear(self):; """"""Zero it out.""""""; self.lock_frame = False; self.atoms = []; self.full_atoms = []. [docs] def nuclear_repulsion_energy(self):; """"""Computes nuclear repulsion energy. >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. """"""; e = 0.0; for at1 in range(self.natom()):; for at2 in range(self.natom()):; if at2 < at1:; Zi = self.Z(at1); Zj = self.Z(at2); dist = distance(self.xyz(at1), self.xyz(at2)); e += Zi * Zj / dist; return e. [docs] def nuclear_repulsion_energy_deriv1(self):; """"""Computes nuclear repulsion energy derivatives. >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. """"""; de = []; for i in range(self.natom()):; entry = [0.0, 0.0, 0.0]; for j in range(self.natom()):; if i != j:; temp = distance(self.xyz(i), self.xyz(j)) ** 3.0; Zi = self.Z(i); Zj = self.Z(j); entry[0] -= (self.x(i",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:44325,Energy Efficiency,energy,energy,44325,"frame; # TODO self.set_point_group(self.find_point_group()); # TODO self.set_full_point_group(). # Disabling symmetrize for now if orientation is fixed, as it is not; # correct. We may want to fix this in the future, but in some cases of; # finite-differences the set geometry is not totally symmetric anyway.; # Symmetrize the molecule to remove any noise; # TODO self.symmetrize(); #print ""after symmetry:""; #self.print_full(). self.lock_frame = True. # <<< Methods for Miscellaneous >>>. [docs] def clear(self):; """"""Zero it out.""""""; self.lock_frame = False; self.atoms = []; self.full_atoms = []. [docs] def nuclear_repulsion_energy(self):; """"""Computes nuclear repulsion energy. >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. """"""; e = 0.0; for at1 in range(self.natom()):; for at2 in range(self.natom()):; if at2 < at1:; Zi = self.Z(at1); Zj = self.Z(at2); dist = distance(self.xyz(at1), self.xyz(at2)); e += Zi * Zj / dist; return e. [docs] def nuclear_repulsion_energy_deriv1(self):; """"""Computes nuclear repulsion energy derivatives. >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. """"""; de = []; for i in range(self.natom()):; entry = [0.0, 0.0, 0.0]; for j in range(self.natom()):; if i != j:; temp = distance(self.xyz(i), self.xyz(j)) ** 3.0; Zi = self.Z(i); Zj = self.Z(j); entry[0] -= (self.x(i) - self.x(j)) * Zi * Zj / temp; entry[1] -= (self.y(i) - self.y(j)) * Zi * Zj / temp; entry[2] -= (self.z(i) - self.z(j)) * Zi * Zj / temp; de.append(entry); return de. [docs] def nuclear_repulsion_energy_deriv2(self):; """""" **NYI** Computes nuclear repulsion energy second derivatives""""""; raise FeatureNotImplemented('Molecule::nuclear_repulsion_energy_deriv2'",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:45193,Energy Efficiency,energy,energy,45193,"yz(at2)); e += Zi * Zj / dist; return e. [docs] def nuclear_repulsion_energy_deriv1(self):; """"""Computes nuclear repulsion energy derivatives. >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. """"""; de = []; for i in range(self.natom()):; entry = [0.0, 0.0, 0.0]; for j in range(self.natom()):; if i != j:; temp = distance(self.xyz(i), self.xyz(j)) ** 3.0; Zi = self.Z(i); Zj = self.Z(j); entry[0] -= (self.x(i) - self.x(j)) * Zi * Zj / temp; entry[1] -= (self.y(i) - self.y(j)) * Zi * Zj / temp; entry[2] -= (self.z(i) - self.z(j)) * Zi * Zj / temp; de.append(entry); return de. [docs] def nuclear_repulsion_energy_deriv2(self):; """""" **NYI** Computes nuclear repulsion energy second derivatives""""""; raise FeatureNotImplemented('Molecule::nuclear_repulsion_energy_deriv2') # FINAL. [docs] def set_basis_all_atoms(self, name, type=""BASIS""):; """""" **NYI** Assigns basis *name* to all atoms.""""""; raise FeatureNotImplemented('Molecule::set_basis_all_atoms') # FINAL. [docs] def set_basis_by_symbol(self, symbol, name, type=""BASIS""):; """""" **NYI** Assigns basis *name* to all *symbol* atoms.""""""; raise FeatureNotImplemented('Molecule::set_basis_by_symbol') # FINAL. [docs] def set_basis_by_number(self, number, name, type=""BASIS""):; """""" **NYI** Assigns basis *name* to atom number *number* (1-indexed, includes dummies).""""""; raise FeatureNotImplemented('Molecule::set_basis_by_number') # FINAL. [docs] def set_basis_by_label(self, label, name, type=""BASIS""):; """""" **NYI** Assigns basis *name* to all atoms with *label*.""""""; raise FeatureNotImplemented('Molecule::set_basis_by_label') # FINAL. [docs] def nfrozen_core(self, depth=""SMALL""):; """"""Number of frozen core for molecule given fre",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:33161,Integrability,message,message,33161,"), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""; integerNumber = re.compile(r""(-?\d+)"", re.IGNORECASE); if integerNumber.match(vstr):; # This is just a number, return it; return int(vstr) - 1; else:; # Look to see if this string is known; for i in range(self.nallatom()):; if self.full_atoms[i].label() == vstr:; return i; raise ValidationError(""Illegal value %s in atom specification on line %s.\n"" % (vstr, line)). [docs] def geometry(self):; """"""Returns the geometry in Bohr as a N X 3 array. >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. """"""; geom = []; for at in range(self.natom()):; geom.append([self.x(at), self.y(at), self.z(at)]); return geom. [d",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:42073,Integrability,rout,routine,42073,"multiplicity = self.PYmultiplicity; self.PYmolecular_charge = 0; self.PYmultiplicity = 1. for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Absent':; continue. if self.fragment_types[fr] == 'Real':; self.PYmolecular_charge += self.fragment_charges[fr]; self.PYmultiplicity += self.fragment_multiplicities[fr] - 1. for at in range(self.fragments[fr][0], self.fragments[fr][1] + 1):; self.full_atoms[at].compute(); self.full_atoms[at].set_ghosted(self.fragment_types[fr] == 'Ghost'); if self.full_atoms[at].symbol() != 'X':; self.atoms.append(self.full_atoms[at]). # TODO: This is a hack to ensure that set_multiplicity and set_molecular_charge; # work for single-fragment molecules.; if self.nfragments() < 2:; self.PYmolecular_charge = temp_charge; self.PYmultiplicity = temp_multiplicity. [docs] def update_geometry(self):; """"""Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule. >>> H2 = qcdb.Molecule(""H\\nH 1 0.74\\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. """"""; if self.nfragments() == 0:; raise ValidationError(""Molecule::update_geometry: There are no fragments in this molecule.""). # Idempotence condition; if self.lock_frame:; return. #print ""beginning update_geometry:""; #self.print_full(); if self.PYreinterpret_coordentries:; self.reinterpret_coordentries(); #print ""after reinterpret_coordentries:""; #self.print_full(). if self.PYmove_to_com:; self.move_to_com(); #print ""after com:""; #self.print_full(). # If the no_reorient command was given, don't reorient; if not self.PYfix_orientation:; # Now we need to rotate the geometry to its symmetry frame; # to align the axes correctly for the point group; # symmetry_frame looks for the highest point group so that we can align; # the molecule according to its actual symmetry, rath",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:2324,Modifiability,variab,variables,2324,"o.xyz'); """"""; FullPointGroupList = [""ATOM"", ""C_inf_v"", ""D_inf_h"", ""C1"", ""Cs"", ""Ci"", \; ""Cn"", ""Cnv"", ""Cnh"", ""Sn"", ""Dn"", ""Dnd"", ""Dnh"", ""Td"", ""Oh"", ""Ih""]. def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from string in psi4 format"""""". # <<< Basic Molecule Information >>>. # Molecule (or fragment) name; self.PYname = 'default'; # The molecular charge; self.PYmolecular_charge = 0; # Whether the charge was given by the user UNUSED; self.PYcharge_specified = False; # The multiplicity (defined as 2Ms + 1); self.PYmultiplicity = 1; # Whether the multiplicity was specified by the user UNUSED; self.PYmultiplicity_specified = False; # The units used to define the geometry; self.PYunits = 'Angstrom'; # The conversion factor to take input units to Bohr; self.input_units_to_au = 1.0 / psi_bohr2angstroms. # <<< Coordinates >>>. # Atom info vector (no knowledge of dummy atoms); self.atoms = []; # Atom info vector (includes dummy atoms); self.full_atoms = []; # A list of all variables known, whether they have been set or not.; self.all_variables = []; # A listing of the variables used to define the geometries; self.geometry_variables = {}. # <<< Fragmentation >>>. # The list of atom ranges defining each fragment from parent molecule; self.fragments = []; # A list describing how to handle each fragment; self.fragment_types = []; # The charge of each fragment; self.fragment_charges = []; # The multiplicity of each fragment; self.fragment_multiplicities = []. # <<< Frame >>>. # Move to center of mass or not?; self.PYmove_to_com = True; # Reorient or not? UNUSED; self.PYfix_orientation = False; # Reinterpret the coord entries or not (Default is true, except for findif); self.PYreinterpret_coordentries = True; # Nilpotence boolean (flagged upon first determination of symmetry frame,; # reset each time a substantiative change is made); self.lock_frame = False. # <<< Symmetry >>>. # Point group to use with this molecule UNUSED; self.pg = None; # Full point group UNUSED; s",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:2421,Modifiability,variab,variables,2421,", ""Cnv"", ""Cnh"", ""Sn"", ""Dn"", ""Dnd"", ""Dnh"", ""Td"", ""Oh"", ""Ih""]. def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from string in psi4 format"""""". # <<< Basic Molecule Information >>>. # Molecule (or fragment) name; self.PYname = 'default'; # The molecular charge; self.PYmolecular_charge = 0; # Whether the charge was given by the user UNUSED; self.PYcharge_specified = False; # The multiplicity (defined as 2Ms + 1); self.PYmultiplicity = 1; # Whether the multiplicity was specified by the user UNUSED; self.PYmultiplicity_specified = False; # The units used to define the geometry; self.PYunits = 'Angstrom'; # The conversion factor to take input units to Bohr; self.input_units_to_au = 1.0 / psi_bohr2angstroms. # <<< Coordinates >>>. # Atom info vector (no knowledge of dummy atoms); self.atoms = []; # Atom info vector (includes dummy atoms); self.full_atoms = []; # A list of all variables known, whether they have been set or not.; self.all_variables = []; # A listing of the variables used to define the geometries; self.geometry_variables = {}. # <<< Fragmentation >>>. # The list of atom ranges defining each fragment from parent molecule; self.fragments = []; # A list describing how to handle each fragment; self.fragment_types = []; # The charge of each fragment; self.fragment_charges = []; # The multiplicity of each fragment; self.fragment_multiplicities = []. # <<< Frame >>>. # Move to center of mass or not?; self.PYmove_to_com = True; # Reorient or not? UNUSED; self.PYfix_orientation = False; # Reinterpret the coord entries or not (Default is true, except for findif); self.PYreinterpret_coordentries = True; # Nilpotence boolean (flagged upon first determination of symmetry frame,; # reset each time a substantiative change is made); self.lock_frame = False. # <<< Symmetry >>>. # Point group to use with this molecule UNUSED; self.pg = None; # Full point group UNUSED; self.full_pg = 'PG_C1'; # n of the highest rotational axis Cn UNUSED; self.full_pg_n = 1; # S",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:13778,Modifiability,variab,variable,13778,"ubset.set_active_fragment(fr + 1) # the active fragment code subtracts 1; for fr in lghosts:; subset.set_ghost_fragment(fr + 1) # the ghost fragment code subtracts 1. subset.update_geometry(); return subset. # <<< Methods for Construction >>>. [docs] def create_molecule_from_string(self, text):; """"""Given a string *geom* of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. """"""; comment = re.compile(r'^\s*#'); blank = re.compile(r'^\s*$'); bohr = re.compile(r'^\s*units?[\s=]+(bohr|au|a.u.)\s*$', re.IGNORECASE); ang = re.compile(r'^\s*units?[\s=]+(ang|angstrom)\s*$', re.IGNORECASE); orient = re.compile(r'^\s*(no_reorient|noreorient)\s*$', re.IGNORECASE); com = re.compile(r'^\s*(no_com|nocom)\s*$', re.IGNORECASE); symmetry = re.compile(r'^\s*symmetry[\s=]+(\w+)\s*$', re.IGNORECASE); atom = re.compile(r'^\s*(@?[A-Z]{1,2})\s*', re.IGNORECASE); cgmp = re.compile(r'^\s*(-?\d+)\s+(\d+)\s*$'); frag = re.compile(r'^\s*--\s*$'); variable = re.compile(r'^\s*(\w+)\s*=\s*(-?\d+\.\d+|-?\d+\.|-?\.\d+|-?\d+|tda)\s*$', re.IGNORECASE); ghost = re.compile(r'@(.*)|Gh\((.*)\)', re.IGNORECASE). lines = re.split('\n', text); glines = []; ifrag = 0. for line in lines:. # handle comments; if comment.match(line) or blank.match(line):; pass. # handle units; elif ang.match(line):; self.set_units('Angstrom'); self.input_units_to_au = 1.0 / psi_bohr2angstroms; elif bohr.match(line):; self.set_units('Bohr'); self.input_units_to_au = 1.0. # handle no_reorient; elif orient.match(line):; self.fix_orientation(True). # handle no_com; elif com.match(line):; self.PYmove_to_com = False. # handle symmetry; elif symmetry.match(line):; tempSymm = symmetry.match(line).group(1); temp2 = re.sub('[23456789]', 'n', tempSymm).upper(); if temp2 in (item.upper() for item in self.FullPointGroupList):; self.PYsymmetry_from_input = tempSymm. # handle variables; elif variable.match(line):; vname = variable.match(line).group(1).upper(); vval = float",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:14675,Modifiability,variab,variables,14675,"e.IGNORECASE); cgmp = re.compile(r'^\s*(-?\d+)\s+(\d+)\s*$'); frag = re.compile(r'^\s*--\s*$'); variable = re.compile(r'^\s*(\w+)\s*=\s*(-?\d+\.\d+|-?\d+\.|-?\.\d+|-?\d+|tda)\s*$', re.IGNORECASE); ghost = re.compile(r'@(.*)|Gh\((.*)\)', re.IGNORECASE). lines = re.split('\n', text); glines = []; ifrag = 0. for line in lines:. # handle comments; if comment.match(line) or blank.match(line):; pass. # handle units; elif ang.match(line):; self.set_units('Angstrom'); self.input_units_to_au = 1.0 / psi_bohr2angstroms; elif bohr.match(line):; self.set_units('Bohr'); self.input_units_to_au = 1.0. # handle no_reorient; elif orient.match(line):; self.fix_orientation(True). # handle no_com; elif com.match(line):; self.PYmove_to_com = False. # handle symmetry; elif symmetry.match(line):; tempSymm = symmetry.match(line).group(1); temp2 = re.sub('[23456789]', 'n', tempSymm).upper(); if temp2 in (item.upper() for item in self.FullPointGroupList):; self.PYsymmetry_from_input = tempSymm. # handle variables; elif variable.match(line):; vname = variable.match(line).group(1).upper(); vval = float(variable.match(line).group(2)); tda = 360.0 * math.atan(math.sqrt(2)) / math.pi; self.geometry_variables['%s' % vname] = tda if vname == 'TDA' else vval. # handle charge and multiplicity; elif cgmp.match(line):; tempCharge = int(cgmp.match(line).group(1)); tempMultiplicity = int(cgmp.match(line).group(2)). if ifrag == 0:; self.PYcharge_specified = True; self.PYmultiplicity_specified = True; self.PYmolecular_charge = tempCharge; self.PYmultiplicity = tempMultiplicity; self.fragment_charges.append(tempCharge); self.fragment_multiplicities.append(tempMultiplicity). # handle fragment markers and default fragment cgmp; elif frag.match(line):; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1); ifrag += 1; glines.append(line). elif atom.match(line):; glines.append(line). # catch last default fragment cgmp; try:; self.fragment_charges[ifr",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:14691,Modifiability,variab,variable,14691,"e.IGNORECASE); cgmp = re.compile(r'^\s*(-?\d+)\s+(\d+)\s*$'); frag = re.compile(r'^\s*--\s*$'); variable = re.compile(r'^\s*(\w+)\s*=\s*(-?\d+\.\d+|-?\d+\.|-?\.\d+|-?\d+|tda)\s*$', re.IGNORECASE); ghost = re.compile(r'@(.*)|Gh\((.*)\)', re.IGNORECASE). lines = re.split('\n', text); glines = []; ifrag = 0. for line in lines:. # handle comments; if comment.match(line) or blank.match(line):; pass. # handle units; elif ang.match(line):; self.set_units('Angstrom'); self.input_units_to_au = 1.0 / psi_bohr2angstroms; elif bohr.match(line):; self.set_units('Bohr'); self.input_units_to_au = 1.0. # handle no_reorient; elif orient.match(line):; self.fix_orientation(True). # handle no_com; elif com.match(line):; self.PYmove_to_com = False. # handle symmetry; elif symmetry.match(line):; tempSymm = symmetry.match(line).group(1); temp2 = re.sub('[23456789]', 'n', tempSymm).upper(); if temp2 in (item.upper() for item in self.FullPointGroupList):; self.PYsymmetry_from_input = tempSymm. # handle variables; elif variable.match(line):; vname = variable.match(line).group(1).upper(); vval = float(variable.match(line).group(2)); tda = 360.0 * math.atan(math.sqrt(2)) / math.pi; self.geometry_variables['%s' % vname] = tda if vname == 'TDA' else vval. # handle charge and multiplicity; elif cgmp.match(line):; tempCharge = int(cgmp.match(line).group(1)); tempMultiplicity = int(cgmp.match(line).group(2)). if ifrag == 0:; self.PYcharge_specified = True; self.PYmultiplicity_specified = True; self.PYmolecular_charge = tempCharge; self.PYmultiplicity = tempMultiplicity; self.fragment_charges.append(tempCharge); self.fragment_multiplicities.append(tempMultiplicity). # handle fragment markers and default fragment cgmp; elif frag.match(line):; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1); ifrag += 1; glines.append(line). elif atom.match(line):; glines.append(line). # catch last default fragment cgmp; try:; self.fragment_charges[ifr",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:14722,Modifiability,variab,variable,14722,"r'^\s*(-?\d+)\s+(\d+)\s*$'); frag = re.compile(r'^\s*--\s*$'); variable = re.compile(r'^\s*(\w+)\s*=\s*(-?\d+\.\d+|-?\d+\.|-?\.\d+|-?\d+|tda)\s*$', re.IGNORECASE); ghost = re.compile(r'@(.*)|Gh\((.*)\)', re.IGNORECASE). lines = re.split('\n', text); glines = []; ifrag = 0. for line in lines:. # handle comments; if comment.match(line) or blank.match(line):; pass. # handle units; elif ang.match(line):; self.set_units('Angstrom'); self.input_units_to_au = 1.0 / psi_bohr2angstroms; elif bohr.match(line):; self.set_units('Bohr'); self.input_units_to_au = 1.0. # handle no_reorient; elif orient.match(line):; self.fix_orientation(True). # handle no_com; elif com.match(line):; self.PYmove_to_com = False. # handle symmetry; elif symmetry.match(line):; tempSymm = symmetry.match(line).group(1); temp2 = re.sub('[23456789]', 'n', tempSymm).upper(); if temp2 in (item.upper() for item in self.FullPointGroupList):; self.PYsymmetry_from_input = tempSymm. # handle variables; elif variable.match(line):; vname = variable.match(line).group(1).upper(); vval = float(variable.match(line).group(2)); tda = 360.0 * math.atan(math.sqrt(2)) / math.pi; self.geometry_variables['%s' % vname] = tda if vname == 'TDA' else vval. # handle charge and multiplicity; elif cgmp.match(line):; tempCharge = int(cgmp.match(line).group(1)); tempMultiplicity = int(cgmp.match(line).group(2)). if ifrag == 0:; self.PYcharge_specified = True; self.PYmultiplicity_specified = True; self.PYmolecular_charge = tempCharge; self.PYmultiplicity = tempMultiplicity; self.fragment_charges.append(tempCharge); self.fragment_multiplicities.append(tempMultiplicity). # handle fragment markers and default fragment cgmp; elif frag.match(line):; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1); ifrag += 1; glines.append(line). elif atom.match(line):; glines.append(line). # catch last default fragment cgmp; try:; self.fragment_charges[ifrag]; except:; self.fragment_charg",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:14774,Modifiability,variab,variable,14774,"*--\s*$'); variable = re.compile(r'^\s*(\w+)\s*=\s*(-?\d+\.\d+|-?\d+\.|-?\.\d+|-?\d+|tda)\s*$', re.IGNORECASE); ghost = re.compile(r'@(.*)|Gh\((.*)\)', re.IGNORECASE). lines = re.split('\n', text); glines = []; ifrag = 0. for line in lines:. # handle comments; if comment.match(line) or blank.match(line):; pass. # handle units; elif ang.match(line):; self.set_units('Angstrom'); self.input_units_to_au = 1.0 / psi_bohr2angstroms; elif bohr.match(line):; self.set_units('Bohr'); self.input_units_to_au = 1.0. # handle no_reorient; elif orient.match(line):; self.fix_orientation(True). # handle no_com; elif com.match(line):; self.PYmove_to_com = False. # handle symmetry; elif symmetry.match(line):; tempSymm = symmetry.match(line).group(1); temp2 = re.sub('[23456789]', 'n', tempSymm).upper(); if temp2 in (item.upper() for item in self.FullPointGroupList):; self.PYsymmetry_from_input = tempSymm. # handle variables; elif variable.match(line):; vname = variable.match(line).group(1).upper(); vval = float(variable.match(line).group(2)); tda = 360.0 * math.atan(math.sqrt(2)) / math.pi; self.geometry_variables['%s' % vname] = tda if vname == 'TDA' else vval. # handle charge and multiplicity; elif cgmp.match(line):; tempCharge = int(cgmp.match(line).group(1)); tempMultiplicity = int(cgmp.match(line).group(2)). if ifrag == 0:; self.PYcharge_specified = True; self.PYmultiplicity_specified = True; self.PYmolecular_charge = tempCharge; self.PYmultiplicity = tempMultiplicity; self.fragment_charges.append(tempCharge); self.fragment_multiplicities.append(tempMultiplicity). # handle fragment markers and default fragment cgmp; elif frag.match(line):; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1); ifrag += 1; glines.append(line). elif atom.match(line):; glines.append(line). # catch last default fragment cgmp; try:; self.fragment_charges[ifrag]; except:; self.fragment_charges.append(0); self.fragment_multiplicities.append(1)",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:27524,Modifiability,variab,variable,27524,"f):; """"""Print full atom list. Same as :py:func:`print_out` only displays dummy atoms. """"""; text = """"; if self.natom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.nallatom()):; geom = self.full_atoms[i].compute(); text += """""" %8s%4s """""" % (self.fsymbol(i), """" if self.fZ(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if self.units() == 'Angstrom' else ""bohr""); for i in range(self.nallatom()):; text += self.full_atoms[i].print_in_input_format(); text += ""\n""; if len(self.geometry_variables):; for vb, val in self.geometry_variables.items():; text += """"""\t%-10s=%16.10f\n"""""" % (vb, val); text += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:27639,Modifiability,variab,variables,27639,"tom():; if self.pg:; text += """""" Molecular point group: %s\n"""""" % (self.pg.symbol()); # if self.full_pg: TODO symmetry; # text += """""" Full point group: %s\n\n"""""" % (self.full_point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.nallatom()):; geom = self.full_atoms[i].compute(); text += """""" %8s%4s """""" % (self.fsymbol(i), """" if self.fZ(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if self.units() == 'Angstrom' else ""bohr""); for i in range(self.nallatom()):; text += self.full_atoms[i].print_in_input_format(); text += ""\n""; if len(self.geometry_variables):; for vb, val in self.geometry_variables.items():; text += """"""\t%-10s=%16.10f\n"""""" % (vb, val); text += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(),",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:27813,Modifiability,variab,variables,27813,"point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.nallatom()):; geom = self.full_atoms[i].compute(); text += """""" %8s%4s """""" % (self.fsymbol(i), """" if self.fZ(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if self.units() == 'Angstrom' else ""bohr""); for i in range(self.nallatom()):; text += self.full_atoms[i].print_in_input_format(); text += ""\n""; if len(self.geometry_variables):; for vb, val in self.geometry_variables.items():; text += """"""\t%-10s=%16.10f\n"""""" % (vb, val); text += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(), self.input_units_to_au); text += """""" DOcom? %s\t\tDONTreorient? %s\n"""""" % (self.PYmove_to_com, self.orientation_fixed()); text += """""" reinterpret? %s\t\tlock_frame? %s\n"""""" % ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:29184,Modifiability,variab,variable,29184,"t += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(), self.input_units_to_au); text += """""" DOcom? %s\t\tDONTreorient? %s\n"""""" % (self.PYmove_to_com, self.orientation_fixed()); text += """""" reinterpret? %s\t\tlock_frame? %s\n"""""" % (self.PYreinterpret_coordentries, self.lock_frame); text += """""" input symm %s\n"""""" % (self.symmetry_from_input()); text += """""" Nfragments %d\t\tNactive %d\n"""""" % (self.nfragments(), self.nactive_fragments()); print text. # <<< Involved Methods for Coordinates >>>. [docs] def get_coord_value(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:29409,Modifiability,variab,variable,29409," self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(), self.input_units_to_au); text += """""" DOcom? %s\t\tDONTreorient? %s\n"""""" % (self.PYmove_to_com, self.orientation_fixed()); text += """""" reinterpret? %s\t\tlock_frame? %s\n"""""" % (self.PYreinterpret_coordentries, self.lock_frame); text += """""" input symm %s\n"""""" % (self.symmetry_from_input()); text += """""" Nfragments %d\t\tNactive %d\n"""""" % (self.nfragments(), self.nactive_fragments()); print text. # <<< Involved Methods for Coordinates >>>. [docs] def get_coord_value(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:29569,Modifiability,variab,variable,29569,"n %f\n"""""" % (self.units(), self.input_units_to_au); text += """""" DOcom? %s\t\tDONTreorient? %s\n"""""" % (self.PYmove_to_com, self.orientation_fixed()); text += """""" reinterpret? %s\t\tlock_frame? %s\n"""""" % (self.PYreinterpret_coordentries, self.lock_frame); text += """""" input symm %s\n"""""" % (self.symmetry_from_input()); text += """""" Nfragments %d\t\tNactive %d\n"""""" % (self.nfragments(), self.nactive_fragments()); print text. # <<< Involved Methods for Coordinates >>>. [docs] def get_coord_value(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationErr",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:29770,Modifiability,variab,variable,29770,"? %s\t\tlock_frame? %s\n"""""" % (self.PYreinterpret_coordentries, self.lock_frame); text += """""" input symm %s\n"""""" % (self.symmetry_from_input()); text += """""" Nfragments %d\t\tNactive %d\n"""""" % (self.nfragments(), self.nactive_fragments()); print text. # <<< Involved Methods for Coordinates >>>. [docs] def get_coord_value(self, vstr):; """"""Attempts to interpret a string as a double, if not it assumes it's a variable. """"""; vstr = vstr.upper(); realNumber = re.compile(r""""""[-+]?(?:(?:\d*\.\d+)|(?:\d+\.?))(?:[Ee][+-]?\d+)?"""""", re.VERBOSE). # handle number values; if realNumber.match(vstr):; return NumberValue(float(vstr)). # handle variable values, whether defined or not; else:; if vstr == 'TDA':; self.geometry_variables[vstr] = 360.0 * math.atan(math.sqrt(2)) / math.pi. # handle negative variable values (ignore leading '-' and return minus the value); if vstr[0] == '-':; self.all_variables.append(vstr[1:]); return VariableValue(vstr[1:], self.geometry_variables, True). # handle normal variable values; else:; self.all_variables.append(vstr); return VariableValue(vstr, self.geometry_variables). [docs] def add_atom(self, Z, x, y, z, label="""", mass=0.0, charge=0.0, lineno=-1):; """"""Add an atom to the molecule; *Z* atomic number; *x* cartesian coordinate; *y* cartesian coordinate; *z* cartesian coordinate; *symb* atomic symbol to use; *mass* mass to use if non standard; *charge* charge to use if non standard; *lineno* line number when taken from a string. """"""; self.lock_frame = False. if self.atom_at_position([x, y, z]) == -1:; # Dummies go to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:31323,Modifiability,variab,variable,31323,"to full_atoms, ghosts need to go to both.; self.full_atoms.append(CartesianEntry(self.nallatom(), Z, charge, mass, label, label, \; NumberValue(x), NumberValue(y), NumberValue(z))); if label.upper() != 'X':; self.atoms.append(self.full_atoms[-1]); else:; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __s",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:31567,Modifiability,variab,variable,31567,"; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""). [docs] def atom_entry(self, atom):; """"""Returns the CoordEntry for an atom.""""""; return self.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] =",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:31792,Modifiability,variab,variable,31792,"f.atoms[atom]. [docs] def atom_at_position(self, b, tol=0.05):; """"""Tests to see of an atom is at the passed position *b* in Bohr with a tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable va",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:31904,Modifiability,variab,variable,31904," tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__ge",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:31954,Modifiability,variab,variables,31954," tolerance *tol*. >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. """"""; if len(b) != 3:; raise ValidationError('ERROR: atom_at_position() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__ge",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:32118,Modifiability,variab,variable,32118,"ion() requires as argument a vector of length 3\n'). for at in range(self.natom()):; a = self.xyz(at); if distance(b, a) < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier i",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:32423,Modifiability,variab,variable,32423,"se if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""; integerNumber = re.compile(r""(-?\d+)"", re.IGNORECASE); if integerNumber.match(vstr):; # This is just a number, return it; return int(vstr) - 1; else",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:32751,Modifiability,variab,variable,32751,"ometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""; integerNumber = re.compile(r""(-?\d+)"", re.IGNORECASE); if integerNumber.match(vstr):; # This is just a number, return it; return int(vstr) - 1; else:; # Look to see if this string is known; for i in range(self.nallatom()):; if self.full_atoms[i].label() == vstr:; return i; raise ValidationError(""Illegal value %s in atom specification on line %s.\n"" % (vstr, line)). [docs] def geometry(self):; """"""Returns the geometry in Bohr as a N X 3 array. >>> print H2OH2O.geome",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:42009,Modifiability,variab,variables,42009,"; self.atoms = []; for item in self.full_atoms:; item.invalidate(). temp_charge = self.PYmolecular_charge; temp_multiplicity = self.PYmultiplicity; self.PYmolecular_charge = 0; self.PYmultiplicity = 1. for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Absent':; continue. if self.fragment_types[fr] == 'Real':; self.PYmolecular_charge += self.fragment_charges[fr]; self.PYmultiplicity += self.fragment_multiplicities[fr] - 1. for at in range(self.fragments[fr][0], self.fragments[fr][1] + 1):; self.full_atoms[at].compute(); self.full_atoms[at].set_ghosted(self.fragment_types[fr] == 'Ghost'); if self.full_atoms[at].symbol() != 'X':; self.atoms.append(self.full_atoms[at]). # TODO: This is a hack to ensure that set_multiplicity and set_molecular_charge; # work for single-fragment molecules.; if self.nfragments() < 2:; self.PYmolecular_charge = temp_charge; self.PYmultiplicity = temp_multiplicity. [docs] def update_geometry(self):; """"""Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule. >>> H2 = qcdb.Molecule(""H\\nH 1 0.74\\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. """"""; if self.nfragments() == 0:; raise ValidationError(""Molecule::update_geometry: There are no fragments in this molecule.""). # Idempotence condition; if self.lock_frame:; return. #print ""beginning update_geometry:""; #self.print_full(); if self.PYreinterpret_coordentries:; self.reinterpret_coordentries(); #print ""after reinterpret_coordentries:""; #self.print_full(). if self.PYmove_to_com:; self.move_to_com(); #print ""after com:""; #self.print_full(). # If the no_reorient command was given, don't reorient; if not self.PYfix_orientation:; # Now we need to rotate the geometry to its symmetry frame; # to align the axes correctly for the point group; # symmetry_fra",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:27790,Performance,optimiz,optimized,27790,"point_group()) TODO symmetry; text += """""" Geometry (in %s), charge = %d, multiplicity = %d:\n\n"""""" % \; (self.units(), self.molecular_charge(), self.multiplicity()); text += """""" Center X Y Z \n""""""; text += """""" ------------ ----------------- ----------------- -----------------\n"""""". for i in range(self.nallatom()):; geom = self.full_atoms[i].compute(); text += """""" %8s%4s """""" % (self.fsymbol(i), """" if self.fZ(i) else ""(Gh)""); for j in range(3):; text += """""" %17.12f"""""" % (geom[j]); text += ""\n""; text += ""\n""; else:; text += "" No atoms in this molecule.\n""; print text; # TODO outfile. [docs] def print_in_input_format(self):; """"""Print the molecule in the same format that the user provided.; Only returns if Zmat or variable input. """"""; text = """"; if self.nallatom():; # It's only worth echoing these if the user either input some variables,; # or they used a Z matrix for input; if self.full_atoms[0].type() == 'ZMatrixCoord' or len(self.geometry_variables):; text += """"""\n\tFinal optimized geometry and variables (in %s):\n\n"""""" % \; (""Angstrom"" if self.units() == 'Angstrom' else ""bohr""); for i in range(self.nallatom()):; text += self.full_atoms[i].print_in_input_format(); text += ""\n""; if len(self.geometry_variables):; for vb, val in self.geometry_variables.items():; text += """"""\t%-10s=%16.10f\n"""""" % (vb, val); text += ""\n""; print text; # TODO outfile. [docs] def everything(self):; """"""Quick print of class data""""""; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" Natom %d\t\tNallatom %d\n"""""" % (self.natom(), self.nallatom()); text += """""" charge %d\t\tspecified? %s\n"""""" % (self.molecular_charge(), self.charge_specified()); text += """""" multiplicity %d\t\tspecified? %s\n"""""" % (self.multiplicity(), self.multiplicity_specified()); text += """""" units %s\tconversion %f\n"""""" % (self.units(), self.input_units_to_au); text += """""" DOcom? %s\t\tDONTreorient? %s\n"""""" % (self.PYmove_to_com, self.orientation_fixed()); text += """""" reinterpret? %s\t\tlock_frame? %s\n"""""" % ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:20805,Safety,detect,detected,20805,"self.full_atoms.append(ZMatrixEntry(iatom, zVal, charge, \; el2masses[atomSym], atomSym, atomLabel, \; self.full_atoms[rTo], rval, \; self.full_atoms[aTo], aval, \; self.full_atoms[dTo], dval)). else:; raise ValidationError('Illegal geometry specification line : %s. \; You should provide either Z-Matrix or Cartesian input' % (line)). iatom += 1. self.fragments.append([tempfrag[0], tempfrag[-1]]); self.fragment_types.append('Real'). [docs] def init_with_checkpoint(self, chkpt):; """""" **NYI** Pull information from the *chkpt* object passed; (method name in libmints is init_with_chkpt). """"""; raise FeatureNotImplemented('Molecule::init_with_checkpoint') # FINAL. [docs] def init_with_io(self, psio):; """""" **NYI** Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). """"""; raise FeatureNotImplemented('Molecule::init_with_io') # FINAL. @classmethod; [docs] def init_with_xyz(cls, xyzfilename):; """"""Pull information from an XYZ file. No fragment or chg/mult info detected. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""; instance = cls(); instance.lock_frame = False. try:; infile = open(xyzfilename, 'r'); except IOError:; raise ValidationError(""""""Molecule::init_with_xyz: given filename '%s' does not exist."""""" % (xyzfilename)); if os.stat(xyzfilename).st_size == 0:; raise ValidationError(""""""Molecule::init_with_xyz: given filename '%s' is blank."""""" % (xyzfilename)); text = infile.readlines(). xyz1 = re.compile(r""^\s*(\d+)\s*(bohr|au)?\s*$"", re.IGNORECASE); xyzN = re.compile(r""(?:\s*)([A-Z](?:[a-z])?)(?:\s+)(-?\d+\.\d+)(?:\s+)(-?\d+\.\d+)(?:\s+)(-?\d+\.\d+)(?:\s*)"", re.IGNORECASE). # Try to match the first line; if xyz1.match(text[0]):; fileNatom = int(xyz1.match(text[0]).group(1)); if xyz1.match(text[0]).group(2) == None:; fileUnits = 'Angstrom'; else:; fileUnits = 'Bohr'; else:; raise ValidationError(""Molecule::init_with_xyz: Malformed first line\n%s"" % (text[0])). # Skip the second line. # Next line begins the useful information",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:32284,Safety,safe,safe,32284,") < tol:; return at; return -1. [docs] def is_variable(self, vstr):; """"""Checks to see if the variable str is in the list, returns; true if it is, and returns false if not. >>> H2OH2O.is_variable('R'); False. """"""; return True if vstr.upper() in self.all_variables else False. [docs] def get_variable(self, vstr):; """"""Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. """"""; vstr = vstr.upper(); try:; return self.geometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based co",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:32693,Security,access,accessing,32693,"ometry_variables[vstr]; except KeyError:; raise ValidationError('ERROR: Geometry variable %s not known.\n' % (vstr)). [docs] def set_variable(self, vstr, val):; """"""Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). """"""; self.__dict__['lock_frame'] = False; self.__dict__['geometry_variables'][vstr.upper()] = val; print ""Setting geometry variable %s to %f"" % (vstr.upper(), val); try:; self.update_geometry(); except IncompleteAtomError:; # Update geometry might have added some atoms, delete them to be safe.; self.atoms = []; # TODO outfile. def __setattr__(self, name, value):; """"""Function to overload setting attributes to allow geometry; variable assigment as if member data. """"""; try:; if name.upper() in self.__dict__['all_variables']:; self.set_variable(name, value); else:; self.__dict__[name] = value; except KeyError:; self.__dict__[name] = value. def __getattr__(self, name):; """"""Function to overload accessing attribute contents to allow; retrivial geometry variable values as if member data. """"""; if not name in self.__dict__:; if object.__getattribute__(self, 'is_variable')(name):; return object.__getattribute__(self, 'get_variable')(name); else:; raise AttributeError; else:; return self.__dict__[name]. [docs] def get_anchor_atom(self, vstr, line):; """"""Attempts to interpret a string *vstr* as an atom specifier in; a zmatrix. Takes the current *line* for error message printing.; Returns the atom number (adjusted to zero-based counting). """"""; integerNumber = re.compile(r""(-?\d+)"", re.IGNORECASE); if integerNumber.match(vstr):; # This is just a number, return it; return int(vstr) - 1; else:; # Look to see if this string is known; for i in range(self.nallatom()):; if self.full_atoms[i].label() == vstr:; return i; raise ValidationError(""Illegal value %s in atom specification on line %s.\n"" % (vstr, line)). [docs] def geometry(self):; """"""Returns the geometry in Bohr as a N X 3 array. >>> print H2OH2O.geome",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:42039,Usability,clear,cleared,42039,"multiplicity = self.PYmultiplicity; self.PYmolecular_charge = 0; self.PYmultiplicity = 1. for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Absent':; continue. if self.fragment_types[fr] == 'Real':; self.PYmolecular_charge += self.fragment_charges[fr]; self.PYmultiplicity += self.fragment_multiplicities[fr] - 1. for at in range(self.fragments[fr][0], self.fragments[fr][1] + 1):; self.full_atoms[at].compute(); self.full_atoms[at].set_ghosted(self.fragment_types[fr] == 'Ghost'); if self.full_atoms[at].symbol() != 'X':; self.atoms.append(self.full_atoms[at]). # TODO: This is a hack to ensure that set_multiplicity and set_molecular_charge; # work for single-fragment molecules.; if self.nfragments() < 2:; self.PYmolecular_charge = temp_charge; self.PYmultiplicity = temp_multiplicity. [docs] def update_geometry(self):; """"""Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule. >>> H2 = qcdb.Molecule(""H\\nH 1 0.74\\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. """"""; if self.nfragments() == 0:; raise ValidationError(""Molecule::update_geometry: There are no fragments in this molecule.""). # Idempotence condition; if self.lock_frame:; return. #print ""beginning update_geometry:""; #self.print_full(); if self.PYreinterpret_coordentries:; self.reinterpret_coordentries(); #print ""after reinterpret_coordentries:""; #self.print_full(). if self.PYmove_to_com:; self.move_to_com(); #print ""after com:""; #self.print_full(). # If the no_reorient command was given, don't reorient; if not self.PYfix_orientation:; # Now we need to rotate the geometry to its symmetry frame; # to align the axes correctly for the point group; # symmetry_frame looks for the highest point group so that we can align; # the molecule according to its actual symmetry, rath",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html:43795,Usability,clear,clear,43795,"ntation:; # Now we need to rotate the geometry to its symmetry frame; # to align the axes correctly for the point group; # symmetry_frame looks for the highest point group so that we can align; # the molecule according to its actual symmetry, rather than the symmetry; # the the user might have provided.; frame = self.symmetry_frame(); self.rotate_full(frame); #print ""after rotate:""; #self.print_full(). # Recompute point group of the molecule, so the symmetry info is updated to the new frame; # TODO self.set_point_group(self.find_point_group()); # TODO self.set_full_point_group(). # Disabling symmetrize for now if orientation is fixed, as it is not; # correct. We may want to fix this in the future, but in some cases of; # finite-differences the set geometry is not totally symmetric anyway.; # Symmetrize the molecule to remove any noise; # TODO self.symmetrize(); #print ""after symmetry:""; #self.print_full(). self.lock_frame = True. # <<< Methods for Miscellaneous >>>. [docs] def clear(self):; """"""Zero it out.""""""; self.lock_frame = False; self.atoms = []; self.full_atoms = []. [docs] def nuclear_repulsion_energy(self):; """"""Computes nuclear repulsion energy. >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. """"""; e = 0.0; for at1 in range(self.natom()):; for at2 in range(self.natom()):; if at2 < at1:; Zi = self.Z(at1); Zj = self.Z(at2); dist = distance(self.xyz(at1), self.xyz(at2)); e += Zi * Zj / dist; return e. [docs] def nuclear_repulsion_energy_deriv1(self):; """"""Computes nuclear repulsion energy derivatives. >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. """"""; de = []; for i in range(self.natom()):; entry = [0.0, 0.0, 0.0]; for j in range(se",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/libmintsmolecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:1122,Availability,avail,available,1122,"a4] » ; Module code ». Source code for qcdb.molecule; #import os; #import re; #import math; #import copy; #from periodictable import *; #from physconst import *; #from vecutil import *; #from exceptions import *; #from coordentry import *; from libmintsmolecule import *. [docs]class Molecule(LibmintsMolecule):; """"""Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. """""". def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from LibmintsMolecule""""""; LibmintsMolecule.__init__(self, psi4molstr). # The comment line; self.tagline = """". def __str__(self):; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" => %s <=\n\n"""""" % (self.tagline); text += self.save_string_for_psi4(); return text. @classmethod; [docs] def init_with_xyz(cls, xyzfilename, no_com=False, no_reorient=False):; """"""Pull information from an XYZ file. No fragment info detected.; Charge, multiplicity, tagline pulled from second line if available. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""; instance = cls(); instance.lock_frame = False; instance.PYmove_to_com = not no_com; instance.PYfix_orientation = no_reorient. try:; infile = open(xyzfilename, 'r'); except IOError:; raise ValidationError(""""""Molecule::init_with_xyz: given filename '%s' does not exist."""""" % (xyzfilename)); if os.stat(xyzfilename).st_size == 0:; raise ValidationError(""""""Molecule::init_with_xyz: given filename '%s' is blank."""""" % (xyzfilename)); text = infile.readlines(). xyz1 = re.compile(r""^\s*(\d+)\s*(bohr|au)?\s*$"", re.IGNORECASE); xyz2 = re.compile(r'^\s*(-?\d+)\s+(\d+)\s+(.*)\s*$'); xyzN = re.compile(r""(?:\s*)([A-Z](?:[a-z])?)(?:\s+)(-?\d+\.\d+)(?:\s+)(-?\d+\.\d+)(?:\s+)(-?\d+\.\d+)(?:\s*)"", re.IGNORECASE). # Try to match the first line; if xyz1.match(text[0]):; fileNatom = int(xyz1.match(text[0]).group(1)); if xyz1.match(text[0]).group(2) == None:; fileUnits = 'Angstrom'; else:; fileUnits = 'Bohr'; else:; raise",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:6251,Availability,fault,faulty,6251,"return self. flist = self.BFS(). # form new molecule through a string since self may contain; # dummies or zmatrix specs that mayn't be valid with atom shuffling; new_geom = '\n'. if self.PYcharge_specified or self.PYmultiplicity_specified:; new_geom = """"""\n %d %d\n"""""" % (self.molecular_charge(), self.multiplicity()). for fr in range(len(flist)):; new_geom += """" if fr == 0 else "" --\n""; for at in flist[fr]:; geom = self.atoms[at].compute(); new_geom += """"""%-4s """""" % (("""" if self.Z(at) else ""@"") + self.symbol(at)); for j in range(3):; new_geom += """""" %17.12f"""""" % (geom[j]); new_geom += ""\n""; new_geom += "" units %s\n"" % (self.units()); if not self.PYmove_to_com:; new_geom += "" no_com\n""; if self.orientation_fixed():; new_geom += "" no_reorient\n"". subset = Molecule(new_geom); subset.update_geometry(); return subset. [docs] def BFS(self):; """"""Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment;",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:8068,Deployability,update,updated,8068,"BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment; for u in Queue: # find all (still white) nearest neighbors to vertex u; for i in White:; dist = distance(self.xyz(i), self.xyz(u)) * psi_bohr2angstroms; if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:5078,Energy Efficiency,charge,charge,5078,"; @X 0.00000000 0.00000000 0.00000000; O 1.35062500 0.11146900 0.00000000; H 1.68039800 -0.37374100 -0.75856100; H 1.68039800 -0.37374100 0.75856100; units Angstrom. """"""; Nfr = 0; text = """"; for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Absent':; continue; if Nfr != 0:; text += """"""--\n""""""; Nfr += 1; text += """"""%d %d\n"""""" % (self.fragment_charges[fr], self.fragment_multiplicities[fr]); for at in range(self.fragments[fr][0], self.fragments[fr][1] + 1):; geom = self.full_atoms[at].compute(); text += """"""%-3s %16.8f %16.8f %16.8f\n"""""" % \; (("""" if self.fZ(at) else ""@"") + self.full_atoms[at].symbol(), \; geom[0], geom[1], geom[2]); text += """"""units %s\n"""""" % (self.units().lower()); return text. [docs] def format_string_for_qchem(self):; pass. [docs] def auto_fragments(self):; """"""Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. """"""; if self.nfragments() != 1:; print 'Molecule already fragmented so no further action by auto_fragments().'; return self. flist = self.BFS(). # form new molecule through a string since self may contain; # dummies or zmatrix specs that mayn't be valid with atom shuffling; new_geom = '\n'. if self.PYcharge_specified or self.PYmultiplicity_specified:; new_geom = """"""\n %d %d\n"""""" % (self.molecular_charge(), self.multiplicity()). for fr in range(len(flist)):; new_geom += """" if fr == 0 else "" --\n""; for at in flist[fr]:; geom = self.atoms[at].compute(); new_geom += """"""%-4s """""" % (("""" if self.Z(at) else ""@"") + self.symbol(at)); for j in range(3):; new_geom += """""" %17.12f"""""" % (geom[j]); new_geom += ""\n""; new_geom += "" units %s\n"" % (self.units()); if not self.PYmove_to_com:; new_geom += "" no_com\n""; if self.orientation_fixed():; new_geom += "" no_reorient\n"". subset = Molecule(new_geom); subset.update_geometry(); return subset. [docs] def BFS(self):; """"""Pe",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:5021,Modifiability,variab,variable,5021,"H -1.93425900 0.76250300 0.00000000; H -0.59967700 0.04071200 0.00000000; --; 0 1; @X 0.00000000 0.00000000 0.00000000; O 1.35062500 0.11146900 0.00000000; H 1.68039800 -0.37374100 -0.75856100; H 1.68039800 -0.37374100 0.75856100; units Angstrom. """"""; Nfr = 0; text = """"; for fr in range(self.nfragments()):; if self.fragment_types[fr] == 'Absent':; continue; if Nfr != 0:; text += """"""--\n""""""; Nfr += 1; text += """"""%d %d\n"""""" % (self.fragment_charges[fr], self.fragment_multiplicities[fr]); for at in range(self.fragments[fr][0], self.fragments[fr][1] + 1):; geom = self.full_atoms[at].compute(); text += """"""%-3s %16.8f %16.8f %16.8f\n"""""" % \; (("""" if self.fZ(at) else ""@"") + self.full_atoms[at].symbol(), \; geom[0], geom[1], geom[2]); text += """"""units %s\n"""""" % (self.units().lower()); return text. [docs] def format_string_for_qchem(self):; pass. [docs] def auto_fragments(self):; """"""Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. """"""; if self.nfragments() != 1:; print 'Molecule already fragmented so no further action by auto_fragments().'; return self. flist = self.BFS(). # form new molecule through a string since self may contain; # dummies or zmatrix specs that mayn't be valid with atom shuffling; new_geom = '\n'. if self.PYcharge_specified or self.PYmultiplicity_specified:; new_geom = """"""\n %d %d\n"""""" % (self.molecular_charge(), self.multiplicity()). for fr in range(len(flist)):; new_geom += """" if fr == 0 else "" --\n""; for at in flist[fr]:; geom = self.atoms[at].compute(); new_geom += """"""%-4s """""" % (("""" if self.Z(at) else ""@"") + self.symbol(at)); for j in range(3):; new_geom += """""" %17.12f"""""" % (geom[j]); new_geom += ""\n""; new_geom += "" units %s\n"" % (self.units()); if not self.PYmove_to_com:; new_geom += "" no_com\n""; if self.orientation_fixed():; new_geom += "" no_reorient\n"". subset = Molecule",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:7514,Performance,queue,queue,7514,"BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment; for u in Queue: # find all (still white) nearest neighbors to vertex u; for i in White:; dist = distance(self.xyz(i), self.xyz(u)) * psi_bohr2angstroms; if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html:1054,Safety,detect,detected,1054,"vigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.molecule; #import os; #import re; #import math; #import copy; #from periodictable import *; #from physconst import *; #from vecutil import *; #from exceptions import *; #from coordentry import *; from libmintsmolecule import *. [docs]class Molecule(LibmintsMolecule):; """"""Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. """""". def __init__(self, psi4molstr=None):; """"""Initialize Molecule object from LibmintsMolecule""""""; LibmintsMolecule.__init__(self, psi4molstr). # The comment line; self.tagline = """". def __str__(self):; text = """""" ==> qcdb Molecule %s <==\n\n"""""" % (self.name()); text += """""" => %s <=\n\n"""""" % (self.tagline); text += self.save_string_for_psi4(); return text. @classmethod; [docs] def init_with_xyz(cls, xyzfilename, no_com=False, no_reorient=False):; """"""Pull information from an XYZ file. No fragment info detected.; Charge, multiplicity, tagline pulled from second line if available. >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). """"""; instance = cls(); instance.lock_frame = False; instance.PYmove_to_com = not no_com; instance.PYfix_orientation = no_reorient. try:; infile = open(xyzfilename, 'r'); except IOError:; raise ValidationError(""""""Molecule::init_with_xyz: given filename '%s' does not exist."""""" % (xyzfilename)); if os.stat(xyzfilename).st_size == 0:; raise ValidationError(""""""Molecule::init_with_xyz: given filename '%s' is blank."""""" % (xyzfilename)); text = infile.readlines(). xyz1 = re.compile(r""^\s*(\d+)\s*(bohr|au)?\s*$"", re.IGNORECASE); xyz2 = re.compile(r'^\s*(-?\d+)\s+(\d+)\s+(.*)\s*$'); xyzN = re.compile(r""(?:\s*)([A-Z](?:[a-z])?)(?:\s+)(-?\d+\.\d+)(?:\s+)(-?\d+\.\d+)(?:\s+)(-?\d+\.\d+)(?:\s*)"", re.IGNORECASE). # Try to match the first line; if xyz1.match(text[0]):; fileNatom = int(xyz1.match(text[0]).group(1)); if xyz1.match(text[0]).group(2) == None:; fileUnits = 'An",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/molecule.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html:760,Availability,failure,failure,760,"﻿. qcdb.psiutil — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.psiutil; r""""""Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. """"""; import sys; import math; import re; from vecutil import *. def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if abs(expected - computed) > 10 ** (-digits):; print(""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits)); sys.exit(1); if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [do",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/psiutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html:1458,Availability,failure,failure,1458,"('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if abs(expected - computed) > 10 ** (-digits):; print(""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits)); sys.exit(1); if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [docs]def query_yes_no(question, default=True):; """"""Ask a yes/no question via raw_input() and return their answer. *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user). The return value is one of True or False. """""". yes = re.compile(r'^(y|yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(n|no|false|off|0)', re.IGNORECASE). ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/psiutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html:3150,Deployability,update,updated,3150,"cs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [docs]def query_yes_no(question, default=True):; """"""Ask a yes/no question via raw_input() and return their answer. *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user). The return value is one of True or False. """""". yes = re.compile(r'^(y|yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(n|no|false|off|0)', re.IGNORECASE). if default == None:; prompt = "" [y/n] ""; elif default == True:; prompt = "" [Y/n] ""; elif default == False:; prompt = "" [y/N] ""; else:; raise ValueError(""invalid default answer: '%s'"" % default). while True:; sys.stdout.write(question + prompt); choice = raw_input().strip().lower(); if default is not None and choice == """":; return default; elif yes.match(choice):; return True; elif no.match(choice):; return False; else:; sys.stdout.write("" Please respond with 'yes' or 'no'.\n""). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/psiutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html:796,Testability,test,test,796,"﻿. qcdb.psiutil — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.psiutil; r""""""Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. """"""; import sys; import math; import re; from vecutil import *. def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if abs(expected - computed) > 10 ** (-digits):; print(""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits)); sys.exit(1); if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [do",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/psiutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html:1554,Testability,test,test,1554,"ompare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if abs(expected - computed) > 10 ** (-digits):; print(""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits)); sys.exit(1); if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [docs]def query_yes_no(question, default=True):; """"""Ask a yes/no question via raw_input() and return their answer. *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user). The return value is one of True or False. """""". yes = re.compile(r'^(y|yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(n|no|false|off|0)', re.IGNORECASE). if default == None:; prompt = "" [y/n] ""; elif default == True:; pro",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/psiutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/psiutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/vecutil.html:5113,Availability,error,error,5113," mat[1][1] * mat[2][0] + \; mat[0][1] * mat[1][2] * mat[2][0] - mat[0][1] * mat[1][0] * mat[2][2] + \; mat[0][2] * mat[1][0] * mat[2][1] - mat[0][0] * mat[1][2] * mat[2][1]; return det. [docs]def diagonalize3x3symmat(A):; """"""Given an real symmetric 3x3 matrix A, compute the eigenvalues. """"""; if len(A) != 3 or len(A[0]) != 3 or len(A[1]) != 3 or len(A[2]) != 3:; raise ValidationError('diagonalize3x3symmat() only defined for arrays of dimension 3x3\n'). B = [[1, 0, 0], [0, 1, 0], [0, 0, 1]] # I is the identity matrix; p = A[0][1] * A[0][1] + A[0][2] * A[0][2] + A[1][2] * A[1][2]; if p == 0:; # A is diagonal; eig1 = A[0][0]; eig2 = A[1][1]; eig3 = A[2][2]; else:; q = (A[0][0] + A[1][1] + A[2][2]) / 3.0; p = (A[0][0] - q) ** 2 + (A[1][1] - q) ** 2 + (A[2][2] - q) ** 2 + 2.0 * p; p = math.sqrt(p / 6.0); for i in range(3):; for j in range(3):; B[i][j] = (A[i][j] - q * B[i][j]) / p; # B = (A - q * I) / p; r = determinant(B) / 2.0. # In exact arithmetric for a symmetric matrix -1 <= r <= 1; # but computation error can leave it slightly outside this range.; if r <= -1:; phi = math.pi / 3; elif r >= 1:; phi = 0; else:; phi = math.acos(r) / 3.0. # the eigenvalues satisfy eig3 <= eig2 <= eig1; eig1 = q + 2.0 * p * math.cos(phi); eig3 = q + 2.0 * p * math.cos(phi + math.pi * (2.0 / 3.0)); eig2 = 3.0 * q - eig1 - eig3 # since trace(A) = eig1 + eig2 + eig3; return [eig1, eig2, eig3]. [docs]def zero(m, n):; """""" Create zero matrix""""""; new_matrix = [[0 for row in range(n)] for col in range(m)]; return new_matrix. [docs]def show(matrix):; """""" Print out matrix""""""; for col in matrix:; print col. [docs]def mscale(matrix, d):; """"""Return *matrix* scaled by scalar *d*""""""; for i in range(len(matrix)):; for j in range(len(matrix[0])):; matrix[i][j] *= d; return matrix. [docs]def mult(matrix1, matrix2):; """""" Matrix multiplication""""""; if len(matrix1[0]) != len(matrix2):; # Check matrix dimensions; raise ValidationError('Matrices must be m*n and n*p to multiply!'). else:; # Multiply if correct d",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/vecutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/vecutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/vecutil.html:6739,Deployability,update,updated,6739,"2]) / 3.0; p = (A[0][0] - q) ** 2 + (A[1][1] - q) ** 2 + (A[2][2] - q) ** 2 + 2.0 * p; p = math.sqrt(p / 6.0); for i in range(3):; for j in range(3):; B[i][j] = (A[i][j] - q * B[i][j]) / p; # B = (A - q * I) / p; r = determinant(B) / 2.0. # In exact arithmetric for a symmetric matrix -1 <= r <= 1; # but computation error can leave it slightly outside this range.; if r <= -1:; phi = math.pi / 3; elif r >= 1:; phi = 0; else:; phi = math.acos(r) / 3.0. # the eigenvalues satisfy eig3 <= eig2 <= eig1; eig1 = q + 2.0 * p * math.cos(phi); eig3 = q + 2.0 * p * math.cos(phi + math.pi * (2.0 / 3.0)); eig2 = 3.0 * q - eig1 - eig3 # since trace(A) = eig1 + eig2 + eig3; return [eig1, eig2, eig3]. [docs]def zero(m, n):; """""" Create zero matrix""""""; new_matrix = [[0 for row in range(n)] for col in range(m)]; return new_matrix. [docs]def show(matrix):; """""" Print out matrix""""""; for col in matrix:; print col. [docs]def mscale(matrix, d):; """"""Return *matrix* scaled by scalar *d*""""""; for i in range(len(matrix)):; for j in range(len(matrix[0])):; matrix[i][j] *= d; return matrix. [docs]def mult(matrix1, matrix2):; """""" Matrix multiplication""""""; if len(matrix1[0]) != len(matrix2):; # Check matrix dimensions; raise ValidationError('Matrices must be m*n and n*p to multiply!'). else:; # Multiply if correct dimensions; new_matrix = zero(len(matrix1), len(matrix2[0])); for i in range(len(matrix1)):; for j in range(len(matrix2[0])):; for k in range(len(matrix2)):; new_matrix[i][j] += matrix1[i][k] * matrix2[k][j]; return new_matrix. [docs]def transpose(matrix):; """"""Return matrix transpose""""""; if len(matrix[0]) != len(matrix):; # Check matrix dimensions; raise ValidationError('Matrices must be square.'). tmat = [list(i) for i in zip(*matrix)]; return tmat. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/vecutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/vecutil.html
https://psicode.org/psi4manual/4.0b4/_modules/qcdb/vecutil.html:162,Security,access,accessory,162,"﻿. qcdb.vecutil — PSI4 [beta4] documentation. Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». Source code for qcdb.vecutil; r""""""File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. """"""; import math; import copy; from exceptions import *. ZERO = 1.0E-14. [docs]def norm(v):; """"""Compute the magnitude of vector *v*.""""""; return math.sqrt(sum(v[i] * v[i] for i in range(len(v)))). [docs]def add(v, u):; """"""Compute sum of vectors *v* and *u*.""""""; return [u[i] + v[i] for i in range(len(v))]. [docs]def sub(v, u):; """"""Compute difference of vectors *v* - *u*.""""""; return [v[i] - u[i] for i in range(len(v))]. [docs]def dot(v, u):; """"""Compute dot product of vectors *v* and *u*.""""""; return sum(u[i] * v[i] for i in range(len(v))). [docs]def scale(v, d):; """"""Compute by-element scale by *d* of vector *v*.""""""; return [d * v[i] for i in range(len(v))]. [docs]def normalize(v):; """"""Compute normalized vector *v*.""""""; vmag = norm(v); return [v[i] / vmag for i in range(len(v))]. [docs]def distance(v, u):; """"""Compute the distance between points defined by vectors *v* and *u*.""""""; return norm(sub(v, u)). [docs]def cross(v, u):; """"""Compute cross product of length 3 vectors *v* and *u*.""""""; if len(u) != 3 or len(v) != 3:; raise ValidationError('cross() only defined for vectors of length 3\n'); return [v[1] * u[2] - v[2] * u[1],; v[2] * u[0] - v[0] * u[2],; v[0] * u[1] - v[1] * u[0]]. [docs]def rotate(v, theta, axis):; """"""Rotate length 3 vector *v* about *axis* by *theta* radians.""""""; if len(v) != 3 or len(axis) != 3:; raise ValidationError('rotate() only defined for vectors of length 3\n'). unitaxis = normalize(copy.deepcopy(axis)); # split into parallel and perpendicular components along axis; parallel = scale(axis, dot(v, axis) / dot(axis, axis)); perpendicular = sub(v, parallel); # form unit vector perpendicular to parallel and perpendicular; third_axis = perp",MatchSource.WIKI,psi4manual/4.0b4/_modules/qcdb/vecutil.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/qcdb/vecutil.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel-1.html:562,Deployability,update,updated,562,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». CACHELEVEL¶. How to cache quantities within the DPD library. Type: integer; Default: 2. Previous topic; ADC; Next topic; MEMORY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel-1.html:189,Performance,cache,cache,189,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». CACHELEVEL¶. How to cache quantities within the DPD library. Type: integer; Default: 2. Previous topic; ADC; Next topic; MEMORY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel.html:562,Deployability,update,updated,562,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». CACHELEVEL¶. How to cache quantities within the DPD library. Type: integer; Default: 2. Previous topic; ADC; Next topic; MEMORY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel.html:189,Performance,cache,cache,189,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». CACHELEVEL¶. How to cache quantities within the DPD library. Type: integer; Default: 2. Previous topic; ADC; Next topic; MEMORY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory-1.html:195,Availability,avail,available,195,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 1000. Previous topic; CACHELEVEL; Next topic; NEWTON_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory-1.html:568,Deployability,update,updated,568,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 1000. Previous topic; CACHELEVEL; Next topic; NEWTON_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory.html:195,Availability,avail,available,195,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 1000. Previous topic; CACHELEVEL; Next topic; NEWTON_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory.html:568,Deployability,update,updated,568,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 1000. Previous topic; CACHELEVEL; Next topic; NEWTON_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__memory.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__newton_convergence-1.html:599,Deployability,update,updated,599,"﻿. NEWTON_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». NEWTON_CONVERGENCE¶. The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. Previous topic; MEMORY; Next topic; NORM_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__newton_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__newton_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__newton_convergence.html:599,Deployability,update,updated,599,"﻿. NEWTON_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». NEWTON_CONVERGENCE¶. The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. Previous topic; MEMORY; Next topic; NORM_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__newton_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__newton_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__norm_tolerance-1.html:600,Deployability,update,updated,600,"﻿. NORM_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». NORM_TOLERANCE¶. The cutoff norm of residual vector in SEM step. Type: conv double; Default: 1e-6. Previous topic; NEWTON_CONVERGENCE; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__norm_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__norm_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__norm_tolerance.html:600,Deployability,update,updated,600,"﻿. NORM_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». NORM_TOLERANCE¶. The cutoff norm of residual vector in SEM step. Type: conv double; Default: 1e-6. Previous topic; NEWTON_CONVERGENCE; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__norm_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__norm_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__num_amps_print-1.html:594,Deployability,update,updated,594,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». NUM_AMPS_PRINT¶. Number of components of transition amplitudes printed. Type: integer; Default: 5. Previous topic; NORM_TOLERANCE; Next topic; POLE_MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__num_amps_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__num_amps_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__num_amps_print.html:594,Deployability,update,updated,594,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». NUM_AMPS_PRINT¶. Number of components of transition amplitudes printed. Type: integer; Default: 5. Previous topic; NORM_TOLERANCE; Next topic; POLE_MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__num_amps_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pole_maxiter-1.html:570,Deployability,update,updated,570,"﻿. POLE_MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». POLE_MAXITER¶. Maximum iteration number in pole searching. Type: integer; Default: 20. Previous topic; NUM_AMPS_PRINT; Next topic; PR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__pole_maxiter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pole_maxiter-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pole_maxiter.html:570,Deployability,update,updated,570,"﻿. POLE_MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». POLE_MAXITER¶. Maximum iteration number in pole searching. Type: integer; Default: 20. Previous topic; NUM_AMPS_PRINT; Next topic; PR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__pole_maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pole_maxiter.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pr-1.html:592,Deployability,update,updated,592,"﻿. PR — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». PR¶. Do use the partial renormalization scheme for the ground state wavefunction?. Type: boolean; Default: false. Previous topic; POLE_MAXITER; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__pr-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pr-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pr.html:592,Deployability,update,updated,592,"﻿. PR — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». PR¶. Do use the partial renormalization scheme for the ground state wavefunction?. Type: boolean; Default: false. Previous topic; POLE_MAXITER; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__pr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__pr.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__reference-1.html:572,Deployability,update,updated,572,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF; Default: RHF. Previous topic; PR; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__reference-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__reference-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__reference.html:572,Deployability,update,updated,572,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF; Default: RHF. Previous topic; PR; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__reference.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__roots_per_irrep-1.html:570,Deployability,update,updated,570,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». ROOTS_PER_IRREP¶. The poles per irrep vector. Type: array; Default: No Default. Previous topic; REFERENCE; Next topic; SEM_MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__roots_per_irrep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__roots_per_irrep-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__roots_per_irrep.html:570,Deployability,update,updated,570,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». ROOTS_PER_IRREP¶. The poles per irrep vector. Type: array; Default: No Default. Previous topic; REFERENCE; Next topic; SEM_MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__roots_per_irrep.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__sem_maxiter-1.html:591,Deployability,update,updated,591,"﻿. SEM_MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». SEM_MAXITER¶. Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. Previous topic; ROOTS_PER_IRREP; Next topic; CCDENSITY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__sem_maxiter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__sem_maxiter-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__sem_maxiter.html:591,Deployability,update,updated,591,"﻿. SEM_MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». SEM_MAXITER¶. Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. Previous topic; ROOTS_PER_IRREP; Next topic; CCDENSITY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; ADC ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/adc__sem_maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/adc__sem_maxiter.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ael-1.html:616,Deployability,update,updated,616,"﻿. AEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». AEL¶. Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. Previous topic; CCDENSITY; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__ael-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ael-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ael.html:616,Deployability,update,updated,616,"﻿. AEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». AEL¶. Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. Previous topic; CCDENSITY; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__ael.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ael.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ao_basis-1.html:601,Deployability,update,updated,601,"﻿. AO_BASIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». AO_BASIS¶. The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. Previous topic; AEL; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__ao_basis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ao_basis-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ao_basis.html:601,Deployability,update,updated,601,"﻿. AO_BASIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». AO_BASIS¶. The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. Previous topic; AEL; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ao_basis.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html:573,Deployability,update,updated,573,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html:202,Performance,cache,cacheing,202,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html:222,Performance,perform,perform,222,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html:573,Deployability,update,updated,573,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html:202,Performance,cache,cacheing,202,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html:222,Performance,perform,perform,222,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». CACHELEVEL¶. The amount of cacheing of data to perform. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__gauge-1.html:576,Deployability,update,updated,576,"﻿. GAUGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». GAUGE¶. The type of gauge to use for properties. Type: string; Default: LENGTH. Previous topic; CACHELEVEL; Next topic; INTS_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__gauge-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__gauge-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__gauge.html:576,Deployability,update,updated,576,"﻿. GAUGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». GAUGE¶. The type of gauge to use for properties. Type: string; Default: LENGTH. Previous topic; CACHELEVEL; Next topic; INTS_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__gauge.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ints_tolerance-1.html:604,Deployability,update,updated,604,"﻿. INTS_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. Previous topic; GAUGE; Next topic; ONEPDM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__ints_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ints_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ints_tolerance.html:604,Deployability,update,updated,604,"﻿. INTS_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. Previous topic; GAUGE; Next topic; ONEPDM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__ints_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__ints_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm-1.html:586,Deployability,update,updated,586,"﻿. ONEPDM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. Previous topic; INTS_TOLERANCE; Next topic; ONEPDM_GRID_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm.html:586,Deployability,update,updated,586,"﻿. ONEPDM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. Previous topic; INTS_TOLERANCE; Next topic; ONEPDM_GRID_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_cutoff-1.html:634,Deployability,update,updated,634,"﻿. ONEPDM_GRID_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM_GRID_CUTOFF¶. Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. Previous topic; ONEPDM; Next topic; ONEPDM_GRID_DUMP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_cutoff.html:634,Deployability,update,updated,634,"﻿. ONEPDM_GRID_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM_GRID_CUTOFF¶. Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. Previous topic; ONEPDM; Next topic; ONEPDM_GRID_DUMP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_dump-1.html:632,Deployability,update,updated,632,"﻿. ONEPDM_GRID_DUMP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM_GRID_DUMP¶. Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. Previous topic; ONEPDM_GRID_CUTOFF; Next topic; ONEPDM_GRID_STEPSIZE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_dump-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_dump-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_dump.html:632,Deployability,update,updated,632,"﻿. ONEPDM_GRID_DUMP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM_GRID_DUMP¶. Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. Previous topic; ONEPDM_GRID_CUTOFF; Next topic; ONEPDM_GRID_STEPSIZE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_dump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_dump.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_stepsize-1.html:634,Deployability,update,updated,634,"﻿. ONEPDM_GRID_STEPSIZE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM_GRID_STEPSIZE¶. Stepsize (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. Previous topic; ONEPDM_GRID_DUMP; Next topic; OPDM_RELAX; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_stepsize-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_stepsize-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_stepsize.html:634,Deployability,update,updated,634,"﻿. ONEPDM_GRID_STEPSIZE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ONEPDM_GRID_STEPSIZE¶. Stepsize (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. Previous topic; ONEPDM_GRID_DUMP; Next topic; OPDM_RELAX; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_stepsize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__onepdm_grid_stepsize.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__opdm_relax-1.html:592,Deployability,update,updated,592,"﻿. OPDM_RELAX — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. Previous topic; ONEPDM_GRID_STEPSIZE; Next topic; PROP_ALL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__opdm_relax-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__opdm_relax-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__opdm_relax.html:592,Deployability,update,updated,592,"﻿. OPDM_RELAX — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. Previous topic; ONEPDM_GRID_STEPSIZE; Next topic; PROP_ALL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__opdm_relax.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__opdm_relax.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_all-1.html:590,Deployability,update,updated,590,"﻿. PROP_ALL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. Previous topic; OPDM_RELAX; Next topic; PROP_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__prop_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_all-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_all.html:590,Deployability,update,updated,590,"﻿. PROP_ALL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. Previous topic; OPDM_RELAX; Next topic; PROP_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__prop_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_all.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_root-1.html:588,Deployability,update,updated,588,"﻿. PROP_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. Previous topic; PROP_ALL; Next topic; PROP_SYM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__prop_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_root.html:588,Deployability,update,updated,588,"﻿. PROP_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. Previous topic; PROP_ALL; Next topic; PROP_SYM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_sym-1.html:555,Deployability,update,updated,555,"﻿. PROP_SYM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. Previous topic; PROP_ROOT; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__prop_sym-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_sym-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_sym.html:555,Deployability,update,updated,555,"﻿. PROP_SYM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. Previous topic; PROP_ROOT; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__prop_sym.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__reference-1.html:568,Deployability,update,updated,568,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. Previous topic; PROP_SYM; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__reference-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__reference-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__reference.html:568,Deployability,update,updated,568,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. Previous topic; PROP_SYM; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__reference.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__roots_per_irrep-1.html:623,Deployability,update,updated,623,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. Previous topic; REFERENCE; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__roots_per_irrep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__roots_per_irrep-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__roots_per_irrep.html:623,Deployability,update,updated,623,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. Previous topic; REFERENCE; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__roots_per_irrep.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__wfn-1.html:540,Deployability,update,updated,540,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». WFN¶. Wavefunction type. Type: string; Default: SCF. Previous topic; ROOTS_PER_IRREP; Next topic; XI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__wfn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__wfn-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__wfn.html:540,Deployability,update,updated,540,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». WFN¶. Wavefunction type. Type: string; Default: SCF. Previous topic; ROOTS_PER_IRREP; Next topic; XI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__wfn.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi-1.html:534,Deployability,update,updated,534,"﻿. XI — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». XI¶. Do compute Xi?. Type: boolean; Default: false. Previous topic; WFN; Next topic; XI_CONNECT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__xi-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi.html:534,Deployability,update,updated,534,"﻿. XI — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». XI¶. Do compute Xi?. Type: boolean; Default: false. Previous topic; WFN; Next topic; XI_CONNECT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__xi.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi_connect-1.html:560,Deployability,update,updated,560,"﻿. XI_CONNECT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». XI_CONNECT¶. Do require and to be connected?. Type: boolean; Default: false. Previous topic; XI; Next topic; ZETA; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__xi_connect-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi_connect-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi_connect.html:560,Deployability,update,updated,560,"﻿. XI_CONNECT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». XI_CONNECT¶. Do require and to be connected?. Type: boolean; Default: false. Previous topic; XI; Next topic; ZETA; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__xi_connect.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__xi_connect.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__zeta-1.html:541,Deployability,update,updated,541,"﻿. ZETA — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ZETA¶. Do use zeta?. Type: boolean; Default: false. Previous topic; XI_CONNECT; Next topic; CCENERGY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__zeta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__zeta-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__zeta.html:541,Deployability,update,updated,541,"﻿. ZETA — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». ZETA¶. Do use zeta?. Type: boolean; Default: false. Previous topic; XI_CONNECT; Next topic; CCENERGY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCDENSITY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccdensity__zeta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccdensity__zeta.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__abcd-1.html:583,Deployability,update,updated,583,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. Previous topic; CCENERGY; Next topic; ANALYZE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__abcd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__abcd-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__abcd.html:583,Deployability,update,updated,583,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. Previous topic; CCENERGY; Next topic; ANALYZE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__abcd.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__analyze-1.html:551,Deployability,update,updated,551,"﻿. ANALYZE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. Previous topic; ABCD; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__analyze-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__analyze-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__analyze.html:551,Deployability,update,updated,551,"﻿. ANALYZE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. Previous topic; ABCD; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__analyze.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__analyze.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ao_basis-1.html:1216,Deployability,update,updated,1216,"﻿. AO_BASIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». AO_BASIS¶. The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. Previous topic; ANALYZE; Next topic; BRUECKNER_ORBS_R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__ao_basis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ao_basis-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ao_basis.html:1216,Deployability,update,updated,1216,"﻿. AO_BASIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». AO_BASIS¶. The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. Previous topic; ANALYZE; Next topic; BRUECKNER_ORBS_R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ao_basis.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence-1.html:728,Deployability,update,updated,728,"﻿. BRUECKNER_ORBS_R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. Previous topic; AO_BASIS; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence-1.html:347,Integrability,depend,depending,347,"﻿. BRUECKNER_ORBS_R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. Previous topic; AO_BASIS; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html:728,Deployability,update,updated,728,"﻿. BRUECKNER_ORBS_R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. Previous topic; AO_BASIS; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html:347,Integrability,depend,depending,347,"﻿. BRUECKNER_ORBS_R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. Previous topic; AO_BASIS; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html:1013,Deployability,update,updated,1013,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html:338,Performance,cache,cache,338,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html:400,Performance,cache,cache,400,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html:641,Performance,cache,cache,641,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html:1013,Deployability,update,updated,1013,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html:338,Performance,cache,cache,338,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html:400,Performance,cache,cache,400,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html:641,Performance,cache,cache,641,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; BRUECKNER_ORBS_R_CONVERGENCE; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html:915,Deployability,update,updated,915,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html:248,Performance,cache,cache,248,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html:367,Performance,cache,cache,367,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html:498,Performance,cache,cache,498,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html:915,Deployability,update,updated,915,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html:248,Performance,cache,cache,248,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html:367,Performance,cache,cache,367,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html:498,Performance,cache,cache,498,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. Previous topic; CACHELEVEL; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_num_threads-1.html:562,Deployability,update,updated,562,"﻿. CC_NUM_THREADS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. Previous topic; CACHETYPE; Next topic; CC_OS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cc_num_threads-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_num_threads-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_num_threads.html:562,Deployability,update,updated,562,"﻿. CC_NUM_THREADS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. Previous topic; CACHETYPE; Next topic; CC_OS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_num_threads.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_os_scale-1.html:589,Deployability,update,updated,589,"﻿. CC_OS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. Previous topic; CC_NUM_THREADS; Next topic; CC_SS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cc_os_scale-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_os_scale-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_os_scale.html:589,Deployability,update,updated,589,"﻿. CC_OS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. Previous topic; CC_NUM_THREADS; Next topic; CC_SS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cc_os_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_os_scale.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_ss_scale-1.html:583,Deployability,update,updated,583,"﻿. CC_SS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. Previous topic; CC_OS_SCALE; Next topic; DF_BASIS_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cc_ss_scale-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_ss_scale-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_ss_scale.html:583,Deployability,update,updated,583,"﻿. CC_SS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. Previous topic; CC_OS_SCALE; Next topic; DF_BASIS_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__cc_ss_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__cc_ss_scale.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_basis_mp2-1.html:634,Deployability,update,updated,634,"﻿. DF_BASIS_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting calculations. Type: string; Possible Values: basis string; Default: No Default. Previous topic; CC_SS_SCALE; Next topic; DF_LMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__df_basis_mp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_basis_mp2-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_basis_mp2.html:634,Deployability,update,updated,634,"﻿. DF_BASIS_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting calculations. Type: string; Possible Values: basis string; Default: No Default. Previous topic; CC_SS_SCALE; Next topic; DF_LMP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__df_basis_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_basis_mp2.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_lmp2-1.html:606,Deployability,update,updated,606,"﻿. DF_LMP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DF_LMP2¶. Do use density fitting? Turned on with specification of fitting basis. Type: boolean; Default: true. Previous topic; DF_BASIS_MP2; Next topic; DIAG_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__df_lmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_lmp2-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_lmp2.html:606,Deployability,update,updated,606,"﻿. DF_LMP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DF_LMP2¶. Do use density fitting? Turned on with specification of fitting basis. Type: boolean; Default: true. Previous topic; DF_BASIS_MP2; Next topic; DIAG_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__df_lmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__df_lmp2.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diag_method-1.html:609,Deployability,update,updated,609,"﻿. DIAG_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIAG_METHOD¶. Diagonalization method for the CI matrix. Type: string; Possible Values: DAVIDSON, FULL; Default: DAVIDSON. Previous topic; DF_LMP2; Next topic; DIIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diag_method-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diag_method-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diag_method.html:609,Deployability,update,updated,609,"﻿. DIAG_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIAG_METHOD¶. Diagonalization method for the CI matrix. Type: string; Possible Values: DAVIDSON, FULL; Default: DAVIDSON. Previous topic; DF_LMP2; Next topic; DIIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diag_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diag_method.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis-1.html:584,Deployability,update,updated,584,"﻿. DIIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. Previous topic; DIAG_METHOD; Next topic; DIIS_MAX_VECS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis.html:584,Deployability,update,updated,584,"﻿. DIIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. Previous topic; DIAG_METHOD; Next topic; DIIS_MAX_VECS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs-1.html:211,Availability,error,error,211,"﻿. DIIS_MAX_VECS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. Previous topic; DIIS; Next topic; DIIS_START_ITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs-1.html:603,Deployability,update,updated,603,"﻿. DIIS_MAX_VECS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. Previous topic; DIIS; Next topic; DIIS_START_ITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs.html:211,Availability,error,error,211,"﻿. DIIS_MAX_VECS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. Previous topic; DIIS; Next topic; DIIS_START_ITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs.html:603,Deployability,update,updated,603,"﻿. DIIS_MAX_VECS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. Previous topic; DIIS; Next topic; DIIS_START_ITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_max_vecs.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_start_iter-1.html:605,Deployability,update,updated,605,"﻿. DIIS_START_ITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS_START_ITER¶. Iteration at which to start DIIS extrapolation. Type: integer; Default: 3. Previous topic; DIIS_MAX_VECS; Next topic; DISTANT_PAIR_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis_start_iter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_start_iter-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_start_iter.html:605,Deployability,update,updated,605,"﻿. DIIS_START_ITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DIIS_START_ITER¶. Iteration at which to start DIIS extrapolation. Type: integer; Default: 3. Previous topic; DIIS_MAX_VECS; Next topic; DISTANT_PAIR_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__diis_start_iter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__diis_start_iter.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__distant_pair_cutoff-1.html:582,Deployability,update,updated,582,"﻿. DISTANT_PAIR_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DISTANT_PAIR_CUTOFF¶. Distant pair cutoff. Type: double; Default: 8.0. Previous topic; DIIS_START_ITER; Next topic; DOMAIN_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__distant_pair_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__distant_pair_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__distant_pair_cutoff.html:582,Deployability,update,updated,582,"﻿. DISTANT_PAIR_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DISTANT_PAIR_CUTOFF¶. Distant pair cutoff. Type: double; Default: 8.0. Previous topic; DIIS_START_ITER; Next topic; DOMAIN_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__distant_pair_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__distant_pair_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domains-1.html:546,Deployability,update,updated,546,"﻿. DOMAINS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DOMAINS¶. Type: array; Default: No Default. Previous topic; DOMAIN_PRINT_EXIT; Next topic; E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__domains-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domains-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domains.html:546,Deployability,update,updated,546,"﻿. DOMAINS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DOMAINS¶. Type: array; Default: No Default. Previous topic; DOMAIN_PRINT_EXIT; Next topic; E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__domains.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domains.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print-1.html:582,Deployability,update,updated,582,"﻿. DOMAIN_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DOMAIN_PRINT¶. Do print the domains?. Type: boolean; Default: false. Previous topic; DISTANT_PAIR_CUTOFF; Next topic; DOMAIN_PRINT_EXIT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print.html:582,Deployability,update,updated,582,"﻿. DOMAIN_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DOMAIN_PRINT¶. Do print the domains?. Type: boolean; Default: false. Previous topic; DISTANT_PAIR_CUTOFF; Next topic; DOMAIN_PRINT_EXIT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print_exit-1.html:589,Deployability,update,updated,589,"﻿. DOMAIN_PRINT_EXIT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DOMAIN_PRINT_EXIT¶. Do exit after printing the domains?. Type: boolean; Default: false. Previous topic; DOMAIN_PRINT; Next topic; DOMAINS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print_exit-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print_exit-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print_exit.html:589,Deployability,update,updated,589,"﻿. DOMAIN_PRINT_EXIT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». DOMAIN_PRINT_EXIT¶. Do exit after printing the domains?. Type: boolean; Default: false. Previous topic; DOMAIN_PRINT; Next topic; DOMAINS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print_exit.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__domain_print_exit.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence-1.html:693,Deployability,update,updated,693,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». E_CONVERGENCE¶. Convergence criterion for energy (change). See Table// Post-SCF Convergence for default convergence// criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; DOMAINS; Next topic; FOCK_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence-1.html:219,Energy Efficiency,energy,energy,219,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». E_CONVERGENCE¶. Convergence criterion for energy (change). See Table// Post-SCF Convergence for default convergence// criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; DOMAINS; Next topic; FOCK_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence.html:693,Deployability,update,updated,693,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». E_CONVERGENCE¶. Convergence criterion for energy (change). See Table// Post-SCF Convergence for default convergence// criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; DOMAINS; Next topic; FOCK_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence.html:219,Energy Efficiency,energy,energy,219,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». E_CONVERGENCE¶. Convergence criterion for energy (change). See Table// Post-SCF Convergence for default convergence// criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; DOMAINS; Next topic; FOCK_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__e_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__fock_tolerance-1.html:629,Deployability,update,updated,629,"﻿. FOCK_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». FOCK_TOLERANCE¶. Minimum absolute value below which parts of the Fock matrix are skipped. Type: conv double; Default: 1e-2. Previous topic; E_CONVERGENCE; Next topic; FORCE_RESTART; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__fock_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__fock_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__fock_tolerance.html:629,Deployability,update,updated,629,"﻿. FOCK_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». FOCK_TOLERANCE¶. Minimum absolute value below which parts of the Fock matrix are skipped. Type: conv double; Default: 1e-2. Previous topic; E_CONVERGENCE; Next topic; FORCE_RESTART; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__fock_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__fock_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__force_restart-1.html:630,Deployability,update,updated,630,"﻿. FORCE_RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. Previous topic; FOCK_TOLERANCE; Next topic; INTS_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__force_restart-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__force_restart-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__force_restart.html:630,Deployability,update,updated,630,"﻿. FORCE_RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. Previous topic; FOCK_TOLERANCE; Next topic; INTS_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__force_restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__force_restart.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ints_tolerance-1.html:608,Deployability,update,updated,608,"﻿. INTS_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-7. Previous topic; FORCE_RESTART; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__ints_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ints_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ints_tolerance.html:608,Deployability,update,updated,608,"﻿. INTS_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-7. Previous topic; FORCE_RESTART; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__ints_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__ints_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local-1.html:604,Deployability,update,updated,604,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. Previous topic; INTS_TOLERANCE; Next topic; LOCAL_AMPS_PRINT_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local.html:604,Deployability,update,updated,604,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. Previous topic; INTS_TOLERANCE; Next topic; LOCAL_AMPS_PRINT_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_amps_print_cutoff-1.html:609,Deployability,update,updated,609,"﻿. LOCAL_AMPS_PRINT_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_AMPS_PRINT_CUTOFF¶. Cutoff value for printing local amplitudes. Type: double; Default: 0.60. Previous topic; LOCAL; Next topic; LOCAL_CPHF_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_amps_print_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_amps_print_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_amps_print_cutoff.html:609,Deployability,update,updated,609,"﻿. LOCAL_AMPS_PRINT_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_AMPS_PRINT_CUTOFF¶. Cutoff value for printing local amplitudes. Type: double; Default: 0.60. Previous topic; LOCAL; Next topic; LOCAL_CPHF_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_amps_print_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_amps_print_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cphf_cutoff-1.html:621,Deployability,update,updated,621,"﻿. LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. Previous topic; LOCAL_AMPS_PRINT_CUTOFF; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_cphf_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cphf_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cphf_cutoff.html:621,Deployability,update,updated,621,"﻿. LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. Previous topic; LOCAL_AMPS_PRINT_CUTOFF; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cphf_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cutoff-1.html:570,Deployability,update,updated,570,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_CUTOFF¶. Localization cutoff. Type: double; Default: 0.02. Previous topic; LOCAL_CPHF_CUTOFF; Next topic; LOCAL_GHOST; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cutoff.html:570,Deployability,update,updated,570,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_CUTOFF¶. Localization cutoff. Type: double; Default: 0.02. Previous topic; LOCAL_CPHF_CUTOFF; Next topic; LOCAL_GHOST; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_ghost-1.html:542,Deployability,update,updated,542,"﻿. LOCAL_GHOST — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_GHOST¶. Type: integer; Default: -1. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_ghost-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_ghost-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_ghost.html:542,Deployability,update,updated,542,"﻿. LOCAL_GHOST — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_GHOST¶. Type: integer; Default: -1. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_ghost.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_ghost.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_method-1.html:769,Deployability,update,updated,769,"﻿. LOCAL_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_METHOD¶. Type of local-CIS scheme to be simulated. WERNER selects the method// developed by H.-J. Werner and co-workers, and AOBASIS selects the method// developed by G.E. Scuseria and co-workers. Type: string; Possible Values: AOBASIS, WERNER; Default: WERNER. Previous topic; LOCAL_GHOST; Next topic; LOCAL_PAIRDEF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_method-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_method-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_method.html:769,Deployability,update,updated,769,"﻿. LOCAL_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_METHOD¶. Type of local-CIS scheme to be simulated. WERNER selects the method// developed by H.-J. Werner and co-workers, and AOBASIS selects the method// developed by G.E. Scuseria and co-workers. Type: string; Possible Values: AOBASIS, WERNER; Default: WERNER. Previous topic; LOCAL_GHOST; Next topic; LOCAL_PAIRDEF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_method.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_pairdef-1.html:640,Deployability,update,updated,640,"﻿. LOCAL_PAIRDEF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_PAIRDEF¶. Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. Previous topic; LOCAL_METHOD; Next topic; LOCAL_WEAKP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_pairdef-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_pairdef-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_pairdef.html:640,Deployability,update,updated,640,"﻿. LOCAL_PAIRDEF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_PAIRDEF¶. Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. Previous topic; LOCAL_METHOD; Next topic; LOCAL_WEAKP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_pairdef.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp-1.html:877,Deployability,update,updated,877,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CIS method. A value of// NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in// the same manner as strong pairs. A value of MP2 uses second-order perturbation// theory to correct the local-CIS energy computed with weak pairs ignored. Type: string; Possible Values: MP2, NEGLECT, NONE; Default: MP2. Previous topic; LOCAL_PAIRDEF; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp-1.html:450,Energy Efficiency,energy,energy,450,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CIS method. A value of// NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in// the same manner as strong pairs. A value of MP2 uses second-order perturbation// theory to correct the local-CIS energy computed with weak pairs ignored. Type: string; Possible Values: MP2, NEGLECT, NONE; Default: MP2. Previous topic; LOCAL_PAIRDEF; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp.html:877,Deployability,update,updated,877,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CIS method. A value of// NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in// the same manner as strong pairs. A value of MP2 uses second-order perturbation// theory to correct the local-CIS energy computed with weak pairs ignored. Type: string; Possible Values: MP2, NEGLECT, NONE; Default: MP2. Previous topic; LOCAL_PAIRDEF; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp.html:450,Energy Efficiency,energy,energy,450,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CIS method. A value of// NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in// the same manner as strong pairs. A value of MP2 uses second-order perturbation// theory to correct the local-CIS energy computed with weak pairs ignored. Type: string; Possible Values: MP2, NEGLECT, NONE; Default: MP2. Previous topic; LOCAL_PAIRDEF; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__local_weakp.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__maxiter-1.html:557,Deployability,update,updated,557,"﻿. MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. Previous topic; LOCAL_WEAKP; Next topic; MEMORY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__maxiter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__maxiter-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__maxiter.html:557,Deployability,update,updated,557,"﻿. MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. Previous topic; LOCAL_WEAKP; Next topic; MEMORY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__maxiter.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory-1.html:200,Availability,avail,available,200,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 2000. Previous topic; MAXITER; Next topic; MP2_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory-1.html:571,Deployability,update,updated,571,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 2000. Previous topic; MAXITER; Next topic; MP2_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__memory-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory.html:200,Availability,avail,available,200,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 2000. Previous topic; MAXITER; Next topic; MP2_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory.html:571,Deployability,update,updated,571,"﻿. MEMORY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 2000. Previous topic; MAXITER; Next topic; MP2_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__memory.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_amps_print-1.html:642,Deployability,update,updated,642,"﻿. MP2_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Previous topic; MEMORY; Next topic; MP2_OS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_amps_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_amps_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_amps_print.html:642,Deployability,update,updated,642,"﻿. MP2_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Previous topic; MEMORY; Next topic; MP2_OS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_amps_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_os_scale-1.html:617,Deployability,update,updated,617,"﻿. MP2_OS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MP2_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. Previous topic; MP2_AMPS_PRINT; Next topic; MP2_SS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_os_scale-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_os_scale-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_os_scale.html:617,Deployability,update,updated,617,"﻿. MP2_OS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MP2_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. Previous topic; MP2_AMPS_PRINT; Next topic; MP2_SS_SCALE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_os_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_os_scale.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_ss_scale-1.html:619,Deployability,update,updated,619,"﻿. MP2_SS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MP2_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. Type: double; Default: 1.0/3.0. Previous topic; MP2_OS_SCALE; Next topic; NEGLECT_DISTANT_PAIR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_ss_scale-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_ss_scale-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_ss_scale.html:619,Deployability,update,updated,619,"﻿. MP2_SS_SCALE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». MP2_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. Type: double; Default: 1.0/3.0. Previous topic; MP2_OS_SCALE; Next topic; NEGLECT_DISTANT_PAIR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_ss_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__mp2_ss_scale.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__neglect_distant_pair-1.html:588,Deployability,update,updated,588,"﻿. NEGLECT_DISTANT_PAIR — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». NEGLECT_DISTANT_PAIR¶. Do neglect distant pairs?. Type: boolean; Default: true. Previous topic; MP2_SS_SCALE; Next topic; NEW_TRIPLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__neglect_distant_pair-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__neglect_distant_pair-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__neglect_distant_pair.html:588,Deployability,update,updated,588,"﻿. NEGLECT_DISTANT_PAIR — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». NEGLECT_DISTANT_PAIR¶. Do neglect distant pairs?. Type: boolean; Default: true. Previous topic; MP2_SS_SCALE; Next topic; NEW_TRIPLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__neglect_distant_pair.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__neglect_distant_pair.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__new_triples-1.html:575,Deployability,update,updated,575,"﻿. NEW_TRIPLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. Previous topic; NEGLECT_DISTANT_PAIR; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__new_triples-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__new_triples-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__new_triples.html:575,Deployability,update,updated,575,"﻿. NEW_TRIPLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. Previous topic; NEGLECT_DISTANT_PAIR; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__new_triples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__new_triples.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__num_amps_print-1.html:599,Deployability,update,updated,599,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. Previous topic; NEW_TRIPLES; Next topic; PAIR_ENERGIES_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__num_amps_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__num_amps_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__num_amps_print.html:599,Deployability,update,updated,599,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. Previous topic; NEW_TRIPLES; Next topic; PAIR_ENERGIES_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__num_amps_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__pair_energies_print-1.html:616,Deployability,update,updated,616,"﻿. PAIR_ENERGIES_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». PAIR_ENERGIES_PRINT¶. Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. Previous topic; NUM_AMPS_PRINT; Next topic; PROPERTY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__pair_energies_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__pair_energies_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__pair_energies_print.html:616,Deployability,update,updated,616,"﻿. PAIR_ENERGIES_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». PAIR_ENERGIES_PRINT¶. Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. Previous topic; NUM_AMPS_PRINT; Next topic; PROPERTY; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__pair_energies_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__pair_energies_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__property-1.html:827,Deployability,update,updated,827,"﻿. PROPERTY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. Previous topic; PAIR_ENERGIES_PRINT; Next topic; R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__property-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__property-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__property.html:827,Deployability,update,updated,827,"﻿. PROPERTY — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. Previous topic; PAIR_ENERGIES_PRINT; Next topic; R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__property.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__property.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__reference-1.html:585,Deployability,update,updated,585,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF; Default: RHF. Previous topic; R_CONVERGENCE; Next topic; RESTART; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__reference-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__reference-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__reference.html:585,Deployability,update,updated,585,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF; Default: RHF. Previous topic; R_CONVERGENCE; Next topic; RESTART; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__reference.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html:478,Deployability,update,updates,478,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. Previous topic; REFERENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html:931,Deployability,update,updated,931,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. Previous topic; REFERENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html:261,Performance,optimiz,optimizations,261,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. Previous topic; REFERENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html:478,Deployability,update,updates,478,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. Previous topic; REFERENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html:931,Deployability,update,updated,931,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. Previous topic; REFERENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html:261,Performance,optimiz,optimizations,261,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. Previous topic; REFERENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__roots_per_irrep-1.html:629,Deployability,update,updated,629,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible// representation. Type: array; Default: No Default. Previous topic; RESTART; Next topic; SCREEN_INTS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__roots_per_irrep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__roots_per_irrep-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__roots_per_irrep.html:629,Deployability,update,updated,629,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible// representation. Type: array; Default: No Default. Previous topic; RESTART; Next topic; SCREEN_INTS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__roots_per_irrep.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__r_convergence-1.html:599,Deployability,update,updated,599,"﻿. R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». R_CONVERGENCE¶. Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. Previous topic; PROPERTY; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__r_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__r_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__r_convergence.html:599,Deployability,update,updated,599,"﻿. R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». R_CONVERGENCE¶. Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. Previous topic; PROPERTY; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__r_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__screen_ints-1.html:561,Deployability,update,updated,561,"﻿. SCREEN_INTS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCREEN_INTS¶. Do screen integrals?. Type: boolean; Default: false. Previous topic; ROOTS_PER_IRREP; Next topic; SCS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__screen_ints-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__screen_ints-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__screen_ints.html:561,Deployability,update,updated,561,"﻿. SCREEN_INTS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCREEN_INTS¶. Do screen integrals?. Type: boolean; Default: false. Previous topic; ROOTS_PER_IRREP; Next topic; SCS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__screen_ints.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__screen_ints.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs-1.html:565,Deployability,update,updated,565,"﻿. SCS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. Previous topic; SCREEN_INTS; Next topic; SCS_CCSD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs.html:565,Deployability,update,updated,565,"﻿. SCS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. Previous topic; SCREEN_INTS; Next topic; SCS_CCSD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2-1.html:590,Deployability,update,updated,590,"﻿. SCSN_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_N; Next topic; SEMICANONICAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2-1.html:210,Performance,optimiz,optimized,210,"﻿. SCSN_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_N; Next topic; SEMICANONICAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2.html:590,Deployability,update,updated,590,"﻿. SCSN_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_N; Next topic; SEMICANONICAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2.html:210,Performance,optimiz,optimized,210,"﻿. SCSN_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_N; Next topic; SEMICANONICAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scsn_mp2.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_ccsd-1.html:556,Deployability,update,updated,556,"﻿. SCS_CCSD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. Previous topic; SCS; Next topic; SCS_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_ccsd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_ccsd-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_ccsd.html:556,Deployability,update,updated,556,"﻿. SCS_CCSD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. Previous topic; SCS; Next topic; SCS_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_ccsd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_ccsd.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_mp2-1.html:567,Deployability,update,updated,567,"﻿. SCS_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. Previous topic; SCS_CCSD; Next topic; SCS_N; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_mp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_mp2-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_mp2.html:567,Deployability,update,updated,567,"﻿. SCS_MP2 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. Previous topic; SCS_CCSD; Next topic; SCS_N; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_mp2.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n-1.html:581,Deployability,update,updated,581,"﻿. SCS_N — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_N¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_MP2; Next topic; SCSN_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n-1.html:204,Performance,optimiz,optimized,204,"﻿. SCS_N — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_N¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_MP2; Next topic; SCSN_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n.html:581,Deployability,update,updated,581,"﻿. SCS_N — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_N¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_MP2; Next topic; SCSN_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n.html:204,Performance,optimiz,optimized,204,"﻿. SCS_N — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SCS_N¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Previous topic; SCS_MP2; Next topic; SCSN_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__scs_n.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__semicanonical-1.html:589,Deployability,update,updated,589,"﻿. SEMICANONICAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Previous topic; SCSN_MP2; Next topic; SPINADAPT_ENERGIES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__semicanonical-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__semicanonical-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__semicanonical.html:589,Deployability,update,updated,589,"﻿. SEMICANONICAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Previous topic; SCSN_MP2; Next topic; SPINADAPT_ENERGIES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__semicanonical.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html:596,Deployability,update,updated,596,"﻿. SPINADAPT_ENERGIES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; T2_COUPLED; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html:217,Energy Efficiency,adapt,adapted,217,"﻿. SPINADAPT_ENERGIES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; T2_COUPLED; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html:217,Modifiability,adapt,adapted,217,"﻿. SPINADAPT_ENERGIES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; T2_COUPLED; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html:596,Deployability,update,updated,596,"﻿. SPINADAPT_ENERGIES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; T2_COUPLED; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html:217,Energy Efficiency,adapt,adapted,217,"﻿. SPINADAPT_ENERGIES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; T2_COUPLED; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html:217,Modifiability,adapt,adapted,217,"﻿. SPINADAPT_ENERGIES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; T2_COUPLED; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__spinadapt_energies.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t2_coupled-1.html:549,Deployability,update,updated,549,"﻿. T2_COUPLED — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». T2_COUPLED¶. Type: boolean; Default: false. Previous topic; SPINADAPT_ENERGIES; Next topic; T3_WS_INCORE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__t2_coupled-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t2_coupled-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t2_coupled.html:549,Deployability,update,updated,549,"﻿. T2_COUPLED — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». T2_COUPLED¶. Type: boolean; Default: false. Previous topic; SPINADAPT_ENERGIES; Next topic; T3_WS_INCORE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__t2_coupled.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t2_coupled.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t3_ws_incore-1.html:595,Deployability,update,updated,595,"﻿. T3_WS_INCORE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Previous topic; T2_COUPLED; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__t3_ws_incore-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t3_ws_incore-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t3_ws_incore.html:595,Deployability,update,updated,595,"﻿. T3_WS_INCORE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Previous topic; T2_COUPLED; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__t3_ws_incore.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__t3_ws_incore.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__wfn-1.html:539,Deployability,update,updated,539,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». WFN¶. Wavefunction type. Type: string; Default: LMP2. Previous topic; T3_WS_INCORE; Next topic; CCEOM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__wfn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__wfn-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__wfn.html:539,Deployability,update,updated,539,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». WFN¶. Wavefunction type. Type: string; Default: LMP2. Previous topic; T3_WS_INCORE; Next topic; CCEOM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCENERGY ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccenergy__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccenergy__wfn.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__abcd-1.html:577,Deployability,update,updated,577,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. Previous topic; CCEOM; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__abcd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__abcd-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__abcd.html:577,Deployability,update,updated,577,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. Previous topic; CCEOM; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__abcd.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html:983,Deployability,update,updated,983,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html:335,Performance,cache,cache,335,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html:397,Performance,cache,cache,397,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html:638,Performance,cache,cache,638,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html:983,Deployability,update,updated,983,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html:335,Performance,cache,cache,335,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html:397,Performance,cache,cache,397,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html:638,Performance,cache,cache,638,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; ABCD; Next topic; CACHETYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html:211,Deployability,release,release,211,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. Previous topic; CACHELEVEL; Next topic; CC3_FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html:610,Deployability,update,updated,610,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. Previous topic; CACHELEVEL; Next topic; CC3_FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html:219,Performance,cache,cached,219,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. Previous topic; CACHELEVEL; Next topic; CC3_FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html:211,Deployability,release,release,211,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. Previous topic; CACHELEVEL; Next topic; CC3_FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html:610,Deployability,update,updated,610,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. Previous topic; CACHELEVEL; Next topic; CC3_FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html:219,Performance,cache,cached,219,"﻿. CACHETYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. Previous topic; CACHELEVEL; Next topic; CC3_FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc3_follow_root-1.html:581,Deployability,update,updated,581,"﻿. CC3_FOLLOW_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CC3_FOLLOW_ROOT¶. Do turn on root following for CC3. Type: boolean; Default: false. Previous topic; CACHETYPE; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cc3_follow_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc3_follow_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc3_follow_root.html:581,Deployability,update,updated,581,"﻿. CC3_FOLLOW_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CC3_FOLLOW_ROOT¶. Do turn on root following for CC3. Type: boolean; Default: false. Previous topic; CACHETYPE; Next topic; CC_NUM_THREADS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cc3_follow_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc3_follow_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc_num_threads-1.html:569,Deployability,update,updated,569,"﻿. CC_NUM_THREADS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. Previous topic; CC3_FOLLOW_ROOT; Next topic; COLLAPSE_WITH_LAST; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cc_num_threads-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc_num_threads-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc_num_threads.html:569,Deployability,update,updated,569,"﻿. CC_NUM_THREADS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. Previous topic; CC3_FOLLOW_ROOT; Next topic; COLLAPSE_WITH_LAST; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__cc_num_threads.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__collapse_with_last-1.html:590,Deployability,update,updated,590,"﻿. COLLAPSE_WITH_LAST — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». COLLAPSE_WITH_LAST¶. Do collapse with last vector?. Type: boolean; Default: true. Previous topic; CC_NUM_THREADS; Next topic; COMPLEX_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__collapse_with_last-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__collapse_with_last-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__collapse_with_last.html:590,Deployability,update,updated,590,"﻿. COLLAPSE_WITH_LAST — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». COLLAPSE_WITH_LAST¶. Do collapse with last vector?. Type: boolean; Default: true. Previous topic; CC_NUM_THREADS; Next topic; COMPLEX_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__collapse_with_last.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__collapse_with_last.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance-1.html:206,Availability,toler,tolerance,206,"﻿. COMPLEX_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. Previous topic; COLLAPSE_WITH_LAST; Next topic; E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance-1.html:611,Deployability,update,updated,611,"﻿. COMPLEX_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. Previous topic; COLLAPSE_WITH_LAST; Next topic; E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance.html:206,Availability,toler,tolerance,206,"﻿. COMPLEX_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. Previous topic; COLLAPSE_WITH_LAST; Next topic; E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance.html:611,Deployability,update,updated,611,"﻿. COMPLEX_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. Previous topic; COLLAPSE_WITH_LAST; Next topic; E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__complex_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess-1.html:578,Availability,avail,available,578,"﻿. EOM_GUESS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. Previous topic; E_CONVERGENCE; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__eom_guess-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess-1.html:984,Deployability,update,updated,984,"﻿. EOM_GUESS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. Previous topic; E_CONVERGENCE; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__eom_guess-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess.html:578,Availability,avail,available,578,"﻿. EOM_GUESS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. Previous topic; E_CONVERGENCE; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__eom_guess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess.html:984,Deployability,update,updated,984,"﻿. EOM_GUESS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. Previous topic; E_CONVERGENCE; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__eom_guess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_guess.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_reference-1.html:624,Deployability,update,updated,624,"﻿. EOM_REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. Previous topic; EOM_GUESS; Next topic; EXCITATION_RANGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__eom_reference-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_reference-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_reference.html:624,Deployability,update,updated,624,"﻿. EOM_REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. Previous topic; EOM_GUESS; Next topic; EXCITATION_RANGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__eom_reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__eom_reference.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__excitation_range-1.html:891,Deployability,update,updated,891,"﻿. EXCITATION_RANGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. Previous topic; EOM_REFERENCE; Next topic; FULL_MATRIX; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__excitation_range-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__excitation_range-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__excitation_range.html:891,Deployability,update,updated,891,"﻿. EXCITATION_RANGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. Previous topic; EOM_REFERENCE; Next topic; FULL_MATRIX; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__excitation_range.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__excitation_range.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence-1.html:736,Deployability,update,updated,736,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; COMPLEX_TOLERANCE; Next topic; EOM_GUESS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__e_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence-1.html:227,Energy Efficiency,energy,energy,227,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; COMPLEX_TOLERANCE; Next topic; EOM_GUESS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__e_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence.html:736,Deployability,update,updated,736,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; COMPLEX_TOLERANCE; Next topic; EOM_GUESS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence.html:227,Energy Efficiency,energy,energy,227,"﻿. E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. Previous topic; COMPLEX_TOLERANCE; Next topic; EOM_GUESS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__e_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__full_matrix-1.html:579,Deployability,update,updated,579,"﻿. FULL_MATRIX — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». FULL_MATRIX¶. Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. Previous topic; EXCITATION_RANGE; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__full_matrix-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__full_matrix-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__full_matrix.html:579,Deployability,update,updated,579,"﻿. FULL_MATRIX — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». FULL_MATRIX¶. Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. Previous topic; EXCITATION_RANGE; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__full_matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__full_matrix.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local-1.html:584,Deployability,update,updated,584,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. Previous topic; FULL_MATRIX; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local.html:584,Deployability,update,updated,584,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. Previous topic; FULL_MATRIX; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_cutoff-1.html:810,Deployability,update,updated,810,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. Previous topic; LOCAL; Next topic; LOCAL_DO_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_cutoff.html:810,Deployability,update,updated,810,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. Previous topic; LOCAL; Next topic; LOCAL_DO_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_do_singles-1.html:556,Deployability,update,updated,556,"﻿. LOCAL_DO_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_DO_SINGLES¶. Type: boolean; Default: true. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_FILTER_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_do_singles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_do_singles-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_do_singles.html:556,Deployability,update,updated,556,"﻿. LOCAL_DO_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_DO_SINGLES¶. Type: boolean; Default: true. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_FILTER_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_do_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_do_singles.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_filter_singles-1.html:608,Deployability,update,updated,608,"﻿. LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_FILTER_SINGLES¶. Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. Previous topic; LOCAL_DO_SINGLES; Next topic; LOCAL_GHOST; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_filter_singles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_filter_singles-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_filter_singles.html:608,Deployability,update,updated,608,"﻿. LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_FILTER_SINGLES¶. Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. Previous topic; LOCAL_DO_SINGLES; Next topic; LOCAL_GHOST; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_filter_singles.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_ghost-1.html:661,Deployability,update,updated,661,"﻿. LOCAL_GHOST — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_GHOST¶. Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. Previous topic; LOCAL_FILTER_SINGLES; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_ghost-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_ghost-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_ghost.html:661,Deployability,update,updated,661,"﻿. LOCAL_GHOST — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_GHOST¶. Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. Previous topic; LOCAL_FILTER_SINGLES; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_ghost.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_ghost.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_method-1.html:791,Deployability,update,updated,791,"﻿. LOCAL_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. Previous topic; LOCAL_GHOST; Next topic; LOCAL_PRECONDITIONER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_method-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_method-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_method.html:791,Deployability,update,updated,791,"﻿. LOCAL_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. Previous topic; LOCAL_GHOST; Next topic; LOCAL_PRECONDITIONER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_method.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_preconditioner-1.html:637,Deployability,update,updated,637,"﻿. LOCAL_PRECONDITIONER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_PRECONDITIONER¶. Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. Previous topic; LOCAL_METHOD; Next topic; LOCAL_WEAKP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_preconditioner-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_preconditioner-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_preconditioner.html:637,Deployability,update,updated,637,"﻿. LOCAL_PRECONDITIONER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_PRECONDITIONER¶. Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. Previous topic; LOCAL_METHOD; Next topic; LOCAL_WEAKP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_preconditioner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_preconditioner.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp-1.html:875,Deployability,update,updated,875,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. Previous topic; LOCAL_PRECONDITIONER; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_weakp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp-1.html:443,Energy Efficiency,energy,energy,443,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. Previous topic; LOCAL_PRECONDITIONER; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_weakp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp.html:875,Deployability,update,updated,875,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. Previous topic; LOCAL_PRECONDITIONER; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp.html:443,Energy Efficiency,energy,energy,443,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. Previous topic; LOCAL_PRECONDITIONER; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__local_weakp.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__maxiter-1.html:556,Deployability,update,updated,556,"﻿. MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». MAXITER¶. Maximum number of iterations. Type: integer; Default: 80. Previous topic; LOCAL_WEAKP; Next topic; NEW_TRIPLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__maxiter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__maxiter-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__maxiter.html:556,Deployability,update,updated,556,"﻿. MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». MAXITER¶. Maximum number of iterations. Type: integer; Default: 80. Previous topic; LOCAL_WEAKP; Next topic; NEW_TRIPLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__maxiter.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__new_triples-1.html:556,Deployability,update,updated,556,"﻿. NEW_TRIPLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. Previous topic; MAXITER; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__new_triples-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__new_triples-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__new_triples.html:556,Deployability,update,updated,556,"﻿. NEW_TRIPLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. Previous topic; MAXITER; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__new_triples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__new_triples.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__num_amps_print-1.html:581,Deployability,update,updated,581,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». NUM_AMPS_PRINT¶. Number of important CC amplitudes to print. Type: integer; Default: 5. Previous topic; NEW_TRIPLES; Next topic; PROP_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__num_amps_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__num_amps_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__num_amps_print.html:581,Deployability,update,updated,581,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». NUM_AMPS_PRINT¶. Number of important CC amplitudes to print. Type: integer; Default: 5. Previous topic; NEW_TRIPLES; Next topic; PROP_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__num_amps_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_root-1.html:622,Deployability,update,updated,622,"﻿. PROP_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». PROP_ROOT¶. Root number (within its irrep) for computing properties. Defaults to highest root requested. Type: integer; Default: 0. Previous topic; NUM_AMPS_PRINT; Next topic; PROP_SYM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__prop_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_root.html:622,Deployability,update,updated,622,"﻿. PROP_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». PROP_ROOT¶. Root number (within its irrep) for computing properties. Defaults to highest root requested. Type: integer; Default: 0. Previous topic; NUM_AMPS_PRINT; Next topic; PROP_SYM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_sym-1.html:627,Deployability,update,updated,627,"﻿. PROP_SYM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». PROP_SYM¶. Symmetry of the state to compute properties. Defaults to last irrep for which states are requested. Type: integer; Default: 1. Previous topic; PROP_ROOT; Next topic; R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__prop_sym-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_sym-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_sym.html:627,Deployability,update,updated,627,"﻿. PROP_SYM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». PROP_SYM¶. Symmetry of the state to compute properties. Defaults to last irrep for which states are requested. Type: integer; Default: 1. Previous topic; PROP_ROOT; Next topic; R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__prop_sym.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__reference-1.html:598,Deployability,update,updated,598,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. Previous topic; R_CONVERGENCE; Next topic; RESTART_EOM_CC3; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__reference-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__reference-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__reference.html:598,Deployability,update,updated,598,"﻿. REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. Previous topic; R_CONVERGENCE; Next topic; RESTART_EOM_CC3; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__reference.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__restart_eom_cc3-1.html:570,Deployability,update,updated,570,"﻿. RESTART_EOM_CC3 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». RESTART_EOM_CC3¶. Do restart from on-disk?. Type: boolean; Default: false. Previous topic; REFERENCE; Next topic; RHF_TRIPLETS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__restart_eom_cc3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__restart_eom_cc3-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__restart_eom_cc3.html:570,Deployability,update,updated,570,"﻿. RESTART_EOM_CC3 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». RESTART_EOM_CC3¶. Do restart from on-disk?. Type: boolean; Default: false. Previous topic; REFERENCE; Next topic; RHF_TRIPLETS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__restart_eom_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__restart_eom_cc3.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__rhf_triplets-1.html:592,Deployability,update,updated,592,"﻿. RHF_TRIPLETS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». RHF_TRIPLETS¶. Do form a triplet state from RHF reference?. Type: boolean; Default: false. Previous topic; RESTART_EOM_CC3; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__rhf_triplets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__rhf_triplets-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__rhf_triplets.html:592,Deployability,update,updated,592,"﻿. RHF_TRIPLETS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». RHF_TRIPLETS¶. Do form a triplet state from RHF reference?. Type: boolean; Default: false. Previous topic; RESTART_EOM_CC3; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__rhf_triplets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__rhf_triplets.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__roots_per_irrep-1.html:735,Deployability,update,updated,735,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. Previous topic; RHF_TRIPLETS; Next topic; SCHMIDT_ADD_RESIDUAL_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__roots_per_irrep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__roots_per_irrep-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__roots_per_irrep.html:735,Deployability,update,updated,735,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. Previous topic; RHF_TRIPLETS; Next topic; SCHMIDT_ADD_RESIDUAL_TOLERANCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__roots_per_irrep.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__r_convergence-1.html:631,Deployability,update,updated,631,"﻿. R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. Previous topic; PROP_SYM; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__r_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__r_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__r_convergence.html:631,Deployability,update,updated,631,"﻿. R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. Previous topic; PROP_SYM; Next topic; REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__r_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__schmidt_add_residual_tolerance-1.html:714,Deployability,update,updated,714,"﻿. SCHMIDT_ADD_RESIDUAL_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. Previous topic; ROOTS_PER_IRREP; Next topic; SEMICANONICAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__schmidt_add_residual_tolerance-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__schmidt_add_residual_tolerance-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__schmidt_add_residual_tolerance.html:714,Deployability,update,updated,714,"﻿. SCHMIDT_ADD_RESIDUAL_TOLERANCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. Previous topic; ROOTS_PER_IRREP; Next topic; SEMICANONICAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__schmidt_add_residual_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__schmidt_add_residual_tolerance.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__semicanonical-1.html:600,Deployability,update,updated,600,"﻿. SEMICANONICAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Previous topic; SCHMIDT_ADD_RESIDUAL_TOLERANCE; Next topic; SINGLES_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__semicanonical-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__semicanonical-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__semicanonical.html:600,Deployability,update,updated,600,"﻿. SEMICANONICAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Previous topic; SCHMIDT_ADD_RESIDUAL_TOLERANCE; Next topic; SINGLES_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__semicanonical.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__singles_print-1.html:668,Deployability,update,updated,668,"﻿. SINGLES_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; SS_E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__singles_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__singles_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__singles_print.html:668,Deployability,update,updated,668,"﻿. SINGLES_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. Previous topic; SEMICANONICAL; Next topic; SS_E_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__singles_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__singles_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence-1.html:665,Deployability,update,updated,665,"﻿. SS_E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. Previous topic; SINGLES_PRINT; Next topic; SS_R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence-1.html:233,Energy Efficiency,energy,energy,233,"﻿. SS_E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. Previous topic; SINGLES_PRINT; Next topic; SS_R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence.html:665,Deployability,update,updated,665,"﻿. SS_E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. Previous topic; SINGLES_PRINT; Next topic; SS_R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence.html:233,Energy Efficiency,energy,energy,233,"﻿. SS_E_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. Previous topic; SINGLES_PRINT; Next topic; SS_R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_e_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_r_convergence-1.html:665,Deployability,update,updated,665,"﻿. SS_R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. Previous topic; SS_E_CONVERGENCE; Next topic; SS_SKIP_DIAG; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_r_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_r_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_r_convergence.html:665,Deployability,update,updated,665,"﻿. SS_R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. Previous topic; SS_E_CONVERGENCE; Next topic; SS_SKIP_DIAG; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_r_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_skip_diag-1.html:592,Deployability,update,updated,592,"﻿. SS_SKIP_DIAG — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. Previous topic; SS_R_CONVERGENCE; Next topic; SS_VECS_PER_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_skip_diag-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_skip_diag-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_skip_diag.html:592,Deployability,update,updated,592,"﻿. SS_SKIP_DIAG — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. Previous topic; SS_R_CONVERGENCE; Next topic; SS_VECS_PER_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_skip_diag.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_skip_diag.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_vecs_per_root-1.html:573,Deployability,update,updated,573,"﻿. SS_VECS_PER_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. Previous topic; SS_SKIP_DIAG; Next topic; T3_WS_INCORE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_vecs_per_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_vecs_per_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_vecs_per_root.html:573,Deployability,update,updated,573,"﻿. SS_VECS_PER_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. Previous topic; SS_SKIP_DIAG; Next topic; T3_WS_INCORE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__ss_vecs_per_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__ss_vecs_per_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__t3_ws_incore-1.html:604,Deployability,update,updated,604,"﻿. T3_WS_INCORE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. Previous topic; SS_VECS_PER_ROOT; Next topic; VECS_CC3; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__t3_ws_incore-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__t3_ws_incore-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__t3_ws_incore.html:604,Deployability,update,updated,604,"﻿. T3_WS_INCORE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. Previous topic; SS_VECS_PER_ROOT; Next topic; VECS_CC3; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__t3_ws_incore.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__t3_ws_incore.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_cc3-1.html:567,Deployability,update,updated,567,"﻿. VECS_CC3 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. Previous topic; T3_WS_INCORE; Next topic; VECS_PER_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__vecs_cc3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_cc3-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_cc3.html:567,Deployability,update,updated,567,"﻿. VECS_CC3 — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. Previous topic; T3_WS_INCORE; Next topic; VECS_PER_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__vecs_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_cc3.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_per_root-1.html:552,Deployability,update,updated,552,"﻿. VECS_PER_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Previous topic; VECS_CC3; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__vecs_per_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_per_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_per_root.html:552,Deployability,update,updated,552,"﻿. VECS_PER_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Previous topic; VECS_CC3; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__vecs_per_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__vecs_per_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__wfn-1.html:584,Deployability,update,updated,584,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. Previous topic; VECS_PER_ROOT; Next topic; CCHBAR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__wfn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__wfn-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__wfn.html:584,Deployability,update,updated,584,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. Previous topic; VECS_PER_ROOT; Next topic; CCHBAR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCEOM ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cceom__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cceom__wfn.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html:991,Deployability,update,updated,991,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html:336,Performance,cache,cache,336,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html:398,Performance,cache,cache,398,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html:639,Performance,cache,cache,639,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html:991,Deployability,update,updated,991,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html:336,Performance,cache,cache,336,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html:398,Performance,cache,cache,398,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html:639,Performance,cache,cache,639,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; CCHBAR; Next topic; EOM_REFERENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__eom_reference-1.html:584,Deployability,update,updated,584,"﻿. EOM_REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Default: RHF. Previous topic; CACHELEVEL; Next topic; T_AMPS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__eom_reference-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__eom_reference-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__eom_reference.html:584,Deployability,update,updated,584,"﻿. EOM_REFERENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Default: RHF. Previous topic; CACHELEVEL; Next topic; T_AMPS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__eom_reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__eom_reference.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__t_amps-1.html:586,Deployability,update,updated,586,"﻿. T_AMPS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». T_AMPS¶. Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. Previous topic; EOM_REFERENCE; Next topic; WABEI_LOWDISK; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__t_amps-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__t_amps-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__t_amps.html:586,Deployability,update,updated,586,"﻿. T_AMPS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». T_AMPS¶. Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. Previous topic; EOM_REFERENCE; Next topic; WABEI_LOWDISK; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__t_amps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__t_amps.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wabei_lowdisk-1.html:592,Deployability,update,updated,592,"﻿. WABEI_LOWDISK — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». WABEI_LOWDISK¶. Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. Previous topic; T_AMPS; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__wabei_lowdisk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wabei_lowdisk-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wabei_lowdisk.html:592,Deployability,update,updated,592,"﻿. WABEI_LOWDISK — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». WABEI_LOWDISK¶. Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. Previous topic; T_AMPS; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__wabei_lowdisk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wabei_lowdisk.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wfn-1.html:538,Deployability,update,updated,538,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». WFN¶. Wavefunction type. Type: string; Default: SCF. Previous topic; WABEI_LOWDISK; Next topic; CCLAMBDA; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__wfn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wfn-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wfn.html:538,Deployability,update,updated,538,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». WFN¶. Wavefunction type. Type: string; Default: SCF. Previous topic; WABEI_LOWDISK; Next topic; CCLAMBDA; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCHBAR ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cchbar__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cchbar__wfn.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__abcd-1.html:557,Deployability,update,updated,557,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. Previous topic; CCLAMBDA; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__abcd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__abcd-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__abcd.html:557,Deployability,update,updated,557,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. Previous topic; CCLAMBDA; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__abcd.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__ao_basis-1.html:600,Deployability,update,updated,600,"﻿. AO_BASIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». AO_BASIS¶. The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. Previous topic; ABCD; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__ao_basis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__ao_basis-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__ao_basis.html:600,Deployability,update,updated,600,"﻿. AO_BASIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». AO_BASIS¶. The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. Previous topic; ABCD; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__ao_basis.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html:999,Deployability,update,updated,999,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html:338,Performance,cache,cache,338,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html:400,Performance,cache,cache,400,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html:641,Performance,cache,cache,641,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html:999,Deployability,update,updated,999,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html:338,Performance,cache,cache,338,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html:400,Performance,cache,cache,400,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html:641,Performance,cache,cache,641,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. Previous topic; AO_BASIS; Next topic; CAS_FILES_WRITE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cas_files_write-1.html:633,Deployability,update,updated,633,"﻿. CAS_FILES_WRITE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CAS_FILES_WRITE¶. Do write the OEI, TEI, OPDM, TPDM, and Lagrangian files in canonical form, Pitzer order?. Type: boolean; Default: false. Previous topic; CACHELEVEL; Next topic; DIIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cas_files_write-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cas_files_write-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cas_files_write.html:633,Deployability,update,updated,633,"﻿. CAS_FILES_WRITE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». CAS_FILES_WRITE¶. Do write the OEI, TEI, OPDM, TPDM, and Lagrangian files in canonical form, Pitzer order?. Type: boolean; Default: false. Previous topic; CACHELEVEL; Next topic; DIIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__cas_files_write.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__cas_files_write.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__diis-1.html:586,Deployability,update,updated,586,"﻿. DIIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. Previous topic; CAS_FILES_WRITE; Next topic; FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__diis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__diis-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__diis.html:586,Deployability,update,updated,586,"﻿. DIIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. Previous topic; CAS_FILES_WRITE; Next topic; FOLLOW_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__diis.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__follow_root-1.html:546,Deployability,update,updated,546,"﻿. FOLLOW_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». FOLLOW_ROOT¶. Root to get OPDM. Type: integer; Default: 1. Previous topic; DIIS; Next topic; JOBTYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__follow_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__follow_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__follow_root.html:546,Deployability,update,updated,546,"﻿. FOLLOW_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». FOLLOW_ROOT¶. Root to get OPDM. Type: integer; Default: 1. Previous topic; DIIS; Next topic; JOBTYPE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__follow_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__follow_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype-1.html:562,Deployability,update,updated,562,"﻿. JOBTYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. Previous topic; FOLLOW_ROOT; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__jobtype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype-1.html:199,Performance,perform,performed,199,"﻿. JOBTYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. Previous topic; FOLLOW_ROOT; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__jobtype-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype.html:562,Deployability,update,updated,562,"﻿. JOBTYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. Previous topic; FOLLOW_ROOT; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__jobtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype.html:199,Performance,perform,performed,199,"﻿. JOBTYPE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. Previous topic; FOLLOW_ROOT; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__jobtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__jobtype.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local-1.html:591,Deployability,update,updated,591,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. Previous topic; JOBTYPE; Next topic; LOCAL_CPHF_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local.html:591,Deployability,update,updated,591,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. Previous topic; JOBTYPE; Next topic; LOCAL_CPHF_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cphf_cutoff-1.html:603,Deployability,update,updated,603,"﻿. LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. Previous topic; LOCAL; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_cphf_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cphf_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cphf_cutoff.html:603,Deployability,update,updated,603,"﻿. LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. Previous topic; LOCAL; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cphf_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cutoff-1.html:832,Deployability,update,updated,832,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. Previous topic; LOCAL_CPHF_CUTOFF; Next topic; LOCAL_FILTER_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cutoff.html:832,Deployability,update,updated,832,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. Previous topic; LOCAL_CPHF_CUTOFF; Next topic; LOCAL_FILTER_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_filter_singles-1.html:626,Deployability,update,updated,626,"﻿. LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_FILTER_SINGLES¶. Do apply local filtering to single de-excitation ( amplitudes?. Type: boolean; Default: true. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_filter_singles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_filter_singles-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_filter_singles.html:626,Deployability,update,updated,626,"﻿. LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_FILTER_SINGLES¶. Do apply local filtering to single de-excitation ( amplitudes?. Type: boolean; Default: true. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_filter_singles.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_method-1.html:693,Deployability,update,updated,693,"﻿. LOCAL_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique avaliable option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. Previous topic; LOCAL_FILTER_SINGLES; Next topic; LOCAL_PAIRDEF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_method-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_method-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_method.html:693,Deployability,update,updated,693,"﻿. LOCAL_METHOD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique avaliable option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. Previous topic; LOCAL_FILTER_SINGLES; Next topic; LOCAL_PAIRDEF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_method.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_pairdef-1.html:586,Deployability,update,updated,586,"﻿. LOCAL_PAIRDEF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. Previous topic; LOCAL_METHOD; Next topic; LOCAL_WEAKP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_pairdef-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_pairdef-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_pairdef.html:586,Deployability,update,updated,586,"﻿. LOCAL_PAIRDEF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. Previous topic; LOCAL_METHOD; Next topic; LOCAL_WEAKP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_pairdef.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_weakp-1.html:697,Deployability,update,updated,697,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. Previous topic; LOCAL_PAIRDEF; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_weakp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_weakp-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_weakp.html:697,Deployability,update,updated,697,"﻿. LOCAL_WEAKP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. Previous topic; LOCAL_PAIRDEF; Next topic; MAXITER; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__local_weakp.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__maxiter-1.html:565,Deployability,update,updated,565,"﻿. MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. Previous topic; LOCAL_WEAKP; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__maxiter-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__maxiter-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__maxiter.html:565,Deployability,update,updated,565,"﻿. MAXITER — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. Previous topic; LOCAL_WEAKP; Next topic; NUM_AMPS_PRINT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__maxiter.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__num_amps_print-1.html:633,Deployability,update,updated,633,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. Previous topic; MAXITER; Next topic; PROP_ALL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__num_amps_print-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__num_amps_print-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__num_amps_print.html:633,Deployability,update,updated,633,"﻿. NUM_AMPS_PRINT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. Previous topic; MAXITER; Next topic; PROP_ALL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__num_amps_print.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_all-1.html:590,Deployability,update,updated,590,"﻿. PROP_ALL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. Previous topic; NUM_AMPS_PRINT; Next topic; PROP_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__prop_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_all-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_all.html:590,Deployability,update,updated,590,"﻿. PROP_ALL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. Previous topic; NUM_AMPS_PRINT; Next topic; PROP_ROOT; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__prop_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_all.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_root-1.html:586,Deployability,update,updated,586,"﻿. PROP_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. Previous topic; PROP_ALL; Next topic; PROP_SYM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__prop_root-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_root-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_root.html:586,Deployability,update,updated,586,"﻿. PROP_ROOT — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. Previous topic; PROP_ALL; Next topic; PROP_SYM; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_root.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_sym-1.html:557,Deployability,update,updated,557,"﻿. PROP_SYM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. Previous topic; PROP_ROOT; Next topic; R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__prop_sym-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_sym-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_sym.html:557,Deployability,update,updated,557,"﻿. PROP_SYM — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. Previous topic; PROP_ROOT; Next topic; R_CONVERGENCE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__prop_sym.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__restart-1.html:609,Deployability,update,updated,609,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. Previous topic; R_CONVERGENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__restart-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__restart-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__restart.html:609,Deployability,update,updated,609,"﻿. RESTART — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. Previous topic; R_CONVERGENCE; Next topic; ROOTS_PER_IRREP; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__restart.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__roots_per_irrep-1.html:622,Deployability,update,updated,622,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. Previous topic; RESTART; Next topic; SEKINO; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__roots_per_irrep-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__roots_per_irrep-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__roots_per_irrep.html:622,Deployability,update,updated,622,"﻿. ROOTS_PER_IRREP — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. Previous topic; RESTART; Next topic; SEKINO; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__roots_per_irrep.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__r_convergence-1.html:625,Deployability,update,updated,625,"﻿. R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. Previous topic; PROP_SYM; Next topic; RESTART; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__r_convergence-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__r_convergence-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__r_convergence.html:625,Deployability,update,updated,625,"﻿. R_CONVERGENCE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. Previous topic; PROP_SYM; Next topic; RESTART; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__r_convergence.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__sekino-1.html:575,Deployability,update,updated,575,"﻿. SEKINO — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Previous topic; ROOTS_PER_IRREP; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__sekino-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__sekino-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__sekino.html:575,Deployability,update,updated,575,"﻿. SEKINO — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Previous topic; ROOTS_PER_IRREP; Next topic; WFN; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__sekino.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__sekino.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__wfn-1.html:532,Deployability,update,updated,532,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». WFN¶. Wavefunction type. Type: string; Default: NONE. Previous topic; SEKINO; Next topic; ZETA; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__wfn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__wfn-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__wfn.html:532,Deployability,update,updated,532,"﻿. WFN — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». WFN¶. Wavefunction type. Type: string; Default: NONE. Previous topic; SEKINO; Next topic; ZETA; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__wfn.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__zeta-1.html:534,Deployability,update,updated,534,"﻿. ZETA — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». ZETA¶. Do use zeta?. Type: boolean; Default: false. Previous topic; WFN; Next topic; CCRESPONSE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__zeta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__zeta-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__zeta.html:534,Deployability,update,updated,534,"﻿. ZETA — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». ZETA¶. Do use zeta?. Type: boolean; Default: false. Previous topic; WFN; Next topic; CCRESPONSE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCLAMBDA ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/cclambda__zeta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/cclambda__zeta.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__abcd-1.html:562,Deployability,update,updated,562,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. Previous topic; CCRESPONSE; Next topic; ANALYZE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__abcd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__abcd-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__abcd.html:562,Deployability,update,updated,562,"﻿. ABCD — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. Previous topic; CCRESPONSE; Next topic; ANALYZE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__abcd.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__analyze-1.html:557,Deployability,update,updated,557,"﻿. ANALYZE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». ANALYZE¶. Do analyze X2 amplitudes. Type: boolean; Default: false. Previous topic; ABCD; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__analyze-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__analyze-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__analyze.html:557,Deployability,update,updated,557,"﻿. ANALYZE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». ANALYZE¶. Do analyze X2 amplitudes. Type: boolean; Default: false. Previous topic; ABCD; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__analyze.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__analyze.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__cachelevel-1.html:557,Deployability,update,updated,557,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». CACHELEVEL¶. Cacheing level for libdpd. Type: integer; Default: 2. Previous topic; ANALYZE; Next topic; DIIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__cachelevel-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__cachelevel-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__cachelevel.html:557,Deployability,update,updated,557,"﻿. CACHELEVEL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». CACHELEVEL¶. Cacheing level for libdpd. Type: integer; Default: 2. Previous topic; ANALYZE; Next topic; DIIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__cachelevel.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__diis-1.html:579,Deployability,update,updated,579,"﻿. DIIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. Previous topic; CACHELEVEL; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__diis-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__diis-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__diis.html:579,Deployability,update,updated,579,"﻿. DIIS — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. Previous topic; CACHELEVEL; Next topic; GAUGE; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__diis.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge-1.html:997,Deployability,update,updated,997,"﻿. GAUGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. Previous topic; DIIS; Next topic; LINEAR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__gauge-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge-1.html:463,Integrability,depend,dependent,463,"﻿. GAUGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. Previous topic; DIIS; Next topic; LINEAR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__gauge-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge.html:997,Deployability,update,updated,997,"﻿. GAUGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. Previous topic; DIIS; Next topic; LINEAR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge.html:463,Integrability,depend,dependent,463,"﻿. GAUGE — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. Previous topic; DIIS; Next topic; LINEAR; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__gauge.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__linear-1.html:567,Deployability,update,updated,567,"﻿. LINEAR — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LINEAR¶. Do Bartlett size-extensive linear model?. Type: boolean; Default: false. Previous topic; GAUGE; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__linear-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__linear-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__linear.html:567,Deployability,update,updated,567,"﻿. LINEAR — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LINEAR¶. Do Bartlett size-extensive linear model?. Type: boolean; Default: false. Previous topic; GAUGE; Next topic; LOCAL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__linear.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__linear.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local-1.html:568,Deployability,update,updated,568,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL¶. Do simulate local correlation?. Type: boolean; Default: false. Previous topic; LINEAR; Next topic; LOCAL_CPHF_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local.html:568,Deployability,update,updated,568,"﻿. LOCAL — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL¶. Do simulate local correlation?. Type: boolean; Default: false. Previous topic; LINEAR; Next topic; LOCAL_CPHF_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cphf_cutoff-1.html:607,Deployability,update,updated,607,"﻿. LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. Previous topic; LOCAL; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local_cphf_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cphf_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cphf_cutoff.html:607,Deployability,update,updated,607,"﻿. LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. Previous topic; LOCAL; Next topic; LOCAL_CUTOFF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cphf_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cutoff-1.html:836,Deployability,update,updated,836,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. Previous topic; LOCAL_CPHF_CUTOFF; Next topic; LOCAL_FILTER_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local_cutoff-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cutoff-1.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cutoff.html:836,Deployability,update,updated,836,"﻿. LOCAL_CUTOFF — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. Previous topic; LOCAL_CPHF_CUTOFF; Next topic; LOCAL_FILTER_SINGLES; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_cutoff.html
https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_filter_singles-1.html:626,Deployability,update,updated,626,"﻿. LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». LOCAL_FILTER_SINGLES¶. Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. Previous topic; LOCAL_CUTOFF; Next topic; LOCAL_METHOD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module »; CCRESPONSE ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4manual/4.0b5/autodir_options_c/ccresponse__local_filter_singles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/ccresponse__local_filter_singles-1.html
